{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2025-03-02T00:16:41.783019+00:00",
  "repo": "oauth-wg/oauth-selective-disclosure-jwt",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    },
    {
      "name": "ready-to-close",
      "description": "",
      "color": "1BF2AF"
    },
    {
      "name": "has-PR",
      "description": "",
      "color": "33131E"
    },
    {
      "name": "discuss-first",
      "description": "",
      "color": "D527F2"
    },
    {
      "name": "editorial",
      "description": "",
      "color": "255D61"
    },
    {
      "name": "ready-for-PR",
      "description": "",
      "color": "AA169E"
    },
    {
      "name": "pending-close",
      "description": "",
      "color": "6C5669"
    },
    {
      "name": "on-hold",
      "description": "",
      "color": "e99695"
    }
  ],
  "issues": [
    {
      "number": 2,
      "id": "I_kwDOHTmVzM5J_zvb",
      "title": "Add example: JWT-VC as in W3C VC data model",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/2",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "",
      "createdAt": "2022-05-19T09:03:01Z",
      "updatedAt": "2022-06-14T16:14:23Z",
      "closedAt": "2022-06-14T16:14:23Z",
      "comments": [
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Can you please also add an example of a W3C compatible JWT Verifiable Presentation?",
          "createdAt": "2022-06-08T13:29:26Z",
          "updatedAt": "2022-06-08T13:29:42Z"
        }
      ]
    },
    {
      "number": 3,
      "id": "I_kwDOHTmVzM5KAiF1",
      "title": "Salting claim names and claims [discussion point]",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/3",
      "state": "CLOSED",
      "author": "alenhorvat",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Some use cases may require hiding both claim names and claims.\r\n\r\nSome schemas are country/jurisdiction-specific and revealing all claims might reveal some additional information.\r\n\r\nOpen questions/remarks\r\n- since the issuer is known, information about the schema can be guessed\r\n- hiding the claim names does not hide the structure\r\n- do use cases really require hiding the claim name?",
      "createdAt": "2022-05-19T11:49:43Z",
      "updatedAt": "2022-05-31T11:10:37Z",
      "closedAt": "2022-05-31T10:32:36Z",
      "comments": [
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There have been some discussions about it on the signal group. \r\n\r\nJust recording them for the transparency purposes\r\n\r\n- hide claim values only\r\n- hide claim names and claim values\r\n\r\nRationale:\r\nSome schemas are country/jurisdiction specific and revealing all claims might reveal some additional information. (Something the use-cases still need to clarify is the fact that the issuer is known. Still waiting for some additional feedback.)\r\n\r\n--\r\nThat's what I thought. Another question would be: For structured claim objects (cf. eKYC & IDA Spec), do we need to hide the structure? The structure itself might be revealing some information.\r\n--\r\nI can imagine the cases where an issuer would be issuing only one type of credentials with fixed structure and claimset. That means, if you know the issuer, you can pretty much find out the structure and claim names in it. So, hiding the structure and claim names would not add much.\r\n--\r\nI would assume that is the default.\r\n--\r\nI agree\r\n--\r\nIn ekyc, the structure alone can reveal the type of evidence used, which might leak info about e.g. nationality. \r\n\r\nBut these cases might be rare and I'd also like to keep it simple for now.\r\n--\r\nRight. At the same time, you typically want to know the nationality in the case of EKYC in financial institutions :-) \r\n\r\nSpeaking of that, I was assuming that in a lot of cases, the receiver may need to know the type of credential especially when the issuer was issuing multiple types of credentials at different assurance levels. Is this assumption bogus?\r\n--\r\nThat's a valid assumption. Verifier needs to know the level of assurance of the VC and in most cases (I guess) it will need to know under what policies the holder keys are created/stored/... (or if it can trust the wallet where the Verifiable Presentation was created and is shared from)\r\n--\r\n",
          "createdAt": "2022-05-27T01:46:29Z",
          "updatedAt": "2022-05-27T01:46:29Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "@sakimura are you arguing to have both options - to hide and not to hide claim names?",
          "createdAt": "2022-05-31T10:10:23Z",
          "updatedAt": "2022-05-31T10:10:23Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "We are discussing whether there's really a case where we need to hide the names.\r\nIn most cases, you'll need to reveal info about the issuer and the schema.",
          "createdAt": "2022-05-31T10:15:27Z",
          "updatedAt": "2022-05-31T10:15:27Z"
        },
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yup. And once you reveal info about the issuer and the schema, there is no\npoint in hiding the claim names in most cases. So, I am arguing that we do\nnot need to hide them.\n\nOn Tue, May 31, 2022 at 7:15 PM Alen Horvat ***@***.***>\nwrote:\n\n> We are discussing whether there's really a case where we need to hide the\n> names.\n> In most cases, you'll need to reveal info about the issuer and the schema.\n>\n> \u2014\n> Reply to this email directly, view it on GitHub\n> <https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/3#issuecomment-1141944310>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AABFEN4EQWSPKPNHUYHBHU3VMXRETANCNFSM5WL6KVWQ>\n> .\n> You are receiving this because you were mentioned.Message ID:\n> ***@***.***>\n>\n\n\n-- \nNat Sakimura (=nat)\nChairman, OpenID Foundation\nhttp://nat.sakimura.org/\n@_nat_en\n",
          "createdAt": "2022-05-31T10:25:56Z",
          "updatedAt": "2022-05-31T10:25:56Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "I agree. \r\nWe can close this issue.\r\n\r\nThank you!",
          "createdAt": "2022-05-31T10:32:36Z",
          "updatedAt": "2022-05-31T10:32:36Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I think we should add the rationale why we are not hiding claim names. leaving a note for self to do a PR on this.",
          "createdAt": "2022-05-31T11:10:36Z",
          "updatedAt": "2022-05-31T11:10:36Z"
        }
      ]
    },
    {
      "number": 4,
      "id": "I_kwDOHTmVzM5KfTUT",
      "title": "Rename sd_claims to _sd_claims",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/4",
      "state": "CLOSED",
      "author": "selfissued",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "In OpenID Connect, we use the convention that meta claim names (claims about sets of claims) are prefixed by an underscore.  For example, see the `_claim_names` and `_claim_sources` claims defined at https://openid.net/specs/openid-connect-core-1_0.html#AggregatedDistributedClaims.  I think we should do the same.\r\n\r\nPlease rename `sd_claims` to `_sd_claims`.",
      "createdAt": "2022-05-26T15:28:08Z",
      "updatedAt": "2022-05-30T15:49:00Z",
      "closedAt": "2022-05-30T15:48:59Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Thanks, I renamed `sd_claims` to just `_sd`.",
          "createdAt": "2022-05-30T15:48:59Z",
          "updatedAt": "2022-05-30T15:48:59Z"
        }
      ]
    },
    {
      "number": 5,
      "id": "I_kwDOHTmVzM5KfVJ_",
      "title": "Cite JWT as RFC 7519 and JWS as RFC 7515",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/5",
      "state": "CLOSED",
      "author": "selfissued",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The spec currently does not contain a reference for RFC 7519 (JWT), which it clearly needs to.  It also uses RFC 7515 (JWS) as the citation for JWT in several place, which is incorrect.\r\n\r\nPlease add a RFC 7519 (JWT) reference and cite it the first time that the term JSON Web Token (JWT) is used in the body of the spec (but not in the abstract).  And look at the current uses of RFC 7515 and correct those that should be RFC 7519.",
      "createdAt": "2022-05-26T15:34:10Z",
      "updatedAt": "2022-05-30T14:52:03Z",
      "closedAt": "2022-05-30T14:52:03Z",
      "comments": []
    },
    {
      "number": 8,
      "id": "I_kwDOHTmVzM5KhO-9",
      "title": "There are two \"terminologies\" in 1.1 and 2",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/8",
      "state": "CLOSED",
      "author": "sakimura",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Currently, it has\r\n\r\n1.1. Conventions and Terminology\r\n2. Terminology\r\n\r\nHaving two \"Terminology\" as consecutive headings is not good. \r\nI propose to change 2 as follows: \r\n\r\n2. Terms and Definitions\r\n",
      "createdAt": "2022-05-27T00:55:58Z",
      "updatedAt": "2022-06-01T12:33:16Z",
      "closedAt": "2022-06-01T12:33:16Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "closing with PR #16 ",
          "createdAt": "2022-06-01T12:33:16Z",
          "updatedAt": "2022-06-01T12:33:16Z"
        }
      ]
    },
    {
      "number": 9,
      "id": "I_kwDOHTmVzM5KhQ-o",
      "title": "Term \"holder\" has a mismatch with legal notions in EU Data Act etc. ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/9",
      "state": "CLOSED",
      "author": "sakimura",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "\"holder\" is not a good term to use in this context as it overlaps with a legal term that maps to claims sources. (cf. EU Data Act, Australian Consumer Data Regulation, etc. )\r\n\r\nPerhaps we can just use \"wallet\" for this purpose. ",
      "createdAt": "2022-05-27T01:12:41Z",
      "updatedAt": "2023-05-30T22:32:30Z",
      "closedAt": "2023-05-30T22:32:30Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I'm open to using something other than holder, but I don't think we should use wallet. That term implies a lot about the use case, but this mechanism might have many other use cases.",
          "createdAt": "2022-05-30T15:00:40Z",
          "updatedAt": "2022-05-30T15:00:40Z"
        },
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Some candidates: \r\n* Container\r\n* keeper\r\n",
          "createdAt": "2022-05-31T08:00:51Z",
          "updatedAt": "2022-05-31T08:00:51Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "- \"owner\" (probably easy to confuse with legal terms, but would be similar to resource owner)\r\n- \"controller\"",
          "createdAt": "2022-05-31T14:05:51Z",
          "updatedAt": "2022-05-31T14:05:51Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "my personal preference would be \"resource owner binding\"",
          "createdAt": "2022-06-01T11:22:32Z",
          "updatedAt": "2022-06-01T11:22:32Z"
        },
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "Which term is used in the other JWT-related specs?",
          "createdAt": "2022-06-01T18:15:44Z",
          "updatedAt": "2022-06-01T18:15:44Z"
        },
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "So, from the definition, it looks like it is software. \r\nThus, it cannot be a controller etc. nor a data subject. \r\nIf it is to be a data subject, then we need to modify the definition text. ",
          "createdAt": "2022-06-02T08:55:01Z",
          "updatedAt": "2022-06-02T08:55:01Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "Like it or not, the term \"holder\" is pervasively used for this role - in part, because of its use at https://www.w3.org/TR/vc-data-model/#dfn-holders.  I think we would make our specification less clear by changing terms.\r\n\r\nI believe this issue should be closed with no action on that basis.",
          "createdAt": "2022-06-07T18:50:49Z",
          "updatedAt": "2022-06-07T18:50:49Z"
        },
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "W3C is a very small community compared to the addressable market we are envisioning. It is not about liking or not. If legislations use the term for something else in the model we are talking about, it will cause more confusion down the road than we do now for the current technical community. Imagine using \"Data Controller\" to refer to individuals as we believe individuals should have control over the data. That would cause awful confusion. We are talking about something similar to that. ",
          "createdAt": "2022-06-13T02:43:09Z",
          "updatedAt": "2022-06-13T02:43:09Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "At least for the short term, the tactical audiences for this spec are the IETF decision makers we'll be trying to convince to adopt this spec and people from the W3C Verifiable Credentials community who we'll be trying to work with to create a SD-JWT profile of VCs.  In both those cases, us inventing non-standard terminology for one of the core roles would be an impediment to clear conversations.  We should not do that now.\r\n\r\nOnce it's an IETF working group spec, I think that's the time and venue to have the terminology discussion.  Let's not attempt to change terminology before then.",
          "createdAt": "2022-06-13T12:02:51Z",
          "updatedAt": "2022-06-13T12:02:51Z"
        },
        {
          "author": "Macke",
          "authorAssociation": "NONE",
          "body": "FWIW when I reviewed this draft I was concered (before I spotted this Issue) about the use of holder, especially in the context of issuer and verifier as it could be easily mis-understood as holder in a VC sense only.  I think it would be better to use a different name and then reference some possible implementation patterns such as the holder role in VC.  Perhaps taking inspiration from the definition in the current holder section something like 'receiver' or 'sd-receiver' might be suitable.",
          "createdAt": "2022-06-18T10:21:16Z",
          "updatedAt": "2022-06-18T10:21:16Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Maybe something like `holder-of-key`? Inspired by https://datatracker.ietf.org/doc/html/rfc7800",
          "createdAt": "2022-06-27T04:42:55Z",
          "updatedAt": "2022-06-27T04:42:55Z"
        },
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Holder-of-key has a very specific meaning and would not suit our case\nunless you want to make holder binding mandatory.\n\nAnd here is the link to Australian Consumer data right\nhttps://www.accc.gov.au/focus-areas/consumer-data-right-cdr-0/compliance-guidance-for-data-holders.\nHere, \"data holder\" is the issuer in our case and often abbreviated as\n\"holder\".\n\nThe same applies to EU Data Act.\n\nOn Mon, Jun 27, 2022 at 1:43 PM Kristina ***@***.***> wrote:\n\n> Maybe something like holder-of-key? Inspired by\n> https://datatracker.ietf.org/doc/html/rfc7800\n>\n> \u2014\n> Reply to this email directly, view it on GitHub\n> <https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/9#issuecomment-1166838987>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AABFEN6LM52WOBSGOC7GPRLVREWNVANCNFSM5XCZPXTA>\n> .\n> You are receiving this because you authored the thread.Message ID:\n> ***@***.***>\n>\n\n\n-- \nNat Sakimura (=nat)\nChairman, OpenID Foundation\nhttp://nat.sakimura.org/\n@_nat_en\n",
          "createdAt": "2022-06-27T16:19:41Z",
          "updatedAt": "2022-06-27T16:19:41Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "but in ISO mDL world, we are moving forward with the term \"holder\". no one from EU/Australia seemed to be concerned. Apparently, document Holder is also typical term from the document business.",
          "createdAt": "2022-06-29T01:30:14Z",
          "updatedAt": "2022-06-29T01:30:21Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "[The European Digital Identity Wallet Architecture and Reference Framework](https://digital-strategy.ec.europa.eu/en/library/european-digital-identity-wallet-architecture-and-reference-framework) uses term holder. \r\n\r\nBut there are suggestions to use key binding instead of holder binding in issue #281 - suggest to continue the discussion there.",
          "createdAt": "2023-05-30T22:32:30Z",
          "updatedAt": "2023-05-30T22:32:30Z"
        }
      ]
    },
    {
      "number": 10,
      "id": "I_kwDOHTmVzM5KhSrZ",
      "title": "Terms: \"release\"",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/10",
      "state": "CLOSED",
      "author": "sakimura",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Using a single word \"release\" as a defined term is not a good practice. We will lose the capability to use \"release\" in the dictionary sense. You may say that it would be fine as we can capitalize it but it should be noted that the notion of capitalization does not exist in many languages and it will cause issues when translating. \r\n\r\nAs the abbreviation indicates, perhaps it would be better to call it SD-JWT Release. ",
      "createdAt": "2022-05-27T01:28:44Z",
      "updatedAt": "2022-06-01T12:33:25Z",
      "closedAt": "2022-06-01T12:33:24Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Agreed. SD-JWT-R or SD-JWT-Release would be better.",
          "createdAt": "2022-05-30T08:18:59Z",
          "updatedAt": "2022-05-30T08:18:59Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I would be fine with that.",
          "createdAt": "2022-05-30T14:59:43Z",
          "updatedAt": "2022-05-30T14:59:43Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "closing with PR #16 ",
          "createdAt": "2022-06-01T12:33:24Z",
          "updatedAt": "2022-06-01T12:33:24Z"
        }
      ]
    },
    {
      "number": 11,
      "id": "I_kwDOHTmVzM5KhTb4",
      "title": "2. Terminology -- the way it is written does not look like Terms and definitions",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/11",
      "state": "CLOSED",
      "author": "sakimura",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "* The way it is written now does not look like terms and definitions. \r\n* It would also be a good practice to make it possible to the definition to replace the terms that appear in the main text. \r\n* With this respect, verbose explanations especially the mechanisms should be done in the \"Concepts\" section in the main text. In fact, much of the text in the current \"terminology\" mostly duplicates what is being explained in 3. Concept\r\n* Also, examples etc. should be added as a note to the definition and not as part of the definition text. \r\n\r\nProposes the following as amended text\r\n\r\n**2. Terms and definitions**\r\n\r\n**2.1 SD-JWT** \r\nsigned JWT [[RFC7515](https://oauthstuff.github.io/draft-selective-disclosure-jwt/draft-fett-selective-disclosure-jwt-00.html#RFC7515)], that supports selective disclosure as defined in this document\r\n\r\nNote to entry: Signed JWT is JWS. \r\n\r\n**2.2 release (SD-JWT-R)**\r\ndocument that contains a subset of the claim values of an SD-JWT in a verifiable way\r\n\r\nNote to entry: Holder binding is also possible. \r\n\r\n**2.3 issuer**\r\nentity that create SD-JWTs (2.1)\r\n\r\n**2.4 holder**\r\nentity that has control over SD-JWTs (2.1) \r\n\r\nNote to entry: If holder binding is desired, the holder also has the signing key for the verification key contained in the SD-JWT.\r\n\r\n**2.5 verifier** \r\nentity that checks and extracts the claims from SSD-JWT-R (2.2) \r\n",
      "createdAt": "2022-05-27T01:36:31Z",
      "updatedAt": "2022-06-01T12:33:33Z",
      "closedAt": "2022-06-01T12:33:33Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "closing with PR #16 ",
          "createdAt": "2022-06-01T12:33:33Z",
          "updatedAt": "2022-06-01T12:33:33Z"
        }
      ]
    },
    {
      "number": 12,
      "id": "I_kwDOHTmVzM5KpkfM",
      "title": "should we allow signing formats other than JWS, ie LD-Proofs, JAdES and group signatures?",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/12",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "ready-to-close"
      ],
      "body": "Do we want to allow signing formats other than JWS, ie LD-Proofs, JAdES and group signatures?\r\n\r\nI am not an expert on JAdES, but from my understanding, I think it is close enough to JWS, it should be included. \r\nI do not see the benefit of including LD-Proofs and group signatures, since the whole point of this work was to enable selective disclosure without using those signature formats...\r\n\r\nBased on the @alenhorvat 's comment to my PR: https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/1#discussion_r877144122",
      "createdAt": "2022-05-30T08:53:51Z",
      "updatedAt": "2022-06-14T17:01:15Z",
      "closedAt": "2022-06-14T17:01:14Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Also, we need to keep things simple. JAdES can make sense. ",
          "createdAt": "2022-05-30T14:58:40Z",
          "updatedAt": "2022-05-30T14:58:40Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "You're right. I missed one element:\r\n- JWS, JAdES sign JSON as is\r\n- LD-proofs, group signatures usually require additional transformation (and we're avoiding this).\r\nKeeping JWS is sufficient. (JAdES results either with compact serialised or JSON serialised JWS, so we're covered).\r\n\r\nLet's keep only JWS and we can close this issue.",
          "createdAt": "2022-05-30T15:13:43Z",
          "updatedAt": "2022-05-30T15:13:43Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree that we should support only JWS signatures as JWTs do, since our spec is explicitly a JWT profile.\r\n\r\nI think that we should close this issue with no action on that basis.",
          "createdAt": "2022-06-07T18:52:41Z",
          "updatedAt": "2022-06-07T18:52:41Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "To clarify, do we agree that since signing as JWS allows for both JWS compact serialization and JWS JSON serialization, this specification supports JaDES?",
          "createdAt": "2022-06-10T18:23:10Z",
          "updatedAt": "2022-06-10T18:23:10Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "In the name of keeping simple things simple, I would advocate supporting exactly one signing format - the JWS Compact Serialization - making the same choice as JWTs.  That will result in the greatest interoperability.\r\n\r\nIf separately, we want to create a derived spec or specs saying how to use SD-JWTs, but with other signature types, we could do that.  But that should occur in separate specification(s) - not in the SD-JWT spec itself.\r\n\r\nAlso, note that many JWS implementations only support the Compact Serialization, because that's all you need for JWTs.  The JSON Serialization is more complicated in several aspects and is much more rarely implemented.  We should not take a dependence upon it.",
          "createdAt": "2022-06-13T12:07:59Z",
          "updatedAt": "2022-06-13T12:07:59Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Agreed to support only JWS Compact Serialization in SD-JWT and define a separate profile for JWS JSON serialization if needed.\r\n\r\n@alenhorvat agrees.",
          "createdAt": "2022-06-14T17:01:14Z",
          "updatedAt": "2022-06-14T17:01:14Z"
        }
      ]
    },
    {
      "number": 13,
      "id": "I_kwDOHTmVzM5KplJb",
      "title": "information about the hash function",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/13",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "information about the hash function should probably be included inside SD-JWT.\r\n\r\nBased on @AlenHorvat 's comment to the PR https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/1#discussion_r877151757",
      "createdAt": "2022-05-30T08:56:18Z",
      "updatedAt": "2022-06-16T09:20:34Z",
      "closedAt": "2022-06-16T09:20:34Z",
      "comments": [
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, needed indeed. This and more details about hash formatting (how to transform inputs into byte arrays to be passed to the hash function).",
          "createdAt": "2022-06-01T18:10:07Z",
          "updatedAt": "2022-06-01T18:10:07Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "The alternative is to use the same hash function as was used for the signature.  This is done in OpenID Connect Core at https://openid.net/specs/openid-connect-core-1_0.html#ImplicitTokenValidation in the `at_hash` definition (as well as in the `c_hash` definition.  The language is:\r\n> Hash the octets of the ASCII representation of the `access_token` with the hash algorithm specified in [JWA](https://openid.net/specs/openid-connect-core-1_0.html#JWA) [JWA] for the `alg` Header Parameter of the ID Token's JOSE Header. For instance, if the `alg` is `RS256`, the hash algorithm used is SHA-256.",
          "createdAt": "2022-06-07T18:59:55Z",
          "updatedAt": "2022-06-07T18:59:55Z"
        },
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "You might want to use a different hash function to reduce the SD-JWT size (e.g., SHA-256 truncated to 128 bit), or decide on a stronger hash function with iteration to reduce the size of the salt (again, to minimize the size of the artefact). Bottom line, choosing the hash function independently might be useful.",
          "createdAt": "2022-06-07T21:35:29Z",
          "updatedAt": "2022-06-07T21:35:29Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "As discussed in the call, if we allow different hashes to be used, we may want to make a recommendation that for simplicity an implementor may want to use the same hash algorithm to minimise implementation errors.",
          "createdAt": "2022-06-13T15:14:12Z",
          "updatedAt": "2022-06-13T15:14:12Z"
        }
      ]
    },
    {
      "number": 14,
      "id": "I_kwDOHTmVzM5KpmFm",
      "title": "No need for the wallet-generated hashes",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/14",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "ready-to-close"
      ],
      "body": "In the security considerations section, add a recommendation to use uuidv4 or something that's standardised to generate salt\r\n\r\nBased on @AlenHorvat 's comment on the PR https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/1#discussion_r877161631",
      "createdAt": "2022-05-30T08:59:48Z",
      "updatedAt": "2022-06-16T09:22:00Z",
      "closedAt": "2022-06-16T09:22:00Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "What is the advantage of using a UUID? Using a UUID wastes space by making the representation much longer. \r\n\r\nPKCE for example did not choose to use a UUID.",
          "createdAt": "2022-05-30T14:57:38Z",
          "updatedAt": "2022-05-30T14:57:38Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "Idea is to suggest something standardised for the salt generation to avoid misusing random number generators (const. seeds, timestamp as a seed, ...). I don't have a particular preference on what approach is recommended.",
          "createdAt": "2022-05-30T15:08:38Z",
          "updatedAt": "2022-05-30T15:08:38Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Makes sense, but I don't think a UUID is a good fit here. ",
          "createdAt": "2022-05-30T15:11:35Z",
          "updatedAt": "2022-05-30T15:11:35Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "RFC7636 (PKCE) says this in the security considerations:\r\n\r\n> [7.1](https://datatracker.ietf.org/doc/html/rfc7636#section-7.1).  Entropy of the code_verifier\r\n>\r\n>   The security model relies on the fact that the code verifier is not\r\n>   learned or guessed by the attacker.  It is vitally important to\r\n>   adhere to this principle.  As such, the code verifier has to be\r\n>   created in such a manner that it is cryptographically random and has\r\n>   high entropy that it is not practical for the attacker to guess.\r\n",
          "createdAt": "2022-05-30T15:14:03Z",
          "updatedAt": "2022-05-30T15:14:03Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "> Makes sense, but I don't think a UUID is a good fit here.\r\n\r\nI agree.\r\nShould we make a recommendation or we just re-use the security consideration from PKCE without suggesting anything? \r\nFrom a standardisation point of view security consideration as above is sufficient (devs usually ask for a recommendation)\r\nIf this is the case, we can close the issue.",
          "createdAt": "2022-05-30T15:22:37Z",
          "updatedAt": "2022-05-30T15:22:37Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I think we should be fine with the security recommendation.",
          "createdAt": "2022-05-30T15:26:47Z",
          "updatedAt": "2022-05-30T15:26:47Z"
        },
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "We should stay away from uuid for the salt, IMO. Many UID library do not generate cryptographically random values, as it is needed here.",
          "createdAt": "2022-06-01T18:09:11Z",
          "updatedAt": "2022-06-01T18:09:11Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree that the current Security Considerations are sufficient.  I also agree that UUIDs have multiple problems.\r\n\r\nI recommend that we close this issue with no further actions on this basis.",
          "createdAt": "2022-06-07T19:04:06Z",
          "updatedAt": "2022-06-07T19:04:06Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "agree with the discussion. I did a PR #38 because I did not think the current security considerations reflected this conversation sufficiently well-enough.",
          "createdAt": "2022-06-12T18:49:22Z",
          "updatedAt": "2022-06-12T18:49:22Z"
        }
      ]
    },
    {
      "number": 17,
      "id": "I_kwDOHTmVzM5K29dx",
      "title": "Replace remaining occurence of Release with SD-JWT Release",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/17",
      "state": "CLOSED",
      "author": "sakimura",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "We have fixed the term and definitions but a few still appear in the main text. \r\nWe need to fix them as well, hopefully before the first individual draft is uploaded. \r\n\r\nSo, \r\n\r\ns/signatures called releases/signatures called SD-JWT Releases/\r\ns/SD-JWTs and releases/SD-JWTs and SD-JWT Releases/\r\ns/Verifying a Release/Verifying a SD-JWT Release/\r\n",
      "createdAt": "2022-06-01T12:51:31Z",
      "updatedAt": "2022-06-01T14:30:49Z",
      "closedAt": "2022-06-01T14:30:49Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Fixed with PR #18 ",
          "createdAt": "2022-06-01T14:30:49Z",
          "updatedAt": "2022-06-01T14:30:49Z"
        }
      ]
    },
    {
      "number": 20,
      "id": "I_kwDOHTmVzM5K6vqp",
      "title": "Example 1 JWS contains 4 parts; should be 3 at this point",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/20",
      "state": "CLOSED",
      "author": "christianpaquin",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "The [flat SD example 1](https://github.com/oauthstuff/draft-selective-disclosure-jwt/blob/master/main.md#example-1---flat-sd-jwt) contains 4 period-separated parts. I assume the first 3 are the expected JWS ones, and the fourth one is the SVC. This is however only introduced in the [following section](https://github.com/oauthstuff/draft-selective-disclosure-jwt/blob/master/main.md#sd-jwt-and-svc-combined-format), so I think the last part should be deleted from the example.",
      "createdAt": "2022-06-01T20:01:33Z",
      "updatedAt": "2022-06-16T09:22:26Z",
      "closedAt": "2022-06-16T09:22:26Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #46 ",
          "createdAt": "2022-06-16T09:22:26Z",
          "updatedAt": "2022-06-16T09:22:26Z"
        }
      ]
    },
    {
      "number": 21,
      "id": "I_kwDOHTmVzM5K7X7Q",
      "title": "Clarify encoding of SD-JWT-R",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/21",
      "state": "CLOSED",
      "author": "christianpaquin",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "In the [SD-JWT-R section](https://github.com/oauthstuff/draft-selective-disclosure-jwt/blob/master/main.md#sd-jwt-r-format), it is said: \"the result (SD-JWT-R) is encoded as described in RFC7519\"; more guidance should be provided (section number in RFC7519, serialization description, ...).",
      "createdAt": "2022-06-01T21:26:16Z",
      "updatedAt": "2022-06-27T02:55:53Z",
      "closedAt": "2022-06-27T02:55:53Z",
      "comments": []
    },
    {
      "number": 23,
      "id": "I_kwDOHTmVzM5LKJHo",
      "title": "usage of sub_jwk",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/23",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "A comment from @b---c that I completely agree with.\r\n> sub_jwk has a pretty narrow definition and corresponding registration from OIDC https://openid.net/specs/openid-connect-core-1_0.html#SelfIssuedResponse which seems a little different than how sd-jwt is maybe using it. If sub_jwk continues to be used, there might need to be some more explanation and maybe an update to the registry. Maybe.\r\n",
      "createdAt": "2022-06-05T03:27:21Z",
      "updatedAt": "2022-06-29T01:13:36Z",
      "closedAt": "2022-06-29T01:13:36Z",
      "comments": [
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "Also note this text in-00:\r\n> Note: need to define how holder public key is included, right now examples are using sub_jwk I think.\r\nThere is currently no normative text in the spec saying how `sub_jwk` is used.\r\n\r\nI do think that continuing to use the `sub_jwk` claim is fine.",
          "createdAt": "2022-06-07T19:13:01Z",
          "updatedAt": "2022-06-07T19:13:01Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "per chat in Signal, I think it should be a URI (jwk-thumbprint-uri for sub_jwk, but can also be a DID). but as discussed in the chat, depends whether we think this is a layering violation and decide to not define holder binding in the spec... (issue #24 )",
          "createdAt": "2022-06-13T01:21:35Z",
          "updatedAt": "2022-06-13T01:22:02Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I see `sub_jwk` as part of an example here, not normative for the spec. See also my comment on issue #24.",
          "createdAt": "2022-06-13T09:20:30Z",
          "updatedAt": "2022-06-13T09:20:30Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "We do need to normatively say what claim we're using for the contained key.  Using `sub_jwk` seems like the obvious choice.",
          "createdAt": "2022-06-13T12:19:35Z",
          "updatedAt": "2022-06-13T12:19:35Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "specifying `sub_jwk` normatively is somewhat contradictory to your comments on layering violation in Issue #24... I think we should say `sub_jwk` can be used but it is up to the implementors to decide what to use.",
          "createdAt": "2022-06-17T04:57:23Z",
          "updatedAt": "2022-06-17T04:57:23Z"
        }
      ]
    },
    {
      "number": 24,
      "id": "I_kwDOHTmVzM5LKJKc",
      "title": "More work on holder binding",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/24",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "A comment from @b---c\r\n\r\n> I'm a bit uneasy about how much binding there actually is in the holder binding. The whole SD-JWT + signed SD-JWT-R just becomes a bearer token. Oh, I now see https://www.ietf.org/archive/id/draft-fett-oauth-selective-disclosure-jwt-00.html#section-5-3.5.2.1.2.2.1 about the SD-JWT-R being bound to the current transaction. Seems more work is needed in this area. Like the empty sec 6.1 https://www.ietf.org/archive/id/draft-fett-oauth-selective-disclosure-jwt-00.html#name-holder-binding-2 :)",
      "createdAt": "2022-06-05T03:28:43Z",
      "updatedAt": "2022-06-27T02:57:24Z",
      "closedAt": "2022-06-27T02:57:24Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, the holder binding as of now only achieves binding to the public key - the holder is only proving control over the same private key both during issuance and presentation. \r\n\r\nTo prove that the actual user, about whom the user claims are, is in front of a device both during issuance and presentation, more is needed.\r\n- one option would be to use a public key that is able to sign only after biometric matching is performed. But there are some limitations because mobile OS native mechanisms allow to register multiple biometrics for the same device.\r\n- another option would be to include a portrait image as a claim in SD-JWT, holder app would compare it against a live image of the user, but will not release an SD-JWT claim in SD-JWT-R.\r\n\r\nre transaction-binding, in the case of JWT-VCs, VP is bound to the transaction because it includes nonce and audience from the presentation request. How best this can be included in the draft, since req-res would be out of scope of SD-JWT draft?",
          "createdAt": "2022-06-05T03:37:15Z",
          "updatedAt": "2022-06-05T03:37:15Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "my question is should the holder binding being made entirely out of scope of this draft? If not, suggest we make signing of SD-JWT-R mandatory. \r\n\r\nOn one hand, as @christianpaquin has pointed out, when there is holder binding, what is the use-case where an SD-JWT-R is not signed? On another hand, even if SD-JWT-R is not signed (ie no holder binding), as long as the verifier performs verification, selective disclosure would work.",
          "createdAt": "2022-06-13T00:46:31Z",
          "updatedAt": "2022-06-13T00:46:31Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I think we should speak about the concept of holder binding in this spec including pointing to the tools we provide to achieve this:\r\n\r\n- Places where keys can potentially be communicated (in the SD-JWT!)\r\n- The signature of the SD-JWT-R\r\n\r\nWe should **not** define how keys are created or distributed, the syntax of how they are communicated, how they are verified, or what their meaning can be (bound to a device? biometrics? etc.). ",
          "createdAt": "2022-06-13T09:19:21Z",
          "updatedAt": "2022-06-13T09:19:21Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "This is too low level a spec to include anything about key distribution, etc.  That's a job for profiles.\r\n\r\nBy analogy, neither the JWS nor JWT specs said anything about where to get keys (by design!).  Whereas the ID Token definition in Connect, which is a profile, did exactly that.  Similar separation of responsibilities applies here.",
          "createdAt": "2022-06-13T12:23:42Z",
          "updatedAt": "2022-06-13T12:23:42Z"
        }
      ]
    },
    {
      "number": 25,
      "id": "I_kwDOHTmVzM5LKJc-",
      "title": "same key name `_sd` in SD-JWT and SVC",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/25",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "A comment from @b---c\r\n> I'd think the SVC should use a different key name than \"_sd\". I find it confusing that the same key name is used for the selectively disclosable claims and the salt value container. More explicitly naming the container for selectively disclosable claims might be good too.",
      "createdAt": "2022-06-05T03:39:03Z",
      "updatedAt": "2022-06-28T07:25:09Z",
      "closedAt": "2022-06-28T07:25:09Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree we should differentiate those and I suggest we use something like ` disclosable_claims` in SD-JWT and `salt_value_container` in SVC.\r\n\r\nreferencing Issuer #4. In OpenID4VP, we used `vp_token` in the request and `_vp_token` in a corresponding response. I won't be too hang up on the usage of `_` in aggregated/distributed claims.",
          "createdAt": "2022-06-06T18:32:23Z",
          "updatedAt": "2022-06-06T18:32:23Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree that using different claim names should be used when their purpose is different.",
          "createdAt": "2022-06-13T12:49:37Z",
          "updatedAt": "2022-06-13T12:49:37Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "@Sakurann isn't it be closed thanks to https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/42?",
          "createdAt": "2022-06-25T21:20:41Z",
          "updatedAt": "2022-06-25T21:20:41Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Fixed in #42 indeed.",
          "createdAt": "2022-06-28T07:25:09Z",
          "updatedAt": "2022-06-28T07:25:09Z"
        }
      ]
    },
    {
      "number": 26,
      "id": "I_kwDOHTmVzM5LPajM",
      "title": "Clearly how a term `payload` is used.",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/26",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "Comment from @b---c. Kristina to revise the text to make distinction between SD-JWT and SVC clearer\r\n\r\n> The SD-JWT payload (or similar) is referred to in several examples and sometimes seems to mean the actual payload with _sd and hashes of the SD-JWT but other times seems to point to the raw/clear values of the unhidden data would be. Some different wording would be helpful to distinguish things in this regard.  https://www.ietf.org/archive/id/draft-fett-oauth-selective-disclosure-jwt-00.html#section-4.1.2 is one example of this. It seems minor but I found it to be a mental burden when reading. Like, \"wait the payload of the SD-JWT has nothing but regular claims\" went though my mind while reading and that makes me second guess whether I'm understanding the whole document.",
      "createdAt": "2022-06-06T19:56:23Z",
      "updatedAt": "2022-06-16T11:00:35Z",
      "closedAt": "2022-06-16T11:00:35Z",
      "comments": []
    },
    {
      "number": 27,
      "id": "I_kwDOHTmVzM5LPayu",
      "title": "SVC with JSON string values containing escaped JSON ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/27",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "discuss-first"
      ],
      "body": "Comment from @b---c. \r\n\r\n> I understand (I think) why it's this way (per https://www.ietf.org/archive/id/draft-fett-oauth-selective-disclosure-jwt-00.html#section-4.1.1.1-3) but I really dislike the ascetics of the SVC with JSON string values containing escaped JSON https://www.ietf.org/archive/id/draft-fett-oauth-selective-disclosure-jwt-00.html#name-example-1-svc-for-a-flat-sd - at first glance I thought the examples had to be a mistake.",
      "createdAt": "2022-06-06T19:57:09Z",
      "updatedAt": "2022-07-15T16:15:03Z",
      "closedAt": "2022-07-15T16:15:03Z",
      "comments": [
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "I had a similar reaction.",
          "createdAt": "2022-06-07T21:36:34Z",
          "updatedAt": "2022-06-07T21:36:34Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Should it be\r\n```\r\n\"given_name\": {\r\n          \"salt\": \"6Ij7tM-a5iVPGboS5tmvVA\",\r\n          \"value\": \"John\"\r\n     }\r\n```\r\ninstead of?\r\n```\r\n\"given_name\": \"[\\\"6Ij7tM-a5iVPGboS5tmvVA\\\", \\\"John\\\"]\"\r\n```",
          "createdAt": "2022-06-13T01:05:03Z",
          "updatedAt": "2022-06-13T01:05:03Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree that we should not use escaped JSON.",
          "createdAt": "2022-06-13T12:28:37Z",
          "updatedAt": "2022-06-13T12:28:37Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "the use of escaped JSON  in the current approach avoids canonicalization tho ",
          "createdAt": "2022-06-13T14:13:16Z",
          "updatedAt": "2022-06-13T14:13:16Z"
        },
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "\r\n> Should it be\r\n> \r\n> ```\r\n> \"given_name\": {\r\n>           \"salt\": \"6Ij7tM-a5iVPGboS5tmvVA\",\r\n>           \"value\": \"John\"\r\n>      }\r\n> ```\r\n\r\nThat's what I suggested [here](https://github.com/christianpaquin/selective-disclosure), although I used smaller \"s\" and \"v\" property name trying to keep the payload small.",
          "createdAt": "2022-06-13T14:52:22Z",
          "updatedAt": "2022-06-13T14:52:22Z"
        },
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "> the use of escaped JSON in the current approach avoids canonicalization tho\r\n\r\nWhy do you need c18n here? This data isn't signed by the issuer, right?",
          "createdAt": "2022-06-13T14:53:29Z",
          "updatedAt": "2022-06-13T14:53:29Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "the input into the hash needs to be normalized ",
          "createdAt": "2022-06-13T16:22:40Z",
          "updatedAt": "2022-06-13T16:22:40Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "> > Should it be\r\n> > ```\r\n> > \"given_name\": {\r\n> >           \"salt\": \"6Ij7tM-a5iVPGboS5tmvVA\",\r\n> >           \"value\": \"John\"\r\n> >      }\r\n> > ```\r\n> \r\n> That's what I suggested [here](https://github.com/christianpaquin/selective-disclosure), although I used smaller \"s\" and \"v\" property name trying to keep the payload small.\r\n\r\nThe proposed JSON encoding in the current draft avoids normalization issues, as already mentioned by others. Just sending the value as shown here does not always work, e.g. for values that are an array and therefore have an infinite number of different representations with different hashes. There's a metric ton of other issues, e.g. around numbers that we really don't want to get into. We need to send the representation that will be hashed, not the value.",
          "createdAt": "2022-06-16T14:34:38Z",
          "updatedAt": "2022-06-16T14:34:38Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "See [here](https://datatracker.ietf.org/doc/html/rfc8785#section-3.2) for more examples on why canonicalization is needed:\r\n\r\n>   Assume the following JSON object is parsed:\r\n> \r\n>      {\r\n>        \"numbers\": [333333333.33333329, 1E30, 4.50,\r\n>                    2e-3, 0.000000000000000000000000001],\r\n>        \"string\": \"\\u20ac$\\u000F\\u000aA'\\u0042\\u0022\\u005c\\\\\\\"\\/\",\r\n>        \"literals\": [null, true, false]\r\n>      }\r\n> \r\n>    If the parsed data is subsequently serialized using a serializer\r\n>    compliant with ECMAScript's \"JSON.stringify()\", the result would\r\n>    (with a line wrap added for display purposes only) be rather\r\n>    divergent with respect to the original data:\r\n> \r\n>      {\"numbers\":[333333333.3333333,1e+30,4.5,0.002,1e-27],\"string\":\r\n>      \"\u20ac$\\u000f\\nA'B\\\"\\\\\\\\\\\"/\",\"literals\":[null,true,false]}\r\n> \r\n>    The reason for the difference between the parsed data and its\r\n>    serialized counterpart is due to a wide tolerance on input data (as\r\n>    defined by JSON [[RFC8259](https://datatracker.ietf.org/doc/html/rfc8259)]), while output data (as defined by\r\n>    ECMAScript) has a fixed representation.  As can be seen in the\r\n>    example, numbers are subject to rounding as well.",
          "createdAt": "2022-06-17T07:39:42Z",
          "updatedAt": "2022-06-17T07:39:42Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "mhh ... in the JWT world any issuer can put strange bytes in a value and in \"this perfect world\" this should be escaped as well, we don't have c18n and it seems that everything is fine. I'd fill this gap usign a normative json-schema in the specs (annex?)\r\n\r\n\r\n\r\n",
          "createdAt": "2022-06-25T21:18:45Z",
          "updatedAt": "2022-06-25T21:18:45Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "Also [this issue](https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/80) asks for \r\n\r\n1. remove JSON Object in the form escaped strings (no more JSON Objects)\r\n2. using pure JSON Objects with explicit attributes/properties",
          "createdAt": "2022-06-25T21:27:56Z",
          "updatedAt": "2022-06-25T21:28:07Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "> mhh ... in the JWT world any issuer can put strange bytes in a value and in \"this perfect world\" this should be escaped as well, we don't have c18n and it seems that everything is fine. I'd fill this gap usign a normative json-schema in the specs (annex?)\r\n\r\nBut in the JWT world, you get the thing that is signed delivered. There's no need to reconstruct it, therefore no need for c18n. \r\n\r\nA JSON schema does not help, because this is about the serialization, not the contents of the JSON.\r\n\r\nHow would you solve the c18n problem described above, e.g., around floating point numbers, with plain JSON objects?",
          "createdAt": "2022-06-27T11:00:21Z",
          "updatedAt": "2022-06-27T11:00:21Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "a JSON Schema can define the content of the values of any attribute. \r\nIt can restrict a value to be an integer or a string with a maxmimum length, it can also define the property of a complex type, like a nested JSON Object\r\n\r\n",
          "createdAt": "2022-06-28T23:25:08Z",
          "updatedAt": "2022-06-28T23:25:08Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "But how can a JSON schema prevent that *the same string* is represented using different bytes? Any validation in JSON schema is defined over the string value, not the bytes representing the string.\r\n\r\nFor arrays, you'll have the same problem.\r\n\r\nThese two will hash to different digests, but always either both be accepted by a JSON schema, or both be rejected:\r\n\r\n```\r\n[\"a\", \"b\"]\r\n[\"a\",\"b\"]\r\n```\r\n",
          "createdAt": "2022-06-30T05:31:29Z",
          "updatedAt": "2022-06-30T05:31:29Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "@danielfett json schema validates json objects and not serialization of them in different bytes\r\n\r\nonce the signature of a JWT has been validated, a json schema can validate the structure of the artifact and all the values contained in it\r\n\r\nso signature validation and content validation are different things",
          "createdAt": "2022-07-02T22:43:31Z",
          "updatedAt": "2022-07-02T22:43:31Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Exactly, that's why I don't see how a JSON schema would solve the c18n problem.",
          "createdAt": "2022-07-03T07:32:37Z",
          "updatedAt": "2022-07-03T07:32:37Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "It looks like we'll be keeping this awkward-looking but well-working JSON-in-JSON, I guess? @peppelinux Can we close this from your side? (We'll add more explanation as agreed in Issue #51).",
          "createdAt": "2022-07-15T09:10:39Z",
          "updatedAt": "2022-07-15T09:10:39Z"
        }
      ]
    },
    {
      "number": 28,
      "id": "I_kwDOHTmVzM5LPbGs",
      "title": "alg=none in SD-JWT-R",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/28",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "Sakurann"
      ],
      "labels": [
        "discuss-first"
      ],
      "body": "Comment from @b---c. \r\n> https://www.ietf.org/archive/id/draft-fett-oauth-selective-disclosure-jwt-00.html#section-5-3.2.1 -> \"Check that the presentation consists of six .-separated elements; if holder binding is not required, the last element can be empty.\" Seems to imply that alg=none would be used for an unsigned SD-JWT Release while other parts of the doc seem to have just encoded SVC.",
      "createdAt": "2022-06-06T19:58:11Z",
      "updatedAt": "2022-10-24T16:49:55Z",
      "closedAt": "2022-10-24T16:49:55Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "need to discuss if we want to allow unsigned SD-JWT-R - don't think alg=none would be a good idea.\r\n\r\n+ need clarify the six .-separated elements text",
          "createdAt": "2022-06-06T19:58:53Z",
          "updatedAt": "2022-06-06T19:58:53Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Why would alg=none not be a good idea?",
          "createdAt": "2022-06-13T07:20:00Z",
          "updatedAt": "2022-06-13T07:20:00Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree with @danielfett that it's context-specific whether \"alg\"=\"none\" is appropriate - just like it's context-specific whether any other signing and/or encryption algorithms are appropriate.\r\n\r\nWe should not be making algorithm choices in the basic SD-JWT spec.  Profiles are free to do that.",
          "createdAt": "2022-06-13T12:31:07Z",
          "updatedAt": "2022-06-13T12:31:07Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "@danielfett, @selfissued don't we have evidence that alg=none is a dangerous option and leads to security issues as a result of implementation errors?",
          "createdAt": "2022-06-13T14:09:23Z",
          "updatedAt": "2022-06-13T14:09:23Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "SD-JWT should disallow alg=none.\r\n\r\nAllowing the SVC (or whatever it becomes) to be unsigned is okay but can just be one chunk of base64url encoded JSON. \r\n",
          "createdAt": "2022-06-13T16:47:19Z",
          "updatedAt": "2022-06-13T16:47:19Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "> SD-JWT should disallow alg=none. \r\n\r\nyes, we agreed SD-JWT must be signed.\r\n\r\nbut will SD-JWT-R allow alg=none..? or we say that when SD-JWT-R is unsigned it is not a JWT, but a JSON object?",
          "createdAt": "2022-06-16T10:58:58Z",
          "updatedAt": "2022-06-16T10:59:06Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I think that when the R part of an SD-JWT-R is unsigned, it's just an encoded JSON object. ",
          "createdAt": "2022-06-16T13:59:27Z",
          "updatedAt": "2022-06-16T13:59:27Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm not sure it is a good idea to go down the \"use an unsigned assertion instead of a plain object\" to solve that problem again. \r\n\r\nThe requirement at hand is to release a credential with selective disclosure in cases where there is no cryptographic holder binding. That might for example mean, the credential is bound to certain claims of the holder, e.g. name and dob. That is normal practise for a lot of credentials today in the real world (including diplomas) and it is the design used by the UE Covid Certificate. So I don't think it is an edge case. \r\n\r\nI suggest to come up with a technically sound solution that also does not give people a vector to attack our proposal.  A plain JSON object seems to be a reasonable solution. ",
          "createdAt": "2022-06-17T11:43:31Z",
          "updatedAt": "2022-06-17T11:43:31Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "If we ever want SD-JWT-R to be signed, then it should be a JWT.  If we also want it to be able to be unsigned, then the JWT should use alg:none when unsigned.  If we decide that SD-JWT-R should never be signed, then it should always be base64url-encoded JSON.  But again, if it's sometimes signed, that's exactly what alg:none is for, and why we included it the JWS spec.\r\n\r\nalg:none is not an attack vector in this use case, since the claims are protected by the hashes.",
          "createdAt": "2022-06-17T15:16:27Z",
          "updatedAt": "2022-06-17T15:16:27Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think, if we want unsigned releases, the release shall be a JSON object. If the release shall be signed, that same JSON Object could be the payload of a JWS aka a JWT. ",
          "createdAt": "2022-06-17T15:40:03Z",
          "updatedAt": "2022-06-17T15:40:03Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "If I'm understanding you correctly, Torsten then you're advocating having either base64url-encoded JSON (one segment) or a signed JWT with three segments (header, payload, signature).  It's that format inconsistency that alg:none is intended to prevent, since it would also be three segments.\r\n\r\nThat doesn't answer the question of whether there's ever a reason to sign the SD-JWT-R.  For simplicity purposes, I would assert that it should never be signed.  (Then the alg:none discussion would become moot.)",
          "createdAt": "2022-06-17T15:49:48Z",
          "updatedAt": "2022-06-17T15:49:48Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "Signing the SD-JWT-R makes sense if we want to verify the holder binding or want to prevent impersonation or replay. These artefacts will be stolen, just like bearer tokens are being stolen and exfiltrated, so requiring signatures in at least some of the cases will stop that attack vector. ",
          "createdAt": "2022-06-17T16:43:31Z",
          "updatedAt": "2022-06-17T16:43:31Z"
        },
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm catching up on this thread, going back to my implementation. I've never used `alg=none` before, and in the bearer token case, I must say it feels weird to append an extra JWS header with `alg=none`, the SVC as payload, and an empty signature (i.e., currently proposed SD-JWT-R: `<iss header>.<SD-JWT-payload>.<iss sig>.<holder header (alg=none)>.<SVC>.<empty string>`) I feel that the spec should only define the SVC format as a JSON object, and say that if the SD-JWT is not key bound, then the SVC may be base64url encoded and attached to the SD-JWT as a 4th part.\r\n\r\nHow is the holder-binding for normal JWT accomplished, in the various industry profiles? Would you typically create a separate JWS using the holder key, and concatenate the issuer's and the holder's JWS? \r\n",
          "createdAt": "2022-06-24T20:32:08Z",
          "updatedAt": "2022-06-24T20:32:08Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "`If verifier is supposed to check the signature, do not accept alg=none`. When to check the signature is up to the Verifier's trust framework/policy, etc.)\r\n\r\nwith alg=none, attacker can remove the signature from a valid SD-JWT and replace it with alg=none, but one can make the same mistake even if JSON is used because attacker can remove both header and the signature.\r\nit adds more confusion because now we need to explain both JSON and JWT.",
          "createdAt": "2022-10-18T15:43:04Z",
          "updatedAt": "2022-10-18T15:43:04Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "See also https://datatracker.ietf.org/doc/html/rfc8725#section-3.2\r\n\r\n\r\n>    That said, if a JWT is cryptographically protected end-to-end by a\r\n>    transport layer, such as TLS using cryptographically current\r\n>    algorithms, there may be no need to apply another layer of\r\n>    cryptographic protections to the JWT.  In such cases, the use of the\r\n>    \"none\" algorithm can be perfectly acceptable.  The \"none\" algorithm\r\n>    should only be used when the JWT is cryptographically protected by\r\n>    other means.  JWTs using \"none\" are often used in application\r\n>    contexts in which the content is optionally signed; then, the URL-\r\n>    safe claims representation and processing can be the same in both the\r\n>    signed and unsigned cases. \r\n> ",
          "createdAt": "2022-10-18T15:54:41Z",
          "updatedAt": "2022-10-18T15:54:41Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #155 ",
          "createdAt": "2022-10-24T15:44:55Z",
          "updatedAt": "2022-10-24T15:44:55Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR merged",
          "createdAt": "2022-10-24T16:49:55Z",
          "updatedAt": "2022-10-24T16:49:55Z"
        }
      ]
    },
    {
      "number": 29,
      "id": "I_kwDOHTmVzM5LPbf8",
      "title": "specify hash function",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/29",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "duplicate"
      ],
      "body": "Comment from @b---c\r\n> I don't think the actual hash function used is specified anywhere. That kind of thing is needed for interoperability :) But then questions about algorithm agility come up...\r\n",
      "createdAt": "2022-06-06T19:59:23Z",
      "updatedAt": "2022-06-12T18:51:45Z",
      "closedAt": "2022-06-08T17:36:04Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "hash function table from my original draft is omitted in the current draft - will add.",
          "createdAt": "2022-06-06T19:59:48Z",
          "updatedAt": "2022-06-06T19:59:48Z"
        },
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "See #13 ",
          "createdAt": "2022-06-07T21:35:42Z",
          "updatedAt": "2022-06-07T21:35:42Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "duplication. ",
          "createdAt": "2022-06-08T17:36:04Z",
          "updatedAt": "2022-06-08T17:36:04Z"
        }
      ]
    },
    {
      "number": 30,
      "id": "I_kwDOHTmVzM5LPb0s",
      "title": "encrypting values in SD-JWT",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/30",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "discuss-first"
      ],
      "body": "Comment from @b---c\r\n> Have you considered or would you consider using encrypted values inside the SD-JWT payload and having the release container convey the key for each one to be released? I worry that the hash check https://www.ietf.org/archive/id/draft-fett-oauth-selective-disclosure-jwt-00.html#section-5-3.5.2.2.2.2.1 is the kind of protocol design thing that makes it easy for developer mistakes to arise (not exactly like alg=none but similar) that allow signature bypass. Encrypted values in the SD-JWT payload would make that particular mistake impossible. There are tradeoffs, of course. Size being one but maybe not too different overall. But the hash check feels like a potential \"foot gun\" that could be avoided.",
      "createdAt": "2022-06-06T20:00:26Z",
      "updatedAt": "2022-07-11T16:47:07Z",
      "closedAt": "2022-07-11T16:47:07Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "This is an interesting idea that I would love to discuss. I've heard thoughts to encrypt the whole SD-JWT as JWE, but not individual values. Could you please elaborate on the developer mistakes during hash calculation that you have in mind, @b--c?",
          "createdAt": "2022-06-06T20:03:04Z",
          "updatedAt": "2022-06-06T20:03:04Z"
        },
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "Ciphertexts take as much space as the claim values, but a hash digest has a determined size, which could beneficial when you want to cap the JWT size (e.g., to encode it in a QR code). ",
          "createdAt": "2022-06-07T21:33:02Z",
          "updatedAt": "2022-06-07T21:33:02Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "The main mistake I have in mind is the verifier/receiver completely forgetting to do the hash calculation and comparison. Because the claim values are in the SVC thing outside the SD-JWT, an attacker can put whatever values there they please and the receiver/verifier will accept them, if the hashes aren't checked. This might seem like an unlikely occurrence but mistakes get made all the time. Even mistakes that might seem silly or like they shouldn't happen. Think back to my JWT talk at OSW :) ",
          "createdAt": "2022-06-08T17:37:28Z",
          "updatedAt": "2022-06-08T17:37:28Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "I wonder if it makes sense to include an encrypted version of the SVC in the SD-JWT so there is only one artefact the engineers need to deal with (see https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/33 ). ",
          "createdAt": "2022-06-09T16:40:31Z",
          "updatedAt": "2022-06-09T16:40:31Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "> I wonder if it makes sense to include an encrypted version of the SVC in the SD-JWT  \r\n\r\nWe can\u2019t do that because that way SD-JWT will be meant only for one verifier whose pubKey was used to encrypt SVC, which takes away the multitude property",
          "createdAt": "2022-06-10T04:41:18Z",
          "updatedAt": "2022-06-10T04:41:18Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "> verifier/receiver completely forgetting to do the hash calculation and comparison. \r\n\r\nit is one of the most fundamental assumptions this draft makes that verifier will verify the hashes.. and yet I agree with the concern.\r\n\r\nencrypting claims in SD-JWT might impact adoption and simplicity, but the more I think about it the more sense it makes.",
          "createdAt": "2022-06-10T04:49:28Z",
          "updatedAt": "2022-06-10T04:53:16Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": ">  using encrypted values inside the SD-JWT payload and having the release container convey the key for each one to be released\r\n\r\nWould there be any implications of sending private keys in SD-JWT-R?",
          "createdAt": "2022-06-10T04:56:31Z",
          "updatedAt": "2022-06-10T04:56:31Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "> \r\n\r\nI had something a little different in mind. \r\n\r\nI was thinking that the SVC would be encrypted with the holders public key, so only the holder can decrypt it, but it can be included in the SD-JWT as part of the payload and prevent the risk of the SVC and the SD-JWT becoming disassociated. Since only the holder can decrypt it, it is safe to include in the SD-JWT from a privacy perspective (when it is presented to the verifier, the verifier can't read it, nor is there a risk of leakage due to SVC mishandling or exfiltration).  \r\n\r\nThe holder would still generate the SD-JWT-R for presentation as before, but now the SVC is retrieved from within the SD-JWT, decrypted by the holder, and the information that is selectively disclosed is included in the SD-JWT-R. The holder sends both the SD-JWT and SD-JWT-R to the verifier. The verifier can do the verification as before.\r\n\r\nThis way the holder does not need to keep track of both the SVC and SD-JWT, there is only a SD-JWT to manage, with the added advantage that the contents of the SVC structure (now included in the SD-JWT) is privacy protected by virtue of being encrypted, even at rest (or when it ends up in a log file).",
          "createdAt": "2022-06-10T12:05:46Z",
          "updatedAt": "2022-06-10T12:05:46Z"
        },
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm not sure I understand this description, @PieterKas (how encrypting the full SVC can support selective disclosure?). The way I'd do encryption-based selective disclosure would be to keep the structure as is, but instead of hashing the claim values, the issuer encrypts them with random symmetric keys and IV (using, say, AES); the SD-JWT contains the ciphertexts (instead of digests), and the SVC contains IV and keys (instead of salt and claim values). I had prototyped that a while back, but as I said above, the optimized size of a digest was more important when the target token size is limited.",
          "createdAt": "2022-06-10T14:03:45Z",
          "updatedAt": "2022-06-10T14:03:45Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "@christianpaquin selective disclosure would work in the same way as the current proposal. I am not proposing an encryption based selective disclosure scheme, but rather that the SVC should be protected so that only the holder can access it.\r\n\r\nIn the current proposal, the SVC is handed to the holder in cleartext as a separate artefact along with the SD-JWT. The holder then calculates the SD-JWT-R and presents two artefacts to the verifier, namely the SD-JWT and the SD-JWT-R. \r\n\r\nFor what I have in mind, the holder would still follow the same steps as in the current proposal, with the extra step of decrypting the SVC information whenever they need to calculate the SD-JWT-R, but without the hassle of having to maintain two separate artefacts.\r\n\r\nWhen encrypting the SVC, it is done using the holder public key. This protects against accidental leakage if the SVC ends up in log files or get exfiltrated somehow (privacy preserving by default). Since the SVC is now private to the holder, it can be included in the SD-JWT as an attribute, so no need to send two artefacts, you can just send one. Whenever the holder wants to perform selective disclosure, they decrypt the SVC information (which is now included in the SD-JWT), calculate the SD-JWT-R, and then present the SD-JWT and SD-JWT-R to the verifier as before. Even though the SD-JWT includes the SVC information, the verifier cannot do anything with it since it is encrypted and only the holder can decrypt it. ",
          "createdAt": "2022-06-10T15:38:23Z",
          "updatedAt": "2022-06-10T15:38:44Z"
        },
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "I see. Ok, I thought you were describing a solution for the first comment of this issue. ",
          "createdAt": "2022-06-10T15:53:21Z",
          "updatedAt": "2022-06-10T15:53:21Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "@christianpaquin ah, yes, I can see how we got off-topic. Let's continue the discussion on encrypting the SVC and reducing the number of artefacts over in https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/33 ",
          "createdAt": "2022-06-10T16:10:29Z",
          "updatedAt": "2022-06-10T16:10:29Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> Would there be any implications of sending private keys in SD-JWT-R?\r\n\r\nIt would be symmetric keys. One for each encrypted claim in the SD-JWT. The key is the disclosure mechanism and would be in place of the cleartext of the claim value in the current SVC structure. So I don't think there would be any additional implications than the current approach.  ",
          "createdAt": "2022-06-10T18:22:34Z",
          "updatedAt": "2022-06-10T18:22:34Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I'll try and put together an example to hopefully make the idea more concrete and easier to reason about and discuss.  ",
          "createdAt": "2022-06-10T18:27:09Z",
          "updatedAt": "2022-06-10T18:27:09Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "also flagging Issue #37 as relevant\r\n",
          "createdAt": "2022-06-10T21:32:42Z",
          "updatedAt": "2022-06-10T21:32:42Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Working with the same *raw* claim values from the [Example 1 - Flat SD-JWT](https://www.ietf.org/archive/id/draft-fett-oauth-selective-disclosure-jwt-00.html#name-example-1-flat-sd-jwt) \r\n```\r\n{\r\n  \"sub\": \"6c5c0a49-b589-431d-bae7-219122a9ec2c\",\r\n  \"given_name\": \"John\",\r\n  \"family_name\": \"Doe\",\r\n  \"email\": \"johndoe@example.com\",\r\n  \"phone_number\": \"+1-202-555-0101\",\r\n  \"address\": {\r\n    \"street_address\": \"123 Main St\",\r\n    \"locality\": \"Anytown\",\r\n    \"region\": \"Anystate\",\r\n    \"country\": \"US\"\r\n  },\r\n  \"birthdate\": \"1940-01-01\"\r\n}\r\n```\r\n\r\nAn SD-JWT payload where the claim values are encrypted (using JWE with dir + A128GCM) would look like this:\r\n\r\n```\r\n{\r\n  \"iss\": \"https://example.com/issuer\",\r\n  \"iat\": 1516239022,\r\n  \"exp\": 1516247022,\r\n  \"_sd\": {\r\n    \"sub\": \"eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4R0NNIn0..cV2hFOGObggjin8z.kUL8jXdYYuD5-BwiW8q9xzoHQvBWvNueI2eRFXEmXuEasIpV.tn8RpYzKqrxiy_NK_F-J0w\",\r\n    \"given_name\": \"eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4R0NNIn0..bTDF3Hk4nAX0BXnJ.2JBl2g.paUW9Ke3dmcnV19Om6MjGg\",\r\n    \"family_name\": \"eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4R0NNIn0..Ql9gAqzexvluo7p9.RK5q.7LFlsjNhFoCX3sBy0qyR7g\",\r\n    \"email\": \"eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4R0NNIn0..X44VMMQQFlzdMsoY.VB10p2ZHBBmJi7Aduy1JvuaelQ.HiPo_W4IqamZT7WU1YqMCA\",\r\n    \"phone_number\": \"eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4R0NNIn0..Sp9V2uFfT3I3PqAX.zdXKGs5--foh8F15qp1u.fuoYChpMugOiAudJHGVwjg\",\r\n    \"address\": \"eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4R0NNIn0..AI4SunVU0jY5wXF3.jWtiXP_B5R-Uzl03lH9KdPxPTMVn6jPZK71VusMUQNvnM5E0ZawVqdrkNKtXFfd20T-DBpJ8fot3gp_7aIj8h8Um8jQfui4aOfKq_Bu5cwJ5_mN-SnOoqg.8fLbHaBcARle6SikZg77-g\",\r\n    \"birthdate\": \"eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4R0NNIn0..fB5hiX7d2KhG5axC.Uhp3K_eTfvscEw.x4hDafN3Sdb7A-YuoO8cMg\"\r\n  }\r\n}\r\n```\r\n\r\nThe SD-JWT signed by the issuer looks like this:  \r\n\r\n`\r\neyJhbGciOiJFUzI1NiJ9.eyJpc3MiOiJodHRwczovL2V4YW1wbGUuY29tL2lzc3VlciIsImlhdCI6MTUxNjIzOTAyMiwiZXhwIjoxNTE2MjQ3MDIyLCJfc2QiOnsic3ViIjoiZXlKaGJHY2lPaUprYVhJaUxDSmxibU1pT2lKQk1USTRSME5OSW4wLi5jVjJoRk9HT2JnZ2ppbjh6LmtVTDhqWGRZWXVENS1Cd2lXOHE5eHpvSFF2Qld2TnVlSTJlUkZYRW1YdUVhc0lwVi50bjhScFl6S3FyeGl5X05LX0YtSjB3IiwiZ2l2ZW5fbmFtZSI6ImV5SmhiR2NpT2lKa2FYSWlMQ0psYm1NaU9pSkJNVEk0UjBOTkluMC4uYlRERjNIazRuQVgwQlhuSi4ySkJsMmcucGFVVzlLZTNkbWNuVjE5T202TWpHZyIsImZhbWlseV9uYW1lIjoiZXlKaGJHY2lPaUprYVhJaUxDSmxibU1pT2lKQk1USTRSME5OSW4wLi5RbDlnQXF6ZXh2bHVvN3A5LlJLNXEuN0xGbHNqTmhGb0NYM3NCeTBxeVI3ZyIsImVtYWlsIjoiZXlKaGJHY2lPaUprYVhJaUxDSmxibU1pT2lKQk1USTRSME5OSW4wLi5YNDRWTU1RUUZsemRNc29ZLlZCMTBwMlpIQkJtSmk3QWR1eTFKdnVhZWxRLkhpUG9fVzRJcWFtWlQ3V1UxWXFNQ0EiLCJwaG9uZV9udW1iZXIiOiJleUpoYkdjaU9pSmthWElpTENKbGJtTWlPaUpCTVRJNFIwTk5JbjAuLlNwOVYydUZmVDNJM1BxQVguemRYS0dzNS0tZm9oOEYxNXFwMXUuZnVvWUNocE11Z09pQXVkSkhHVndqZyIsImFkZHJlc3MiOiJleUpoYkdjaU9pSmthWElpTENKbGJtTWlPaUpCTVRJNFIwTk5JbjAuLkFJNFN1blZVMGpZNXdYRjMuald0aVhQX0I1Ui1VemwwM2xIOUtkUHhQVE1WbjZqUFpLNzFWdXNNVVFOdm5NNUUwWmF3VnFkcmtOS3RYRmZkMjBULURCcEo4Zm90M2dwXzdhSWo4aDhVbThqUWZ1aTRhT2ZLcV9CdTVjd0o1X21OLVNuT29xZy44ZkxiSGFCY0FSbGU2U2lrWmc3Ny1nIiwiYmlydGhkYXRlIjoiZXlKaGJHY2lPaUprYVhJaUxDSmxibU1pT2lKQk1USTRSME5OSW4wLi5mQjVoaVg3ZDJLaEc1YXhDLlVocDNLX2VUZnZzY0V3Lng0aERhZk4zU2RiN0EtWXVvTzhjTWcifX0.LH5_YlMoXceIRb2G5atmS5VlECm3YjldIUPMstq22nxfU31xxEqcW3c4L5RuqGl4YBID6vif5pjYlZ0zV-AEgQ\r\n`\r\n\r\nThe disclosure container (just made the name up and there's probably better names but it takes the place of the SVC) has the claim names and the base64url encoded key that is used to disclosure that claim value in the SD-JWT by decrypting it.   \r\n\r\n```\r\n{\r\n  \"_dc\": {\r\n    \"sub\": \"In-iH0S_HXDvzkoVxfpqvA\",\r\n    \"given_name\": \"YYBWLGytJx2B9QL9y4cfMA\",\r\n    \"family_name\": \"jPAuYX6B-KcGm3QaT9iQ9A\",\r\n    \"email\": \"Bdqe6gP2ojC1lPP_IT59qw\",\r\n    \"phone_number\": \"KxeODoPXouVBlZ6izB966A\",\r\n    \"address\": \"cnouoEo4q5V8gAeNli7Pjw\",\r\n    \"birthdate\": \"44Um0QD0R59RxqyCUWgXOA\"\r\n  }\r\n}\r\n```\r\n\r\nThe disclosure container base64url encoded:\r\n\r\n`\r\neyJfZGMiOnsic3ViIjoiSW4taUgwU19IWER2emtvVnhmcHF2QSIsImdpdmVuX25hbWUiOiJZWUJXTEd5dEp4MkI5UUw5eTRjZk1BIiwiZmFtaWx5X25hbWUiOiJqUEF1WVg2Qi1LY0dtM1FhVDlpUTlBIiwiZW1haWwiOiJCZHFlNmdQMm9qQzFsUFBfSVQ1OXF3IiwicGhvbmVfbnVtYmVyIjoiS3hlT0RvUFhvdVZCbFo2aXpCOTY2QSIsImFkZHJlc3MiOiJjbm91b0VvNHE1VjhnQWVObGk3UGp3IiwiYmlydGhkYXRlIjoiNDRVbTBRRDBSNTlSeHF5Q1VXZ1hPQSJ9fQ\r\n`\r\n\r\nAnd, same as the  approach in -00, the holder could present a subset of the disclosure container thereby doing the selective disclosing.  Like this would only disclose birthdate:\r\n\r\n```\r\n{\r\n  \"_dc\": {\r\n    \"birthdate\": \"44Um0QD0R59RxqyCUWgXOA\"\r\n  }\r\n}\r\n```\r\nEncoded: \r\n`eyJfZGMiOiB7ImJpcnRoZGF0ZSI6ICI0NFVtMFFEMFI1OVJ4cXlDVVdnWE9BIn19`\r\n\r\n\r\nIt's pretty similar in general to the approach in -00 but the disclosure container only has stuff needed to reveal/release the claim values rather than the values themselves and a detached integrity check as in the SVC. Which eliminates the possibility of relying on the claim values from the SVC while forgetting to to do the integrity check. And yes, as you point out, that check is fundamental. But mistakes like that do happen and have happened. And, so to the extent possible/reasonable, it's good if the protocol design can eliminate or reduce the possibility of making common mistakes.\r\n\r\nWith this proposed approach, the SD-JWT is bigger. And the disclosure container will be smaller than the SVC.\r\n\r\nIt could be something different but I used plain JWE for the encrypted values. Which has the benefit of reusing the JWE spec and concepts. And should mean that JWE libraries already have the code to process the stuff. So from that perspective, I don't actually think it would impact adoption and simplicity. In some ways, it's simpler. And algorithm agility comes \"for free\" from the JWE layer. \r\n\r\nJWE isn't the most space efficient. But it's not terrible. And there are some potential optimizations that could be looked at too, if desired. The likely redundant JWE header looks like a good candidate. But I digress for now... \r\n\r\nSome info about the size of the underlying data does maybe leak here (b/c the cipher text size will vary with the size of the plain text) vs. the hash. But I'm having a hard time seeing how that could be meaningfully consequential in this context. \r\n\r\n\r\n\r\n",
          "createdAt": "2022-06-10T23:39:46Z",
          "updatedAt": "2022-06-10T23:39:46Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks a lot, Brian. I do see the benefits much clearer now and the use of symmetric keys makes sense.\r\n\r\nto sort out different proposals, this proposal would be orthogonal to including an encrypted SVC entirely inside an SD-JWT to prevent dissociation of the data structures.",
          "createdAt": "2022-06-13T07:37:22Z",
          "updatedAt": "2022-06-13T07:37:22Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I do see Brian's point (very well). This _is_ the kind of mistakes that will happen.\r\n\r\nIn my (limited) experience, the implementations for JWS are more mature than those for JWE and available in more libraries. Therefore, I think avoiding encryption if we can would make the spec easier to implement.\r\n\r\nProviding clearer implementation advice and negative test cases (\"must not accept...\") could be a way to reduce developer mistakes without the additional complexity of encryption.",
          "createdAt": "2022-06-13T09:13:10Z",
          "updatedAt": "2022-06-13T09:13:10Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "In summary (to make sure I follow), each field in the JWD-SD is encrypted with a unique symmetric key, the SVC is replaced by a construct that contains value/symmetric key pairings, and for disclosure the holder sends the JWD-SD along with the value/symmetric key pairing for the values that should be disclosed.\r\n\r\n@bc-pi in this proposal, do you foresee a need to protect the disclosure keys? I always feel uncomfortable when symmetric keys are being sent in the clear. If we added confidentiality protection for the symmetric keys it can be done using established key management techniques. I imagine an approach where the structure with the symmetric keys are encrypted with the holder public key. When the holder wants to perform disclosure, the holder decrypt the structure, extract the key it wants to share, create the disclosure document and then encrypts it with the verifiers public key. The verifier would then decrypt the disclosure structure, extract the symmetric keys, and decrypt the fields in the JD-SWT.\r\n\r\nThe benefit of protecting the encryption keys is that it mitigates against accidental disclosure if the structure with the symmetric keys gets logged/exfiltrated, and the holder can store it as received from the issuer (protecting data at rest).\r\n\r\nThe downside is extra key management, but perhaps a worthwhile option given that we are building a privacy preserving capability.",
          "createdAt": "2022-06-13T10:05:47Z",
          "updatedAt": "2022-06-13T10:05:47Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "I am against requiring encryption as part of the basic SD-JWT data structure.  We should be emulating the simplicity of mDL's use of salted hashes and stop there.\r\n\r\nYes, recipients could forget to check the hashes, just like recipients could forget to check JWS signatures.  Addressing that is the domain of test suites and certification suites; trying to prevent negligent implementations should not result in making the data structures more complicated than they need to be.",
          "createdAt": "2022-06-13T12:36:39Z",
          "updatedAt": "2022-06-13T12:36:39Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "What I'm proposing is in no way more complicated. It is actually simpler in many respects. And avoids the awkward JSON in JSON a la #27.\r\n\r\nImplementation advice, warnings, test suites, certification suites, etc., have shown to be woefully insufficient and don't even reach the those that need it the most. \r\n\r\nNegligence would be continuing to ignore these kinds of very real problems resulting from fundamental spec choices while deferring to ineffective mitigations while blaming developers. \r\n\r\n",
          "createdAt": "2022-06-13T14:25:46Z",
          "updatedAt": "2022-06-13T14:25:46Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "@PieterKas the current SVC has the value of claims fully in the clear. All of what you say applies (or doesn't) just the same to both approaches. But isn't an inherent or extra complexity of making things harder to mess up. ",
          "createdAt": "2022-06-13T14:32:17Z",
          "updatedAt": "2022-06-13T14:32:17Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "@bc-pi agreed, that is the current state. \r\n\r\nI guess I am feeling uneasy at having these SVC type constructs in the clear as we know they tend to leak. For a privacy preserving capability, it feels prudent to take the extra step of protecting the confidentiality of the SVC. If we choose to leave it in the clear, we need to provide clear guidance on the risks, although, I am with your sentiment that more documentation has proven inadequate to prevent some unfortunate errors.",
          "createdAt": "2022-06-13T15:01:59Z",
          "updatedAt": "2022-06-13T15:01:59Z"
        },
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "In the use case I was exploring, packaging SD-JWT as QR code, some limited clients (or simply printing the QR code on paper) can present the QR code as is, with all the claims and SVC in clear allowing the verifier to read the claims. A compliant client can further limit the disclosure by removing the SVC. This use case requires the SVC in clear.",
          "createdAt": "2022-06-13T15:21:35Z",
          "updatedAt": "2022-06-13T15:21:35Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "@christianpaquin can you elaborate a bit more? The use case you describe (passing the SVC in clear to the verifier) sounds like it can be achieved without selective disclosure since giving the SVC in clear to the verifier does not seem to introduce any selectivity in the disclosure. It feels like you can achieve the same goal by just including the claims in cleartext in in a JWT.",
          "createdAt": "2022-06-13T19:06:27Z",
          "updatedAt": "2022-06-13T19:06:27Z"
        },
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "> @christianpaquin can you elaborate a bit more? \r\n\r\nSure. Issuer issues the signed claims (JWS) to the user, along with the SVC. Legacy clients / paper-based encodings (e.g., QR codes) can present the entirety of the claims by presenting JWS+SVC. Conforming clients can disclose less by editing the SVC and removing the data associated with the claims to hide. See the [Claim QR](https://github.com/microsoft/claimqr) project for a prototype of this approach.\r\n",
          "createdAt": "2022-06-13T22:47:19Z",
          "updatedAt": "2022-06-13T22:47:19Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "right, when SD-JWT-R is not signed, editing SVC turns it into SD-JWT-R",
          "createdAt": "2022-06-13T23:15:11Z",
          "updatedAt": "2022-06-13T23:15:11Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @christianpaquin  and @Sakurann. \r\n\r\n1. For the paper based encodings, how would the holder edit the SVC? \r\n2. For paper based encodings, the verifier still perfroms the verification electronically (e.g. scans the QR code(s)), verify signatures on the SD-JWT etc?",
          "createdAt": "2022-06-14T12:01:56Z",
          "updatedAt": "2022-06-14T12:01:56Z"
        },
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "1. A user wouldn't be able to edit a paper-based credential, of course. Many large scenarios would have a diverse set of users, ranging from those with smart phones, to those with more limited features phones, to those without any device. For equity reasons, all these users would need to be able to participate in the system. (This was the case, e.g., for the covid certificates; it was a hard requirement for the QR codes to be presentable in paper form.) Now, in this spectrum of user capabilities, an issuer can issue the same QR code encoding a SD-JWT+SVC to everyone. Paper printouts would disclose everything; limited feature phones could display the QR code, perhaps even edit down the SVC to hide some claims (since it only involves JSON editing and no crypto operations); full feature smart phones would have all the power of selective disclosure. A SD-JWT+SVC issued on paper can later be imported to a smart phone allowing selective disclosure down the line (imagine a kiosk where you get a certification of some sort for which they give you a print out that you can import at home on a device of your choice).\r\n2. Yes. The QR code serves only as transport here; which works well to bridge the electronic and physical world.",
          "createdAt": "2022-06-14T14:12:47Z",
          "updatedAt": "2022-06-14T14:12:47Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I plan to give this a try and implement the encryption-based scheme in a separate branch.\r\n\r\nI do have a concern with the cipher text size revealing the plain text length (Brian already mentioned this): With AES/GCM, the length of the cipher text depends directly on the plain text.\r\n\r\nThis can be seen in the example above (showing just the cipher text part of the JWE):\r\n\r\n- given_name: `2JBl2g` (John)\r\n- family_name: `RK5q` (Doe)\r\n\r\nThis is very revealing, especially for fields with limited value ranges. You can immediately tell which of these cipher texts encodes \"true\" and which encodes \"false\":\r\n\r\n- `KVN23w`\r\n- `IXZpXl8`\r\n\r\nSame for `male`/`female`:\r\n\r\n- `cqFN5Elz`\r\n- `1xtI9iijGVc`\r\n\r\nWorks for numbers as well, e.g., `9` and `10`:\r\n\r\n- `QA`\r\n- `8t8`\r\n\r\nThis is clearly not acceptable.\r\n\r\nPotential solutions would be to manually pad the plain text before putting it through the encryption algorithm (by adding white space) or to use block-based modes, like AES 128 CBC, that at least hide some of the length information:\r\n\r\nWorks for true/false, empty value vs. short value, `male`/`female`:\r\n\r\n- `-Apn73e0Js7fFhvPn-GbTQ`\r\n- `nITWmxBvFOUnUJT6FyKv0g`\r\n\r\nDoes not work for information that crosses block boundaries, e.g., the country names \"Germany\" vs. \"United States of America\":\r\n\r\n- `s-KTQ4woDrDuYsZcW8Eifg`\r\n- `tgIUUpSn91qbMZQwnN5WEry0tuaEUVjI_OMT170QH-4`\r\n\r\nI'm not sure if this is sufficient. The side channel opened through the length is particularly large here as we encode single values. On the contrary, when a whole token is encrypted, the length is much less revealing, as it is not clear what claim value causes the length variations.\r\n\r\nBoth solutions (adding white space and only allowing block-based modes) also increase the size of the SD-JWT.",
          "createdAt": "2022-06-15T13:07:35Z",
          "updatedAt": "2022-06-15T13:07:35Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I did mention ciphertext size revealing info about plain text length but with, \"having a hard time seeing how that could be meaningfully consequential\" clearly didn't think too hard about some of the cases that have real implications. And was forgetting/ignoring that GCM wasn't a bock mode. ",
          "createdAt": "2022-06-15T14:27:25Z",
          "updatedAt": "2022-06-15T14:27:25Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "The increased size is a lesser concern than the information leakage (the point is selective disclosure afterall).\r\n\r\nI always worry a bit more about stream ciphers in any event. For GCM mode, the developer now has to remember not to use the same IV twice, and any padding they engage in my lead to keystream data being revealed if they don't use a new IV for every field. So prohibiting to a block cipher may be safer, however, the information leakage is still there even with block ciphers (it is less pronounced though). \r\n\r\nAsking the developer to apply padding so that all blocks are of the same length is also going to cause implementation errors. The question is it would be as severe as when they just don't calculate and compare the hash values?",
          "createdAt": "2022-06-16T09:16:16Z",
          "updatedAt": "2022-06-16T09:16:16Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "> 1. A user wouldn't be able to edit a paper-based credential, of course. Many large scenarios would have a diverse set of users, ranging from those with smart phones, to those with more limited features phones, to those without any device. For equity reasons, all these users would need to be able to participate in the system. (This was the case, e.g., for the covid certificates; it was a hard requirement for the QR codes to be presentable in paper form.) Now, in this spectrum of user capabilities, an issuer can issue the same QR code encoding a SD-JWT+SVC to everyone. Paper printouts would disclose everything; limited feature phones could display the QR code, perhaps even edit down the SVC to hide some claims (since it only involves JSON editing and no crypto operations); full feature smart phones would have all the power of selective disclosure. A SD-JWT+SVC issued on paper can later be imported to a smart phone allowing selective disclosure down the line (imagine a kiosk where you get a certification of some sort for which they give you a print out that you can import at home on a device of your choice).\r\n> 2. Yes. The QR code serves only as transport here; which works well to bridge the electronic and physical world.\r\n\r\nI think if the holder does not need to edit the paper representation of the SCV, and the verifier is performing verification electronically, it does not matter whether the SVC contains cleartext (per original proposal) or ciphertext values (the alternate proposal from Brian). The holder would still present both the SD-JWT and the SVC (or equivalent) and the verifier would scan both and then do comparison electronically. ",
          "createdAt": "2022-06-16T09:25:12Z",
          "updatedAt": "2022-06-16T09:25:12Z"
        },
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "\r\n> I think if the holder does not need to edit the paper representation of the SCV, and the verifier is performing verification electronically, it does not matter whether the SVC contains cleartext (per original proposal) or ciphertext values (the alternate proposal from Brian). \r\n\r\nCorrect, hash-based or encryption-based selective disclosure is orthogonal to this design. There was another encryption being discussed: the encryption of SVC in order to \"unlock\" the disclosure by the client. This can be an option for some use cases, but shouldn't be mandated to accommodate this bearer token one.\r\n\r\n> The holder would still present both the SD-JWT and the SVC (or equivalent) and the verifier would scan both and then do comparison electronically.\r\n\r\nCorrect. They would be combined (dot-concatenated) in one string, encoded in one QR image (in this example), so there is only one \"scan\" for the verifier. ",
          "createdAt": "2022-06-16T14:44:21Z",
          "updatedAt": "2022-06-16T14:44:21Z"
        },
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "> Asking the developer to apply padding so that all blocks are of the same length is also going to cause implementation errors. The question is it would be as severe as when they just don't calculate and compare the hash values?\r\n\r\nI agree that the claims leakage mitigations are arguably at least as complex as the requirement to correctly check the digests. The outcome is however different: privacy leak vs. security bypass. Anyone involved with mDL design? It'd be interesting to see if they considered an encryption-based disclosure, and if so, why they didn't use that.\r\n\r\n(There is another encryption size issue that I raised elsewhere, which bloats the resulting artifacts, which is problematic for some use cases (e.g., QR encoding)).\r\n\r\n",
          "createdAt": "2022-06-16T14:52:35Z",
          "updatedAt": "2022-06-16T14:52:35Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "Good callout that the impact of a mistake is different. ",
          "createdAt": "2022-06-17T10:24:36Z",
          "updatedAt": "2022-06-17T10:24:36Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I created a proof of concept: https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/62\r\n\r\nIt uses a block cipher without any further leakage protections.\r\n\r\nWhat I learned:\r\n\r\n- The issuer has to make decisions on the encryption algorithms (enc and alg). The advantages and disadvantages of the various options are not obvious at all. The issuer has to match key sizes to those required by the algorithm chosen.\r\n- Creating the SD-JWT was straightforward (well supported by the library), but took a couple more lines of codes than the hash solution.\r\n- The verification is easier when the encryption is used - just decrypt the values.\r\n- The SD-JWT becomes much larger, the SVC and SD-JWT-R are smaller.",
          "createdAt": "2022-06-17T13:50:56Z",
          "updatedAt": "2022-06-17T13:59:28Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "FWIW, I'll briefly describe another solution here that I came up with during our call on Friday - and say why it doesn't work.\r\n\r\nThe idea I had was that the issuer creates an encryption key for each claim value, encrypts the claim value, and provides the *key* - not the ciphertext - in the SD-JWT.\r\nThe SVC would contain the ciphertexts instead of the keys, and the holder would release a subset of the ciphertexts to the verifier.\r\nThe verifier would use the keys signed by the issuer plus the ciphertexts to get the claim values. Implicitly, since authenticated encryption is used, the verifier would validate that the claim values have not been modified.\r\n\r\nThis is a nice construction as it combines the advantages of the hash and encryption approaches: The verifier cannot skip the check of the signature and the SD-JWT remains fairly small. Also, we don't unnecessarily share encrypted values.\r\n\r\nNow here's the problem: \r\n\r\n- If we use symmetric encryption, the holder would be able to create new ciphertexts for the signed keys. We can't allow that, so we must use **asymmetric encryption**.\r\n- This means that the issuer creates a key pair (public/private) for each claim value. If the issuer now uses (as usual) the public key to encrypt the claim values, he would need to **sign/share the private key in the SD-JWT.** That's bad, not only because private keys are not meant to be shared, but because you can often derive the public key from the private key and the holder could again create new ciphertexts. [Somebody (@christianpaquin @PieterKas) correct me if I'm wrong, but as far as I know \"you can't derive the public key from the private key\" is not a guarantee any encryption algorithm available in JOSE provides.]\r\n- Therefore, the issuer has to use the *private* key to encrypt and then sign/share the *public* key. This is essentially what happens in signatures, but the problem is, that JWE does not foresee this. This means that it is probably not easy to implement or error-prone when attempted.\r\n\r\nAlso, performance considerations.",
          "createdAt": "2022-06-20T12:48:37Z",
          "updatedAt": "2022-06-20T12:48:37Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "While trying to wrap my head around @danielfett's idea from the call last Friday I was inspired by the swapping of the placement of keys and ciphertexts and  stumbled on an approach that I think maybe does combine the advantages of the hash and encryption approaches. The idea is to use the authentication tag of a symmetric JWE similar to the hash value in the salted hash approach. Then include the rest of the JWE in the release container for each claim. For each released claim, the verifier appends the tag on the back of the rest of the JWE and decrypts to get the value. Because it's authenticated encryption, the decryption includes an integrity check. Treating the authenticated decryption as a single operation (which isn't strictly true but you'd have to go out of you way to separate them and mess it up) means the verifier cannot skip the tag/hash check while accessing the claim values. And the tags are under the signature of the SD-JWT. A bit more detail with examples follows.\r\n\r\nA symmetric encryption key is put in the `sd_tags` container of SD-JWT. Each claim value is JWE (symmetric AEAD) encrypted with the key and the authentication tag (the last part) is stripped off and placed as the value of the claim in the `sd_tags` container.  Conceptually in JSON:\r\n\r\n```\r\n{\r\n  \"sd_tags\": {\r\n    \"_key\": \"<base64url encoded symmetric encryption key>\",\r\n    \"sub\": \"<JWE authentication tag from encrypted sub>\",\r\n    \"email\": \"<JWE authentication tag from encrypted email>\",\r\n  }\r\n```\r\n\r\nThe releases container has each claim name and the associated JWE without the tag. Conceptually in JSON:\r\n\r\n```\r\n{\r\n  \"sd_release\": {\r\n    \"sub\": \"<JWE from encrypted sub without authentication tag>\",\r\n    \"email\": \"<JWE from encrypted email without authentication tag>\",\r\n  }\r\n}\r\n```\r\n\r\nWorking with the same raw claim values from the [Example 1 - Flat SD-JWT](https://www.ietf.org/archive/id/draft-fett-oauth-selective-disclosure-jwt-00.html#name-example-1-flat-sd-jwt) - an SD-JWT payload where the claim values are the JWE authentication tag would look like this:\r\n\r\n```\r\n{\r\n  \"iss\": \"https://example.com/issuer\",\r\n  \"iat\": 1516239022,\r\n  \"exp\": 1516247022,\r\n  \"sd_tags\": {\r\n    \"_key\": \"F4c66aQI4Qwf1Tcipct9sw\",\r\n    \"sub\": \"xS2kLH0Fc9wJbg5BvsaZsA\",\r\n    \"given_name\": \"RqzDHzn5ERa9hC47BzGPEQ\",\r\n    \"family_name\": \"g9lo2uNcWdmepNvtST4WuQ\",\r\n    \"email\": \"RHP8ky9Od5xUsQOSe_C-Mg\",\r\n    \"phone_number\": \"aNuk8EX_a3QN3c4Q2-oH2w\",\r\n    \"address\": \"rHUTycKpJ6Sz3qlYFhqe2w\",\r\n    \"birthdate\": \"rrXyxgQAOVCa367VVi3b1w\"\r\n  }\r\n}\r\n```\r\n\r\nThe SD-JWT signed by the issuer looks like this:\r\n\r\n`eyJhbGciOiJFUzI1NiJ9.eyJpc3MiOiJodHRwczovL2V4YW1wbGUuY29tL2lzc3VlciIsImlhdCI6MTUxNjIzOTAyMiwiZXhwIjoxNTE2MjQ3MDIyLCJzZF90YWdzIjp7Il9rZXkiOiJGNGM2NmFRSTRRd2YxVGNpcGN0OXN3Iiwic3ViIjoieFMya0xIMEZjOXdKYmc1QnZzYVpzQSIsImdpdmVuX25hbWUiOiJScXpESHpuNUVSYTloQzQ3QnpHUEVRIiwiZmFtaWx5X25hbWUiOiJnOWxvMnVOY1dkbWVwTnZ0U1Q0V3VRIiwiZW1haWwiOiJSSFA4a3k5T2Q1eFVzUU9TZV9DLU1nIiwicGhvbmVfbnVtYmVyIjoiYU51azhFWF9hM1FOM2M0UTItb0gydyIsImFkZHJlc3MiOiJySFVUeWNLcEo2U3ozcWxZRmhxZTJ3IiwiYmlydGhkYXRlIjoicnJYeXhnUUFPVkNhMzY3VlZpM2IxdyJ9fQ.Mwbd8K6nrQ8clBbe-xFYGi3KofRO8cordH5pL0QPu41MPE2Ol75fzRFc6eGNLJobM3SmSJU9mW8T-PeDxMw70A\r\n`\r\n\r\nThe release container has the claim names and encrypted values omitting the tag (the first four parts of the JWE): \r\n\r\n```\r\n{\r\n  \"sd_release\": {\r\n    \"sub\": \"eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4R0NNIn0..2CPSJxfHXsIvdiXr.8SnXSG7i1G0RUBzCjkDpjmNCrZMASD44TG-sQgvr2G_xfB6L\",\r\n    \"given_name\": \"eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4R0NNIn0..Ux6LFw7GXlt14Pcn.ULtuGg\",\r\n    \"family_name\": \"eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4R0NNIn0..NfEty8WYlTuYLjqh.oLij\",\r\n    \"email\": \"eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4R0NNIn0..A1l60VKGahQKMoAz.S-MxvTsdVwcr0hov4c0i7Cd0EA\",\r\n    \"phone_number\": \"eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4R0NNIn0..Ye0-LAyu4t5eUuEr.NOQETMI6jkZasNHsSVTt\",\r\n    \"address\": \"eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4R0NNIn0..JV19LMhFt8pqnd_g.-apgQvHiTqmV2t9yFAMYDmIZOmALWM2ekcxkeQW9T5LfOOTW3tmYgcUtmd0mu2vA_jAr5lp6GVVFaxfWVceDUHooJnvFK96Mt3Kti-aombm7pTYTUCVhDw\",\r\n    \"birthdate\": \"eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4R0NNIn0..FQhkucvj2FcVWIwd.ll5yTiX8yN-7ig\"\r\n  }\r\n}\r\n```\r\nThe release container base64url encoded:\r\n\r\n`eyJzZF9yZWxlYXNlIjp7InN1YiI6ImV5SmhiR2NpT2lKa2FYSWlMQ0psYm1NaU9pSkJNVEk0UjBOTkluMC4uMkNQU0p4ZkhYc0l2ZGlYci44U25YU0c3aTFHMFJVQnpDamtEcGptTkNyWk1BU0Q0NFRHLXNRZ3ZyMkdfeGZCNkwiLCJnaXZlbl9uYW1lIjoiZXlKaGJHY2lPaUprYVhJaUxDSmxibU1pT2lKQk1USTRSME5OSW4wLi5VeDZMRnc3R1hsdDE0UGNuLlVMdHVHZyIsImZhbWlseV9uYW1lIjoiZXlKaGJHY2lPaUprYVhJaUxDSmxibU1pT2lKQk1USTRSME5OSW4wLi5OZkV0eThXWWxUdVlManFoLm9MaWoiLCJlbWFpbCI6ImV5SmhiR2NpT2lKa2FYSWlMQ0psYm1NaU9pSkJNVEk0UjBOTkluMC4uQTFsNjBWS0dhaFFLTW9Bei5TLU14dlRzZFZ3Y3IwaG92NGMwaTdDZDBFQSIsInBob25lX251bWJlciI6ImV5SmhiR2NpT2lKa2FYSWlMQ0psYm1NaU9pSkJNVEk0UjBOTkluMC4uWWUwLUxBeXU0dDVlVXVFci5OT1FFVE1JNmprWmFzTkhzU1ZUdCIsImFkZHJlc3MiOiJleUpoYkdjaU9pSmthWElpTENKbGJtTWlPaUpCTVRJNFIwTk5JbjAuLkpWMTlMTWhGdDhwcW5kX2cuLWFwZ1F2SGlUcW1WMnQ5eUZBTVlEbUlaT21BTFdNMmVrY3hrZVFXOVQ1TGZPT1RXM3RtWWdjVXRtZDBtdTJ2QV9qQXI1bHA2R1ZWRmF4ZldWY2VEVUhvb0pudkZLOTZNdDNLdGktYW9tYm03cFRZVFVDVmhEdyIsImJpcnRoZGF0ZSI6ImV5SmhiR2NpT2lKa2FYSWlMQ0psYm1NaU9pSkJNVEk0UjBOTkluMC4uRlFoa3VjdmoyRmNWV0l3ZC5sbDV5VGlYOHlOLTdpZyJ9fQ\r\n`\r\n\r\n\r\n",
          "createdAt": "2022-06-20T14:47:23Z",
          "updatedAt": "2022-06-27T21:49:36Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I like this idea! Best of both worlds, I guess. \r\n\r\nAlthough fiddling with the JWE may be a bit tricky to communicate and get right.\r\n\r\nI would suggest to put the key into a separate \"sd_key\" claim. I heard the underscore does not imply magic abilities! :-D",
          "createdAt": "2022-06-20T15:00:48Z",
          "updatedAt": "2022-06-20T15:00:48Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Authentication tags in SD-JWT\nEncrypted values without tags in SVC and SD-JWT-R.\n\nthe benefit of new approach compared to the original one it that it solved the problem that the length of the encrypted values is different by using AEAD instead of padding, correct?\n\nSent from my iPhone\n________________________________\nFrom: Daniel Fett ***@***.***>\nSent: Monday, June 20, 2022 8:00:58 AM\nTo: oauthstuff/draft-selective-disclosure-jwt ***@***.***>\nCc: Kristina Yasuda ***@***.***>; Mention ***@***.***>\nSubject: Re: [oauthstuff/draft-selective-disclosure-jwt] encrypting values in SD-JWT (Issue #30)\n\n\nI like this idea! Best of both worlds, I guess.\n\nAlthough fiddling with the JWE may be a bit tricky to communicate and get right.\n\nI would suggest to put the key into a separate \"sd_key\" claim. I heard the underscore does not imply magic abilities! :-D\n\n\u2014\nReply to this email directly, view it on GitHub<https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Foauthstuff%2Fdraft-selective-disclosure-jwt%2Fissues%2F30%23issuecomment-1160555581&data=05%7C01%7Ckristina.yasuda%40microsoft.com%7C92852efc24bc44c5cb5c08da52cdaf8d%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C637913340616380231%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&sdata=PymDTslFXwXTiTBEE90PK6br458atyahAfUXdH5Sdeg%3D&reserved=0>, or unsubscribe<https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAMTNZU3IJ6F2UH27I33NM7LVQCBSVANCNFSM5YAQ5GCQ&data=05%7C01%7Ckristina.yasuda%40microsoft.com%7C92852efc24bc44c5cb5c08da52cdaf8d%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C637913340616380231%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&sdata=rCofN%2BUQgYLH5fAt%2FW%2F04xbA7PrdJoKBUoNWf3OcsQs%3D&reserved=0>.\nYou are receiving this because you were mentioned.Message ID: ***@***.***>\n",
          "createdAt": "2022-06-20T15:31:47Z",
          "updatedAt": "2022-06-20T15:31:47Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Agree that the JWE fiddling may be a bit tricky to communicate. But the actual fiddling operations are a string split for the issuer and a string concatenation for the verifier. So not particularly difficult. \r\n\r\nI should have anticipated the questioning of my magic abilities! :-D A separate \"sd_key\" claim would probably be better. \r\n",
          "createdAt": "2022-06-20T15:32:30Z",
          "updatedAt": "2022-06-20T15:32:30Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Kinda, yeah. Keeping the ciphertext out of the SD-JWT removes the potential info leakage of the size of the ciphertext revealing info about the plaintext.  ",
          "createdAt": "2022-06-20T15:43:32Z",
          "updatedAt": "2022-06-20T15:43:32Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "> FWIW, I'll briefly describe another solution here that I came up with during our call on Friday - and say why it doesn't work.\r\n> \r\n> The idea I had was that the issuer creates an encryption key for each claim value, encrypts the claim value, and provides the _key_ - not the ciphertext - in the SD-JWT. The SVC would contain the ciphertexts instead of the keys, and the holder would release a subset of the ciphertexts to the verifier. The verifier would use the keys signed by the issuer plus the ciphertexts to get the claim values. Implicitly, since authenticated encryption is used, the verifier would validate that the claim values have not been modified.\r\n> \r\n> This is a nice construction as it combines the advantages of the hash and encryption approaches: The verifier cannot skip the check of the signature and the SD-JWT remains fairly small. Also, we don't unnecessarily share encrypted values.\r\n> \r\n> Now here's the problem:\r\n> \r\n> * If we use symmetric encryption, the holder would be able to create new ciphertexts for the signed keys. We can't allow that, so we must use **asymmetric encryption**.\r\n> * This means that the issuer creates a key pair (public/private) for each claim value. If the issuer now uses (as usual) the public key to encrypt the claim values, he would need to **sign/share the private key in the SD-JWT.** That's bad, not only because private keys are not meant to be shared, but because you can often derive the public key from the private key and the holder could again create new ciphertexts. [Somebody (@christianpaquin @PieterKas) correct me if I'm wrong, but as far as I know \"you can't derive the public key from the private key\" is not a guarantee any encryption algorithm available in JOSE provides.]\r\n> * Therefore, the issuer has to use the _private_ key to encrypt and then sign/share the _public_ key. This is essentially what happens in signatures, but the problem is, that JWE does not foresee this. This means that it is probably not easy to implement or error-prone when attempted.\r\n> \r\n> Also, performance considerations.\r\n\r\n@danielfett I was thinking about the practical implications of the proposal  after our call and agree that in practice there will be opportunities for implementation errors. \r\n\r\nIn theory, the mathematical properties of public and private key pairs are equivalent. However, most implementations optimise for speed by picking fixed values and parameters (in the case of RSA, the public exponent is often short and fixed as 65537). It often also includes other parameters that can be used to compute intermediate steps, which in turn may be handy when optimising the implementation, but ends up helping the cryptanalyst. It could be overcome, but would make use of standard crypto libraries difficult, leading to the point of custom crypto library implementations, which is worse in my view than the ill we are trying to cure (comparing hashes). So agreed that this particular approach may not get us there, but @bc-pi iteration looks interesting ;)",
          "createdAt": "2022-06-20T19:22:04Z",
          "updatedAt": "2022-06-20T19:23:34Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "@bc-pi for your scheme, I think we are restricting algorithms to only those that support authenticated encryption. I think that is fine as there is a good supply of chaining modes that support it. ",
          "createdAt": "2022-06-20T19:36:30Z",
          "updatedAt": "2022-06-20T19:36:30Z"
        },
        {
          "author": "fabian-hk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@bc-pi I have implemented your encryption approach in Kotlin: [https://github.com/IDunion/SD-JWT-Kotlin/tree/encryption-proposal](https://github.com/IDunion/SD-JWT-Kotlin/tree/encryption-proposal)\r\n\r\nIt was quite easy to implement. The only thing I was struggling a little bit with was the JSON encoding inside the JWE. But this is maybe related to the JSON library I am using. The size of the SD-JWT is roughly the same but the SVC (or however we call the other container) is obviously a little bit bigger but not extremely large. If we want to do an exact comparison of the sizes I am happy to contribute.\r\n\r\nMaybe it would be good to include the JWE encryption algorithm as a claim in the SD-JWT (same as the hash algorithm). I think it would make the implementation of different algorithms easier.",
          "createdAt": "2022-06-24T14:57:41Z",
          "updatedAt": "2022-06-24T15:07:39Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Some feedback was received second hand from a crypto expert at a company that has actual crypto experts - and they indicated the tag scheme is not going to work. If the attacker knows the key + tag, it's apparently not too difficult to forge a message with new ciphertext that authenticates against the same tag.  I was (apparently naively) thinking that the AEAD tag provides similar properties to a secure hash or hmac (one of the JWE constructions uses AES CBC + HMAC SHA2 to provide an AEAD, which influenced my thinking) - particularly something like second preimage resistance that would make such forgery infeasible - but sounds like my assumption there is wrong. ",
          "createdAt": "2022-07-01T21:04:42Z",
          "updatedAt": "2022-07-01T21:04:42Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I'd just like to add that this is a very good point - AEAD assumes the attacker does not know the key, but here they key is known to all parties. \r\n\r\nSo to summarize the options we have:\r\n\r\n1. Hashing, as currently in the main branch. Cons: The potential footgun of missing the hash check, slightly awkward JSON-in-JSON encoding. Pros: Aligned with mDL and established there, relatively compact, easy to implement.\r\n2. Encryption with release of key. Cons: A length sidechannel, having to select algorithms carefully, and potentially very large SD-JWTs. Relying on lesser used features (JWE instead of JWS+hashing). Pros: No footgun for the verifier.\r\n3. Encryption with tag/key in SD-JWT and release of ciphertext. Cons: Relying on a crypto property we should not rely on. Pros: No footgun, smaller SD-JWTs.\r\n\r\nI think it is clear that (3) is out. \r\nComparing (1) and (2), I think that (1) is the better option. Yes, the footgun of (1) is a large one, but at least it is only one. We can make an attempt to educate implementers early on and to provide tools (e.g., test vectors) to support correct implementations.",
          "createdAt": "2022-07-04T08:15:47Z",
          "updatedAt": "2022-07-04T08:15:47Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "We discussed this further and hashing seems to be the best alternative for now. I'll close this issue for now.",
          "createdAt": "2022-07-11T16:47:07Z",
          "updatedAt": "2022-07-11T16:47:07Z"
        }
      ]
    },
    {
      "number": 31,
      "id": "I_kwDOHTmVzM5LYAQN",
      "title": "Binding between SD-JWT and SD-JWT Salt/Value Container (SVC)",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/31",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "Section 4.3 proposes a combined format of appending the SD-JWT Salt/Value Container (SVC) to the SD-JWT. To avoid mix-ups and improve reliability it may be worth establishing an explicit binding between the SD-JWT Salt/Value Container (SVC) to the SD-JWT by, for example, adding an attribute to the SD-JWT that includes the hash of the SD-JWT Salt/Value Container (SVC). This would give the holder a way to easily verify if the two structures are associated and avoid mix-ups.",
      "createdAt": "2022-06-08T11:16:16Z",
      "updatedAt": "2022-06-29T01:13:59Z",
      "closedAt": "2022-06-29T01:13:59Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "The purpose would be for the holder to better manage SD-JWT and SVC, correct? because SVC is not being sent from the holder to the verifier. ",
          "createdAt": "2022-06-08T17:49:36Z",
          "updatedAt": "2022-06-08T17:49:36Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "> \r\n\r\nYes - the thing I worry about is if that the holder (or the engineer implementing the handling of the artefacts at the holder/wallet) makes a mistake or looses the relationship between the two artefacts. This can result in security and/or reliability issues.",
          "createdAt": "2022-06-09T16:44:07Z",
          "updatedAt": "2022-06-09T16:44:07Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Do we actually need this? I have the feeling that through the existing hashes, there is already a good binding.",
          "createdAt": "2022-06-13T10:55:46Z",
          "updatedAt": "2022-06-13T10:55:46Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "I think the existing hashes could be used, but there should be some clear guidance that the verifier should correlate the hashes between the SCV and SD-JWT. \r\n\r\nIf we make it explicit (e.g. the holder should only accept the SVC and SD-JWT pairing if all the hashes match (computed, not just string compared), it could work.  ",
          "createdAt": "2022-06-13T11:36:55Z",
          "updatedAt": "2022-06-13T11:36:55Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "As per my comments on some of the other proposals, we should mirror the simplicity of mDL's salted hash claims, and stop there.  We need to resist the temptation to make things more complicated than they need to be.",
          "createdAt": "2022-06-13T12:47:45Z",
          "updatedAt": "2022-06-13T12:47:45Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I'm not convinced we need any of this. The binding by the existing hashes is already quite strong. \r\n\r\nWe can define that the holder checks that (a) the structure in the SVC actually matches the one in the SD-JWT and that (b) the holder checks that the hashes match. That's really all we need.",
          "createdAt": "2022-06-17T07:36:30Z",
          "updatedAt": "2022-06-17T07:36:30Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "Agreed, that would achieve the same result. Some proposed text:\r\n\r\nThe SVC and SD-JWT are implicitly linked through the hash values of the claims in the SVC that is included in the SD-JWT. To ensure that the correct SVC and SD-JWT pairings are being used, the holder should verify that all the claims in the SVC are present in the SD-JWT, that there are no claims in the SD-JWT that are not in the SVC and that the hashes of the claims in the SVC match those in the SD-JWT.",
          "createdAt": "2022-06-17T08:46:42Z",
          "updatedAt": "2022-06-17T08:46:42Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "agreed, refactored the PR #34.",
          "createdAt": "2022-06-27T05:20:25Z",
          "updatedAt": "2022-06-27T05:20:25Z"
        }
      ]
    },
    {
      "number": 32,
      "id": "I_kwDOHTmVzM5LYBpy",
      "title": "Encrypting the SD-JWT Salt/Value Container (SVC)",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/32",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "duplicate"
      ],
      "body": "Since this is a privacy preserving mechanism, it may be worth adding an option to encrypt the SD-JWT Salt/Value Container (SVC) using the holders public key. We know from experience that tokens end up in log files and get exfiltrated that way, so adding an option to encrypt the information protects against this accidental leakage. \r\n\r\nIf we consider this option, it would be advisable to use a dedicated holder encryption key to avoid issues from using the same keys for encrypting and signing information.",
      "createdAt": "2022-06-08T11:21:28Z",
      "updatedAt": "2022-07-11T16:20:53Z",
      "closedAt": "2022-07-11T16:20:53Z",
      "comments": [
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "I am against requiring encryption as part of the basic SD-JWT data structure. We should be emulating the simplicity of mDL's use of salted hashes and stop there.",
          "createdAt": "2022-06-13T12:38:10Z",
          "updatedAt": "2022-06-13T12:38:10Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "Salting in the SD-JWT provides blinding so we wouldn't need encryption there, but I do think it is prudent to protect the confidentiality of the SVC. It is another kind of artefact that will end up in log files, get leaked, stolen or mislaid, just like we have seen with bearer tokens. Since it contains all the information we are trying not to disclose, making an effort to protect it may be prudent.",
          "createdAt": "2022-06-13T13:57:34Z",
          "updatedAt": "2022-06-13T13:57:34Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "Encryption may be useful in some cases and it would be good to have it in the specs by design, as an additional feature, this would be very appreciated in some contexts",
          "createdAt": "2022-06-18T08:18:25Z",
          "updatedAt": "2022-06-18T08:18:25Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing as duplicate of #33 ",
          "createdAt": "2022-07-11T16:20:53Z",
          "updatedAt": "2022-07-11T16:20:53Z"
        }
      ]
    },
    {
      "number": 33,
      "id": "I_kwDOHTmVzM5LYERW",
      "title": "Including an encrypted version of the SD-JWT Salt/Value Container (SVC) in the SD-JWT",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/33",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "duplicate"
      ],
      "body": "It may be interesting to consider including the SD-JWT Salt/Value Container (SVC) in the SD-JWT. This way there would be only one structure to pass around and it won't be possible to mix-up SD-JWT Salt/Value Container (SVC) and SD-JWT pairings. The SD-JWT Salt/Value Container (SVC) can be encrypted using a holder public key (using a dedicated encryption key), so privacy is preserved, and only the holder can decrypt that part of the structure before doing a selective disclosure. It also prevent errors where the developer may get confused and send the SD-JWT Salt/Value Container (SVC) to a verifier. \r\n\r\nIf the information is already encrypted, the developer only needs to store the single structure and it would be privacy preserving at rest by default (to circumvent the default privacy at rest feature of the data structure, the developer would need to do extra work to decrypt and store the information in clear text - something that can be called out as a risk in the security considerations).\r\n\r\nThe downside is a larger data structure and the need for encryption keys and should be weighed against the convenience of dealing with a single data structure.",
      "createdAt": "2022-06-08T11:30:58Z",
      "updatedAt": "2022-07-11T16:33:47Z",
      "closedAt": "2022-07-11T16:33:47Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "How is this issue different from #37, @PieterKas ?",
          "createdAt": "2022-06-10T21:32:16Z",
          "updatedAt": "2022-06-10T21:32:16Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/37 is broader and covers not just encapsulation of the SVC in the SD-JWT, but also the encapsulation of the SD-JWT in the SD-JWT-R.",
          "createdAt": "2022-06-13T11:40:12Z",
          "updatedAt": "2022-06-13T11:40:12Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "I am against requiring encryption as part of the basic SD-JWT data structure. We should be emulating the simplicity of mDL's use of salted hashes and stop there.",
          "createdAt": "2022-06-13T12:38:47Z",
          "updatedAt": "2022-06-13T12:38:47Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "If we are pursuing a strategy of concatenation rather than encapsulation, the linking between the data structures needs to be clear (e.g. verification of all hashes before accepting that the data structures should be paired).",
          "createdAt": "2022-06-13T14:01:09Z",
          "updatedAt": "2022-06-13T14:01:09Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing as a duplicate of Issue #37 ",
          "createdAt": "2022-07-11T16:33:47Z",
          "updatedAt": "2022-07-11T16:33:47Z"
        }
      ]
    },
    {
      "number": 36,
      "id": "I_kwDOHTmVzM5LbPQO",
      "title": "How to send SD-JWT and SD-JWT-R in a presentation",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/36",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "discuss-first"
      ],
      "body": "Per https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/19#issuecomment-1144794055 in PR https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/19.\r\n\r\nTwo options how to the Holder sends SD-JWT and SD-JWT-R to the Verifier\r\n1. as separate JWTs -> six period-separated elements\r\n2. as one JWT (SD-JWT is a string inside SD-JWT-R) -> four period-separated elements\r\n\r\npersonally I am in favor of an option 2, also given the discussion in Issuer #37 on data structures potentially getting dissociated ",
      "createdAt": "2022-06-09T00:01:02Z",
      "updatedAt": "2022-10-24T20:02:11Z",
      "closedAt": "2022-10-24T20:02:10Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "If the SD-JWT is a string inside the SD-JWT-R, this will create a larger data structure (base64 encoded base64). ",
          "createdAt": "2022-06-13T07:21:53Z",
          "updatedAt": "2022-06-13T07:21:53Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree with @danielfett that the double base64url-encoding resulting from option 2 is potentially problematic.",
          "createdAt": "2022-06-13T12:40:51Z",
          "updatedAt": "2022-06-13T12:40:51Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Current choice is to concatenate SD-JWT and HS-Disclosures JWT: https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/155/files#diff-40bc3800dd9a7d4411799637caf0b01f82a01242d57264a2e4beb408c3835704R831\r\n\r\nNoting that it is inconsistent with how vc-data-model defined for a vc to be sent inside a vp",
          "createdAt": "2022-10-24T20:02:10Z",
          "updatedAt": "2022-10-24T20:02:10Z"
        }
      ]
    },
    {
      "number": 37,
      "id": "I_kwDOHTmVzM5LjCcH",
      "title": "Encapsulation instead of concatenation of data structures.",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/37",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The concatenation of data structures may result in reliability problems (the data structures may get dissociated), or could be an entry point for an attacker (swapping out data structures, especially if there is no binding between them).\r\n\r\nIt may be interesting to consider encapsulation instead of concatenation. In that approach the issuer will generate a SD-JWT that contains the hashes and the SVC. The SVC will be encrypted with the holders public key, so that a verifier cannot access the SVC data. \r\n\r\nThe holder will decrypt the SVC structure in the SD-JWT, decide which claims to present, and then include them in the SD-JWT-R. To avoi concatenation of the SD-JWT and SD-JWT-R, the SD-JWT can include the SD-JWT as an attribute. The result is a larger data structure, but it is all in one place, bound together, reducing the risk of accidental or malicious dissosiation. \r\n\r\nSomething like:\r\n\r\nSD-JWT = (hashes, SVC encrypted with holders public key)\r\nSD-JWT-R = (disclosed claims, SD, JWT)\r\n\r\nThen:\r\n\r\n1. Issuer sends SD-JWT to Holder\r\n2. Holder verifies SD-JWT, decrypts SVC, selects attributes to disclose, generate SD-JWT-R (which now includes the SD-JWT)\r\n3. Verifier verifies SD-JWT-R (JD-SWT is encapsulated in the SD-JWT, the SD-JWT does include the SVC, but it is privacy protected, so no risk of unauthorised disclosure).\r\n\r\nWith encapsulation, the same information gets passed around. Encrypting the SVC with the holders public key allows it to be included in the SD-JWT, without risk of unauthorised disclosure to the verifier when the SD-JWT is processed by the verifier. Encapsulating the SD-JWT in the SD-JWT-R binds the two structures together and removes any risks of dissociating of the data structures.\r\n\r\n",
      "createdAt": "2022-06-10T12:27:03Z",
      "updatedAt": "2022-12-15T17:47:26Z",
      "closedAt": "2022-12-15T17:47:26Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "very interesting. there is step 0 where the holder needs to send a encPubKey to the Issuer so that the Issuer can encrypt the SVC, which should not be the same as the signPubKey used to sign SD-JWT-R for holder binding. \r\n\r\nwould you still want to bind SVC and SD-JWT as proposed in #31?",
          "createdAt": "2022-06-10T18:18:29Z",
          "updatedAt": "2022-06-10T18:18:29Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "- Sending 'unnecessary' encrypted data to the verifier is something we should avoid in my opinion. It makes the privacy of the claims depending on the strength of the encryption. We have seen weak encryption keys and leaked encryption keys in the past. If a verifier stores the encrypted values, it can try to decrypt them later on (forward secrecy), for example, after it turns out that the encryption algorithm is broken. \r\n- This makes implementations depend on JWE libraries. In my experience, JWS in libraries is much more mature and available than JWE. We should not make this spec depend on JWE.\r\n- Larger data structure: base64 in base64 plus the encryption.\r\n\r\nOverall, this proposal adds a lot of security concerns.\r\n\r\nI do not see how manipulating the SVC or disassociating it from the SD-JWT leads to practical security problems. Unless we find practical concerns, I would propose to stick with the current approach.",
          "createdAt": "2022-06-13T09:00:58Z",
          "updatedAt": "2022-06-13T09:00:58Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "@danielfett can you clarify the security concerns? \r\n\r\nIt is unclear how leaving the content of the SVC in cleartext provides better privacy assurances than encrypting it. We already know that tokens and authorization codes end up in log files, and the SVC will as well. Attackers will (and do) hoover up these artefacts, so protecting their contents seems appropriate. I worry about designing a privacy preserving feature that passes the data it seeks to control around in cleartext. \r\n\r\nIn terms of complexity, encrypting the entire structure will be much simpler than the field level encryption being proposed in https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/30. From an implementation perspective we already encrypt token contents in certain cases to preserve privacy, so there is evidence that this can be achieved at scale. Encrypting an entire structure with a single key does come across as simpler than encrypting each field with a different \r\n\r\nThe concerns about weak keys and weak algorithms can be addressed by specifying the algorithm suits that should be used and avoiding constructs like Alg:NONE. Conformance suites can enforce this in time. \r\n\r\nIt is an interesting point to consider forward secrecy in the context of selective disclosure. There are ways to solve for that through algorithm selection, ephemeral keys or just rolling keys. It still feels like a better problem to have than not protecting the SVC at all and probably applies to https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/30 as well. I do agree that including the encrypted SVC in the SD-JWT expands the impact of a future algorithm failure as there are more places where the encrypted payload will be available. However, encrypting the SVC and keeping it outside of the SD-JT still feels like a better option, even in the face of a possible future algorithm compromise (at least there is some protection in the present).",
          "createdAt": "2022-06-13T11:20:56Z",
          "updatedAt": "2022-06-13T11:32:52Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "Per my comment https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/36#issuecomment-1153865303 , encapsulation results in unnecessary space bloat, which we should avoid.",
          "createdAt": "2022-06-13T12:42:58Z",
          "updatedAt": "2022-06-13T12:42:58Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "If we opt for concatenation, then we need to make sure there is explicit guidance on how to link the structures (e.g. comparison of hash values).",
          "createdAt": "2022-06-13T14:03:46Z",
          "updatedAt": "2022-06-13T14:03:46Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "the guidance on how to link the structures has been addressed in several PRs. \r\n\r\nHowever, keeping this open to discuss if we want to add an option to encrypt II-Disclosures Object (former SVC) - @danielfett ?",
          "createdAt": "2022-10-24T20:07:09Z",
          "updatedAt": "2022-10-24T20:07:09Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Editors believe that encapsulating approach would significantly complicate the approach, while the risk of the mapping between hashes and disclosures seems to be significantly low based on the initial implementation feedback",
          "createdAt": "2022-12-15T17:47:26Z",
          "updatedAt": "2022-12-15T17:47:26Z"
        }
      ]
    },
    {
      "number": 44,
      "id": "I_kwDOHTmVzM5Ln6Iw",
      "title": "Restructure: use only Example 1 of 'flat' SD-JWT in the main text and move Example 2 to the Annex.",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/44",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "insight after doing a PR #43",
      "createdAt": "2022-06-13T00:47:58Z",
      "updatedAt": "2022-06-23T15:06:00Z",
      "closedAt": "2022-06-23T15:06:00Z",
      "comments": [
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm fine with that restructuring choice.",
          "createdAt": "2022-06-13T12:43:44Z",
          "updatedAt": "2022-06-13T12:43:44Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "addressed in PR #71 ",
          "createdAt": "2022-06-23T15:06:00Z",
          "updatedAt": "2022-06-23T15:06:00Z"
        }
      ]
    },
    {
      "number": 47,
      "id": "I_kwDOHTmVzM5LrLpM",
      "title": "Break down the examples in more granular steps",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/47",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "danielfett"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "",
      "createdAt": "2022-06-13T15:27:26Z",
      "updatedAt": "2022-10-24T20:00:30Z",
      "closedAt": "2022-10-24T20:00:30Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "requested by @christianpaquin\r\n@danielfett is this something you could work on?",
          "createdAt": "2022-06-16T10:55:41Z",
          "updatedAt": "2022-06-16T10:55:41Z"
        },
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "Specifically, it'd be helpful to describe each of the dotted component, e.g., for a non-keybound token: `<JWS Header>.<JWS payload>.<JWS signature>.<SVC>`",
          "createdAt": "2022-06-16T14:19:15Z",
          "updatedAt": "2022-06-16T14:19:15Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I addressed this here: https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/155/files#diff-40bc3800dd9a7d4411799637caf0b01f82a01242d57264a2e4beb408c3835704R800-R817\r\n\r\nand here: https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/155/files#diff-40bc3800dd9a7d4411799637caf0b01f82a01242d57264a2e4beb408c3835704R652-R668",
          "createdAt": "2022-10-20T09:01:46Z",
          "updatedAt": "2022-10-20T09:01:46Z"
        }
      ]
    },
    {
      "number": 48,
      "id": "I_kwDOHTmVzM5LrPdc",
      "title": "Clarify signed vs unsigned SD-JWT-R",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/48",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "the main purpose of signing SD-JWT-R is binding it to the transaction (nonce, aud)?\r\n-> clarify the use-case\r\nunsigned by default, can be signed.",
      "createdAt": "2022-06-13T15:39:36Z",
      "updatedAt": "2022-06-29T01:14:17Z",
      "closedAt": "2022-06-29T01:14:17Z",
      "comments": []
    },
    {
      "number": 49,
      "id": "I_kwDOHTmVzM5LrQiM",
      "title": "allow unsigned SD-JWT?",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/49",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "describe why always sign if we are mandating to do so. ",
      "createdAt": "2022-06-13T15:43:29Z",
      "updatedAt": "2022-06-17T07:15:16Z",
      "closedAt": "2022-06-17T07:15:16Z",
      "comments": [
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "@Sakurann Proposed text for why the SD-JWT has to be signed (perhaps to be included in the security considerations?)\r\n\r\nThe SD-JWT is always signed by the issuer to prevent claims from being added or modified without detection. The verifier must always check the signature to ensure that the SD-JWT has not been tampered with and that the claims included were not modified since the SD-JWT was signed by the issuer. If the signature on the SD-JWT cannot be verified the SD-JWT should be rejected. If the SD-JWT is not signed, an attacker may modify claims (e.g. change the \"sub\" attribute to identify another subject or \"address\" to modify a shipping address for goods ordered), thereby forging the issuer assertion. An attacker may also choose to add optional claims that the issuer had not asserted (e.g. adding an attribute indicating an academic qualification).\r\n\r\n",
          "createdAt": "2022-06-16T13:47:32Z",
          "updatedAt": "2022-06-16T15:37:55Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "thanks Pieter, incorporated into the PR.",
          "createdAt": "2022-06-17T04:46:36Z",
          "updatedAt": "2022-06-17T04:46:36Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Thanks for preparing the pull request. Approved and merged!",
          "createdAt": "2022-06-17T07:15:16Z",
          "updatedAt": "2022-06-17T07:15:16Z"
        }
      ]
    },
    {
      "number": 50,
      "id": "I_kwDOHTmVzM5LrWuO",
      "title": "MTI hash algorithm?",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/50",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "per @PieterKas's comment.",
      "createdAt": "2022-06-13T16:05:29Z",
      "updatedAt": "2022-08-25T23:04:40Z",
      "closedAt": "2022-08-25T23:04:40Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR merged",
          "createdAt": "2022-08-25T23:04:40Z",
          "updatedAt": "2022-08-25T23:04:40Z"
        }
      ]
    },
    {
      "number": 51,
      "id": "I_kwDOHTmVzM5LzdHk",
      "title": "More explanation on \"precise JSON encoding can vary\"",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/51",
      "state": "CLOSED",
      "author": "kushaldas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Talking about https://www.ietf.org/archive/id/draft-fett-selective-disclosure-jwt-00.html#section-4.1.1.1-3\r\n\r\nI think we should add one more line to explain that depending on the programming language & exact JSON library, the JSON encoded ordered array (which is the input to the hash function) may look different, but all are valid JSON. This also means the hash output may not be the same even for the same `salt` & `value`.\r\n\r\nI spent 2 hours yesterday while totally missing a space in the JSON encoded string, which is not there in Rust JSON encoding, but in the  Python output.",
      "createdAt": "2022-06-15T07:17:33Z",
      "updatedAt": "2022-10-17T07:33:41Z",
      "closedAt": "2022-10-17T07:33:41Z",
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "I think that thi issue could be closed when this proposal will be approved (and implemented)\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/27#issuecomment-1157732753\r\n\r\nall the values will be a JSON Object and not escaped string",
          "createdAt": "2022-06-25T22:17:11Z",
          "updatedAt": "2022-06-25T22:17:11Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "This has been addressed with PR #146.",
          "createdAt": "2022-10-17T07:33:41Z",
          "updatedAt": "2022-10-17T07:33:41Z"
        }
      ]
    },
    {
      "number": 53,
      "id": "I_kwDOHTmVzM5L5_Vv",
      "title": "Reference Python implementation is not verifying HOLDER binding via sub_jwk",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/53",
      "state": "CLOSED",
      "author": "kushaldas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "According to the HOLDER key (4.1.1.2), we should have the HOLDER_PUBLIC_KEY as `sub_jwk` in the *SD-JWT*, right now the reference implementation is attaching the ISSUER_PUBLIC_KEY to *SD-JWT*. We should fix this and then verify that the actual HOLDER's key matches with the `sub_jwk`.",
      "createdAt": "2022-06-16T12:24:51Z",
      "updatedAt": "2022-06-17T07:12:26Z",
      "closedAt": "2022-06-17T07:12:26Z",
      "comments": []
    },
    {
      "number": 57,
      "id": "I_kwDOHTmVzM5L-l_K",
      "title": "add a JSON-encoded mDL example",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/57",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-06-17T07:54:47Z",
      "updatedAt": "2022-10-18T15:56:54Z",
      "closedAt": "2022-10-18T15:56:53Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "there is no JSON-encoded ISO mDL defined right now. \r\nalso duplicate of Issue #144.",
          "createdAt": "2022-10-18T15:56:53Z",
          "updatedAt": "2022-10-18T15:56:53Z"
        }
      ]
    },
    {
      "number": 59,
      "id": "I_kwDOHTmVzM5L_cVW",
      "title": "Complete W3C VC/VP Example",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/59",
      "state": "CLOSED",
      "author": "tlodderstedt",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "It unclear to me how the key for holder binding is represented and used in the example 4 in the appendix. Could you please add an explanation (perhaps JWT headers are required as well).",
      "createdAt": "2022-06-17T11:34:16Z",
      "updatedAt": "2022-10-24T17:05:07Z",
      "closedAt": "2022-10-24T17:05:07Z",
      "comments": [
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I recommend use of raw public keys (JWKs) in this example. ",
          "createdAt": "2022-06-17T11:35:08Z",
          "updatedAt": "2022-06-17T11:35:08Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "need to agree `sub_jwk` vs `cnf` re Issue #77 ",
          "createdAt": "2022-06-27T05:02:25Z",
          "updatedAt": "2022-06-27T05:02:25Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #127 ",
          "createdAt": "2022-07-14T20:53:38Z",
          "updatedAt": "2022-07-14T20:53:38Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #162, PR #161",
          "createdAt": "2022-10-24T17:05:07Z",
          "updatedAt": "2022-10-24T17:05:07Z"
        }
      ]
    },
    {
      "number": 60,
      "id": "I_kwDOHTmVzM5L_eC5",
      "title": "Add proper header claims in SD-JWT",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/60",
      "state": "CLOSED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We have \r\n\r\n````\r\n{\r\n  \"alg\": \"RS256\"\r\n}\r\n````\r\n\r\nwe may have something like\r\n\r\n````\r\n{\r\n  \"typ\": \"SD-JWT\"\r\n  \"alg\": \"RS256\"\r\n}\r\n````",
      "createdAt": "2022-06-17T11:42:04Z",
      "updatedAt": "2023-05-30T22:27:19Z",
      "closedAt": "2023-05-30T22:27:19Z",
      "comments": [
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "+1",
          "createdAt": "2022-06-17T12:32:06Z",
          "updatedAt": "2022-06-17T12:32:06Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "I suppose also to have at least `kid` or `x5t` or `jwk` or `x5c` in the headers.",
          "createdAt": "2022-06-18T07:06:03Z",
          "updatedAt": "2022-06-18T07:06:03Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "and also the typ header claim \"SD-JWT-R\"\r\n\r\ndo we have nay prefernces on the name of these typ(s)?\r\n\r\n\"selective-disclosure-jwt+r\" and things or the KISS approach? (I'm for the second one)",
          "createdAt": "2022-06-22T09:50:34Z",
          "updatedAt": "2022-06-22T09:50:34Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "If I look at what we have chosen for DPoP, I think we should go for `sd+jwt` and `sd-r+jwt` or similar. @b---c Do you have an opinion on this?",
          "createdAt": "2022-06-24T09:57:23Z",
          "updatedAt": "2022-06-24T09:57:23Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Agree with `sd+jwt`. \r\n\r\nNot sure about the `sd-r+jwt` because the SD JWT release is more stuff than a single JWT. And typ is describing the JWT containing it.  ",
          "createdAt": "2022-06-24T13:26:35Z",
          "updatedAt": "2022-06-24T13:26:35Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "@bc-pi\r\n\r\nThis is the SD-JWT-R taken from draft and demo code\r\n````\r\neyJhbGciOiAiUlMyNTYifQ.eyJub25jZSI6ICIyR0xDNDJzS1F2ZUNmR2ZyeU5STjl3Iiw\r\ngImF1ZCI6ICJodHRwczovL2V4YW1wbGUuY29tL3ZlcmlmaWVyIiwgIl9zZCI6IHsiZ2l2Z\r\nW5fbmFtZSI6ICJbXCI2SWo3dE0tYTVpVlBHYm9TNXRtdlZBXCIsIFwiSm9oblwiXSIsICJ\r\nmYW1pbHlfbmFtZSI6ICJbXCJlSThaV205UW5LUHBOUGVOZW5IZGhRXCIsIFwiRG9lXCJdI\r\niwgImFkZHJlc3MiOiAiW1wiUGMzM0pNMkxjaGNVX2xIZ2d2X3VmUVwiLCB7XCJzdHJlZXR\r\nfYWRkcmVzc1wiOiBcIjEyMyBNYWluIFN0XCIsIFwibG9jYWxpdHlcIjogXCJBbnl0b3duX\r\nCIsIFwicmVnaW9uXCI6IFwiQW55c3RhdGVcIiwgXCJjb3VudHJ5XCI6IFwiVVNcIn1dIn1\r\n9.b0hG3v71rzHvtoDTdroZ9m-lt9tf8nobFKb2YGiyGOjIklfcKc2KWj72oi_tBKcOCqZh\r\ndX6IV4BRXIw-aspQfLh-xBrNLuGqiC-Y3rZBBlWw0WWnbbtsy1tj8yZOiXBr8vO6mCgZGA\r\nd4MgPYPd-QzOr9ukObYDRB4I24xHrqlAEYPJIzSw9MI_dEmIkNnAuIfLQKiuyTqVVVp6Ly\r\npBIz6fBLm6NOLC4-uVXlOzI91iT4zlkrhP0-vj8TmfB-XL9aD3-xqytvLBHTESct49OSRZ\r\nFrwkLUKTM56_6KW3pG7Ucuv8VnpHXHIka0SGRaOh8x6v5-rCQJl_IbM8wb7CSHvQ\r\n````\r\n\r\nit's a signed JWT with the structure above\r\n\r\n````\r\n{\r\n  \"alg\": \"RS256\"\r\n}\r\n.\r\n{\r\n  \"nonce\": \"2GLC42sKQveCfGfryNRN9w\",\r\n  \"aud\": \"https://example.com/verifier\",\r\n  \"_sd\": {\r\n    \"given_name\": \"[\\\"6Ij7tM-a5iVPGboS5tmvVA\\\", \\\"John\\\"]\",\r\n    \"family_name\": \"[\\\"eI8ZWm9QnKPpNPeNenHdhQ\\\", \\\"Doe\\\"]\",\r\n    \"address\": \"[\\\"Pc33JM2LchcU_lHggv_ufQ\\\", {\\\"street_address\\\": \\\"123 Main St\\\", \\\"locality\\\": \\\"Anytown\\\", \\\"region\\\": \\\"Anystate\\\", \\\"country\\\": \\\"US\\\"}]\"\r\n  }\r\n}\r\n````\r\n\r\nSo if we agree we can add `sd-r+jwt` in the SD-JWT-R",
          "createdAt": "2022-06-25T21:04:10Z",
          "updatedAt": "2022-06-25T21:04:10Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "PR here\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/83\r\n\r\nCode here\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/d49b8ffe82392b3a4948393863e203ad25885b4a\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/4a4575f36906c61471179b8b530f47d980853ba1",
          "createdAt": "2022-06-25T21:12:42Z",
          "updatedAt": "2022-06-25T21:12:42Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "My previous comment had some confusion about what exactly is SD JWT release. I thought (from misunderstanding or maybe text from a previous revision of the draft) that the SD-JWT-R was a term for the whole package. Sorry for any confusion. ",
          "createdAt": "2022-06-27T18:34:58Z",
          "updatedAt": "2022-06-27T18:35:16Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Thinking about this a bit more and I don't think that `typ` value(s) should be defined or mandated by this draft. \r\n\r\n[RFC 8725 - JSON Web Token Best Current Practices](https://tools.ietf.org/html/rfc8725.html) talks about using explicit typing as a security mechanism to prevent \"Cross-JWT Confusion\" but typing something as an SD-JWT doesn't accomplish the same thing and might preclude use in contexts where there is a typ already in use (i.e. `at+jwt` for an access token per https://datatracker.ietf.org/doc/html/rfc9068#section-2.1).",
          "createdAt": "2022-06-27T18:45:25Z",
          "updatedAt": "2022-06-27T18:48:41Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "It's subtle but this isn't exactly a type of JWT and the title 'Selective Disclosure JWT' is potentially misleading. The document is more defining some structures/claims for use in JWT that can (help) accomplish selective disclosure.  'Selective Disclosure with JWT' or 'Selective Disclosure for JWT' might be more appropriate. ",
          "createdAt": "2022-06-27T19:22:20Z",
          "updatedAt": "2022-06-27T19:22:20Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "Ok, it seems to define the scope of this draft instead of the identification of the SD-JWT artifact. Anyway we need a section that exolain how to have a SD even with access tokens and id tokens for example, or any other scenario that makes sense",
          "createdAt": "2022-06-27T21:56:48Z",
          "updatedAt": "2022-06-27T21:56:48Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "My two eurocents on this: A clearer distinction between the different JWTs and JSON documents we're dealing with will help to inform the decision on this issue.\r\n\r\n* We do have the SD-JWT, a normal JWT with the special claim `sd_digests`.\r\n* Then there is the SVC, let's ignore that for a moment.\r\n* Then the SD-JWT-R, another normal JWT (or a plain JSON structure) with some special claims.\r\n* Finally, the verifier may synthesize a data structure from the SD-JWT plus the SD-JWT-R. This data structure contains the same data an application would otherwise maybe have received via a JWT from the issuer directly, and its integrity can be traced back to the issuer as well. Let's call this data the **result** (of the SD-JWT(-R) verification).\r\n\r\nThis result will have the same claim names as ID Tokens in some cases. In some cases, it might look like an access token according to RFC9068. In other cases, will conform to <insert_spec_here>.\r\n\r\nBut the SD-JWT that was the basis for this result will never be an ID token, or an RFC9068 compliant access token, or an <insert_spec_here> compliant token, because it uses a special claims container (`sd_digests`), and the claim values are hashes, not actual claim values. Maybe the structure is completely different.\r\n\r\nTherefore, the `typ` of the original SD-JWT cannot be `jwt` or `at+jwt` or `<insert_spec_here>+jwt`. If anything, it should be something like `sd+jwt`. Same for the SD-JWT-R, maybe the `typ` should be `sd-r+jwt` as proposed before.\r\n\r\nBut: There might be room for another `typ`-like information, maybe in a new claim `sd_headers`, to indicate what the `typ` of the result will be:\r\n\r\n```\r\n{\r\n  \"typ\": \"sd+jwt\"\r\n}.\r\n{\r\n  \"iss\": \"https://example.com/issuer\",\r\n  \"sub_jwk\": {\r\n    \"kty\": \"RSA\",\r\n    \"n\": \"pm4bOHBg-oYhAyPWzR56AWX3rUIXp11_ICDkGgS6W3ZWLts-hzwI3x65659kg4hVo9dbGoCJE3ZGF_eaetE30UhBUEgpGwrDrQiJ9zqprmcFfr3qvvkGjtth8Zgl1eM2bJcOwE7PCBHWTKWYs152R7g6Jg2OVph-a8rq-q79MhKG5QoW_mTz10QT_6H4c7PjWG1fjh8hpWNnbP_pv6d1zSwZfc5fl6yVRL0DV0V3lGHKe2Wqf_eNGjBrBLVklDTk8-stX_MWLcR-EGmXAOv0UBWitS_dXJKJu-vXJyw14nHSGuxTIK2hx1pttMft9CsvqimXKeDTU14qQL1eE7ihcw\",\r\n    \"e\": \"AQAB\"\r\n  },\r\n  \"iat\": 1516239022,\r\n  \"exp\": 1516247022,\r\n  \"sd_headers\": {\r\n    \"typ\": \"something+jwt\"\r\n  },\r\n  \"sd_digests\": {\r\n    \"sub\": \"LbnhkOr5oS7KjeUrxezAu8TG0CpWz0jSixy6tffuo04\",\r\n    \"given_name\": \"fUMdn88aaoyKTHrvZd6AuLmPraGhPJ0zF5r_JhxCVZs\",\r\n    \"family_name\": \"9h5vgv6TpFV6GmnPtugiMLl5tHetHeb5X_2cKHjN7cw\",\r\n    \"email\": \"fPZ92dtYMCN2Nb-2ac_zSH19p4yakUXrZl_-wSgaazA\",\r\n    \"phone_number\": \"QdSffzNzzd0n60MsSmuiKj6Y6Enk2b-BS-KtEePde5M\",\r\n    \"address\": \"JFu99NUXPq55f6DFBZ22rMkxMNHayCrfPG0FDsqbyDs\",\r\n    \"birthdate\": \"Ia1Tc6_Xnt5CJc2LtKcu6Wvqr42glBGGcjGOye8Zf3U\"\r\n  }\r\n}\r\n```\r\n\r\nA verifier could use this information to reject the SD-JWT early without checking anything else, and to avoid type confusion attacks as usual.",
          "createdAt": "2022-07-06T08:51:42Z",
          "updatedAt": "2022-07-06T08:51:42Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Coming back to this after a looong time...\r\n\r\nWhat about this solution?\r\n- Add a `typ` header, e.g., `sd+jwt` to the SD-JWT.\r\n- Define a new header, `_sd_typ`, that defines *what the SD-JWT is supposed to represent*, e.g., `at`, `secevent` or similar.\r\n- Define that the verifier must replace `typ` with the contents of `_sd_typ` before passing the data to the application.\r\n\r\nSo you would have in the SD-JWT:\r\n```\r\n{\r\n  \"typ\": \"sd+jwt\"\r\n}.\r\n{\r\n  \"iss\": \"https://example.com/issuer\",\r\n  \"_sd_typ\": \"at+jwt\"\r\n```\r\n  \r\n  and passed to the application:\r\n```\r\n{\r\n  \"typ\": \"at+jwt\"\r\n}.\r\n{\r\n  \"iss\": \"https://example.com/issuer\",\r\n```\r\n",
          "createdAt": "2022-12-07T13:49:50Z",
          "updatedAt": "2022-12-07T13:52:01Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> What about this solution? \r\n\r\nI usually like your ideas @danielfett but would be strongly opposed to that. \r\n\r\nIMHO this draft should not say or mandate anything about \"typ\" headers. Leave that to the application to use (or not) as appropriate. But `\"typ\": \"sd+jwt\"` isn't really meaningful or useful on it's own (similar to `\"typ\": \"JWT\"`, the WTF from RFC7519) and so we don't need special SD-JWT features for it. \r\n\r\nIt _maybe_ worthwhile to define media type(s) for the combined format(s) that could be used to signal what the thing is in like HTTP `Content-Type` or `cty` header of an enclosing JWE.  Maybe. \r\n",
          "createdAt": "2022-12-08T20:13:39Z",
          "updatedAt": "2022-12-08T20:13:39Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Resolved with PR #249 ",
          "createdAt": "2023-05-30T22:27:18Z",
          "updatedAt": "2023-05-30T22:27:18Z"
        }
      ]
    },
    {
      "number": 64,
      "id": "I_kwDOHTmVzM5MCkfF",
      "title": "[Sending SD-JWT and SVC during Issuance] explanatory text, terms and examples",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/64",
      "state": "CLOSED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "ready-to-close"
      ],
      "body": "In [Sending SD-JWT and SVC during Issuance](https://github.com/oauthstuff/draft-selective-disclosure-jwt/blob/master/main.md#sending-sd-jwt-and-svc-during-issuance) we read \r\n\r\n`For transporting the SVC together with the SD-JWT from the issuer to the holder, the SVC is base64url-encoded and appended to the SD-JWT using a period character . as the separator.`\r\n\r\nWe may consider to enrich the example with this decoded and self explanatory structure:\r\n````\r\n{\"alg\": \"RS256\"}\r\n.\r\n{\"iss\": \"https://example.com/issuer\", \"sub_jwk\": {\"kty\": \"RSA\", \"n\": \"pm4bOHBg-oYhAyPWzR56AWX3rUIXp11_ICDkGgS6W3ZWLts-hzwI3x65659kg4hVo9dbGoCJE3ZGF_eaetE30UhBUEgpGwrDrQiJ9zqprmcFfr3qvvkGjtth8Zgl1eM2bJcOwE7PCBHWTKWYs152R7g6Jg2OVph-a8rq-q79MhKG5QoW_mTz10QT_6H4c7PjWG1fjh8hpWNnbP_pv6d1zSwZfc5fl6yVRL0DV0V3lGHKe2Wqf_eNGjBrBLVklDTk8-stX_MWLcR-EGmXAOv0UBWitS_dXJKJu-vXJyw14nHSGuxTIK2hx1pttMft9CsvqimXKeDTU14qQL1eE7ihcw\", \"e\": \"AQAB\"}, \"iat\": 1516239022, \"exp\": 1516247022, \"_sd\": {\"sub\": \"LbnhkOr5oS7KjeUrxezAu8TG0CpWz0jSixy6tffuo04\", \"given_name\": \"fUMdn88aaoyKTHrvZd6AuLmPraGhPJ0zF5r_JhxCVZs\", \"family_name\": \"9h5vgv6TpFV6GmnPtugiMLl5tHetHeb5X_2cKHjN7cw\", \"email\": \"fPZ92dtYMCN2Nb-2ac_zSH19p4yakUXrZl_-wSgaazA\", \"phone_number\": \"QdSffzNzzd0n60MsSmuiKj6Y6Enk2b-BS-KtEePde5M\", \"address\": \"JFu99NUXPq55f6DFBZ22rMkxMNHayCrfPG0FDsqbyDs\", \"birthdate\": \"Ia1Tc6_Xnt5CJc2LtKcu6Wvqr42glBGGcjGOye8Zf3U\"}}\r\n.\r\n$JWT-Signature-bytes\r\n.\r\n{\r\n    \"_sd\": {\r\n        \"sub\": \"[\\\"eluV5Og3gSNII8EYnsxA_A\\\", \\\"6c5c0a49-b589-431d-bae7-219122a9ec2c\\\"]\",\r\n        \"given_name\": \"[\\\"6Ij7tM-a5iVPGboS5tmvVA\\\", \\\"John\\\"]\",\r\n        \"family_name\": \"[\\\"eI8ZWm9QnKPpNPeNenHdhQ\\\", \\\"Doe\\\"]\",\r\n        \"email\": \"[\\\"Qg_O64zqAxe412a108iroA\\\", \\\"johndoe@example.com\\\"]\",\r\n        \"phone_number\": \"[\\\"AJx-095VPrpTtN4QMOqROA\\\", \\\"+1-202-555-0101\\\"]\",\r\n        \"address\": \"[\\\"Pc33JM2LchcU_lHggv_ufQ\\\", {\\\"street_address\\\": \\\"123 Main St\\\", \\\"locality\\\": \\\"Anytown\\\", \\\"region\\\": \\\"Anystate\\\", \\\"country\\\": \\\"US\\\"}]\",\r\n        \"birthdate\": \"[\\\"G02NSrQfjFXQ7Io09syajA\\\", \\\"1940-01-01\\\"]\"\r\n    }\r\n}\r\n````",
      "createdAt": "2022-06-18T09:19:17Z",
      "updatedAt": "2022-07-11T16:55:48Z",
      "closedAt": "2022-07-11T16:55:48Z",
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "In pyrefactor branch (PR [here](https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/files#diff-5222495a3d6b3dd607e525361846720aa32ea623787032990c43548a2c24b3c1R169) ) I added this kind of representation for debug/demo purpose\r\n\r\n````\r\nSerialized SD-JWT Salt/Value Container (SVC) decoded representation:\r\n{\"alg\": \"RS256\", \"typ\": \"sd-jwt\", \"kid\": \"goi21Bfx-Qn6K-tle5ML1vCB52T8MIYqG6pwJKVnPZA\"}.{\"iss\": \"https://example.com/issuer\", \"sub_jwk\": {\"kty\": \"RSA\", \"n\": \"ufPP5x7pFf1DBcu9u3usHMzNIncKE5yPh_gNGGBkrKzI2u1ZvxJPyutJFCDfyEfqsQZgPfTB9i_U2SReWy2-nGEiMrgE1vnRZ76kd1eMUADfK8UyhNqqa0nT09ILVZeMDfnHZKzd0Z9GNxEfoaF8jYJtkIG26_D1xwyCSbaeRunKzG4MMs8hyx8xyNQWgui06z-FjGrgXoJASZ4DC4j8an4p9prs6hI9f1eZEEtDSEQZBApg-FDWO1jFpSjRt3micSH7EWyb73X0p0dn31kk33CdJ-ragpFw7IOmRESRelMymykjX8xqqWWc6vUoUiXIHrJzTAftPcMIK4SlLoc_Ow\", \"e\": \"AQAB\"}, \"iat\": 1656184897, \"exp\": 1656185797, \"hash_alg\": \"sha-256\", \"sd_digests\": {\"sub\": \"z4xgEco94diTaSruISPiE7o_wtmcOfnH_8R7X9Pa578\", \"given_name\": \"PvU7cWjuHUq6w-i9XFpQZhjT-uprQL3GH3mKsAJl0e0\", \"family_name\": \"H-Relr4cEBMlenyK1gvyx16QVpnt4MEclT5tP0aTLFU\", \"email\": \"ET2A1JQLF85ZpBulh6UFstGrSfR4B3KM-bjQVllhxqY\", \"phone_number\": \"SJnciB2DIRVA5cXBrdKoH6n45788mZyUn2rnv74uMVU\", \"address\": {\"street_address\": \"O7_Isd6CmZqcSobPVpMgmJwB41hPUHHG8jg5LJ8YzfY\", \"locality\": \"w-zTF6ljkQLTvVyp_JNyD3t5Waj-B2vb0AXH1q8OsjI\", \"region\": \"nTvoKpGA6YQwEZipVBIM4WVH9KWEnwiqsRjEhrxhQz4\", \"country\": \"u-O1yDQqDTTqOgUBSjWilgkMLzg_QOTELMfZrRT5e6k\"}, \"birthdate\": \"TipyoxD43PZJF8ZEmKPrbxMElpFX_M7aBLkUpC-W53o\"}}.YJILeZBqr3rZBbejfweY4CjC4SKAvbbg6FxQKyNx2xaSRACsphHOg9zeNcUnW8EugR0uM812L_zkS5C3YFBDxuQR1OuFtSasYdwUmKgqlo5clFhHr4-zUJ-h5Y5jQ5WUwVNB1ETMG1sbS_Sq3B5XUrYNZ_5vQrYPBqAmu1TT8ATFpdgvl91SqZNWp9i7qVEhVHzmJSSMp4ZRK9Ky83ldMpW4FtVSyhVqMMXv_581mrM4hNBT8elceGfHX56CwirlpErIq9qaLvU7AOMAuDuGx74eYJZGvRJSaiRtlbXGdlbMURke5KJlafWCnz8Yy91eKTHq266xfhXrgyyDh-BjhA\r\n````",
          "createdAt": "2022-06-25T21:23:21Z",
          "updatedAt": "2022-06-25T21:23:21Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "This is not a defined format, mixing up multiple representations, so it should not be in the spec text itself, but it is a great clarification to have in the Command Line output, which you have already kindly done :)",
          "createdAt": "2022-07-11T16:55:48Z",
          "updatedAt": "2022-07-11T16:55:48Z"
        }
      ]
    },
    {
      "number": 65,
      "id": "I_kwDOHTmVzM5MCldY",
      "title": "[SD-JWT and SVC Issuance and Presentation] JWT Artifact instead of custom base64url concatenation ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/65",
      "state": "CLOSED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "In section \"Sending SD-JWT and SVC during Issuance\" in \"SD-JWT and SVC issuance\" and define a term for the objects that concatenates the base64urls artifacts.\r\n\r\nWhat do you think to have a JWT instead of a custom base64url artifact? \r\nThe JWT it has a header where we may normate the `typ` claim `ISS-SD-JWT` or any other that say \"ISSUED SD-JWT\". The JWT may have the following structure\r\n\r\n````\r\n{\r\n  \"alg\": \"RS256\",\r\n  \"typ\": \"ISS-SD-JWT\",\r\n  \"kid\": \"that-thumbprinted-value-we-like\"\r\n}\r\n.\r\n{\r\n  \"iss\": \"https://example.com/issuer\",\r\n  \"aud\": \"https://that-cloud-wallet.id/78as6df86asf8as6f8as76s78f68fg6dfjnrker\"\r\n  \"iat\": 1516239022,\r\n  \"exp\": 1516249022, # matching with the exp value of the SD-JWT\r\n  \"_sd_jwt\": \r\n  $START of JWT as decoded payload\r\n        {\r\n          \"alg\": \"RS256\",\r\n          \"typ\": \"SD-JWT\",\r\n          \"kid\": \"that-thumbprinted-value-we-like\"\r\n        }\r\n        .\r\n        {\r\n            \"iss\": \"https://example.com/issuer\",\r\n            \"sub_jwk\": {\r\n              \"kty\": \"RSA\",\r\n              \"n\": \"pm4bOHBg- ...\",\r\n              \"e\": \"AQAB\"},\r\n           \"iat\": 1516239022,\r\n           \"exp\": 1516247022,\r\n         \"_sd\": {\"sub\": \"LbnhkOr5oS7KjeUrxezAu8TG0CpWz0jSixy6tffuo04\",\r\n          \"given_name\": \"fUMdn88aaoyKTHrvZd6AuLmPraGhPJ0zF5r_JhxCVZs\",\r\n          \"family_name\": \"9h5vgv6TpFV6GmnPtugiMLl5tHetHeb5X_2cKHjN7cw\",\r\n          \"email\": \"fPZ92dtYMCN2Nb-2ac_zSH19p4yakUXrZl_-wSgaazA\",\r\n          \"phone_number\": \"QdSffzNzzd0n60MsSmuiKj6Y6Enk2b-BS-KtEePde5M\",\r\n          \"address\": \"JFu99NUXPq55f6DFBZ22rMkxMNHayCrfPG0FDsqbyDs\",\r\n          \"birthdate\": \"Ia1Tc6_Xnt5CJc2LtKcu6Wvqr42glBGGcjGOye8Zf3U\"}\r\n          },\r\n  $END of JWT as decoded payload\r\n  \"_sd_svc\": {\r\n        \"sub\": \"[\\\"eluV5Og3gSNII8EYnsxA_A\\\", \\\"6c5c0a49-b589-431d-bae7-219122a9ec2c\\\"]\",\r\n        \"given_name\": \"[\\\"6Ij7tM-a5iVPGboS5tmvVA\\\", \\\"John\\\"]\",\r\n        \"family_name\": \"[\\\"eI8ZWm9QnKPpNPeNenHdhQ\\\", \\\"Doe\\\"]\",\r\n        \"email\": \"[\\\"Qg_O64zqAxe412a108iroA\\\", \\\"johndoe@example.com\\\"]\",\r\n        \"phone_number\": \"[\\\"AJx-095VPrpTtN4QMOqROA\\\", \\\"+1-202-555-0101\\\"]\",\r\n        \"address\": \"[\\\"Pc33JM2LchcU_lHggv_ufQ\\\", {\\\"street_address\\\": \\\"123 Main St\\\", \\\"locality\\\": \\\"Anytown\\\", \\\"region\\\": \\\"Anystate\\\", \\\"country\\\": \\\"US\\\"}]\",\r\n        \"birthdate\": \"[\\\"G02NSrQfjFXQ7Io09syajA\\\", \\\"1940-01-01\\\"]\"\r\n    }\r\n}\r\n````",
      "createdAt": "2022-06-18T09:40:33Z",
      "updatedAt": "2022-06-20T12:56:34Z",
      "closedAt": "2022-06-20T12:56:08Z",
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "If thsi approach is reasonable to you we should adopt the same solution during the Presentation phase\r\n\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/blob/master/main.md#sending-sd-jwt-and-sd-jwt-r-during-presentation",
          "createdAt": "2022-06-18T09:51:23Z",
          "updatedAt": "2022-06-18T09:51:23Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Is this a duplicate of https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/37?",
          "createdAt": "2022-06-20T12:33:41Z",
          "updatedAt": "2022-06-20T12:33:41Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "completely yes, So I close this.\r\n\r\nI'm not for nesting stuffs in matrioska formats, so we may consider to register a content-type in the IANA Registry to deal with this base64 concatenation of objects if we agree. Let's talk on this on the dedicated/original issue \r\n\r\nmy bad!",
          "createdAt": "2022-06-20T12:56:08Z",
          "updatedAt": "2022-06-20T12:56:34Z"
        }
      ]
    },
    {
      "number": 66,
      "id": "I_kwDOHTmVzM5MCltu",
      "title": "We should define two different claims for _sd ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/66",
      "state": "CLOSED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The same `_sd` claim is used for `SD-JWT` and also for `SVC`.\r\n\r\nHere an example of `_sd` in `SD-JWT`\r\n\r\n````\r\n\"_sd\": {\r\n    \"sub\": \"LbnhkOr5oS7KjeUrxezAu8TG0CpWz0jSixy6tffuo04\",\r\n    \"given_name\": \"fUMdn88aaoyKTHrvZd6AuLmPraGhPJ0zF5r_JhxCVZs\",\r\n    \"family_name\": \"9h5vgv6TpFV6GmnPtugiMLl5tHetHeb5X_2cKHjN7cw\",\r\n    \"email\": \"fPZ92dtYMCN2Nb-2ac_zSH19p4yakUXrZl_-wSgaazA\",\r\n    \"phone_number\": \"QdSffzNzzd0n60MsSmuiKj6Y6Enk2b-BS-KtEePde5M\",\r\n    \"address\": {\r\n      \"street_address\": \"4FpVpd563Owh9G3HkGNTN9FiSHT0e6y9-Abk_IuG86M\",\r\n      \"locality\": \"Kr0BpdZz6yU8HMhjyYHh1EEgJxeUyLIpJEi47iXhp8Y\",\r\n      \"region\": \"QXxWKvcV4Bc9t3M7MF43W5vdCnWtA9hsYX8ycWLu1LQ\",\r\n      \"country\": \"3itkoMzrDrinn7T0MUbAmrMm1ya1LzbBgif_50WoFOs\"\r\n    },\r\n    \"birthdate\": \"fvLCnDm3r4VSYcBF3pIlXP4ulEoHuHOfG_YmFZEuxpQ\"\r\n  }\r\n```` \r\n\r\nhere an example of `_sd` in `SVC`\r\n\r\n````\r\n  \"_sd\": {\r\n    \"sub\": \"[\\\"eluV5Og3gSNII8EYnsxA_A\\\", \\\"6c5c0a49-b589-431d-bae7-219122a9ec2c\\\"]\",\r\n    \"given_name\": \"[\\\"6Ij7tM-a5iVPGboS5tmvVA\\\", \\\"John\\\"]\",\r\n    \"family_name\": \"[\\\"eI8ZWm9QnKPpNPeNenHdhQ\\\", \\\"Doe\\\"]\",\r\n    \"email\": \"[\\\"Qg_O64zqAxe412a108iroA\\\", \\\"johndoe@example.com\\\"]\",\r\n    \"phone_number\": \"[\\\"AJx-095VPrpTtN4QMOqROA\\\", \\\"+1-202-555-0101\\\"]\",\r\n    \"address\": \"[\\\"Pc33JM2LchcU_lHggv_ufQ\\\", {\\\"street_address\\\": \\\"123 Main St\\\", \\\"locality\\\": \\\"Anytown\\\", \\\"region\\\": \\\"Anystate\\\", \\\"country\\\": \\\"US\\\"}]\",\r\n    \"birthdate\": \"[\\\"G02NSrQfjFXQ7Io09syajA\\\", \\\"1940-01-01\\\"]\"\r\n  }\r\n````\r\n\r\nSo actually we have the same claim name for two different purposes.\r\nWhat do you think to have two separate claim name, like `_sd_jwt` and `_sd_svc`?",
      "createdAt": "2022-06-18T09:46:13Z",
      "updatedAt": "2022-06-18T12:59:30Z",
      "closedAt": "2022-06-18T12:59:30Z",
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "We may adopt in SD-JWT Release the claim `_sd_svc`",
          "createdAt": "2022-06-18T09:48:51Z",
          "updatedAt": "2022-06-18T09:48:51Z"
        },
        {
          "author": "Macke",
          "authorAssociation": "NONE",
          "body": "This seems a duplicate of [issue 25](https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/25)\r\n",
          "createdAt": "2022-06-18T10:24:39Z",
          "updatedAt": "2022-06-18T10:24:39Z"
        }
      ]
    },
    {
      "number": 68,
      "id": "I_kwDOHTmVzM5MCnwm",
      "title": "Editorial issues and typos",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/68",
      "state": "CLOSED",
      "author": "Macke",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Section 1 - The note at end of  is not clear\r\n\r\nSection 2.7 - \"An entity that **entity that** requests,\"\r\n\r\nSection 3.3 - Verifying an **SD-JWWT** Release\r\n\r\nSection 4.1.1.1 - Reference to eKYC should probably be OIDC4IDA\r\n\r\nSection 4.3 - \"...base64ur-encoded...\"\r\n\r\nSection 5 - numbering format is not good from a readability perspective\r\n\r\n",
      "createdAt": "2022-06-18T10:28:41Z",
      "updatedAt": "2022-06-24T12:20:33Z",
      "closedAt": "2022-06-24T12:20:33Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "See PR #72. Most points in this issue have been addressed already in other commits. We can't change the list style, so keeping as is for now.",
          "createdAt": "2022-06-23T15:32:56Z",
          "updatedAt": "2022-06-23T15:32:56Z"
        }
      ]
    },
    {
      "number": 73,
      "id": "I_kwDOHTmVzM5MdzOm",
      "title": "Handling claims that are in the form of a dictionary or array",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/73",
      "state": "CLOSED",
      "author": "nikosft",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "ready-to-close"
      ],
      "body": "IMHO if a claim is in the form of a dictionary, then each element of the dictionary should be hashed separately. For example, in [Example 1](https://www.ietf.org/archive/id/draft-fett-oauth-selective-disclosure-jwt-01.html#name-example-1-sd-jwt) there is the following claim:\r\n\r\n```JSON\r\n\"address\": {\r\n    \"street_address\": \"123 Main St\",\r\n    \"locality\": \"Anytown\",\r\n    \"region\": \"Anystate\",\r\n    \"country\": \"US\"\r\n  }\r\n```\r\nwhich is transformed to\r\n\r\n```\r\n\"address\": \"JFu99NUXPq55f6DFBZ22rMkxMNHayCrfPG0FDsqbyDs\",\r\n```\r\n\r\nWhereas it might be more useful to be transformed into something like that:\r\n\r\n```\r\n\"address\": {\r\n    \"street_address\": \"HASH\",\r\n    \"locality\": \"HASH\",\r\n    \"region\": \"HASH\",\r\n    \"country\": \"HASH\"\r\n  }\r\n```\r\nIn that case users can reveal, for example, only their country.\r\n\r\nSimilarly, when a claim is in the form of an array it may make sense to encode each element of the array separately. For example:\r\n\r\n```\r\n\"liked_movies\"=[\"Armageddon\", \"Titanic\"]\r\n```\r\nCould become something like \r\n\r\n```\r\n\"liked_movies\"=[\"HASH\", \"HASH\"]\r\n```",
      "createdAt": "2022-06-23T20:05:17Z",
      "updatedAt": "2022-07-11T16:52:54Z",
      "closedAt": "2022-07-11T16:52:53Z",
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "Ciao,\r\nthis is a very good question and probably this is the answer: `sd_jwt -t structured`\r\n\r\n````\r\nPayload of the SD-JWT:\r\n{\r\n    \"iss\": \"https://example.com/issuer\",\r\n    \"sub_jwk\": {\r\n        \"kty\": \"RSA\",\r\n        \"n\": \"vHdoaUhFEzs1ZCF_qCKw28d0bzNWVSls_AHUOPDFhGIN3neRpxJPmE7KD9m5J_e0y6i0Q4uObl0O-n3G4h3rSt_9Snzuk082JgZHMdTJ2StAKX4PX_9mv0fMdUbWly93q8AzneIMJCwiP8y9uYD5wiDHd2k0P4imtpaGL9dSewbEjakCmZM3nYnHBD5vHAJDrK2Ebr0M_eQOeKvFnzrHUopETrSSsNt4etnLbIaoArVBfsVIpMV7NrRox8PvMxlCy_JESxwfMcdmo0wLq_rv3N1ronsaY-RJ8lTSP5eCwGfXAdT5RnZz8xladGKZ6vLkGzsT5ZCjR3QGseTfvHy3IQ\",\r\n        \"e\": \"AQAB\"\r\n    },\r\n    \"iat\": 1656013213,\r\n    \"exp\": 1656014113,\r\n    \"sd_digests\": {\r\n        \"sub\": \"z4xgEco94diTaSruISPiE7o_wtmcOfnH_8R7X9Pa578\",\r\n        \"given_name\": \"PvU7cWjuHUq6w-i9XFpQZhjT-uprQL3GH3mKsAJl0e0\",\r\n        \"family_name\": \"H-Relr4cEBMlenyK1gvyx16QVpnt4MEclT5tP0aTLFU\",\r\n        \"email\": \"ET2A1JQLF85ZpBulh6UFstGrSfR4B3KM-bjQVllhxqY\",\r\n        \"phone_number\": \"SJnciB2DIRVA5cXBrdKoH6n45788mZyUn2rnv74uMVU\",\r\n        \"address\": {\r\n            \"street_address\": \"O7_Isd6CmZqcSobPVpMgmJwB41hPUHHG8jg5LJ8YzfY\",\r\n            \"locality\": \"w-zTF6ljkQLTvVyp_JNyD3t5Waj-B2vb0AXH1q8OsjI\",\r\n            \"region\": \"nTvoKpGA6YQwEZipVBIM4WVH9KWEnwiqsRjEhrxhQz4\",\r\n            \"country\": \"u-O1yDQqDTTqOgUBSjWilgkMLzg_QOTELMfZrRT5e6k\"\r\n        },\r\n        \"birthdate\": \"TipyoxD43PZJF8ZEmKPrbxMElpFX_M7aBLkUpC-W53o\"\r\n    },\r\n    \"hash_alg\": \"sha-256\"\r\n}\r\n````\r\n\r\n@daniel anyway in the current implementation, usign a `complex` structure, I see this \r\n`\"address\": \"[\\\"M0Jb57t41ubrkSuyrDT3xA\\\", {\\\"locality\\\": \\\"Maxstadt\\\", \\\"postal_code\\\": \\\"12344\\\", \\\"country\\\": \\\"DE\\\", \\\"street_address\\\": \\\"An der Weide 22\\\"}]\"`\r\n\r\nis it a bug of the walker implementation?",
          "createdAt": "2022-06-23T21:41:36Z",
          "updatedAt": "2022-06-23T21:41:36Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Hi Nikos,\r\n\r\nExamples 1 and 2 show exactly the two options from your comment. It is up to the issuer to decide whether to make the full address releasable as one value or to make each of the sub-claims releasable.\r\n\r\nWe don't have an example for arrays yet, but I imagine that what you are showing should be possible as well.\r\n\r\n@peppelinux The complex example seems correct to me - what am I missing?",
          "createdAt": "2022-06-24T09:52:52Z",
          "updatedAt": "2022-06-24T09:52:52Z"
        },
        {
          "author": "nikosft",
          "authorAssociation": "NONE",
          "body": "> Hi Nikos,\r\n> \r\n> Examples 1 and 2 show exactly the two options from your comment. It is up to the issuer to decide whether to make the full address releasable as one value or to make each of the sub-claims releasable.\r\n> \r\n> We don't have an example for arrays yet, but I imagine that what you are showing should be possible as well.\r\n> \r\n> @peppelinux The complex example seems correct to me - what am I missing?\r\n\r\nI missed the Appendix section :) My fault. ",
          "createdAt": "2022-06-24T10:01:09Z",
          "updatedAt": "2022-06-24T10:01:09Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "@danielfett I was wondering if instead of a single hash for an entire JSON Object we should have, there, a JSON Object with the key:hashes for each address attribute",
          "createdAt": "2022-06-24T10:40:29Z",
          "updatedAt": "2022-06-24T10:40:29Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "@peppelinux Ah, now I see what you mean. In the complex example, address is intentionally a single claim. This is defined by `CLAIMS_STRUCTURE` in `complex_structured.py`. The example shows that the issuer doesn't have to descent into all subclaims and treating address as in the simple example can be a valid choice.",
          "createdAt": "2022-06-24T11:21:25Z",
          "updatedAt": "2022-06-24T11:21:25Z"
        }
      ]
    },
    {
      "number": 74,
      "id": "I_kwDOHTmVzM5MeKsG",
      "title": "Define an content-type for the bas64url encoded artifacts in the HTTP Requests and Responses",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/74",
      "state": "CLOSED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "Sakurann"
      ],
      "labels": [
        "has-PR",
        "pending-close"
      ],
      "body": "We should consider to define a content-type and returning this in the HTTP Response, may we imagine something like `application/sd-jwt-svc`?\r\n\r\nand for the request `application/sd-jwt-release`",
      "createdAt": "2022-06-23T21:45:16Z",
      "updatedAt": "2023-06-05T13:24:35Z",
      "closedAt": "2023-06-05T13:24:35Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "what is the use case when only SD-JWT is returned in HTTP Response, so that this content-type will be used?",
          "createdAt": "2022-08-04T19:59:00Z",
          "updatedAt": "2022-08-04T19:59:14Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "During the issuance of a VC the VCI releases both SD-JWT and SVC, combined in a single artifact, this artifact should have a content-type, then the receiver is able to know what it is and process it in the right way.\r\n\r\nI don't have any use-case with an issuance response with the sd-jwt alone\r\n",
          "createdAt": "2022-08-04T21:55:30Z",
          "updatedAt": "2022-08-04T21:55:30Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "so application/sd-jwt+svc will be used during issuance request and application/sd-jwt-release will be used during presentation request? SGTM\r\n(cc @bc-pi)",
          "createdAt": "2022-09-05T22:27:52Z",
          "updatedAt": "2022-09-05T22:27:52Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "IMHO this is a bit premature and maybe unnecessary. Because I'd imagine these artifacts will most likely be used in places, such as within the JSON content of API messages or HTTP header, where a content/media type isn't relevant. \r\n\r\nIt maybe makes sense for the case of the SD-JWT and SVC being returned together as the HTTP response content. I *still* (as mentioned previously including in Philly) think that the combined SD-JWT and SVC needs to be given it's own proper name and treatment as a first order thing in this draft though. And that should probably happen before defining a media type for it. ['+' has some special meaning in media types](https://www.iana.org/assignments/media-type-structured-suffix/media-type-structured-suffix.xhtml#structured-syntax-suffix) so using it to mean \"and\" with `application/sd-jwt+svc` doesn't really work. ",
          "createdAt": "2022-09-06T16:10:04Z",
          "updatedAt": "2022-09-06T16:10:04Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "When SD-JWT is transported over OpenID4VC, content-type defined by OAuth or OpenID4VC specifications will be used - in those cases, there is no need to define a specific one whether credential format is sd-jwt or not.\r\n\r\nIf there are no other use-cases where sd-jwt is the only content of http req/res, suggest closing this issue",
          "createdAt": "2022-12-15T17:44:17Z",
          "updatedAt": "2022-12-15T17:44:17Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "We discussed registering application/sd-jwt similar to a language defined in application/jose registration in [RFC7519](https://www.rfc-editor.org/rfc/rfc7515.html#section-9.2.1) to document a new artifact. might also be useful for the cases when only sd-jwt is sent (in email, backchaneel, etc.) - not sure?\r\n\r\nwill open a separate issue on JOSE Header content-type (typ/cty parameters), also related to recent VC WG discussion.",
          "createdAt": "2023-02-22T17:47:08Z",
          "updatedAt": "2023-02-22T17:48:38Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #249 sufficiently addressed this.",
          "createdAt": "2023-06-02T01:54:15Z",
          "updatedAt": "2023-06-02T01:54:15Z"
        }
      ]
    },
    {
      "number": 75,
      "id": "I_kwDOHTmVzM5MeajP",
      "title": "Github page content",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/75",
      "state": "CLOSED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "Github page should publish the content of main.md and not the README of the project.\r\ndo you agree?",
      "createdAt": "2022-06-23T22:42:52Z",
      "updatedAt": "2022-06-29T16:38:55Z",
      "closedAt": "2022-06-29T16:32:21Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I'd like to keep it as is. The readme provides guidance and instructions to compile everything, this would be hidden away otherwise. We can make create a more prominent link to main.md though.",
          "createdAt": "2022-06-24T08:45:31Z",
          "updatedAt": "2022-06-24T08:45:31Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "It make sense, ok for the README, the important document is anyway the main.md, a link directly in the README woud be a very good strategy",
          "createdAt": "2022-06-24T08:57:07Z",
          "updatedAt": "2022-06-24T08:57:07Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "let's just add a link to the IETF html https://datatracker.ietf.org/doc/html/draft-fett-selective-disclosure-jwt from README- I can do a PR",
          "createdAt": "2022-06-27T18:44:50Z",
          "updatedAt": "2022-06-27T18:45:05Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "indeed @Sakurann\r\n\r\nI was referring to a preview of the last version built in the main branch and not to the official spec. I may have misunderstood, just to tell you what I mean as continuous deployment in github pages",
          "createdAt": "2022-06-27T21:44:40Z",
          "updatedAt": "2022-06-27T21:45:17Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Why not both? Added a note to the PR!",
          "createdAt": "2022-06-28T07:13:39Z",
          "updatedAt": "2022-06-28T07:13:39Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "ok let's add a link to the latest ver of a main branch of this repo as \"editor's draft\". will do a PR later.",
          "createdAt": "2022-06-29T16:32:21Z",
          "updatedAt": "2022-06-29T16:32:21Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #105 and #97",
          "createdAt": "2022-06-29T16:38:55Z",
          "updatedAt": "2022-06-29T16:38:55Z"
        }
      ]
    },
    {
      "number": 76,
      "id": "I_kwDOHTmVzM5Mgex0",
      "title": "sd-jwt-r as signature algo",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/76",
      "state": "CLOSED",
      "author": "dtmcg",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "pending-close"
      ],
      "body": "this is an elegant solution to selective disclosure \ud83d\udc4d \r\nquestion if the sd-jwt-r is modifed to contain the salts and payload value hash's (instead of the values), \r\ncan the process used for generating the sd-jwt-r be considered a signature algo and be applied any JWT?\r\n\r\nif the sd-jwt-r is b64 url encoded as a signature & appended to a plane old JWT \r\nthis would make selective disclosure a function of the jwt alog. no additional objects need to be defined, this should make the solution easier to uptake in existing jwt libs where a supported algo can be added. \r\n\r\nsteps \r\n- sd-jwt-r \"signature\" is generated for a JWT header and payload, as currently defined.\r\n-  - the release contains the payload hashs and salt, then it is signed over as a JWT\r\n- it is b64url encoded and appended as the signature\r\n- when the holder wishes to share the JWT with a redacted payload they can do so by removing payload entities, re encode the json and append the same signature. \r\n",
      "createdAt": "2022-06-24T10:35:57Z",
      "updatedAt": "2023-01-03T19:07:30Z",
      "closedAt": "2023-01-03T19:07:29Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "What does the issuer sign? \r\nIf I understood correctly, you are swapping SD-JWT and SD-JWT-R as defined in the current draft, so that only claim values are included in SD-JWT-R and salt + hashes in SD-JWT. The issuer would have to sign over SD-JWT-R so that the holder can keep appending it integrity protected and your SD-JWT becomes unsigned SD-JWT-R because that is that the holder modifies when presenting.\r\nNot sure what the new approaches achieves?",
          "createdAt": "2022-06-27T17:25:42Z",
          "updatedAt": "2022-06-27T17:25:42Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I'm not sure I'm following the proposal. Maybe a concrete example would help.",
          "createdAt": "2022-06-28T07:14:31Z",
          "updatedAt": "2022-06-28T07:14:31Z"
        },
        {
          "author": "dtmcg",
          "authorAssociation": "NONE",
          "body": "> What does the issuer sign? If I understood correctly, you are swapping SD-JWT and SD-JWT-R as defined in the current draft, so that only claim values are included in SD-JWT-R and salt + hashes in SD-JWT. The issuer would have to sign over SD-JWT-R so that the holder can keep appending it integrity protected and your SD-JWT becomes unsigned SD-JWT-R because that is that the holder modifies when presenting. Not sure what the new approaches achieves?\r\n\r\nyea mostly, what it achieves is that there are no new data types which need to understood, everything is in JWT with a longer signature, the verification of the jwt signature can be encapsulated into the jwt libs with a new algo handler ",
          "createdAt": "2022-07-19T10:07:36Z",
          "updatedAt": "2022-07-19T10:07:36Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "If the SD-JWT-R contains the hashes and salts and is always released in full, we lose the selective disclosure property. The salts prevent guessing the plain-text values. Without them, it would be trivial, e.g., to guess a birth date (and many other claims as well).",
          "createdAt": "2022-07-19T12:29:15Z",
          "updatedAt": "2022-07-19T12:29:15Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "This might have been obsoleted by the latest changes made to the draft. Daniel, could you please take a look at the latest version and let us know if you are ok closing this issue.",
          "createdAt": "2022-12-15T17:36:30Z",
          "updatedAt": "2022-12-15T17:36:30Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "As far as I can tell, this has been obsoleted by the latest changes. ",
          "createdAt": "2023-01-03T19:07:29Z",
          "updatedAt": "2023-01-03T19:07:29Z"
        }
      ]
    },
    {
      "number": 77,
      "id": "I_kwDOHTmVzM5MhKcs",
      "title": "Use cnf to represent holder key.",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/77",
      "state": "CLOSED",
      "author": "nikosft",
      "authorAssociation": "NONE",
      "assignees": [
        "Sakurann"
      ],
      "labels": [],
      "body": "Right now the text uses `sub_jwk` to \"include the holder public key\". May be the `cnf` claim, defined in [RFC 7800](https://datatracker.ietf.org/doc/html/rfc7800) is more suitable. Then an SD-JWT could be nicely combined with MTLS of DPoP. ",
      "createdAt": "2022-06-24T13:34:36Z",
      "updatedAt": "2022-07-18T15:56:44Z",
      "closedAt": "2022-07-18T15:56:44Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "+1",
          "createdAt": "2022-06-27T05:01:27Z",
          "updatedAt": "2022-06-27T05:01:27Z"
        }
      ]
    },
    {
      "number": 79,
      "id": "I_kwDOHTmVzM5Mitox",
      "title": "Get rid of _sd claim in spec examples",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/79",
      "state": "CLOSED",
      "author": "christianpaquin",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Regenerate the base64url encoded examples; they still contain the `_sd` claim name\r\n",
      "createdAt": "2022-06-24T20:36:30Z",
      "updatedAt": "2022-07-06T23:03:09Z",
      "closedAt": "2022-07-06T23:02:53Z",
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "We fixed this with the last commit\r\n\r\n",
          "createdAt": "2022-07-06T21:29:33Z",
          "updatedAt": "2022-07-06T21:29:33Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "please see PR #61 ",
          "createdAt": "2022-07-06T23:03:09Z",
          "updatedAt": "2022-07-06T23:03:09Z"
        }
      ]
    },
    {
      "number": 80,
      "id": "I_kwDOHTmVzM5MjNkm",
      "title": "[Privacy] Anonymous claims",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/80",
      "state": "CLOSED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "### Problem\r\nA user doesn't want to show which attributes he got from an issuer in a VC. The reason behind this is that the user doesn't want to give to a RP any information about the attributes that this RP may ask to him in the future. If a RP has a proof of possession of some claim of a user it may ask these to the user, in the future, producing  some reason, some levers or circumstances, to persuade a need to the user to share his claims to the RP.\r\n\r\nA RP may know that a user is also:\r\n- graduated even without knowing the value contained in the related claim.\r\n- married, without knowing the attributes of the spouse\r\n- and so on ...\r\n\r\nThis means that the only presence of a claim, even if its value is opaque, can determine an information or a proof of truth.\r\nThis scenario is not relevant for a person schema (eIDAS minimum data set) but can be relevant with the issuing of some extendend attestation of the personal attributes.\r\n\r\n### Requirement\r\nA way to make also the claim names anonymous/opaques.\r\n\r\n### Current behaviour\r\nThe **sd_digest** shows how many and which attributes the user may disclose\r\n\r\n````\r\n...\r\n  \"sd_digests\": {\r\n    \"sub\": \"LbnhkOr5oS7KjeUrxezAu8TG0CpWz0jSixy6tffuo04\",\r\n    ...\r\n  }\r\n...\r\n````\r\n### Expected behaviour\r\nAlso the claim names can be obscured, defining an additional structure type to the current three available to date (simple, structured, complex). The result can be the SD-JWT in the example given above\r\n\r\n````\r\n{\r\n  \"iss\": \"https://example.com/issuer\",\r\n  \"sub_jwk\": {\r\n    \"kty\": \"RSA\",\r\n    \"n\": \"pm4bOHBg-oYhAyPWzR56AWX3rUIXp11_ICDkGgS6W3ZWLts-hzwI3x65659kg4hVo9dbGoCJE3ZGF_eaetE30UhBUEgpGwrDrQiJ9zqprmcFfr3qvvkGjtth8Zgl1eM2bJcOwE7PCBHWTKWYs152R7g6Jg2OVph-a8rq-q79MhKG5QoW_mTz10QT_6H4c7PjWG1fjh8hpWNnbP_pv6d1zSwZfc5fl6yVRL0DV0V3lGHKe2Wqf_eNGjBrBLVklDTk8-stX_MWLcR-EGmXAOv0UBWitS_dXJKJu-vXJyw14nHSGuxTIK2hx1pttMft9CsvqimXKeDTU14qQL1eE7ihcw\",\r\n    \"e\": \"AQAB\"\r\n  },\r\n  \"hash_alg\": \"sha-256\",\r\n  \"iat\": 1516239022,\r\n  \"exp\": 1516247022,\r\n  \"sd_digests\": [\r\n    \"LbnhkOr5oS7KjeUrxezAu8TG0CpWz0jSixy6tffuo04\",\r\n    \"fUMdn88aaoyKTHrvZd6AuLmPraGhPJ0zF5r_JhxCVZs\",\r\n    \"9h5vgv6TpFV6GmnPtugiMLl5tHetHeb5X_2cKHjN7cw\",\r\n    \"fPZ92dtYMCN2Nb-2ac_zSH19p4yakUXrZl_-wSgaazA\",\r\n    \"QdSffzNzzd0n60MsSmuiKj6Y6Enk2b-BS-KtEePde5M\",\r\n    \"JFu99NUXPq55f6DFBZ22rMkxMNHayCrfPG0FDsqbyDs\",\r\n    \"Ia1Tc6_Xnt5CJc2LtKcu6Wvqr42glBGGcjGOye8Zf3U\"\r\n  ],\r\n  \"hash_alg\": \"sha-256\"\r\n}\r\n````\r\nThe related SVC could be as follows\r\n````\r\n{\r\n  \"sd_release\": {\r\n    \"LbnhkOr5oS7KjeUrxezAu8TG0CpWz0jSixy6tffuo04\": {\"claim\": \"sub\", \"value\": \"6c5c0a49-b589-431d-bae7-219122a9ec2c\", salt: \"eluV5Og3gSNII8EYnsxA_A\"},\r\n    \"fUMdn88aaoyKTHrvZd6AuLmPraGhPJ0zF5r_JhxCVZs\": {\"claim\": \"given_name\", \"value\": \"John\", \"salt\": \"6Ij7tM-a5iVPGboS5tmvVA\"},\r\n...\r\n  }\r\n}\r\n````\r\n\r\n",
      "createdAt": "2022-06-24T23:05:42Z",
      "updatedAt": "2022-07-14T23:46:51Z",
      "closedAt": "2022-07-14T23:46:51Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Would that work well with structured claims, like the eKYC example?",
          "createdAt": "2022-06-29T19:06:14Z",
          "updatedAt": "2022-06-29T19:06:14Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "You write\r\n\r\n> defining an additional structure type to the current three available to date (simple, structured, complex). \r\n\r\nJust to ensure that we're all on the same page: These three are not defined in the spec and are not intended to be. There is just one type, it just so happens that the 'flat' structure will probably be a common use case. It is therefore used in Example 1. But it is really just a special case of an essentially arbitrary JSON object.",
          "createdAt": "2022-06-29T20:45:19Z",
          "updatedAt": "2022-06-29T20:45:19Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "For the structured claims we can adopt the same approach, exposing only the hashed values pointing to a json object that defines salt, value and claim name\r\n\r\nin other words, the new `sd_digest` array should be flat",
          "createdAt": "2022-07-02T22:47:13Z",
          "updatedAt": "2022-07-03T00:30:05Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "If `sd_digests` is always flat, I assume that the 'structure' is reconstructed from the SD-JWT-R, where the holder uses parts of the structure from the SVC. In this case, how would you prevent a holder from tampering with the structure, e.g., moving a claim to a different part of the structure or creating a whole new structure?",
          "createdAt": "2022-07-04T12:04:21Z",
          "updatedAt": "2022-07-04T12:04:21Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "yes, I wonder on the possibile approaches, please add your thoughts. Regarding the structure:\r\n\r\n1. Abandon JSON Object to embedded JWT. This proposal seems to be [declined here](https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/37). so, let's look forward.\r\n\r\n2. define a rule, in the specs, about how the serialization of the json object must be done. No additional spaces and alphabetical ordering of the entries.\r\n\r\nAFAIK a SD-JWT is signed by a trusted issuer and is tamper proof.\r\nSD-JWT-R is released and optionally signed by a Holder. The Holder in SD-JWT-R uses the sd_digests taken from SD-JWT. The hash_alg is not per claim but is globally defined in the SD-JWT. If I understand well the Holder can't tamper the salt or the digest or the hash alg, for each claim.\r\n\r\nNeeds discussion. Consider me available for the implementation of a PoC to stress out all the possibile weakness of this proposal",
          "createdAt": "2022-07-04T12:21:14Z",
          "updatedAt": "2022-07-04T12:21:44Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I'm not sure if I'm following. I think it would be good if you could show an example of what a structured SD-JWT, SVC and SD-JWT-R would look like.",
          "createdAt": "2022-07-04T12:55:21Z",
          "updatedAt": "2022-07-04T12:55:21Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/106",
          "createdAt": "2022-07-14T23:46:51Z",
          "updatedAt": "2022-07-14T23:46:51Z"
        }
      ]
    },
    {
      "number": 81,
      "id": "I_kwDOHTmVzM5MjPF3",
      "title": "SVC values as strings or JSON Object?",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/81",
      "state": "CLOSED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "actually we have the SVC claims dumped as string, in this way\r\n\r\n````\r\n\"sub\": \"[\\\"eluV5Og3gSNII8EYnsxA_A\\\", \\\"6c5c0a49-b589-431d-bae7-219122a9ec2c\\\"]\",\r\n````\r\n\r\nis there any requirement to have these as strings or this is only an implementation flavour?\r\nWouldn't be better to have the claims values, in this JSON Object, as JSON Object as well?\r\n\r\nthis proposal makes the claims values as follows\r\n\r\n````\r\n\"sub\": [\"eluV5Og3gSNII8EYnsxA_A\", \"6c5c0a49-b589-431d-bae7-219122a9ec2c\"],\r\n````\r\n\r\nThis would reduce the encoding/parsing of the values as JSON Object during validation and also improve the readability, removing the escape characters provided by the json dump operation of the object as string.\r\n\r\n",
      "createdAt": "2022-06-24T23:18:56Z",
      "updatedAt": "2022-06-25T20:23:57Z",
      "closedAt": "2022-06-25T15:24:02Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "This is a duplicate of https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/27 - please see the discussion there.",
          "createdAt": "2022-06-25T15:24:02Z",
          "updatedAt": "2022-06-25T15:24:02Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "thank you @danielfett , I completely missed it!",
          "createdAt": "2022-06-25T20:23:56Z",
          "updatedAt": "2022-06-25T20:23:56Z"
        }
      ]
    },
    {
      "number": 84,
      "id": "I_kwDOHTmVzM5Mk0ZN",
      "title": "[Feature] JSON schema for SD-JWT",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/84",
      "state": "CLOSED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "pending-close"
      ],
      "body": "Once we resolve [this issue](https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/27) we'll be able to define a validation schema (in draft and in code) for SD-JWT, SVC and SD-JWT-R if you agree\r\n\r\nthe python implementation will adopts pydantic if you agree\r\n\r\nhere some examples\r\nhttps://github.com/italia/spid-cie-oidc-django/blob/main/spid_cie_oidc/entity/schemas/op_metadata.py#L84\r\nhttps://github.com/italia/spid-cie-oidc-django/blob/main/docs/schemas/METADATA.md",
      "createdAt": "2022-06-25T21:32:32Z",
      "updatedAt": "2023-01-31T21:18:27Z",
      "closedAt": "2023-01-31T21:18:27Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I do like the idea of having a JSON schema, and also generating it from Pydantic seems like a good idea!",
          "createdAt": "2022-06-27T14:39:48Z",
          "updatedAt": "2022-06-27T14:39:48Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "Ok consider it done after we decide the final structure of SD-JWT, SD-JWT-R and SVC payloads\r\n\r\nDo we consider to have an annex with the json-schemas in the draft?\r\nI can do a CLI paramenter to export all the schemas or the selected one to easiy update the annex examples",
          "createdAt": "2022-06-27T21:14:28Z",
          "updatedAt": "2022-06-27T21:14:28Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I think having the schemas in the annex makes sense.",
          "createdAt": "2022-06-30T06:52:39Z",
          "updatedAt": "2022-06-30T06:52:39Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "Ok, I can do a proposal in https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61 once we decide the final structure ",
          "createdAt": "2022-07-03T00:27:34Z",
          "updatedAt": "2022-07-03T00:27:34Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "We have now once more updated the structure of SD-JWTs. @peppelinux Do you see an advantage of a JSON Schema for the current structure? There is not too much we could define in such a schema, I think.",
          "createdAt": "2022-11-23T12:46:17Z",
          "updatedAt": "2022-11-23T12:46:17Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "I think that his schema is not relevant for the draft, could have been interesting inside the sample code in python but I doubt it is of any strategic use for SD-JWT",
          "createdAt": "2023-01-31T21:18:27Z",
          "updatedAt": "2023-01-31T21:18:27Z"
        }
      ]
    },
    {
      "number": 85,
      "id": "I_kwDOHTmVzM5MlNLo",
      "title": "Delineation of the entity and process",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/85",
      "state": "CLOSED",
      "author": "sakimura",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "# Comment: \r\nIn this document, issuer, holder, and verifier are entities and not processes. \r\nObviously, a holder, typically a human being, cannot receive the electronic communication directly, so there needs to be a process that runs on a computing device to receive the communication. \r\nThis distinction is important when discussing privacy as the process may be run by a processor under the control of the holder instead of the holder running it themselves. So, at least, something like holder-agent needs to be introduced. This will be used in my other comments to define security and privacy properties. \r\n\r\n# Proposal: \r\nDefine holder-agent as \u201cprocess that is used by the holder to obtain, store and present the claim sets\u201d\r\n",
      "createdAt": "2022-06-26T06:26:41Z",
      "updatedAt": "2023-06-02T01:52:38Z",
      "closedAt": "2023-06-02T01:52:37Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "> Holder:  An entity that received SD-JWTs from the Issuer and has control over them.\r\n\r\nJust like the Issuer is not an admin using Issuance infrastructure, and Verifier is not a police officer but a SW app it uses, Holder is meant not as a human being, but a SW application used.",
          "createdAt": "2022-10-24T20:11:32Z",
          "updatedAt": "2022-10-24T20:11:32Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "we think this was sufficiently addressed by a merged PR #91",
          "createdAt": "2023-06-02T01:52:37Z",
          "updatedAt": "2023-06-02T01:52:37Z"
        }
      ]
    },
    {
      "number": 86,
      "id": "I_kwDOHTmVzM5MlNOn",
      "title": "Notation clarification",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/86",
      "state": "CLOSED",
      "author": "sakimura",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "# Comment\r\nIs the notation used to build this ABNF? (Looks a bit different). We should state what notation we are using.\r\n\r\n# Proposal\r\nState what notation scheme it is using with reference to the format definition. ",
      "createdAt": "2022-06-26T06:27:43Z",
      "updatedAt": "2023-03-01T00:14:53Z",
      "closedAt": "2023-03-01T00:14:53Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Depends on Issue #203 ",
          "createdAt": "2023-02-06T16:45:53Z",
          "updatedAt": "2023-02-06T16:45:53Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "the pseudo notation has been removed with merge of PR #217 ",
          "createdAt": "2023-03-01T00:14:53Z",
          "updatedAt": "2023-03-01T00:14:53Z"
        }
      ]
    },
    {
      "number": 87,
      "id": "I_kwDOHTmVzM5MlNZR",
      "title": "Security and privacy targets not defined",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/87",
      "state": "CLOSED",
      "author": "sakimura",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "danielfett"
      ],
      "labels": [],
      "body": "# Comments\r\nFrom the current version of the document, the security and privacy target is not really defined but only a mechanism is defined as \u201cAn SD-JWT, at its core, is a digitally signed document containing hashes over the claim values with unique salts and other metadata. It MUST be digitally signed using the issuer's private key\u201d. Explicitly defining security and privacy goals may be desired. \r\n\r\n# Proposal\r\n \r\nAdd the following at the beginning of \u201cConcept\u201d\r\n\r\nFrom the point of view of the collection limitation, which is one of the main privacy principles, it is desirable to be able to provide only the claims necessary for the verifier to process. In the case of a standard JWT [RFC7519], however, this can only be achieved when the JWT is minted afresh each time and it is not possible to re-use the JWT that is pre-minted for other occasions. For example, a holder may want to re-use the document that contains name, address (municipality, street address, room number), date of birth, and National Identification Number to prove that he is a resident of the municipality so that he can receive the service to the resident. In the case of the normal JWT, this is not possible as the signature is over the entire claim set directly. To achieve it, a JWT that only contains the claim about the municipality needs to be minted. \r\n\r\nSelective disclosure JWT (SD-JWT) aims to address this issue by introducing an indirection: sign the salted hash of the claims instead of the claim set and provide only the claim value of the claim that is required to be processed by the receiver, which assumes the verifier role. This way, while the claim names and the salted hash of the claim values of all the claims contained in the document issued by the issuer is disclosed, the claim values of other claims are not in principle. \r\n\r\nIn this document, a protocol is considered to fulfil the selective disclosure property when it has the following properties: \r\n\r\n## R1. Strong uncoverability\r\n\r\nA protocol is said to achieve strong uncoverability if the adversary acting as the verifier cannot successfully find the claim values that were not intended to be disclosed to the verifier, with a probability significantly better than negligible. \r\n\r\n## R2. Weak uncoverability\r\n\r\nWhile strong uncoverability is desirable, it is not trivial to achieve it. For example, if the original document was a passport that came with the signature of the national authority, then just by looking at the issuer and its signature, it is trivial to find the nationality of the subject in the release. Also, if the existence of the claim name in the release makes it possible for the verifier to guess the value with a probability significantly better than negligible, then it does not satisfy strong uncoverability. \r\n\r\nWith these considerations, weak uncoverability is defined as follows: \r\n\r\nA protocol is said to achieve weak uncoverability if the adversary acting as the verifier cannot successfully find the claim values that were not intended to be disclosed to the verifier from the section of the release that directly corresponds with the claim, with a probability significantly better than negligible.  \r\n\r\n## R3. Release confidentiality\r\n\r\nA protocol is said to achieve release confidentiality if the adversary that can observe the content of all protocol exchanges between the holder agent and the verifier cannot find the claims with a probability significantly better than negligible. \r\n\r\n## R4. Unforgeability\r\n\r\nUnforegeability ensures that an adversary acting as a holder (dishonest holder) cannot forge a release that makes the verifier believe the false value.  \r\n\r\nThe game is defined as follows. Arbitrary entities play the role of issuer and verifier while the adversary plays the role of the holder at each stage of the protocol. A is subjected to the game where sequentially: \r\n\r\n1. Issuer and verifier execute the setup/registration phase (if any). \r\n2. Issuer and adversary playing the role of holder execute the issuance phase in which issuer issues claim set attached to the honest holder C to the adversary. \r\n3. Adversary playing the role of holder and verifier executes the release phase for a policy P that is not satisfied by C. \r\n4. The winning event for the adversary is defined as a successful authentication towards the verifier. \r\n\r\nThe protocol achieves unforgeability if it is unfeasible for the adversary to win with a probability significantly better than negligible. \r\n\r\n## Security and privacy target of SD-JWT and SD-JWT release\r\n\r\nT1. SD-JWT, SD-JWT release with associated protocol execution fulfils R2, R3, and R4. \r\n\r\nNote: See privacy consideration for more discussion.",
      "createdAt": "2022-06-26T06:30:58Z",
      "updatedAt": "2023-03-13T12:50:59Z",
      "closedAt": "2023-03-13T12:50:59Z",
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "Would R1 be covered by this proposal https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/80 ?",
          "createdAt": "2022-06-26T15:25:51Z",
          "updatedAt": "2022-06-26T15:25:51Z"
        },
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@peppelinux I will review it tomorrow. I took a sleeping pill a few minutes ago and probably not good to review it in this state.  (It is 1:17 AM now.) \r\n\r\nBy the way, the current draft does not even fulfil R2 except in special cases where there are large enough value possibilities in the value itself. Is this really what we want? If this is what the community wants, I am ok with it, but my preference is to make it a bit better to require R2. \r\n\r\nIn the privacy consideration, PR #91, I have provided one way of doing it. when the value is supposed to be text. \r\nBasically, making it as follows work. \r\n\r\nSD-CLAIMS = (\r\n    CLAIM-NAME: HASH(SALT | HASH(SALT | CLAIM-VALUE))\r\n)*\r\n\r\n\r\n",
          "createdAt": "2022-06-26T16:29:38Z",
          "updatedAt": "2022-06-26T16:29:38Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "In my understanding, we are not defining a protocol. we are defining an extension to JWT, which is defines as a \"compact, URL-safe means of representing claims to be transferred between two parties\" over the protocol of the choice of those parties.\r\n\r\nWhich is why I am also not comfortable defining properties R1-R4 in this document. For example R3 is out of scope of this specification defining means of representing claims, and is in scope for a specification defining \"protocol exchanges\". We could add text in privacy considerations section guiding implementers to consider these aspects when choosing the \"exchange protocol\". Are notions R1-R4 defined in any other document? is there are a reference we can point to?",
          "createdAt": "2022-06-27T03:12:36Z",
          "updatedAt": "2022-06-27T03:12:36Z"
        },
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Unless you have defined assumptions and security targets, you will not be able to define a data format that is useful. In the case of JWT and JWS, we had ID Token and OpenID Connect as concrete use-case and assumptions. I am quite sure that we do here as well. \r\n\r\nFor example, are we sure that what we have in the draft right now is what we want? If it does not even fulfil weak uncoverability (R2), this is bad. Obviously, if we want weak uncoverability, we need to change the data format. \r\n\r\nFor R3, we could assume the channel is protected. If not, then we probably need to encrypt the data. \r\n\r\nAnd if we cannot show a way to achieve R4, it is pretty useless. The \"way\" is not in the scope of this document, but we need to make sure that there is a way. It may impact the data structure as you can see. \r\n\r\nWe do not want to create a security theatre. We need to create something that is useful and beneficial. ",
          "createdAt": "2022-06-27T10:15:19Z",
          "updatedAt": "2022-06-27T10:45:01Z"
        },
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Actually, I re-read the draft and it probably does provide R2 for existing claims. Anyway, we need to decide on what we want to achieve and check that it indeed does. ",
          "createdAt": "2022-06-27T10:46:12Z",
          "updatedAt": "2022-06-27T10:48:20Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I like Nat's proposal to define these or similar terms in our document. A lot!\r\n\r\nWhat we claim to achieve in the document needs to be guided by the requirements, and I think we need to discuss this in more details (e.g., hiding claim names).\r\n\r\n@Sakurann \r\n> In my understanding, we are not defining a protocol\r\n\r\nWe very much are, just not a network or web protocol. What is described in Concepts is essentially a protocol, without calling it that way - there are three parties and they exchange some messages. Nat's proposed adversary fits right into this.\r\n\r\nThe assumptions we make about this protocol (participants, adversaries) and the goals we want to achieve must guide our design process. This has been implicit so far, we should make it more explicit.",
          "createdAt": "2022-06-27T11:08:15Z",
          "updatedAt": "2022-06-27T11:08:15Z"
        },
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Would R1 be covered by this proposal #80 ?\r\n\r\nYes, it goes towards it, although not completely. As described in my proposed privacy consideration text, the issuer identifier alone may be enough to break this so we may need to combine it with a group signature scheme or something like that. ",
          "createdAt": "2022-06-27T11:35:45Z",
          "updatedAt": "2022-06-27T11:35:45Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "So in layman terms, what is being proposed in this PR and the issue are the following security goals, correct?\r\n1. SD-JWT does not allow the attacker to find the claim values that were intended to be disclosed to another legitimate verifier.\r\n2. SD-JWT does not allow the attacker to obtain claims even if it has access to all of the protocol exchanges between the holder and the legitimate verifier.\r\n3. SD-JWT does not allow the attacker to create a release that would make verifier to trust claim values not originally signed by the issuer.\r\n \r\n- On 1 and 2, this is where in my mind this cannot be achieved only by using SD-JWT, but requires other \"protocols\". Plain text release contains actual claim values! so to achieve this property, release has to be sent over TLS, or session encrypted BLE/NFC, but we cannot force that in this SD-JWT document itself. and this is where audience restriction and nonces also come into play.\r\n- On 3, I agree with this one. it is achieved by including hashes in SD-JWT, but can be undermined if verifier does not perform hash computation.",
          "createdAt": "2022-07-17T22:08:13Z",
          "updatedAt": "2022-07-17T22:13:07Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree we need to explain security goals of the design choices made in SD-JWT document. Could we first agree on those security goals? \r\n\r\nTo those three outlined in this document above, I would add basic ones:\r\n- Integrity protection - Issuer's signature on SD-JWT\r\n- optionally, when holder binding is present - prevention of cloning of SD-JWT and MITM by signing the release using holder's key\r\n\r\nI am sure I missed something, and maybe this has been meant in current PR text, but I re-read the PR text couple of times and was still left confused..",
          "createdAt": "2022-07-17T22:13:44Z",
          "updatedAt": "2022-07-17T22:13:44Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Once we agree on the security goals, could we also brainstorm fitting terms - \"strong uncoverability\", \"weak uncoverability\", \"release confidentiality\", \"unforgeability\" have not been the most intuitive for me, but maybe that's only me.",
          "createdAt": "2022-07-17T22:14:47Z",
          "updatedAt": "2022-07-17T22:14:47Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "We merged PR #225 to define the security targets. I opened Issue #235 to add more details on the attacker model for a future version.",
          "createdAt": "2023-03-13T12:45:29Z",
          "updatedAt": "2023-03-13T12:50:57Z"
        }
      ]
    },
    {
      "number": 88,
      "id": "I_kwDOHTmVzM5MlNnb",
      "title": "Is \u201cPrivate key\u201d appropriate term to use? ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/88",
      "state": "CLOSED",
      "author": "sakimura",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "pending-close"
      ],
      "body": "# Comments\r\nPerhaps a signing key is more appropriate if it is a \u201cdigitally signed document\u201d\r\n\r\n# Proposals\r\nReplace \"private key\" with \"signing key\"",
      "createdAt": "2022-06-26T06:36:31Z",
      "updatedAt": "2023-02-22T17:47:21Z",
      "closedAt": "2023-02-22T17:47:20Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "What is a concern with using `private key`? Both [JWA](https://www.rfc-editor.org/rfc/rfc7518.html) and [JWS](https://datatracker.ietf.org/doc/html/rfc7515) use `private key`.",
          "createdAt": "2022-06-27T04:35:24Z",
          "updatedAt": "2022-06-27T04:35:24Z"
        },
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That was a comment I got from a cryptographer. I can ask them and get back to you. ",
          "createdAt": "2022-06-27T08:58:00Z",
          "updatedAt": "2022-06-27T08:58:00Z"
        },
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "So, the rationale was that ISO's cryptography working group (SC27/WG2) has completely moved away from the terminology and decided to use function-based naming (signature key, verification key) instead of secrecy-based naming (private key, public key) as a private key does not necessarily have an ability to sign: you would have to specify a pairing algorithm with the word \"private key\" to make it sure that it is a signature key. \r\n\r\nThen, another cryptographer in the room told me that they prefer the term \"secret key\" that, while not all of them have abilities to sign, is a better name because then the reader/user will know that it has to be kept secret.\r\n\r\nAnother view given was that \"private key\" may imply a world where only Asymmetric and Symmetric crypto is there, which is not the case. \r\n\r\nMy 2c. ",
          "createdAt": "2022-06-27T10:36:15Z",
          "updatedAt": "2022-06-27T10:36:15Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "To @Sakurann's point above, all the closely related specs use the term private key. rfc7518, rfc7800, rfc7520, rfc8037  being just a few others. It's a common term that's generally well understood. I believe it'd be a mistake to deviate from the norm. ",
          "createdAt": "2023-02-17T17:56:05Z",
          "updatedAt": "2023-02-17T17:56:05Z"
        }
      ]
    },
    {
      "number": 89,
      "id": "I_kwDOHTmVzM5MlN0b",
      "title": "Explain what is selective disclosure",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/89",
      "state": "CLOSED",
      "author": "sakimura",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "# Comments\r\nConcept of selective disclosure is not obvious for many readers so it needs to be explained\r\n\r\n# Proposals\r\nIn the terms and definition, define it as follows\r\n\r\nselective disclosure\r\nprocess of disclosing a subset of claims contained in a claim set\r\n",
      "createdAt": "2022-06-26T06:41:59Z",
      "updatedAt": "2022-10-19T06:33:57Z",
      "closedAt": "2022-10-19T06:33:56Z",
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, this is not the first time I hear this question, it's not banal at all",
          "createdAt": "2022-07-06T21:28:06Z",
          "updatedAt": "2022-07-06T21:28:06Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #147",
          "createdAt": "2022-10-01T04:40:14Z",
          "updatedAt": "2022-10-01T04:40:14Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR merged",
          "createdAt": "2022-10-19T06:33:56Z",
          "updatedAt": "2022-10-19T06:33:56Z"
        }
      ]
    },
    {
      "number": 90,
      "id": "I_kwDOHTmVzM5MlN3I",
      "title": "Terms and definition formatting error",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/90",
      "state": "CLOSED",
      "author": "sakimura",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "# Comments\r\nWhile some of the definitions refer to other terms with numbers, the corresponding term is not numbered. \r\n\r\n# Proposals\r\nAdd numbers and reformat. ",
      "createdAt": "2022-06-26T06:43:09Z",
      "updatedAt": "2022-11-23T12:44:48Z",
      "closedAt": "2022-11-23T12:44:47Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I think we should remove the references with numbers since they are not required anyway.\r\n\r\nThe format we're using for the terms is a somewhat official one, using features provided by xml2rfc. Not sure if it is the best one, though.",
          "createdAt": "2022-06-27T10:56:33Z",
          "updatedAt": "2022-06-27T10:56:33Z"
        },
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Removing the numbers is one way to remove the inconsistency and I am fine with it. It should be one way or another and be consistent. \r\n\r\nHaving said that, the current format is hard to read, unfortunately. \r\n\r\nAlso, I know it is not a norm in IETF, but relying on upper-casing for defined words and keywords is a bad idea, as they often do not translate. So, we should make sure that the defined terms would not appear in the main text in a dictionary meaning regardless of the case. ",
          "createdAt": "2022-06-28T07:43:08Z",
          "updatedAt": "2022-06-28T07:43:08Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "We switched to a format that is also used in other published RFCs. The new format has a bit too much wide space, but otherwise works fine.",
          "createdAt": "2022-11-23T12:44:47Z",
          "updatedAt": "2022-11-23T12:44:47Z"
        }
      ]
    },
    {
      "number": 91,
      "id": "I_kwDOHTmVzM5MlPvU",
      "title": "Create decent privacy considerations",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/91",
      "state": "CLOSED",
      "author": "sakimura",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "Sakurann"
      ],
      "labels": [],
      "body": "# Comment\r\nWhile many people attached in this field seem to focus on loosely defined notion of unlinkability, it is not only the factor to be considered. Also, the notion of unlinkability can be more regorously defined as in ISO/IEC 27551 and it is essential to consider in that rigor. \r\n\r\n# Proposal: \r\nUse the following text. \r\n\r\n# Privacy considerations\r\n\r\nPrivacy protection can be considered from the following principles per ISO/IEC 29100.  \r\n\r\n\t1.\tConsent and choice \r\n\t2.\tPurpose legitimacy and specification \r\n\t3.\tCollection limitation \r\n\t4.\tData minimization \r\n\t5.\tUse, retention and disclosure limitation \r\n\t6.\tAccuracy and quality \r\n\t7.\tOpenness, transparency and notice \r\n\t8.\tIndividual participation and access \r\n\t9.\tAccountability \r\n\t10.\tInformation security \r\n\t11.\tPrivacy compliance \r\n\r\nAmong them, this document is concerned directly with 3. Collection limitation and indirectly/partially with 1. Consent and choice, 2. Purpose legitimacy and specification, 6. Accuracy and quality, and 10. Information security.  \r\n\r\nOften talked unlinkability is a subset of 3. Collection limitation as it amounts to providing unintended (by the holder) information such as the fact that the holder visited a verifier to another verifier. \r\n\r\n## Collection limitation\r\n\r\nIn this document, Collection limitation is considered from two aspects. \r\n\r\n1. Uncoverability\r\n2. Unlinkability\r\n\r\n### Uncoverability\r\n\r\nThe concept of uncoverability was discussed in clause 3. In this subclause, this document further discusses it in more detail. \r\n\r\n#### Uncovering the values of non-existent claims from issuer identifier\r\nWhen an issuer issues only one type of SD-JWT, it is often possible to recover some attributes about the holder. \r\nFor example, if the issuer was an authority that only issues driver's licenses in this format, \r\nthen, just by looking at the issuer and the document itself, it can be deterministically recovered that the holder has a driving license. While revealing that the holder has a driving license may not have much privacy impact, \r\nif it was other attributes, it could be quite a privacy-sensitive. \r\n\r\nFor example, suppose the case where the SD-JWT was issued by National Cancer Centre. \r\nThen, by just looking at the issuer, it is possible to deduce that the holder is a cancer patient. \r\nThis may have a fair amount of privacy impact. \r\n\r\nTo mitigate this kind of issue, a group of issuers may elect to use a common issuer identifier and use a group signature scheme instead of an individual signature. \r\n\r\n#### Uncovering the values of non-existent claims from the list of claim names\r\nEven if a group of issuers uses a common issuer identifier, if the claims used are unique from one issuer to another, \r\nthe list of the claim names would be enough to identify the real issuer. In this case, the values of non-existent claims can be uncovered in the same manner as described in the previous subclause. \r\n\r\nTo mitigate this kind of issue, the group of issuers may elect to use a common set of claims and always include them in the SD-JWT. \r\n\r\n#### Uncovering the claim value where the number of possible values is limited\r\n\r\nWhen the number of possible values of the claim is limited, it is trivial to uncover the actual value from the salt and the hash. \r\nIt suffices to iterate over the possible values with the provided hash. \r\n\r\nTo mitigate this kind of issue, the issuer may add a random string to provide entropy at the end of the actual value with an appropriate delimiter in the case the value is a string. For other data types like boolean, some other mechanisms should be considered, e.g., defining a transform from boolean to a string using the entropy string. \r\n\r\n\r\n### Unlinkability\r\n\r\nThe notion of unlinkability cannot be defined precisely without specifying the role assumed by the adversary and the target of the attack. In ISO/IEC 27551, the following notation is used to describe a different kind of unlinkability. \r\n\r\n    (Adversary)\u2013(Target) Unlinkability\r\n\r\nNOTE: The notation is modified to group the Adversary and Target with a parenthesis to make it easier to read when adopted this document's entity name. \r\n\r\nIn the case two parties are colluding as the adversary, the colluding parties are concatenated with \"+\" sign to express it. \r\n\r\n    (Adversar1+Adversary2)\u2013(Target) Unlinkability\r\n\r\nThe same applies to the target. \r\n\r\nWith this notation, ISO/IEC 27551 defines the following eight types of unlinkability. (Entity names are modified to match this document. Corresponding ISO/IEC 27551 unlinkability names are given in braces after it). \r\n\r\n1. (Passive Outsider)\u2013(Holder) Unlinkability [PO-U]\r\n2. (Active Outsider)\u2013(Holder) Unlinkability [AO-U]\r\n3. (Verifier 1 + Verifier 2)\u2013(Holder) Unlinkability [RP+RP'\u2013U]\r\n4. (Issuer)\u2013(Holder) Unlinkability [AP\u2013U]\r\n5. (Verifier)\u2013(Holder) Unlinkability [RP\u2013U]\r\n6. (Issuer)\u2013(Verifier) Unlinkability [AP\u2013RP]\r\n7. (Issuer+Verifier)\u2013(Holder) Unlinkability [AP+RP-U]\r\n8. (Issuer)\u2013(Holder+Verifier) Unlinkability [AP-RP+U]\r\n\r\n#### (Passive Outsider)\u2013(Holder) Unlinkability [PO-U]\r\nWhen all the protocol runs are encrypted, e.g., by TLS, then a Passive Outside cannot see the content of SD-JWT and SD-JWT-R. \r\nIn other words, the protocol runs should be encrypted to achieve this unlinkability. \r\n\r\n####  (Active Outsider)\u2013(Holder) Unlinkability [AO-U]\r\n\r\n(TBD)\r\n\r\n#### (Verifier 1 + Verifier 2)\u2013(Holder) Unlinkability [RP+RP'\u2013U]\r\n\r\n(TBD)\r\n\r\n#### (Issuer)\u2013(Holder) Unlinkability [AP\u2013U]\r\n\r\n(TBD)\r\n\r\n#### (Verifier)\u2013(Holder) Unlinkability [RP\u2013U]\r\n\r\n(TBD)\r\n\r\n#### (Issuer)\u2013(Verifier) Unlinkability [AP\u2013RP]\r\n\r\n(TBD)\r\n\r\n#### (Issuer+Verifier)\u2013(Holder) Unlinkability [AP+RP-U]\r\n\r\n(TBD)\r\n\r\n#### (Issuer)\u2013(Holder+Verifier) Unlinkability [AP-RP+U]\r\n\r\n(TBD)\r\n\r\n## Consent and choice\r\n\r\n(TBD)\r\n\r\n\r\n## Purpose legitimacy and specification\r\n\r\n(TBD)\r\n\r\n\r\n## Accuracy and quality\r\n\r\n(TBD)\r\n\r\n\r\n## Information security\r\n\r\n(TBD)\r\n\r\n",
      "createdAt": "2022-06-26T07:25:03Z",
      "updatedAt": "2023-03-13T12:52:30Z",
      "closedAt": "2023-03-13T12:52:30Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Nat, can SD-JWT be used to achieve any of the eight types of unlinkability defined in ISO/IEC 27551, regardless of which \"exchange protocol\" is used? If it achieves none, we should just say so. If it achieves one or more of the eight, we should focus on those.",
          "createdAt": "2022-06-27T04:31:48Z",
          "updatedAt": "2022-06-27T04:31:48Z"
        },
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Unlinkability cannot be discussed without referring to exchange protocol. By choosing a suitably protective protocol (including issuance and presentation), we could certainly achieve 1,2,3,5,6, I think, from my gut feeling. They need to be demonstrated and that's why this exercise is useful. \r\n\r\nBTW, SD-JWT is mainly on uncoverability if I understand correctly and thus that should be the main focus of the discussion, while unlinkability tend to draw people's attention more. ",
          "createdAt": "2022-06-27T08:56:43Z",
          "updatedAt": "2022-06-27T08:56:43Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "discussed with Daniel the direction: \"if you have a transport that has this properties, you can get the following privacy projections. Probably with some limitations. Some things are not fulfillable when entities collaborate - ie when RP-RP' or Issuer-RP collaborate.\"\r\n",
          "createdAt": "2022-07-18T15:41:35Z",
          "updatedAt": "2022-07-18T15:41:35Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I re-read 27551 and have the idea how to fill in the gaps. @sakimura would you be ok with me doing a PR on top of your PRs #87 and #93 ?\r\n\r\n\t- PO-U: anti-tracking from passing outsiders\r\n\t\t- All claim values included as plain text in SD-JWT-R\r\n\t\t- ISO recommends careful use of encryption throughout the protocol.\r\n\t- AO-U: anti-tracking from active outsiders\r\n\t\t- Without holder binding, if the AO intercepts both SD-JWT and SVC, can impersonate\r\n\t\t- ISO recommends Carefully using the correct combination of existing encryption and authentication throughout the protocol\r\n\t- RP-U: user's \"anonymous visits\" to an RP\r\n\t\t- same SD-JWT presented to the same R, can be correlated across transactions\r\n\t\t- (no solution in proposed in ISO)\r\n\t- AP-U: AP=IdP in federation and AP=issuer in VC\r\n\t\t- If issuance decoupled from presentation and no issuer call home during revocation, etc. can be achieved?\r\n\t- RP+AP-U: Issuer and RP colludes\r\n\t\t- If issuance decoupled from presentation and no issuer call home during revocation, etc. can be achieved\r\n\t- AP-RP: anti-tracking of RP from AP\r\n\t\t- If issuance decoupled from presentation and no issuer call home during revocation, etc. can be achieved\r\n\t- AP-RP+U: same pair of entities involved in multiple transactions\r\n\t\t- not much you can do when RPs collaborate\r\n\t- RP+RP'-U: anti-tracking of U from a set of colluding RPs\r\n\t\t- ISO says Achieving RP-U leads to achieving RP+RP'-U\r\n\t\t- not much you can do when RPs collaborate\r\n",
          "createdAt": "2022-07-18T15:53:26Z",
          "updatedAt": "2022-07-18T15:53:26Z"
        },
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sorry, I did not have time to review it till now. I will do so tomorrow\nmorning. (I have another three hours of calls remaining today...)\n\nOn Tue, Jul 19, 2022 at 12:53 AM Kristina ***@***.***> wrote:\n\n> I re-read 27551 and have the idea how to fill in the gaps. @sakimura\n> <https://github.com/sakimura> would you be ok with me doing a PR on top\n> of your PRs #87\n> <https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/87>\n> and #93\n> <https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/93> ?\n>\n> - PO-U: anti-tracking from passing outsiders\n> \t- All claim values included as plain text in SD-JWT-R\n> \t- ISO recommends careful use of encryption throughout the protocol.\n> - AO-U: anti-tracking from active outsiders\n> \t- Without holder binding, if the AO intercepts both SD-JWT and SVC, can impersonate\n> \t- ISO recommends Carefully using the correct combination of existing encryption and authentication throughout the protocol\n> - RP-U: user's \"anonymous visits\" to an RP\n> \t- same SD-JWT presented to the same R, can be correlated across transactions\n> \t- (no solution in proposed in ISO)\n> - AP-U: AP=IdP in federation and AP=issuer in VC\n> \t- If issuance decoupled from presentation and no issuer call home during revocation, etc. can be achieved?\n> - RP+AP-U: Issuer and RP colludes\n> \t- If issuance decoupled from presentation and no issuer call home during revocation, etc. can be achieved\n> - AP-RP: anti-tracking of RP from AP\n> \t- If issuance decoupled from presentation and no issuer call home during revocation, etc. can be achieved\n> - AP-RP+U: same pair of entities involved in multiple transactions\n> \t- not much you can do when RPs collaborate\n> - RP+RP'-U: anti-tracking of U from a set of colluding RPs\n> \t- ISO says Achieving RP-U leads to achieving RP+RP'-U\n> \t- not much you can do when RPs collaborate\n>\n> \u2014\n> Reply to this email directly, view it on GitHub\n> <https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/91#issuecomment-1187671167>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AABFENZM2MCJGL6RILJ5HKLVUV4YBANCNFSM5Z3QCP5Q>\n> .\n> You are receiving this because you were mentioned.Message ID:\n> ***@***.***\n> com>\n>\n\n\n-- \nNat Sakimura (=nat)\nChairman, OpenID Foundation\nhttp://nat.sakimura.org/\n@_nat_en\n",
          "createdAt": "2022-07-20T13:00:17Z",
          "updatedAt": "2022-07-20T13:00:17Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "take into account #85 when writing privacy consideration.\r\n",
          "createdAt": "2023-02-28T17:21:05Z",
          "updatedAt": "2023-02-28T17:21:05Z"
        }
      ]
    },
    {
      "number": 94,
      "id": "I_kwDOHTmVzM5MlQPE",
      "title": "Should we move normative requirements from \"Security Considerations\" to the main text? ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/94",
      "state": "CLOSED",
      "author": "sakimura",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "pending-close"
      ],
      "body": "# Comments\r\nI know we sometimes do it, but I reckon that it is not a good practice to have normative requirements in the Security and Privacy considerations. \r\n\r\n# Proposal\r\nConsider moving those MUSTs to the main text. ",
      "createdAt": "2022-06-26T07:36:02Z",
      "updatedAt": "2023-03-07T20:09:17Z",
      "closedAt": "2023-03-07T20:09:17Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Is there a requirement from IETF to not have MUST in security considerations?\r\n\r\nIf not, I do not see a big problem keeping MUST in security/privacy considerations. specs like JWS/JWT that this spec builds on have MUSTs in normative sections: https://www.rfc-editor.org/rfc/rfc7515#section-10",
          "createdAt": "2023-03-07T16:56:32Z",
          "updatedAt": "2023-03-07T16:56:32Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "AFAIK there are some IETF folks that prefer not to have normative language in security/privacy considerations but there's no definitive requirement as such. And to @Sakurann's point, there are lots of RFCs that do it. Moving those MUSTs to the main text would be unnecessary work and risk. ",
          "createdAt": "2023-03-07T17:25:59Z",
          "updatedAt": "2023-03-07T17:25:59Z"
        }
      ]
    },
    {
      "number": 95,
      "id": "I_kwDOHTmVzM5MlQaU",
      "title": "Each requirement should be listed as a numbered/labeled paragraph",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/95",
      "state": "CLOSED",
      "author": "sakimura",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "pending-close"
      ],
      "body": "# Comments\r\nCurrently, multiple \"MUST\" exists in one paragraph/sentence. They are not labelled either. \r\nMaking each requirement an independent paragraph with a label will make a building of a conformance suite much easier. \r\n\r\n# Proposals\r\nGive mandate to editors to modify the text so that each requirement and recommendation are separated out and labelled. ",
      "createdAt": "2022-06-26T07:39:54Z",
      "updatedAt": "2023-01-18T16:27:14Z",
      "closedAt": "2023-01-18T16:27:13Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "can you please point us to an example where requirements are labelled within the text? Will do wrt one MUST per paragraph/sentence.",
          "createdAt": "2022-06-27T04:33:18Z",
          "updatedAt": "2022-06-27T04:33:18Z"
        },
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I am not sure of what you are asking, but if you mean examples of specs that are doing the labelling or numbering, FAPI specs are doing like that. We adopted the structure specifically to be efficient in creating a conformance test suite so the conformance suite test number is tied to the spec's clause number. Another example for labelling is ISO/IEC 31700. When you are writing a conformance report, this indeed does make difference. ",
          "createdAt": "2022-06-27T08:49:47Z",
          "updatedAt": "2022-06-27T08:49:47Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "pointer to FAPI helps, that is what I have been asking for, since it is not a common style of writing specs in OpenID or IETF OAuth WG AFAIK.",
          "createdAt": "2022-06-27T15:43:38Z",
          "updatedAt": "2022-06-27T15:43:38Z"
        },
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I can point to the most recent draft of FAPI 2.0 Security profile [here](https://openid.bitbucket.io/fapi/fapi-2_0-security.html). \r\n\r\nHaving said that, if you go to OpenID Foundation's specifications page (there is a link in the top menu bar), you will find more of FAPI specs, of which FAPI 1.0 is a final and well-deployed specification. OpenID Foundation's [specification page](https://openid.net/developers/specs/). ",
          "createdAt": "2022-06-27T18:00:23Z",
          "updatedAt": "2022-06-27T18:00:23Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I'm not sure this will be easy for us to accomplish here, as we need to interleave explanations, examples, and normative requirements. For FAPI this is easier, as it does not need to describe the protocol. ",
          "createdAt": "2022-06-28T07:09:29Z",
          "updatedAt": "2022-06-28T07:09:29Z"
        },
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I understand that but it is doable. It probably is kind of hard to auto-number them, but we could label each requirement and recommendation. ISO 31700 uses something like this, and so does ISO/IEC 15048-2 (AKA Common Criteria). \r\n\r\nFor example, the schematics below would achieve it. \r\n\r\n## Section Header explaining FOO BAR provisions\r\n\r\n### Introduction\r\nSome prose explains what is being explained. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. \r\n\r\nThere can be multiple paragraphs. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\r\n\r\n\r\n**FOO_BAR.1**: Foo MUST verify the signature using the provided verification key of bar.\r\n\r\nNote: Some explanatory notes about FOO_BAR.1 can be added as a note. \r\n\r\nSome further explanation introducing the next provision can be given here. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\r\n\r\n**FOO_BAR.2**: Foo SHOULD verify that the provided value is less than bar registered as the maximum value allowed.\r\n\r\nSome further explanation\r\n\r\n### Examples\r\n\r\nExamples go in here. \r\n",
          "createdAt": "2022-06-28T07:36:52Z",
          "updatedAt": "2022-06-28T07:36:52Z"
        },
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I can point to the most recent draft of FAPI 2.0 Security profile here:\nhttps://openid.bitbucket.io/fapi/fapi-2_0-security.html\n\nHaving said that, if you go to OpenID Foundation's specifications page\n(there is a link in the top menu bar), you will find more of FAPI specs, of\nwhich FAPI 1.0 is a final and well-deployed specification. OpenID\nFoundation's specification page ==> https://openid.net/developers/specs/\n\nOn Tue, Jun 28, 2022 at 1:44 AM Kristina ***@***.***> wrote:\n\n> pointer to FAPI helps, that is what I have been asking for, since it is\n> not a common style of writing specs in OpenID or IETF OAuth WG AFAIK.\n>\n> \u2014\n> Reply to this email directly, view it on GitHub\n> <https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/95#issuecomment-1167515711>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AABFENZLKWD6HVZG5B5NLVDVRHK5TANCNFSM5Z3QVFBQ>\n> .\n> You are receiving this because you authored the thread.Message ID:\n> ***@***.***\n> com>\n>\n\n\n-- \nNat Sakimura (=nat)\nChairman, OpenID Foundation\nhttp://nat.sakimura.org/\n@_nat_en\n",
          "createdAt": "2022-10-11T08:19:04Z",
          "updatedAt": "2022-10-11T08:19:04Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "this is an IETF draft and I do not believe there is a requirement to comply with ISO or OIDF style - there are IETF RFCs that mandate certain format and numbering/listing paragraphs is not one of those, if I am correct.",
          "createdAt": "2022-10-24T18:57:46Z",
          "updatedAt": "2022-10-24T18:57:46Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "editors agreed to stick to a current format",
          "createdAt": "2023-01-18T16:27:13Z",
          "updatedAt": "2023-01-18T16:27:13Z"
        }
      ]
    },
    {
      "number": 96,
      "id": "I_kwDOHTmVzM5MofIM",
      "title": "5.1.1 para 3 (ed) Is just stating \"JSON-encoding\" deterministic enought? ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/96",
      "state": "CLOSED",
      "author": "sakimura",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "# Comments\r\n\r\nIn 5.1.1 paragraph 3, it is stated \r\n\r\n> hashing over a string that is formed by JSON-encoding an ordered array containing the salt and the claim value\r\n\r\nIs it deterministic enough? For example, would not there be variations regarding whitespace, quoting, Unicode character normalization, etc.? \r\n\r\n# Proposal\r\nIf it is deterministic, I am fine with it, although I would appreciate a note explaining why. If not, we need to fix it :-)",
      "createdAt": "2022-06-27T11:45:15Z",
      "updatedAt": "2022-06-28T07:07:30Z",
      "closedAt": "2022-06-28T07:07:30Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "It is not deterministic, but since the value-to-be-hashed is shared with the verifier in the exact form it was hashed, there is no need for it to be deterministic.\r\n\r\nThis is being discussed in this issue: https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/27 \r\n\r\nKushal has rightfully pointed out that we need to make this more clear in the text: https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/51",
          "createdAt": "2022-06-27T14:36:50Z",
          "updatedAt": "2022-06-27T14:36:50Z"
        },
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ah, ok. So this is a dup of #51. Thanks.\n\nOn Tue, Jun 28, 2022 at 1:59 AM Daniel Fett ***@***.***>\nwrote:\n\n> It is not deterministic, but since the value-to-be-hashed is shared with\n> the verifier in the exact form it was hashed, there is no need for it to be\n> deterministic.\n>\n> This is being discussed in this issue: #27\n> <https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/27>\n>\n> Kushal has rightfully pointed out that we need to make this more clear in\n> the text: #51\n> <https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/51>\n>\n> \u2014\n> Reply to this email directly, view it on GitHub\n> <https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/96#issuecomment-1167435833>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AABFEN4ZJEJGGC2LH4BVMGDVRHMXRANCNFSM5Z6GRD7Q>\n> .\n> You are receiving this because you authored the thread.Message ID:\n> ***@***.***\n> com>\n>\n\n\n-- \nNat Sakimura (=nat)\nChairman, OpenID Foundation\nhttp://nat.sakimura.org/\n@_nat_en\n",
          "createdAt": "2022-06-27T17:57:55Z",
          "updatedAt": "2022-06-27T17:57:55Z"
        }
      ]
    },
    {
      "number": 98,
      "id": "I_kwDOHTmVzM5MtKQh",
      "title": "Underscore in front of `sd_release` and `sd_digests` claim names?",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/98",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "See the discussion in https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/42",
      "createdAt": "2022-06-28T07:26:02Z",
      "updatedAt": "2022-10-18T16:03:03Z",
      "closedAt": "2022-10-18T16:03:02Z",
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "No please \ud83d\ude04\r\nWhat an underscore would tell more or better regarding the nature of those claim names?",
          "createdAt": "2022-07-06T21:23:33Z",
          "updatedAt": "2022-07-06T21:23:33Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "We decided to keep the current claim names with the `sd_` prefix. ",
          "createdAt": "2022-10-18T16:03:02Z",
          "updatedAt": "2022-10-18T16:03:02Z"
        }
      ]
    },
    {
      "number": 99,
      "id": "I_kwDOHTmVzM5MtOxK",
      "title": "Consider using an HMAC instad of a prefix hash",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/99",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [
        "Sakurann"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "Neil wrote on the mailing list:\r\n\r\n> Commitments to claim values are of the form HASH(SALT | CLAIM-VALUE), but this does not necessarily commit the sender to CLAIM-VALUE. In section 7.4, I think you need to say that HASH must be collision resistant - otherwise the user can find two (salt, claim-value) pairs that collide and get the issuer to sign one and then reveal the other pair to the downstream party.\r\n> \r\n> The fact that HASH(SALT | CLAIM-VALUE) is vulnerable to length extension attacks is also troubling, even if I can\u2019t see an immediate attack. But it\u2019s a weird property that Bob, for example, could make a commitment to some extension of one of Alice\u2019s claims without actually knowing her claim value.\r\n> \r\n> You can address both of these issues by instead using a compactly committing PRF [1], such as HMAC- i.e., HMAC-HASH(SALT, CLAIM-VALUE) rather than simple prefix hash.\r\n\r\nI think this make a lot of sense and we should consider using an HMAC instead.\r\n",
      "createdAt": "2022-06-28T07:38:57Z",
      "updatedAt": "2022-10-19T06:33:17Z",
      "closedAt": "2022-10-19T06:33:17Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "+1\r\ncc: @christianpaquin ",
          "createdAt": "2022-06-29T01:16:40Z",
          "updatedAt": "2022-06-29T01:16:40Z"
        },
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "The spec shouldn't mandate or preclude a digest derivation function (DDF), but should require (MUST use) a collision- and preimage-resistant cryptographically secure one. Depending on the target application, a profile or deployment can mandate a particular DDF by requiring a particular hash function, KDF, or a more complex process (e.g., using truncated digests from strong hash functions to save space).",
          "createdAt": "2022-06-29T19:36:36Z",
          "updatedAt": "2022-06-29T19:36:36Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "cc @bifurcation ",
          "createdAt": "2022-08-25T23:05:12Z",
          "updatedAt": "2022-08-25T23:05:12Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "yes, the issuer of SD-JWT can deny hashing the claims, but the issuer cannot deny signing over the whole SD-JWT. Or is the concern that the malicious verifier can change the claim values and regenerate the hashes, but issuer will not have the means to prove that it originally generated different hashes?",
          "createdAt": "2022-08-25T23:46:49Z",
          "updatedAt": "2022-08-25T23:46:49Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "(on further discussion with @christianpaquin)\r\n\r\nThe spec should not mandate a particular digest derivation function, just like JWS does not mandate a signature algorithm. A random value used to generate a digest can be a salt (hash algorithm) or a key (HMAC). The former can be useful when there are constrains in space (e.g., to fit in a QR code), while the latter is more complex, but can help protect against brute-force attacks\r\n\r\nWe think it is a good idea to make it more explicit in the text that both approaches are allowed (currently it could be read as if HMAC is not).",
          "createdAt": "2022-08-27T05:09:00Z",
          "updatedAt": "2022-08-27T05:09:00Z"
        },
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "> The former can be useful when there are constrains in space (e.g., to fit in a QR code), while the latter is more complex, but can help protect against brute-force attacks\r\n\r\nTo clarify, all approaches must protect against brute-force attacks on the undisclosed attributes. If your target SD-JWT size is limited (e.g., in a QR embedding scenario), then you can sacrifice the salt and digest lengths by using a more expensive digest derivation function (e.g., PBKDF2-HMAC-SHA256-310000), as prototyped in [this project](https://github.com/christianpaquin/selective-disclosure). (Note: shorter digest lengths means truncating secure hash functions, not using weaker shorter ones.)",
          "createdAt": "2022-08-29T13:31:59Z",
          "updatedAt": "2022-08-29T13:31:59Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #149 \r\n\r\nSection 7.5 already states `For the security of this scheme, the hash function is required to be preimage and collision resistant`.\r\n\r\n",
          "createdAt": "2022-10-04T06:16:31Z",
          "updatedAt": "2022-10-04T06:16:31Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR merged",
          "createdAt": "2022-10-19T06:33:17Z",
          "updatedAt": "2022-10-19T06:33:17Z"
        }
      ]
    },
    {
      "number": 100,
      "id": "I_kwDOHTmVzM5MtO6w",
      "title": "Improve selection of hash algorithms",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/100",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Neil's comment on the mailing list:\r\n\r\n> It doesn\u2019t seem great to say that you can use any hash algorithm in the IANA registry, but then to rule out half of them as being not suitable in the security considerations - this list may go out of date as other hash algorithms are broken. Is it possible to update the IANA registry with a Recommended Y/N column? Also, shake128 and shake256 are not collision-resistant hash functions, they are XOFs that can produce any length of output - e.g. shake128 with a 32-bit output would not be collision-resistant and thus would not be at all suitable for this usage. Given these considerations, I might be tempted to create a new IANA registry, or perhaps just pick one good hash function. (Or maybe just use the same hash algorithm as the signature?)",
      "createdAt": "2022-06-28T07:39:29Z",
      "updatedAt": "2022-10-24T18:47:03Z",
      "closedAt": "2022-10-24T18:47:03Z",
      "comments": [
        {
          "author": "sbutterfield",
          "authorAssociation": "NONE",
          "body": "Is it better to specify a subset directly in the spec? \r\n\r\n> (Or maybe just use the same hash algorithm as the signature?)\r\n\r\nThis makes logical sense. Still doesn't get around the need for hash function specificity to ensure the attributes have sufficient cryptographic strength.",
          "createdAt": "2022-09-22T14:27:17Z",
          "updatedAt": "2022-09-22T14:27:17Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "mainly PR #149 ",
          "createdAt": "2022-10-24T18:47:03Z",
          "updatedAt": "2022-10-24T18:47:03Z"
        }
      ]
    },
    {
      "number": 102,
      "id": "I_kwDOHTmVzM5MtjZV",
      "title": "Example 1 includes twice the claim \"hash_alg\"",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/102",
      "state": "CLOSED",
      "author": "nikosft",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Example 1. in Section 5.2 includes `\"hash_alg\": \"sha-256\"` in line 6 and again in the last line. ",
      "createdAt": "2022-06-28T08:49:35Z",
      "updatedAt": "2022-06-29T01:12:59Z",
      "closedAt": "2022-06-29T01:12:59Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "thank you! resolved in PR #104 \r\nno changes in codes since the test code is generating SD-JWTs with only one hash_alg",
          "createdAt": "2022-06-29T01:12:59Z",
          "updatedAt": "2022-06-29T01:12:59Z"
        }
      ]
    },
    {
      "number": 103,
      "id": "I_kwDOHTmVzM5MvsjQ",
      "title": "Give advice on processing SD-JWTs for verifiers",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/103",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "In this discussion, the question around merging SD claims with non-SD claims came up: \r\nhttps://mailarchive.ietf.org/arch/msg/oauth/4jtL1vXWsYcyU99Gfe7n8jcONoA/\r\n\r\nI think it makes sense to discuss this in the spec, whether it ends up as normative text or not.",
      "createdAt": "2022-06-28T16:04:05Z",
      "updatedAt": "2022-10-17T07:30:50Z",
      "closedAt": "2022-10-17T07:30:50Z",
      "comments": [
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "FYI, that's what I currently do as a placeholder behavior in [my implementation](https://github.com/christianpaquin/sd-jwt), the disclosed claims are added in a `disclosedClaims` object in the returned JWT. It might not be right thing to do in all situations, but I think it would be useful to at least define one mechanism to do something like that (perhaps even encoding the claims directly in the JWT root). A verifier('s policy) only expects a JWT with some claims; it might not care if they are encoded directly or selectively disclosed from a hash based encoding (or derived from another claim in more advanced systems). Surfacing the calculated claims in the JWT offers the ability for libraries to perform this transformation, and leaving the RP's business logic close to intact.",
          "createdAt": "2022-07-01T19:32:26Z",
          "updatedAt": "2022-07-01T19:32:26Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "from the mailing list, how \"merging\" might look like in the vc-data-model example (also related to Issue #59)\r\n\r\nTake an SD-JWT as below:\r\n```\r\n     \"vc\": {\r\n       \"@context\": [\r\n         \"https://www.w3.org/2018/credentials/v1\",\r\n         \"https://www.w3.org/2018/credentials/examples/v1\"\r\n       ],\r\n       \"type\": [\r\n         \"VerifiableCredential\",\r\n         \"UniversityDegreeCredential\"\r\n       ]\r\n     },\r\n     \"sd_digests\": {\r\n       \"vc\":{\r\n           \"given_name\": \"fUMdn88aaoyKTHrvZd6AuLmPraGhPJ0zF5r_JhxCVZs\",\r\n           \"family_name\": \"9h5vgv6TpFV6GmnPtugiMLl5tHetHeb5X_2cKHjN7cw\",\r\n           \"birthdate\": \"fvLCnDm3r4VSYcBF3pIlXP4ulEoHuHOfG_YmFZEuxpQ\"\r\n        }\r\n     }\r\n   }\r\n```\r\nAnd merge it into\r\n```\r\n     \"vc\": {\r\n       \"@context\": [\r\n         \"https://www.w3.org/2018/credentials/v1\",\r\n         \"https://www.w3.org/2018/credentials/examples/v1\"\r\n       ],\r\n       \"type\": [\r\n         \"VerifiableCredential\",\r\n         \"UniversityDegreeCredential\"\r\n       ],\r\n         \"given_name\": \"fUMdn88aaoyKTHrvZd6AuLmPraGhPJ0zF5r_JhxCVZs\",\r\n         \"family_name\": \"9h5vgv6TpFV6GmnPtugiMLl5tHetHeb5X_2cKHjN7cw\",\r\n         \"birthdate\": \"fvLCnDm3r4VSYcBF3pIlXP4ulEoHuHOfG_YmFZEuxpQ\"\r\n     }\r\n```",
          "createdAt": "2022-07-05T22:40:59Z",
          "updatedAt": "2022-07-05T22:40:59Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "@Sakurann I'd prefer the adoption of the claim `sd_digests` \r\n\r\nthe hashed claims values are not the claims values and I think it's important giving, in a way or another, a clear type for each value, the container sd_digests and sd_releases do a good job for that.\r\n\r\nin alternative I wonder if we may adopt a VC scheme defining a new type like\r\n\r\n````\r\n       \"type\": [\r\n         \"VerifiableSelectiveDisclosableCredential\",\r\n         \"UniversityDegreeCredential\"\r\n       ],\r\n````\r\nand VerifiableSelectiveDisclosableCredential comes with its own schema where the digests would have their place without any other specification\r\n",
          "createdAt": "2022-07-23T23:40:28Z",
          "updatedAt": "2022-07-23T23:41:06Z"
        },
        {
          "author": "Muthurajj",
          "authorAssociation": "NONE",
          "body": "We have to merge the context and type in the claims ?\r\n\r\n",
          "createdAt": "2022-09-20T04:49:08Z",
          "updatedAt": "2022-09-20T04:49:08Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "no, there is only one `@context` and `type` claims in this SD-JWT-VC/SD-JWT-R",
          "createdAt": "2022-09-20T05:16:00Z",
          "updatedAt": "2022-09-20T05:16:00Z"
        },
        {
          "author": "Muthurajj",
          "authorAssociation": "NONE",
          "body": "I have mailed you doubts regarding VC can you pls respond ?",
          "createdAt": "2022-09-20T05:43:05Z",
          "updatedAt": "2022-09-20T05:43:05Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "sorry, don't think we've received them?",
          "createdAt": "2022-09-20T06:53:01Z",
          "updatedAt": "2022-09-20T06:53:01Z"
        },
        {
          "author": "Muthurajj",
          "authorAssociation": "NONE",
          "body": "1.Can we generate VC using SD-JWT?\r\n\r\n2.What is the verification_process and sub that you have mentioned in example yml file\r\n\r\n3.If we can generate VC what should we change?\r\n\r\n4. How to generate context and type like you have mentioned in document example 4?\r\n\r\n5.Openid connect include in this library?",
          "createdAt": "2022-09-20T07:20:05Z",
          "updatedAt": "2022-09-20T07:20:05Z"
        },
        {
          "author": "Muthurajj",
          "authorAssociation": "NONE",
          "body": "I am new to python pls help me\r\n",
          "createdAt": "2022-09-21T05:08:03Z",
          "updatedAt": "2022-09-21T05:08:03Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "1.Can we generate VC using SD-JWT?\r\n-> yes. we are in the process of defining how\r\n\r\n2.What is the verification_process and sub that you have mentioned in example yml file\r\n-> verification_process might be ekyc-ida claim, `sub` is a registered JWT claim\r\n\r\n3.If we can generate VC what should we change?\r\n-> being discussed, please see example 4 for the current approach\r\n\r\n4. How to generate context and type like you have mentioned in document example 4?\r\n-> that is a vc-data-model issue\r\n\r\n6.Openid connect include in this library?\r\n-> not sure I understand the question, but no, SD-JWT code has nothing to do with OIDC\r\n\r\nCan you please open a new issue with your questions? this issue is not a place to discuss it.",
          "createdAt": "2022-09-21T17:41:36Z",
          "updatedAt": "2022-09-21T17:41:36Z"
        },
        {
          "author": "Muthurajj",
          "authorAssociation": "NONE",
          "body": "thank you so much \r\n\r\n> 1.Can we generate VC using SD-JWT? -> yes. we are in the process of defining how\r\n> \r\n> 2.What is the verification_process and sub that you have mentioned in example yml file -> verification_process might be ekyc-ida claim, `sub` is a registered JWT claim\r\n> \r\n> 3.If we can generate VC what should we change? -> being discussed, please see example 4 for the current approach\r\n> \r\n> 4. How to generate context and type like you have mentioned in document example 4?\r\n>    -> that is a vc-data-model issue\r\n> \r\n> 6.Openid connect include in this library? -> not sure I understand the question, but no, SD-JWT code has nothing to do with OIDC\r\n> \r\n> Can you please open a new issue with your questions? this issue is not a place to discuss it.\r\n\r\n",
          "createdAt": "2022-09-22T08:44:54Z",
          "updatedAt": "2022-09-22T08:44:54Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Addressed in PR #146 ",
          "createdAt": "2022-09-30T10:10:56Z",
          "updatedAt": "2022-09-30T10:10:56Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "The PR has been merged.",
          "createdAt": "2022-10-17T07:30:50Z",
          "updatedAt": "2022-10-17T07:30:50Z"
        }
      ]
    },
    {
      "number": 106,
      "id": "I_kwDOHTmVzM5M13xZ",
      "title": "Proposal for blinding claim names",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/106",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [
        "danielfett"
      ],
      "labels": [],
      "body": "I would like to propose a very simple and easy-to-implement approach to blinding claim names.\r\n\r\nThe idea is to add a new, optional, third element to the SD releases. Let's assume that there is a privacy-sensitive claims, that might show up in the SD-JWT, say `secret_club_membership_number`, and its mere existence should not be revealed to verifiers.\r\n\r\nThe issuer could create an SD-JWT as follows:\r\n\r\n```json\r\n{\r\n  \"iss\": \"https://example.com/issuer\",\r\n  \"iat\": 1516239022,\r\n  \"exp\": 1516247022,\r\n  \"sd_digests\": {\r\n    \"sub\": \"LbnhkOr5oS7KjeUrxezAu8TG0CpWz0jSixy6tffuo04\",\r\n    \"given_name\": \"fUMdn88aaoyKTHrvZd6AuLmPraGhPJ0zF5r_JhxCVZs\",\r\n    \"family_name\": \"9h5vgv6TpFV6GmnPtugiMLl5tHetHeb5X_2cKHjN7cw\",\r\n    \"G1fjh8hpWNnb\": \"Ia1Tc6_Xnt5CJc2LtKcu6Wvqr42glBGGcjGOye8Zf3U\"\r\n  },\r\n  \"hash_alg\": \"sha-256\"\r\n}\r\n```\r\n\r\nThe issuer has replaced the claim name `secret_club_membership_number` with an arbitrary string. \r\n\r\nOnly the SVC (and later the SD-JWT-R) would release the claim name:\r\n\r\n```json\r\n{\r\n  \"sd_release\": {\r\n    \"sub\": \"[\\\"eluV5Og3gSNII8EYnsxA_A\\\", \\\"6c5c0a49-b589-431d-bae7-219122a9ec2c\\\"]\",\r\n    \"given_name\": \"[\\\"6Ij7tM-a5iVPGboS5tmvVA\\\", \\\"John\\\"]\",\r\n    \"family_name\": \"[\\\"eI8ZWm9QnKPpNPeNenHdhQ\\\", \\\"Doe\\\"]\",\r\n    \"G1fjh8hpWNnb\": \"[\\\"G02NSrQfjFXQ7Io09syajA\\\", \\\"1940-01-01\\\", \\\"secret_club_membership_number\\\"]\"\r\n  }\r\n}\r\n```\r\nNotice the third element in the release JSON. It signals to the verifier that the real claim name is different from how the claim was called in the SD-JWT.\r\n\r\nThe verifier would, during the verification step, replace the claim name `G1fjh8hpWNnb` with the now learned correct claim name `secret_club_membership_number`.\r\n\r\nInstead of random string as claim names, anything that is unique works:\r\n \r\n * just numbering all hidden claims: `secret_claim_1`, `secret_claim_1`,...\r\n * random numbers, string, etc.\r\n * also real-looking but fake claim names: `public_club_membership_number`, `birthdate` (security by obscurity?!)\r\n\r\nThis does not hide the number of secret claim names or that a claim at a certain position in a maybe more complex structure exists. @peppelinux proposal on anonymous claims seems to cover that, but if I understand it correctly, it is less fine-grained: https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/80\r\n\r\nWDYAT? @b---c @Sakurann ",
      "createdAt": "2022-06-29T19:23:16Z",
      "updatedAt": "2022-10-17T08:01:06Z",
      "closedAt": "2022-10-17T08:01:06Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "My note about #80 is not correct. The approach is actually quite similar. Besides the differences in the encoding (discussed in more detail in https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/27), the differences are that in my approach, the SD-JWT structure stays untouched (but may not contain claim names that are not actually the real claim names), whereas in @peppelinux approach, the SD-JWT is changed to contain an array of blinded claim digests.",
          "createdAt": "2022-06-30T08:45:16Z",
          "updatedAt": "2022-06-30T08:45:16Z"
        },
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "There is a wide variety of interesting features once you go down the privacy route: hiding the claim names, event hiding the issuer itself (which can be argued as sensitive as the claim name in some scenarios). I however think that issuers with a well-known public and fixed issuance schema is a far more common scenario, for which our proposed selective disclosure feature offers a simple and useful solution. I can also imagine scenarios as described in this issue, but I'm not sure how realistic/common they are. I'd be in favor of keeping the spec simple, and explore this extra features in subsequent specs or profiles.\r\n\r\nA solution to the hidden claim name (and value!) is to issue multiple credentials containing various subsets of the available claims. It then helps to know how commonly one is expected to hide the existence of such claims to balance the pain of managing multiple credentials vs. holding one with this selective disclosure feature.",
          "createdAt": "2022-07-01T19:25:39Z",
          "updatedAt": "2022-07-01T19:25:39Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't really know but suspect that one or just a few claim names being hidden still reveals quite a lot. The optionality is nice from some perspectives but also adds complexity in participants having to be able to handle both cases. I honestly don't know if obscuring the claim names is needed or legitimately valuable. But my sense is that it should be an all or nothing thing.  ",
          "createdAt": "2022-07-01T21:15:17Z",
          "updatedAt": "2022-07-01T21:15:17Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "I really appreciated this proposal Daniel\r\n\r\nHowever, from an implementer point of view it's heavy to handle both cases\r\n\r\nI vote for obscuring the claim names and start working on this new schema\r\n\r\nI wont show to a rp how many claims I have in my VCs, even if these are linked to well knows schemas we know that the same claims can be adopetd by many schemas, at the same time\r\n",
          "createdAt": "2022-07-01T22:15:41Z",
          "updatedAt": "2022-07-01T22:15:41Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "Considering what we discussed during the last meeting, we can consider [this issue](https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/80) not of interest anymore and this current proposal can be the only one that may be developed.\r\n\r\nI believe that for an extendibility of SD-JWT in the future we should consider to abandon the dumped array, eg: `\"[\\\"G02NSrQfjFXQ7Io09syajA\\\", \\\"1940-01-01\\\", \\\"secret_club_membership_number\\\"]\"` in favor of a dumped json object like this\r\n\r\n`\"{\\\"salt\\\":\\\"G02NSrQfjFXQ7Io09syajA\\\", \\\"value\\\":\\\"1940-01-01\\\", \\\"name\\\":\\\"secret_club_membership_number\\\"}\"`\r\n\r\n\r\n",
          "createdAt": "2022-07-11T21:11:14Z",
          "updatedAt": "2022-07-11T21:11:14Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Thanks @peppelinux, that's what I did (with one-letter keys for brevity).\r\n\r\nSee https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/124 for my draft code on this issue (no spec text yet).\r\n\r\nThese are the examples now in the spec - please review:\r\n\r\n\r\n## Example 5: Some Blinded Claims\r\n\r\nUser claims:\r\n\r\n{#example-simple_structured_some_blinded-user_claims}\r\n```json\r\n{\r\n  \"sub\": \"6c5c0a49-b589-431d-bae7-219122a9ec2c\",\r\n  \"given_name\": \"John\",\r\n  \"family_name\": \"Doe\",\r\n  \"email\": \"johndoe@example.com\",\r\n  \"phone_number\": \"+1-202-555-0101\",\r\n  \"secret_club_membership_no\": \"23\",\r\n  \"other_secret_club_membership_no\": \"42\",\r\n  \"address\": {\r\n    \"street_address\": \"123 Main St\",\r\n    \"locality\": \"Anytown\",\r\n    \"region\": \"Anystate\",\r\n    \"country\": \"US\"\r\n  },\r\n  \"birthdate\": \"1940-01-01\"\r\n}\r\n```\r\n\r\n\r\nSD-JWT Payload:\r\n\r\n{#example-simple_structured_some_blinded-sd_jwt_payload}\r\n```json\r\n{\r\n  \"iss\": \"https://example.com/issuer\",\r\n  \"sub_jwk\": {\r\n    \"kty\": \"RSA\",\r\n    \"n\": \"pm4bOHBg-oYhAyPWzR56AWX3rUIXp11_ICDkGgS6W3ZWLts-hzwI3x65659kg4hVo9dbGoCJE3ZGF_eaetE30UhBUEgpGwrDrQiJ9zqprmcFfr3qvvkGjtth8Zgl1eM2bJcOwE7PCBHWTKWYs152R7g6Jg2OVph-a8rq-q79MhKG5QoW_mTz10QT_6H4c7PjWG1fjh8hpWNnbP_pv6d1zSwZfc5fl6yVRL0DV0V3lGHKe2Wqf_eNGjBrBLVklDTk8-stX_MWLcR-EGmXAOv0UBWitS_dXJKJu-vXJyw14nHSGuxTIK2hx1pttMft9CsvqimXKeDTU14qQL1eE7ihcw\",\r\n    \"e\": \"AQAB\"\r\n  },\r\n  \"iat\": 1516239022,\r\n  \"exp\": 1516247022,\r\n  \"hash_alg\": \"sha-256\",\r\n  \"sd_digests\": {\r\n    \"sub\": \"OMdwkk2HPuiInPypWUWMxot1Y2tStGsLuIcDMjKdXMU\",\r\n    \"given_name\": \"AfKKH4a0IZki8MFDythFaFS_Xqzn-wRvAMfiy_VjYpE\",\r\n    \"family_name\": \"eUmXmry32JiK_76xMasagkAQQsmSVdW57Ajk18riSF0\",\r\n    \"email\": \"-Rcr4fDyjwlM_itcMxoQZCE1QAEwyLJcibEpH114KiE\",\r\n    \"phone_number\": \"Jv2nw0C1wP5ASutYNAxrWEnaDRIpiF0eTUAkUOp8F6Y\",\r\n    \"h:5a2W0_NrlEZzfqmk_7Pq-w\": \"gc8VzGTImYRXzP6j7q5RomXt2C_wtsOJ3hAHJdTuEIY\",\r\n    \"other_secret_club_membership_no\": \"IirAwgN-MubteYvJ4fmq04p9PnpRTf7hqg0dzSWRboA\",\r\n    \"address\": {\r\n      \"street_address\": \"o_yJIdfhKuKVzOF7i1EuakzC5ghd99CX8_nitm-DsRM\",\r\n      \"locality\": \"ogNqsvRqK0-ZPZc9C3Z4_6APvywm-lrm0oF2gcVtl_4\",\r\n      \"region\": \"8kFihRLSkEheK0zbEsQ3zKXt8csE6OXJE_jv3032BbU\",\r\n      \"country\": \"11IMcoA18LrFSpbysx-uqe7N3I3-QZKwCJqYeQuOUY4\"\r\n    },\r\n    \"birthdate\": \"PNtcyxm0Q5PyiBuG4f6eAbK6h4tF2FffwG3xqknZ_5A\"\r\n  }\r\n}\r\n```\r\n\r\nSVC:\r\n\r\n\r\n{#example-simple_structured_some_blinded-svc_payload}\r\n```json\r\n{\r\n  \"sd_release\": {\r\n    \"sub\": \"{\\\"s\\\": \\\"2GLC42sKQveCfGfryNRN9w\\\", \\\"v\\\": \\\"6c5c0a49-b589-431d-bae7-219122a9ec2c\\\"}\",\r\n    \"given_name\": \"{\\\"s\\\": \\\"6Ij7tM-a5iVPGboS5tmvVA\\\", \\\"v\\\": \\\"John\\\"}\",\r\n    \"family_name\": \"{\\\"s\\\": \\\"Qg_O64zqAxe412a108iroA\\\", \\\"v\\\": \\\"Doe\\\"}\",\r\n    \"email\": \"{\\\"s\\\": \\\"Pc33JM2LchcU_lHggv_ufQ\\\", \\\"v\\\": \\\"johndoe@example.com\\\"}\",\r\n    \"phone_number\": \"{\\\"s\\\": \\\"lklxF5jMYlGTPUovMNIvCA\\\", \\\"v\\\": \\\"+1-202-555-0101\\\"}\",\r\n    \"h:5a2W0_NrlEZzfqmk_7Pq-w\": \"{\\\"s\\\": \\\"5bPs1IquZNa0hkaFzzzZNw\\\", \\\"v\\\": \\\"23\\\", \\\"n\\\": \\\"secret_club_membership_no\\\"}\",\r\n    \"other_secret_club_membership_no\": \"{\\\"s\\\": \\\"y1sVU5wdfJahVdgwPgS7RQ\\\", \\\"v\\\": \\\"42\\\"}\",\r\n    \"address\": {\r\n      \"street_address\": \"{\\\"s\\\": \\\"C9GSoujviJquEgYfojCb1A\\\", \\\"v\\\": \\\"123 Main St\\\"}\",\r\n      \"locality\": \"{\\\"s\\\": \\\"H3o1uswP760Fi2yeGdVCEQ\\\", \\\"v\\\": \\\"Anytown\\\"}\",\r\n      \"region\": \"{\\\"s\\\": \\\"M0Jb57t41ubrkSuyrDT3xA\\\", \\\"v\\\": \\\"Anystate\\\"}\",\r\n      \"country\": \"{\\\"s\\\": \\\"eK5o5pHfgupPpltj1qhAJw\\\", \\\"v\\\": \\\"US\\\"}\"\r\n    },\r\n    \"birthdate\": \"{\\\"s\\\": \\\"WpxJrFuX8uSi2p4ht09jvw\\\", \\\"v\\\": \\\"1940-01-01\\\"}\"\r\n  }\r\n}\r\n```\r\n\r\nSD-JWT-R:\r\n\r\n{#example-simple_structured_some_blinded-sd_jwt_release_payload}\r\n```json\r\n{\r\n  \"nonce\": \"XZOUco1u_gEPknxS78sWWg\",\r\n  \"aud\": \"https://example.com/verifier\",\r\n  \"sd_release\": {\r\n    \"given_name\": \"{\\\"s\\\": \\\"6Ij7tM-a5iVPGboS5tmvVA\\\", \\\"v\\\": \\\"John\\\"}\",\r\n    \"family_name\": \"{\\\"s\\\": \\\"Qg_O64zqAxe412a108iroA\\\", \\\"v\\\": \\\"Doe\\\"}\",\r\n    \"birthdate\": \"{\\\"s\\\": \\\"WpxJrFuX8uSi2p4ht09jvw\\\", \\\"v\\\": \\\"1940-01-01\\\"}\",\r\n    \"address\": {\r\n      \"region\": \"{\\\"s\\\": \\\"M0Jb57t41ubrkSuyrDT3xA\\\", \\\"v\\\": \\\"Anystate\\\"}\",\r\n      \"country\": \"{\\\"s\\\": \\\"eK5o5pHfgupPpltj1qhAJw\\\", \\\"v\\\": \\\"US\\\"}\"\r\n    },\r\n    \"h:5a2W0_NrlEZzfqmk_7Pq-w\": \"{\\\"s\\\": \\\"5bPs1IquZNa0hkaFzzzZNw\\\", \\\"v\\\": \\\"23\\\", \\\"n\\\": \\\"secret_club_membership_no\\\"}\"\r\n  }\r\n}\r\n```\r\n\r\nVerified Released Claims:\r\n\r\n\r\n{#example-simple_structured_some_blinded-verified_contents}\r\n```json\r\n{\r\n  \"given_name\": \"John\",\r\n  \"family_name\": \"Doe\",\r\n  \"birthdate\": \"1940-01-01\",\r\n  \"address\": {\r\n    \"region\": \"Anystate\",\r\n    \"country\": \"US\"\r\n  },\r\n  \"secret_club_membership_no\": \"23\"\r\n}\r\n```\r\n## Example 6: All Claim Names Blinded\r\n\r\nUser claims:\r\n\r\n{#example-simple_structured_all_blinded-user_claims}\r\n```json\r\n{\r\n  \"sub\": \"6c5c0a49-b589-431d-bae7-219122a9ec2c\",\r\n  \"given_name\": \"John\",\r\n  \"family_name\": \"Doe\",\r\n  \"email\": \"johndoe@example.com\",\r\n  \"phone_number\": \"+1-202-555-0101\",\r\n  \"secret_club_membership_no\": \"23\",\r\n  \"address\": {\r\n    \"street_address\": \"123 Main St\",\r\n    \"locality\": \"Anytown\",\r\n    \"region\": \"Anystate\",\r\n    \"country\": \"US\"\r\n  },\r\n  \"birthdate\": \"1940-01-01\"\r\n}\r\n```\r\n\r\n\r\nSD-JWT Payload:\r\n\r\n{#example-simple_structured_all_blinded-sd_jwt_payload}\r\n```json\r\n{\r\n  \"iss\": \"https://example.com/issuer\",\r\n  \"sub_jwk\": {\r\n    \"kty\": \"RSA\",\r\n    \"n\": \"pm4bOHBg-oYhAyPWzR56AWX3rUIXp11_ICDkGgS6W3ZWLts-hzwI3x65659kg4hVo9dbGoCJE3ZGF_eaetE30UhBUEgpGwrDrQiJ9zqprmcFfr3qvvkGjtth8Zgl1eM2bJcOwE7PCBHWTKWYs152R7g6Jg2OVph-a8rq-q79MhKG5QoW_mTz10QT_6H4c7PjWG1fjh8hpWNnbP_pv6d1zSwZfc5fl6yVRL0DV0V3lGHKe2Wqf_eNGjBrBLVklDTk8-stX_MWLcR-EGmXAOv0UBWitS_dXJKJu-vXJyw14nHSGuxTIK2hx1pttMft9CsvqimXKeDTU14qQL1eE7ihcw\",\r\n    \"e\": \"AQAB\"\r\n  },\r\n  \"iat\": 1516239022,\r\n  \"exp\": 1516247022,\r\n  \"hash_alg\": \"sha-256\",\r\n  \"sd_digests\": {\r\n    \"h:eluV5Og3gSNII8EYnsxA_A\": \"bvPLqohL5ROmk2UsuNffH8C1wx9o-ipm-G4SkUwrpAE\",\r\n    \"h:eI8ZWm9QnKPpNPeNenHdhQ\": \"pCtjs0hC2Klhsnpe7BIqnGAsXlyXXC-lAEgX6isoYVM\",\r\n    \"h:AJx-095VPrpTtN4QMOqROA\": \"HS1Ht-bTrXsSTw9JdcHIbTFDkEI_IY52_cmzUgxWZ0k\",\r\n    \"h:G02NSrQfjFXQ7Io09syajA\": \"M2YQ_j8OPPBK3ZLhPPP6_AdSa2-rug2urYjgk_ML_QM\",\r\n    \"h:nPuoQnkRFq3BIeAm7AnXFA\": \"-Brzrp2cs-8nLs7rQI89YJ76s3PrbVe3n_5hlYCy1cE\",\r\n    \"h:5a2W0_NrlEZzfqmk_7Pq-w\": \"gc8VzGTImYRXzP6j7q5RomXt2C_wtsOJ3hAHJdTuEIY\",\r\n    \"address\": {\r\n      \"h:HbQ4X8srVW3QDxnIJdqyOA\": \"39o5dKobVi8c0dLpg4sjd7zW18UONRra0ht9mgu4hec\",\r\n      \"h:kx5kF17V-x0JmwUx9vgvtw\": \"wqueD5ABJ3bTyGSckOMpzI7YUvcCO2l-40vi6JMYsYY\",\r\n      \"h:OBKlTVlvLg-AdwqYGbP8ZA\": \"S11dsdFN97YtrA2o3yZ0eBbf1zn-izejORU-fyMtynI\",\r\n      \"h:DsmtKNgpV4dAHpjrcaosAw\": \"-0XEQHSNzMu244QaOpLmPD3JkdZN8SrqbEQ4VDufu9A\"\r\n    },\r\n    \"h:j7ADdb0UVb0Li0ciPcP0ew\": \"X_v1hrkQIH_0LBM8TncMMTBzYN9UJc8FmJRda7yfY8g\"\r\n  }\r\n}\r\n```\r\n\r\nSVC:\r\n\r\n\r\n{#example-simple_structured_all_blinded-svc_payload}\r\n```json\r\n{\r\n  \"sd_release\": {\r\n    \"h:eluV5Og3gSNII8EYnsxA_A\": \"{\\\"s\\\": \\\"2GLC42sKQveCfGfryNRN9w\\\", \\\"v\\\": \\\"6c5c0a49-b589-431d-bae7-219122a9ec2c\\\", \\\"n\\\": \\\"sub\\\"}\",\r\n    \"h:eI8ZWm9QnKPpNPeNenHdhQ\": \"{\\\"s\\\": \\\"6Ij7tM-a5iVPGboS5tmvVA\\\", \\\"v\\\": \\\"John\\\", \\\"n\\\": \\\"given_name\\\"}\",\r\n    \"h:AJx-095VPrpTtN4QMOqROA\": \"{\\\"s\\\": \\\"Qg_O64zqAxe412a108iroA\\\", \\\"v\\\": \\\"Doe\\\", \\\"n\\\": \\\"family_name\\\"}\",\r\n    \"h:G02NSrQfjFXQ7Io09syajA\": \"{\\\"s\\\": \\\"Pc33JM2LchcU_lHggv_ufQ\\\", \\\"v\\\": \\\"johndoe@example.com\\\", \\\"n\\\": \\\"email\\\"}\",\r\n    \"h:nPuoQnkRFq3BIeAm7AnXFA\": \"{\\\"s\\\": \\\"lklxF5jMYlGTPUovMNIvCA\\\", \\\"v\\\": \\\"+1-202-555-0101\\\", \\\"n\\\": \\\"phone_number\\\"}\",\r\n    \"h:5a2W0_NrlEZzfqmk_7Pq-w\": \"{\\\"s\\\": \\\"5bPs1IquZNa0hkaFzzzZNw\\\", \\\"v\\\": \\\"23\\\", \\\"n\\\": \\\"secret_club_membership_no\\\"}\",\r\n    \"address\": {\r\n      \"h:HbQ4X8srVW3QDxnIJdqyOA\": \"{\\\"s\\\": \\\"y1sVU5wdfJahVdgwPgS7RQ\\\", \\\"v\\\": \\\"123 Main St\\\", \\\"n\\\": \\\"street_address\\\"}\",\r\n      \"h:kx5kF17V-x0JmwUx9vgvtw\": \"{\\\"s\\\": \\\"C9GSoujviJquEgYfojCb1A\\\", \\\"v\\\": \\\"Anytown\\\", \\\"n\\\": \\\"locality\\\"}\",\r\n      \"h:OBKlTVlvLg-AdwqYGbP8ZA\": \"{\\\"s\\\": \\\"H3o1uswP760Fi2yeGdVCEQ\\\", \\\"v\\\": \\\"Anystate\\\", \\\"n\\\": \\\"region\\\"}\",\r\n      \"h:DsmtKNgpV4dAHpjrcaosAw\": \"{\\\"s\\\": \\\"M0Jb57t41ubrkSuyrDT3xA\\\", \\\"v\\\": \\\"US\\\", \\\"n\\\": \\\"country\\\"}\"\r\n    },\r\n    \"h:j7ADdb0UVb0Li0ciPcP0ew\": \"{\\\"s\\\": \\\"eK5o5pHfgupPpltj1qhAJw\\\", \\\"v\\\": \\\"1940-01-01\\\", \\\"n\\\": \\\"birthdate\\\"}\"\r\n  }\r\n}\r\n```\r\n\r\nSD-JWT-R:\r\n\r\n{#example-simple_structured_all_blinded-sd_jwt_release_payload}\r\n```json\r\n{\r\n  \"nonce\": \"XZOUco1u_gEPknxS78sWWg\",\r\n  \"aud\": \"https://example.com/verifier\",\r\n  \"sd_release\": {\r\n    \"h:eI8ZWm9QnKPpNPeNenHdhQ\": \"{\\\"s\\\": \\\"6Ij7tM-a5iVPGboS5tmvVA\\\", \\\"v\\\": \\\"John\\\", \\\"n\\\": \\\"given_name\\\"}\",\r\n    \"h:AJx-095VPrpTtN4QMOqROA\": \"{\\\"s\\\": \\\"Qg_O64zqAxe412a108iroA\\\", \\\"v\\\": \\\"Doe\\\", \\\"n\\\": \\\"family_name\\\"}\",\r\n    \"h:j7ADdb0UVb0Li0ciPcP0ew\": \"{\\\"s\\\": \\\"eK5o5pHfgupPpltj1qhAJw\\\", \\\"v\\\": \\\"1940-01-01\\\", \\\"n\\\": \\\"birthdate\\\"}\",\r\n    \"address\": {\r\n      \"h:OBKlTVlvLg-AdwqYGbP8ZA\": \"{\\\"s\\\": \\\"H3o1uswP760Fi2yeGdVCEQ\\\", \\\"v\\\": \\\"Anystate\\\", \\\"n\\\": \\\"region\\\"}\",\r\n      \"h:DsmtKNgpV4dAHpjrcaosAw\": \"{\\\"s\\\": \\\"M0Jb57t41ubrkSuyrDT3xA\\\", \\\"v\\\": \\\"US\\\", \\\"n\\\": \\\"country\\\"}\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nVerified Released Claims:\r\n\r\n\r\n{#example-simple_structured_all_blinded-verified_contents}\r\n```json\r\n{\r\n  \"given_name\": \"John\",\r\n  \"family_name\": \"Doe\",\r\n  \"birthdate\": \"1940-01-01\",\r\n  \"address\": {\r\n    \"region\": \"Anystate\",\r\n    \"country\": \"US\"\r\n  }\r\n}\r\n```\r\n\r\n\r\n",
          "createdAt": "2022-07-14T09:36:44Z",
          "updatedAt": "2022-07-14T09:36:44Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "@danielfett you got it in the super right way!\r\ndefinitively my hero",
          "createdAt": "2022-07-14T23:46:16Z",
          "updatedAt": "2022-07-14T23:46:16Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "change it to \"using the same salt to generate a digest of a claim name when blinded\"",
          "createdAt": "2022-09-29T15:46:17Z",
          "updatedAt": "2022-09-29T15:46:17Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "The choice for names for blinded claim names is discussed in Issue #132. Since the rest has been merged, I'll close this issue.",
          "createdAt": "2022-10-17T08:01:06Z",
          "updatedAt": "2022-10-17T08:01:06Z"
        }
      ]
    },
    {
      "number": 110,
      "id": "I_kwDOHTmVzM5NXvce",
      "title": "[WIP] SD-JWT as a W3C VC-DATA-MODEL",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/110",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Current proposal is here: https://datatracker.ietf.org/doc/html/draft-fett-oauth-selective-disclosure-jwt-01#appendix-A.3\r\nAlternative proposal is here: https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/103#issuecomment-1175572062\r\n\r\nGuess yet another alternative would be:\r\n```\r\n     \"vc\": {\r\n       \"@context\": [\r\n         \"https://www.w3.org/2018/credentials/v1\",\r\n         \"https://www.w3.org/2018/credentials/examples/v1\"\r\n       ],\r\n       \"type\": [\r\n         \"VerifiableCredential\",\r\n         \"UniversityDegreeCredential\"\r\n       ],\r\n     \"credentialSubject\": {\r\n      \"given_name\": \"Alice\",\r\n      \"sd_digests\": {\r\n         \"given_name\": \"fUMdn88aaoyKTHrvZd6AuLmPraGhPJ0zF5r_JhxCVZs\",\r\n         \"family_name\": \"9h5vgv6TpFV6GmnPtugiMLl5tHetHeb5X_2cKHjN7cw\",\r\n         \"birthdate\": \"fvLCnDm3r4VSYcBF3pIlXP4ulEoHuHOfG_YmFZEuxpQ\"\r\n        }\r\n     }\r\n  }\r\n```",
      "createdAt": "2022-07-07T20:39:31Z",
      "updatedAt": "2022-11-23T12:42:07Z",
      "closedAt": "2022-11-23T12:42:06Z",
      "comments": [
        {
          "author": "nikosft",
          "authorAssociation": "NONE",
          "body": "I believe that this alternative violates the definition of SD-JWT in [section 4.1](https://datatracker.ietf.org/doc/html/draft-fett-oauth-selective-disclosure-jwt-01#section-4.1). In particular, I uderestand that this alternative is not of the form \r\n\r\n```\r\nSD-JWT-DOC = (METADATA, SD-CLAIMS)\r\n```",
          "createdAt": "2022-07-18T18:43:50Z",
          "updatedAt": "2022-07-18T18:43:50Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "yes, the idea was to add a sentence in the SD-JWT specification that profiles of the specification MAY define other places to include `sd_digests`.",
          "createdAt": "2022-07-19T06:03:50Z",
          "updatedAt": "2022-07-19T06:03:50Z"
        },
        {
          "author": "sbutterfield",
          "authorAssociation": "NONE",
          "body": "Just a thought: Should this issue turn in to an extension spec `vc-sd-jwt` to separate out the responsibility of mapping something foundational (sd-jwt) to something intermediate (vc datamodel)? ",
          "createdAt": "2022-09-22T14:41:06Z",
          "updatedAt": "2022-09-22T14:41:34Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #162",
          "createdAt": "2022-10-24T18:56:07Z",
          "updatedAt": "2022-10-24T18:56:07Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "This has been superseded by the changes we made in PR #174. An example for a W3C VC is contained in the appendix.",
          "createdAt": "2022-11-23T12:42:06Z",
          "updatedAt": "2022-11-23T12:42:06Z"
        }
      ]
    },
    {
      "number": 111,
      "id": "I_kwDOHTmVzM5NYNsv",
      "title": "defining the SD-JWT claims family namespace",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/111",
      "state": "CLOSED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "in this draft we found as well defined the claims `sd_digests` and `sd_release` and then the claim `hash_alg`.\r\nIf this hash_alg belongs only to SD-JWT it wound't be better to rename it `sd_hash_alg`?",
      "createdAt": "2022-07-07T22:32:19Z",
      "updatedAt": "2022-07-14T20:56:40Z",
      "closedAt": "2022-07-14T20:56:40Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I would be fine with `sd_hash_alg`. It makes sense since the hash is used for the core functionality of the SD-JWT.",
          "createdAt": "2022-07-11T10:34:59Z",
          "updatedAt": "2022-07-11T10:34:59Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "Me or someone of us on a PR for this?\r\n@Sakurann your comments are important",
          "createdAt": "2022-07-11T12:34:43Z",
          "updatedAt": "2022-07-11T12:34:43Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I am ok with `sd_hash_alg`, though it is already only present in SD-JWT.",
          "createdAt": "2022-07-12T01:14:44Z",
          "updatedAt": "2022-07-12T01:14:44Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "Ok, if you agree we may merge https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/115 and then https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/117 and a PR with this change will follow ",
          "createdAt": "2022-07-12T06:30:17Z",
          "updatedAt": "2022-07-12T06:30:17Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "did it here\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/123",
          "createdAt": "2022-07-14T00:10:37Z",
          "updatedAt": "2022-07-14T00:10:37Z"
        }
      ]
    },
    {
      "number": 114,
      "id": "I_kwDOHTmVzM5NgpAf",
      "title": "[SD-JWT aggregation during Presentation] SD-JWT-R for multiple SD-JWT",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/114",
      "state": "CLOSED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "Sakurann"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "An Holder has two different JWT VCs issued by two different issuers and wants to disclose part of the attributes contained in these VCs in in a single Presentation.\r\n\r\nUsing Combined Presentation only a single SD-JWT with a single SD-JWT-R can be submitted (if I'm not mistaken).\r\n\r\nCan we consider a way to redefine the Combined Presentation to allow multiple SD-JWTs to be submitted with a single SD-JWT-R? ",
      "createdAt": "2022-07-11T08:49:42Z",
      "updatedAt": "2023-03-13T13:43:43Z",
      "closedAt": "2023-03-13T13:43:43Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "This is a relevant use case, but may also be addressed by the protocol used for presentation. @tlodderstedt What's your opinion on this?",
          "createdAt": "2022-07-11T10:32:24Z",
          "updatedAt": "2022-07-11T10:32:24Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There are protocols for carrying multiple presentation in the same exchange, so this use case can be solved on the protocol level.\r\n\r\nHowever, I think there is some beauty in combined presentations. Combined presentation reduces the number of signatures to be created and checked for holder authentication/cryptographic holder binding and also requires the verifier to check audience restriction and transaction integrity once. On the other hand, it requires binding of both (or all) credentials to the same key material. So it seems to be an attractive feature, I cannot assess how relevant it is in practice and whether it causes complexity in other places.  ",
          "createdAt": "2022-07-11T11:10:28Z",
          "updatedAt": "2022-07-11T11:10:28Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "good points. Starting from a pure creative approach I'd think to a nesting strategy, The SD-JWT would be enveloped in an aggregated JWT defined for this\r\n\r\n````\r\n{\r\n  \"alg\": none, \r\n  \"typ\": \"sd+jwt-combined\"\r\n}\r\n.\r\n{\r\n  \"sd_credentials\": [\r\n    ... one or more SD-JWTs here ...\r\n  ],\r\n  \"sd_release\": JWT-SD-R\r\n}\r\n````\r\n\r\nThis approach would propose again the nested approach and I'm wondering if it's time to abandon the Combined Presentation structure based on appendend jwts, separated by period, with a typed JWT object",
          "createdAt": "2022-07-11T12:33:07Z",
          "updatedAt": "2022-07-11T12:33:07Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I would make it simpler, <SD-JWT-1 (3 parts)>.<...>.<SD-JWT-n>.<SD-JWT-R> without any nesting.\r\nso the key would be to define how to include sd_digests for multiple SD-JWTs in one SD-JWT-R\r\nand it should be made clear that this is the case when SD-JWT-R is not signed - ie, there is no holder binding; or, SD-JWT-R is signed but SD-JWTs are bound to the same holder key.",
          "createdAt": "2022-07-12T07:55:04Z",
          "updatedAt": "2022-07-12T07:55:04Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "@Sakurann if I understand well your proposal:\r\n\r\n> I would make it simpler, <SD-JWT-1 (3 parts)>.<...>.. without any nesting.\r\n\r\nthis is referred to the Combined Presentation content-type. Can we define a content-type for this, like `application/sd-jwt-combined`? This would enable an auto consistent validation scheme in a HTTP response\r\n\r\n> so the key would be to define how to include sd_digests for multiple SD-JWTs in one SD-JWT-R\r\n\r\nIf I'm not mistaken this point is in contraddiction with the first point. If I understand well this is a proposal to make a SD-JWT-R an envelope for one or many SD-JWT and these should be nested in a SD-JWT-R object. If this is right I really like this proposal, the new structure of a SD-JWT-R would be something like the following example\r\n\r\n````\r\n{\r\n  \"alg\": \"RS256\", \r\n  \"kid\": \"ANBKFdOKy5t-1m2Km4X22n7DEj553yjGJVdprbOjR52\",\r\n  \"x5c\": [ \u2026 ],\r\n  \"typ\": \"sd-jwt+release\"\r\n}\r\n.\r\n{\r\n    \"iss\": \"uid of a EUIDW, obfuscated or not\",\r\n    \"sub\": \"uid of the user, public or pairwised or randomic to enable anonymous auth on top of LoA high with any disclosed claims\",\r\n    \"nonce\": \"tmi-LjQDh2qnl2wC9XJCqw\",\r\n    \"aud\": \"https://example.com/verifier\",\r\n    \"sd_joses\": [ ... one or more SD-JWT ...],\r\n    \"sd_release\": {\r\n        \"given_name\": \"[\\\"lklxF5jMYlGTPUovMNIvCA\\\", \\\"John\\\"]\",\r\n        \"family_name\": \"[\\\"nPuoQnkRFq3BIeAm7AnXFA\\\", \\\"Doe\\\"]\"\r\n    }\r\n}\r\n````",
          "createdAt": "2022-07-12T09:50:08Z",
          "updatedAt": "2022-07-13T18:28:21Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "What I meant by the second comment was multiple \u201csd_release\u201ds in on SD-JWT-R. Which is sent separately from SD-JWTs. \u201csd_digests\u201d was a typo, sorry",
          "createdAt": "2022-07-12T23:38:41Z",
          "updatedAt": "2022-07-12T23:38:41Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "> What I meant by the second comment was multiple \u201csd_release\u201ds in on SD-JWT-R. Which is sent separately from SD-JWTs. \u201csd_digests\u201d was a typo, sorry\r\n\r\nyes, a SD-JWT-R which contains multiple SD-JWT in an array, I think that's the key!",
          "createdAt": "2022-07-13T18:29:45Z",
          "updatedAt": "2022-07-13T18:29:45Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "but than we would need to include `id` or something inside `sd_release`s so that the verifier knows which release to use with which  SD-JWT...\r\n\r\n+ for a general direction I am not suggesting to put SD-JWTs inside Releases, Release is still sent separately.. Though SD-JWT-VCs will be inside SD-JWT-R-VPs",
          "createdAt": "2022-07-24T18:39:17Z",
          "updatedAt": "2022-07-24T18:39:17Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "Ok, my concern Is that implementing a parser of multiple concatenated jwts can be a pain and this solution sounds more like a compromise\r\n\r\nConsider that a jwt could be encrypted, having more thank 3strings separated by a period char\r\n\r\nFor this reason I'd prefer a jwt that contains One or more sd-jwt, in an intellegibile claim, and a single sd_release\r\n\r\n",
          "createdAt": "2022-07-24T20:48:17Z",
          "updatedAt": "2022-07-24T20:49:02Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "> Consider that a jwt could be encrypted, having more thank 3strings separated by a period char\r\n\r\nThat's why I proposed to introduce a generic character to separate concatenated JWT in the very beginning of this work. As I mentioned in the chat, `~` might be a good choice. We would also use this to concatenate the SD-JWT and SVC when they are sent to the client.\r\n\r\nThis avoids the overhead that nested JWTs bring, which can be important for QR code and NFC use cases.",
          "createdAt": "2022-07-25T11:21:26Z",
          "updatedAt": "2022-07-25T11:21:26Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "> That's why I proposed to introduce a generic character to separate concatenated JWT in the very beginning of this work. As I mentioned in the chat, `~` might be a good choice. We would also use this to concatenate the SD-JWT and SVC when they are sent to the client.\r\n\r\nit sounds resonable to me!",
          "createdAt": "2022-07-25T12:27:49Z",
          "updatedAt": "2022-07-25T12:27:49Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "So the options we have now are:\r\n1. concatenating multiple SD-JWTs using `~` + Release\r\n2. including multiple SD-JWTs inside a JWT + Release\r\n3. including SD-JWTs inside a Release\r\n\r\nwhat is the benefit of 2 over 3?",
          "createdAt": "2022-09-05T06:50:36Z",
          "updatedAt": "2022-09-05T06:50:36Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "also, if SD-JWT-R contains multiple `sd_releases`, we need to introduce the mapping which `sd_release` maps to which SD-JWT, a feature provided `presentation_submission` in Presentation Exchange v.2.0. \r\n\r\nI wonder how we draw a line with what is defined in a transport protocol - for example, OpenID4VP mandates using `presentation_submission` for this purpose, so if another mechanism is chosen by SD-JWT, what would implementers do?",
          "createdAt": "2022-09-05T06:54:06Z",
          "updatedAt": "2022-09-05T06:54:06Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "I'd be for including one or more SD-JWTs inside a Release in JWT format, because this create a consolidated presentation with a specific content-type.\r\n\r\nthe mapping could be made using jti if present in the SD-JWT, anyway even without a mapping an implementation will iterate all the values to find witch matches, \r\n\r\nissuing a jti in SD-JWT would confirm the adoption of a BCP and not a mandatory requirement",
          "createdAt": "2022-09-05T09:07:03Z",
          "updatedAt": "2022-09-05T09:07:03Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "editors want to propose switching to including base64url encoded SD-JWTs in the SD-JWT-Release (vc-data-model approach), from the current approach of passing Release and SD-JWT as separate objects.\r\nthis would be extensible to allow multiple SD-JWTs in one Release without going into specifying how to do multiple release\r\nwe agree that defying multiple releases itself is out of scop efor sd-jwt but the current approach prevents that altogether because the verifier will receive as many release obejects as sd-jwts and will not know which one's which.",
          "createdAt": "2022-10-04T17:08:03Z",
          "updatedAt": "2022-10-04T17:08:03Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "potentially add a text that this spec defines one way to send an SD-JWT-R, but profiles can define alternative ways (like in VC-DATA-MODEL)",
          "createdAt": "2022-10-13T17:17:09Z",
          "updatedAt": "2022-10-13T17:17:09Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Combined Format for Presentation is not the only way to do Holder Binding per the text below:\r\n\r\n> Other ways of proving Holder Binding MAY be used when supported by the Verifier, e.g., when the Combined Format for Presentation is itself embedded in a signed JWT. See [Section 7](https://drafts.oauth.net/oauth-selective-disclosure-jwt/draft-ietf-oauth-selective-disclosure-jwt.html#enveloping) for details.\r\n\r\n\r\nSo I think making `_sd_jwt` an array would meet the requirement of including multiple SD-JWTs in one JWT (for encryption, holder binding, etc.)",
          "createdAt": "2023-03-07T14:53:08Z",
          "updatedAt": "2023-03-07T14:53:08Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "An application or protocol using SD-JWT can always define some presentation format that allows multiple SD-JWTs. But I'm not sure that defining it in this draft is necessary or appropriate. ",
          "createdAt": "2023-03-07T16:41:15Z",
          "updatedAt": "2023-03-07T16:41:15Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "ok, guess vc-data-model already does so with [`verifiableCredential` Property in Verifiable Presentations](https://w3c.github.io/vc-data-model/#presentations-0). I will just do a simple PR clarifying that it is possible.",
          "createdAt": "2023-03-11T01:57:19Z",
          "updatedAt": "2023-03-11T01:57:19Z"
        }
      ]
    },
    {
      "number": 118,
      "id": "I_kwDOHTmVzM5Nkbc-",
      "title": "[Tracking resistance] Nesting an encrypted SD-JWT combined presentation",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/118",
      "state": "CLOSED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "pending-close"
      ],
      "body": "Considering that SD-JWT makes selective disclosure and many privacy features possibile in the data format level, without any costraint in the transport protocol adopted during the exchange, I was wondering how to make a combined presentation unique and not trackable in environment where that can be the risk of eavesdropping (NFC, BT, QR codes, any other link of proximity ...)\r\n\r\nAdopting a JWE and also a nesting strategy to a combined presentation can make the SD-JWT completely not trackable during the transport.\r\n\r\nat first sight nesting a combined presentation in an encrypted JWT that MUST changes at every exchange makes the need to create an envelope JWT. It's a trade off, I know but an envelope JWT can cover also other aspects, like this\r\n\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/114\r\n",
      "createdAt": "2022-07-12T00:45:00Z",
      "updatedAt": "2023-02-28T17:00:18Z",
      "closedAt": "2023-02-28T17:00:18Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Could you elaborate a little more what is being suggested? Is the idea to put multiple SD-JWT-Rs and SD-JWTs inside one JWE as claims?\r\n{header}.{\r\n\"SD-JWT-R-1\": <...>\r\n\"SD-JWT-1\": <...>\r\n\"SD-JWT-2\": <...>\r\n}.{signature}\r\nkind of?",
          "createdAt": "2022-07-12T16:45:43Z",
          "updatedAt": "2022-07-12T16:45:56Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, on each submission the JWE will be different (due to jti, iat) making it non trackable.\r\nan adversary can't track how many time an SD-JWT have been submitted to an endpoint or on the wire, because the JWE will be alway unique\r\n\r\nthe proposal of a nested structure for a combined presentation have been proposed here\r\n\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/114#issuecomment-1181556044\r\n",
          "createdAt": "2022-07-12T23:10:58Z",
          "updatedAt": "2022-07-12T23:10:58Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "> Could you elaborate a little more what is being suggested? Is the idea to put multiple SD-JWT-Rs and SD-JWTs inside one JWE as claims? {header}.{ \"SD-JWT-R-1\": <...> \"SD-JWT-1\": <...> \"SD-JWT-2\": <...> }.{signature} kind of?\r\n\r\na simple array in a claim defined for this scope\r\n\r\n````\r\n\"sd_joses\": [ ... one or more SD-JWT ...],\r\n````",
          "createdAt": "2022-07-13T08:48:53Z",
          "updatedAt": "2022-07-13T18:28:03Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "We discussed this at the IETF meeting in London. I think it is clear that we will not support multiple SD-JWTs in the format itself, as this opens up a whole new layer. For example, we would need to talk about relationships between SD-JWTs, what happens if only single credentials fail validation, etc.; all of this is not strictly related to the credential format and is much better handled on the transport protocol layer, e.g., OIDC4VC.",
          "createdAt": "2022-11-23T12:40:27Z",
          "updatedAt": "2022-11-23T12:40:27Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I actually have a new perspective. I think instead of defining holder binding JWT as a separate object we should define it as an envelope for SD-JWT+ Disclosures. This will have better alignment with VCs and will address multiple SD-JWTs request from Giuseppe. now that disclosures are separate from the holder binding JWT, I think it makes more sense to go in this direction",
          "createdAt": "2022-11-23T17:41:00Z",
          "updatedAt": "2022-11-23T17:41:00Z"
        },
        {
          "author": "TakahikoKawasaki",
          "authorAssociation": "NONE",
          "body": "Let me confirm my understanding (I'm a newbie to SD-JWT).\r\n\r\nIn the current snapshot of the SD-JWT specification, a binding JWT is placed at the end of \"Combined Format for Presentation\" like below.\r\n\r\n    <SD-JWT>~<Disclosure 1>~<Disclosure 2>~...~<Disclosure M>~<optional Holder Binding JWT>\r\n\r\nBut the format is going to be discarded and something like below is going to be proposed or has already been proposed somewhere. Right?\r\n\r\n**Payload of a binding JWT**\r\n\r\n```json\r\n{\r\n  \"{list of Combined Formats}\": [\r\n    \"<SD-JWT-1>~<Disclosure-1-1>~...~<Disclosure-1-M>\",\r\n    \"<SD-JWT-2>~<Disclosure-2-1>~...~<Disclosure-2-M>\",\r\n    \"...\"\r\n  ]\r\n}\r\n```",
          "createdAt": "2023-02-26T09:06:27Z",
          "updatedAt": "2023-02-26T09:07:37Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Welcome to the SD-JWT party Taka :) \r\n\r\nThe current Combined Format for Presentation isn't expected to change or be discarded. We do allow for an enveloping approach as in https://datatracker.ietf.org/doc/html/draft-ietf-oauth-selective-disclosure-jwt#section-7 and suggest the `_sd_jwt` claim be used for that. \r\n\r\nEncrypting isn't precluded but will likely be done/defined at an application protocol layer - i.e. JARM encryption of the vp_token(s) in OpenID4VP. ",
          "createdAt": "2023-02-27T00:28:58Z",
          "updatedAt": "2023-02-27T00:28:58Z"
        },
        {
          "author": "TakahikoKawasaki",
          "authorAssociation": "NONE",
          "body": "Thank you, Brian. That is, both of the following options work.\r\n\r\n1. Appending a binding JWT at the end of \"Combined Format for Presentation\".\r\n2. Embedding \"Combined Format for Presentation\" (without a binding JWT) in a JWT, which works as a binding JWT.\r\n",
          "createdAt": "2023-02-27T08:16:59Z",
          "updatedAt": "2023-02-27T08:16:59Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "encrypting would be allowed by encrypting an entire JWT in the approach 2 in Taka's comment above",
          "createdAt": "2023-02-28T17:00:18Z",
          "updatedAt": "2023-02-28T17:00:18Z"
        }
      ]
    },
    {
      "number": 125,
      "id": "I_kwDOHTmVzM5NwY6i",
      "title": "Change title to 'Selective Disclosure for JWT'",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/125",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "ready-for-PR"
      ],
      "body": "> It's subtle but this isn't exactly a type of JWT and the title 'Selective Disclosure JWT' is potentially misleading. The document is more defining some structures/claims for use in JWT that can (help) accomplish selective disclosure.  'Selective Disclosure with JWT' or 'Selective Disclosure for JWT' might be more appropriate.\r\n\r\n_Originally posted by @bc-pi in https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/60#issuecomment-1167782800_\r\n\r\nI have come across this also while preparing the presentation for IETF. I think 'Selective Disclosure for JWT' would make more sense than the current title.",
      "createdAt": "2022-07-14T09:42:13Z",
      "updatedAt": "2022-08-04T19:48:03Z",
      "closedAt": "2022-08-04T19:48:03Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Concur (obviously). ",
          "createdAt": "2022-07-14T22:53:59Z",
          "updatedAt": "2022-07-14T22:53:59Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Makes sense",
          "createdAt": "2022-07-18T14:34:10Z",
          "updatedAt": "2022-07-18T14:34:10Z"
        }
      ]
    },
    {
      "number": 129,
      "id": "I_kwDOHTmVzM5OrGOd",
      "title": "verifier ignoring holder's keys",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/129",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "@tplooker pointed out that verifiers who do not understand `cnf` (or any other claim used to pass holder's key info), verifier will ignore it per JWT's extensibility model. So the attacker takes an issuer-signed item out of a holder-signed item and only sends issuer-signed to the verifier. issuer's signature will pass, and verifier will ignore holder's key info.\r\nJWT's extensibility model backfiring on attacked removing holder binding.",
      "createdAt": "2022-07-27T18:15:38Z",
      "updatedAt": "2022-10-24T16:49:22Z",
      "closedAt": "2022-10-24T16:49:22Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Not exactly sure how the attack works. Whatever is signed by the issuer contains the `cnf` claim (or doesn't). The attacker cannot remove that claim. \r\n\r\nBut even if we assume that the  attacker can remove the claim, that would mean that the verifier bases its decision whether to require holder binding or not on information solely defined by the issuer - that is strange, it should be defined by the use case in general. There might also be instances where the issuer let's the user decide whether to include `cnf` (or any other claim for the user key). The verifier must not rely on the presence of that claim.",
          "createdAt": "2022-07-27T19:35:40Z",
          "updatedAt": "2022-07-27T19:35:40Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "I think that the proof of possession in terms of Holder's publick key bounded in the SD-JWT should be defined in the trust framework. The verifier should (or not) prove the possession of the holder.\r\n\r\nhow this can be achieved?\r\n\r\nJWT gives some liberties but cnf is a standard claim and if it's regulated by the rules of a federation the Verifier should verify the cnf value in conformance of the PoP requirement.\r\n\r\nif an adversary removes the cnf, the signature validation of the SD-JWT fails.\r\nif the verifier doesn't check the PoP in the way that it has been defined in the technical specs of a trust framework well, it will be banned.",
          "createdAt": "2022-07-27T20:14:25Z",
          "updatedAt": "2022-07-27T20:14:25Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "> I think that the proof of possession in terms of Holder's publick key bounded in the SD-JWT should be defined in the trust framework. \r\n\r\nAgree, if the spec is used within a trust framework, the requirement for PoP would probably defined there.\r\n\r\n> The verifier should (or not) prove the possession of the holder.\r\n\r\nIt's the holder proving possession, the verifier checks the proof.",
          "createdAt": "2022-07-27T20:24:36Z",
          "updatedAt": "2022-07-27T20:24:36Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "yes, my english hits again",
          "createdAt": "2022-07-27T20:35:02Z",
          "updatedAt": "2022-07-27T20:35:02Z"
        },
        {
          "author": "tplooker",
          "authorAssociation": "NONE",
          "body": "> Not exactly sure how the attack works. Whatever is signed by the issuer contains the cnf claim (or doesn't). The attacker cannot remove that claim.\r\n\r\nYep you're correct, let me try to explain it a little further\r\n\r\nThe underlying extensibility model for JWT payloads relies on parties ignoring values they don't understand. Therefore layering in new security related parameters like the `cnf` claim which is optional in the context of general JWTs (e.g un-profiled) which means that a risk does exist that a JWT containing a `cnf` claim could be sent to a verifying party that does not understand it and therefore verifying it as an ordinary JWT without and holder PoP signature present.",
          "createdAt": "2022-07-28T03:09:31Z",
          "updatedAt": "2022-07-28T03:09:31Z"
        },
        {
          "author": "tplooker",
          "authorAssociation": "NONE",
          "body": "I realise this isn't the first/only example of where the general nature of JWT's can mean cross contextual use (e.g cross profile) can lead to these sorts of issues, however it does appear different in the PoP case given that it affects the cryptographic verification process. For instance could it not be plausible that an implementation of SD-JWT only supports the non-holder bound variation?",
          "createdAt": "2022-07-28T03:40:09Z",
          "updatedAt": "2022-07-28T03:40:09Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I added new text during my last review that addresses this topic. Please review!\r\nhttps://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/155/files#diff-40bc3800dd9a7d4411799637caf0b01f82a01242d57264a2e4beb408c3835704R986-R1026",
          "createdAt": "2022-10-19T16:21:33Z",
          "updatedAt": "2022-10-19T16:21:33Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #155",
          "createdAt": "2022-10-24T16:27:53Z",
          "updatedAt": "2022-10-24T16:27:53Z"
        }
      ]
    },
    {
      "number": 131,
      "id": "I_kwDOHTmVzM5Owbr1",
      "title": "rename SD-JWT-Release to SVC-Release?",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/131",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "Sakurann"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "Some have asked what is \"Release\"? In short it's a subset of SVC that contains only those claims that the user has consented to share.\r\nmaybe SVC -Release is better? (I am also perfectly fine keeping it as is)",
      "createdAt": "2022-07-28T18:17:26Z",
      "updatedAt": "2022-10-19T18:02:11Z",
      "closedAt": "2022-10-19T18:02:10Z",
      "comments": [
        {
          "author": "sbutterfield",
          "authorAssociation": "NONE",
          "body": "Should it just be called `Disclosure`?",
          "createdAt": "2022-09-21T00:04:22Z",
          "updatedAt": "2022-09-21T00:04:22Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I would be ok with `Disclosure`, WDYT @danielfett ?",
          "createdAt": "2022-09-29T04:58:12Z",
          "updatedAt": "2022-09-29T04:58:21Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #148 \r\nJust Disclosure was confusing with Disclosure Document (renamed from SVC per #134) so chose SD-JWT-Disclosure/SD-JWT-D",
          "createdAt": "2022-10-01T05:07:19Z",
          "updatedAt": "2022-10-01T05:07:19Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "renamed to\r\n> Holder-Selected Disclosures JWT (HS-Disclosures JWT)\r\n:  A JWT created by the Holder that contains the Disclosures from an Issuer-Issued Disclosures Object that the Holder is disclosing to the Verifier. In addition to the Disclosures, it can contain other properties and may be signed by the Holder.\r\n",
          "createdAt": "2022-10-19T18:02:10Z",
          "updatedAt": "2022-10-19T18:02:10Z"
        }
      ]
    },
    {
      "number": 132,
      "id": "I_kwDOHTmVzM5OwdPs",
      "title": "add guidance on how the issuers choose how to blind claim names",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/132",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "user has 2 SD-JWTs from the same issuer, same blinded claim names can be used to correlate the user.\r\nadvice to have a fresh blinded claim name for each credential.",
      "createdAt": "2022-07-28T18:24:19Z",
      "updatedAt": "2022-10-24T16:49:12Z",
      "closedAt": "2022-10-24T16:49:12Z",
      "comments": [
        {
          "author": "sbutterfield",
          "authorAssociation": "NONE",
          "body": "Instead of opening a new issue from our conversation this morning - here is the excerpt & suggestion from the document we discussed:\r\n## blinding the attribute name\r\nFirst off, maybe it's informational or maybe it's specified - issuers should not include \"secrets\" in claim labels. If a label for something is actually a secret, it should be treated as such. That said, I get that this scenario must be addressed. Sensitive predicates or graduated disclosure contexts can benefit from this capability. \r\n\r\nIt seems to me that the most useful and easy algorithm to implement is to use the same hash algorithm + salt for the node value to blind the label where: SALTED LABEL = HASH_ALGO(LABEL + SALT)\r\nOf course, this assumes that specific guidance is included for best practice salt generation (fresh entropy gathering for each attribute block salt, sufficient bits of entropy, etc.) for strong cryptographic outcomes.\r\n```\r\n\"_sd\": {\r\n  \"9-J2445a_p91...\": {\r\n    \"h\": \"Y823Kowek92...\", // b64url\r\n    \"l\": \"name\"\r\n    \"s\": \"H82leq3!4...\", // re-use salt\r\n    \"id\": \"did:jwk:894fa94hg10AOEe82\u2026#0\", //claim specific DID URL binding\r\n    \"v\": \"Slim Shady\"\r\n  }\r\n}\r\n```\r\nIn this representation, the salted hash of the label's value (\"name\") \"9-J2445a_p91...\" can be addressed directly by the digest \"h\" value in compact form: \r\n```\r\n\"_sd\": {\r\n  \"9-J2445a_p91...\": \"Y823Kowek92...\"\r\n}\r\n```\r\nSide-note:\r\nInformative statements that recommend large sd-jwt claim sets should be 'broken down' into much smaller sets, or individual claims, then wrapped and sealed as a JWP may be better than including too many claims in an sd-jwt.\r\n\r\n",
          "createdAt": "2022-09-21T00:01:26Z",
          "updatedAt": "2022-09-21T00:01:51Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Right now, it is RECOMMENDED that a random string is chosen for the blinded claim name. HMAC(salt, claim-name) and HASH_ALGO(LABEL + SALT) would be fine as well, but there's more room for errors, especially as holders/verifiers might expect a specific format and then reject an SD-JWT when, e.g., the issuer chose a wrong encoding or similar.\r\n\r\nI don't see a real advantage of using HMAC/HASH_ALGO for the blinded claim name. \r\n\r\nI therefore propose to stick with the current recommendation. We should stress that a fresh random value must be chosen for each claim in each issued credential.",
          "createdAt": "2022-10-17T07:42:23Z",
          "updatedAt": "2022-10-17T07:42:23Z"
        },
        {
          "author": "sbutterfield",
          "authorAssociation": "NONE",
          "body": "@danielfett it's not super clear to me how: \r\n```\r\nSD-CLAIMS = (\r\n    CLAIM-NAME-PLACEHOLDER: DIGEST-DERIVATION(SALT, CLAIM-VALUE, CLAIM-NAME)\r\n)*\r\n```\r\nwould alleviate your concerns here: _\"but there's more room for errors, especially as holders/verifiers might expect a specific format and then reject an SD-JWT when, e.g., the issuer chose a wrong encoding or similar\"_\r\n\r\nMaybe I'm missing something obvious but I don't see much difference in how holders & verifiers would treat these various approaches. They still have to reconcile with the encoding and/or hashing algorithms expressed in the security envelope. ",
          "createdAt": "2022-10-19T18:52:17Z",
          "updatedAt": "2022-10-19T18:52:17Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "My point was about the selection of the blinded clame name (or 'placeholder claim name' as it is called in the current draft). We have two options on the table:\r\n\r\n1. Select a random string as the placeholder\r\n2. Select the placeholder as some function of the original claim name (the label in your proposal) and the salt\r\n\r\nWhat I wanted to express is that I think option 1 is better. From a security perspective, both are equivalent. There is no need to choose the placeholder claim name in a particular way, we just need to ensure that it does not leak information about the original claim name. Just numbering all placeholder claim names would be fine as well (as long as the numbering does not reveal anything, e.g., the position of the original claim in the list of claims.) \r\n\r\nBut for option 2, I see two drawbacks:\r\n\r\n - We need to explain more, in particular how to assemble the input for the function, similar to the discussion we had about the hidden claim values. For example, we need to define how the original claim name and the salt are concatenated such that there can be no prefix collisions. \r\n - A verifier receiving an SD-JWT with blinded claim names according to option 2 may be tempted to (needlessly) check that the claim name was created in a particular way by recalculating the hash. If the issuer has made a mistake when calculating the hash or the verifier makes a mistake, this check will fail. Since such a check is not needed, it would be better if we don't set this trap in the first place.\r\n\r\nI see no advantages of option 2 over option 1, so I propose to go for option 1.",
          "createdAt": "2022-10-20T07:28:19Z",
          "updatedAt": "2022-10-20T07:28:19Z"
        },
        {
          "author": "sbutterfield",
          "authorAssociation": "NONE",
          "body": "I see, thanks for explaining that. I'm fine with option 1 if the goal is to reduce cognitive complexity for the application developers - it makes sense. ",
          "createdAt": "2022-10-20T15:09:19Z",
          "updatedAt": "2022-10-20T15:09:19Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #155 and PR #158",
          "createdAt": "2022-10-24T16:27:08Z",
          "updatedAt": "2022-10-24T16:27:08Z"
        }
      ]
    },
    {
      "number": 133,
      "id": "I_kwDOHTmVzM5QF7r6",
      "title": "Clarify SD-JWT and SVC is different",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/133",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "Received feedback from Vittorio that this text is confusing: \"The structure of sd_release object in the SD-JWT-R is the same as in SD-JWT\" - whether SD-JWT and SVC are different objects or are different. Need to paraphrase/clarify",
      "createdAt": "2022-08-18T22:57:13Z",
      "updatedAt": "2022-09-21T17:26:00Z",
      "closedAt": "2022-09-21T17:26:00Z",
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "yes, when we moved from `sd` to `sd_release` we probably introduced this kind of typo.",
          "createdAt": "2022-08-18T23:25:16Z",
          "updatedAt": "2022-08-18T23:25:16Z"
        },
        {
          "author": "vibronet",
          "authorAssociation": "NONE",
          "body": "New release didn't fix it tho :)",
          "createdAt": "2022-08-25T22:58:06Z",
          "updatedAt": "2022-08-25T22:58:06Z"
        }
      ]
    },
    {
      "number": 134,
      "id": "I_kwDOHTmVzM5QjrSw",
      "title": "rename \"SVC\" to \"Disclosure document\"?",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/134",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "Sakurann"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "feedback from @bifurcation that term \"SVC\" too specific to the approach, and does not capture the purpose - suggestion to rename it to \"disclose document\"",
      "createdAt": "2022-08-25T23:04:15Z",
      "updatedAt": "2022-10-19T18:03:39Z",
      "closedAt": "2022-10-19T18:03:38Z",
      "comments": [
        {
          "author": "sbutterfield",
          "authorAssociation": "NONE",
          "body": "+1",
          "createdAt": "2022-09-21T00:04:34Z",
          "updatedAt": "2022-09-21T00:04:34Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "can do a PR, if you agree @danielfett ",
          "createdAt": "2022-09-29T04:59:02Z",
          "updatedAt": "2022-09-29T04:59:02Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #148",
          "createdAt": "2022-10-01T04:53:53Z",
          "updatedAt": "2022-10-01T04:53:53Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Tried a PR, \"disclosure document\" and it does not sound clear enough.. \r\n\r\n> \"SVC\" too specific to the approach, and does not capture the purpose\r\n\r\nthe purpose is for the issuer to tell the holder the mapping of salts, claim names, claim values, (and optionally blinded claim values), that the holder uses to create a SD-JWT-Disclosure.\r\n\r\nAny better suggestions?",
          "createdAt": "2022-10-04T16:59:21Z",
          "updatedAt": "2022-10-04T16:59:21Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "renamed to \r\n> Issuer-Issued Disclosures Object (II-Disclosures Object)\r\n:  A JSON object created by the issuer that contains mapping between \r\n   raw claim values contained in the SD-JWT and the salts for each claim value.",
          "createdAt": "2022-10-19T18:03:38Z",
          "updatedAt": "2022-10-19T18:03:38Z"
        }
      ]
    },
    {
      "number": 137,
      "id": "I_kwDOHTmVzM5RRVLT",
      "title": "Python Code Incomplete Implementation of cnf",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/137",
      "state": "CLOSED",
      "author": "fabian-hk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The Python code puts the holder key directly into the ``cnf`` field:\r\n```\r\n\"cnf\": {\r\n        \"kty\": \"RSA\",\r\n        \"n\": \"pm4bOHBg-oYhAyPWzR56AWX3rUIXp11_ICDkGgS6W3ZWLts-hzwI3x65659kg4hVo9dbGoCJE3ZGF_eaetE30UhBUEgpGwrDrQiJ9zqprmcFfr3qvvkGjtth8Zgl1eM2bJcOwE7PCBHWTKWYs152R7g6Jg2OVph-a8rq-q79MhKG5QoW_mTz10QT_6H4c7PjWG1fjh8hpWNnbP_pv6d1zSwZfc5fl6yVRL0DV0V3lGHKe2Wqf_eNGjBrBLVklDTk8-stX_MWLcR-EGmXAOv0UBWitS_dXJKJu-vXJyw14nHSGuxTIK2hx1pttMft9CsvqimXKeDTU14qQL1eE7ihcw\",\r\n        \"e\": \"AQAB\"\r\n    },\r\n```\r\nbut in the draft examples there is a ``jwk`` sub key:\r\n```\r\n\"cnf\": {\r\n    \"jwk\" : {\r\n        \"kty\": \"RSA\",\r\n        \"n\": \"pm4bOHBg-oYhAyPWzR56AWX3rUIXp11_ICDkGgS6W3ZWLts-hzwI3x65659kg4hVo9dbGoCJE3ZGF_eaetE30UhBUEgpGwrDrQiJ9zqprmcFfr3qvvkGjtth8Zgl1eM2bJcOwE7PCBHWTKWYs152R7g6Jg2OVph-a8rq-q79MhKG5QoW_mTz10QT_6H4c7PjWG1fjh8hpWNnbP_pv6d1zSwZfc5fl6yVRL0DV0V3lGHKe2Wqf_eNGjBrBLVklDTk8-stX_MWLcR-EGmXAOv0UBWitS_dXJKJu-vXJyw14nHSGuxTIK2hx1pttMft9CsvqimXKeDTU14qQL1eE7ihcw\",\r\n        \"e\": \"AQAB\"\r\n    }\r\n  },\r\n```\r\nAfter RFC7800 the draft examples should be correct. So do we have to update the Python code?",
      "createdAt": "2022-09-06T15:52:49Z",
      "updatedAt": "2022-09-27T23:27:00Z",
      "closedAt": "2022-09-27T23:27:00Z",
      "comments": []
    },
    {
      "number": 139,
      "id": "I_kwDOHTmVzM5SA6Ag",
      "title": "Regarding  VC and VP generation",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/139",
      "state": "CLOSED",
      "author": "Muthurajj",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Does this library support for generating VC and VP?\r\n\r\nIf so can we integerate and pass claims from java ?",
      "createdAt": "2022-09-16T13:41:13Z",
      "updatedAt": "2022-09-29T14:47:43Z",
      "closedAt": "2022-09-29T14:47:42Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "See Issue #142 ",
          "createdAt": "2022-09-29T14:47:42Z",
          "updatedAt": "2022-09-29T14:47:42Z"
        }
      ]
    },
    {
      "number": 140,
      "id": "I_kwDOHTmVzM5SG6ve",
      "title": "Pls responed for this-How to include this in example simple ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/140",
      "state": "CLOSED",
      "author": "Muthurajj",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "  \"vc\": {\r\n    \"@context\": [\r\n      \"https://www.w3.org/2018/credentials/v1\",\r\n      \"https://www.w3.org/2018/credentials/examples/v1\"\r\n    ],\r\n    \"type\": [\r\n      \"VerifiableCredential\",\r\n      \"UniversityDegreeCredential\"\r\n    ],",
      "createdAt": "2022-09-19T07:46:50Z",
      "updatedAt": "2022-09-29T14:43:34Z",
      "closedAt": "2022-09-29T14:43:34Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "See Issue #142.",
          "createdAt": "2022-09-29T14:43:34Z",
          "updatedAt": "2022-09-29T14:43:34Z"
        }
      ]
    },
    {
      "number": 141,
      "id": "I_kwDOHTmVzM5SQGWW",
      "title": "SD-JWT Proposed alternative to inline, escaped JSON values",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/141",
      "state": "CLOSED",
      "author": "sbutterfield",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "## Problem statement\r\n\r\nCurrently, in sd-jwt spec, the recommended representation for JSON property values is to embed escaped JSON that represents a salted hash of the value. This seems to add complexity, room for error, and superfluous verbosity. Instead, specifying that claims in an \"_sd\" container are themselves ONE OF the following: \r\n(a) simple plain-text values\r\n(b) an object of specified properties supporting blinded property values\r\n(c) an object with specified properties supporting a blinded graph\r\n\r\nThere's a good balance of specificity and flexibility here (IMHO) for implementors to accommodate many different scenarios - as opposed to having to unescape and then detect the contents of an attribute's values. With strict conventions on certain attributes of an attribute block, relying parties are guaranteed some properties right away that can be validated before the actual values are read into memory - increasing reliability, security, and permitting faster failure sequences. In addition, writing unit and functional test automation suites for escaped stringified JSON is problematical at best and prone to some of the same formatting problems of concern with structured JSON values. It can also give way to new inconsistent ordering problems during serialized representation testing.\r\n\r\nHowever, per issue 27 - and other discussions that I could uncover, there is ongoing concern over c18n for hash reproducibility. I completely understand why. What I\u2019m proposing might be radioactive, but in this implementor's opinion, is unburdening: I do not think that it\u2019s the SD-JWT spec\u2019s problem to solve data format representation compatibility across all languages and libraries. Furthermore, I don\u2019t think that SD-JWT spec needs to solve for all extended/intermediate representations of claim values - especially when it comes to VC use-cases. In the spirit of good interface building and abstraction, I propose that it\u2019s possible to think of SD-JWT as foundational for other more opinionated specifications.\r\n\r\nIf statements put in attribute values need interpretation, then I\u2019d suggest other means for doing so like metadata encoding specific sections, SD-JWT issuer documentation, JSON Schema, JCS (as an example: RFC 8785 has guidelines for int64 strict encoding). I humbly warn that normatively specifying that values for properties should be escaped JSON AND that you should stuff other important and specified k<>v  pairs in the escaped JSON - is a mistake and will damage adoption for the spec. I don\u2019t think that taking ownership over the shape of claim values should be part of this spec, especially if the goal of a claim is to be \u201canything you want\u201d\u2026\r\n\r\nBoling down the problem of canonicalizing some value(s) - it seems most important to address bitwise value compatibility issues and the way that serialization libraries might handle non-primitive types (as opposed to distressing about ordering). Perhaps there are ways through this that don\u2019t involve incomplete or burdensome canonicalization libraries. Several libraries responsible for producing consistent hashes over JSON (ie: node.js `object-hash`) internally detect and encode incompatible datatypes. Would it be possible for SD-JWT to specify that prior to salting and hashing the attribute - its value must be: \r\nFully compacted (in the case of a JSON graph)\r\nEncoded using utf-8 octal, base64, base64url, hex, or some other specific encoding scheme\r\nThen salted and hashed?\r\n\r\nOn the whole, escaped stringified JSON values as the basis for SVC should probably be rethought. This issue aims to try and start that conversation with some meaningful solutions\r\n\r\nBy way of examples, you could instead represent SD-JWTs as:\r\n\r\n## blinded attribute block\r\n```\r\n\"_sd\": {\r\n  \"name\": {\r\n    \"h\": \"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIDEzIGxhenkgZG9ncy4=\", // base64url\r\n    \"s\": \"6YCYrdrSxs7q6dlO562YI6GhAktsBExFe6rcCZ+OX9I=\", // base64url\r\n    \"id\": \"did:jwk:894fa94hg10AOEe82\u2026#0\", //claim specific DID URL binding\r\n    \"v\": \"Slim Shady\"\r\n  }\r\n}\r\n```\r\nExample generation:\r\nHash over the compact form node for \"name\", without the \"h\" property present. Encode the resulting digest in base64url encoding. Insert the digest as property \"h\" into the \"name\" attribute block.\r\n\r\nEnables compact blinded presentation form of \r\n{\"name\": \"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIDEzIGxhenkgZG9ncy4=\"}\r\n\r\nThe underlying salt, which is never revealed unless the \"name\" property value is revealed, disables direct attack on the property - even with the label, type, and validation procedure for the value data of the property is known.\r\n\r\nBy letting JSON be JSON in the entire document structure, you enable an issuer to (optionally) be very specific about the structure of the value entered for an attribute. This further enhances security - especially if the signature (or even simply a hash) of the schema for the SD-JWT is described in the signed-over envelope (in a VC-SD-JWT).\r\n\r\n## blinded, nested eKYC graph\r\n\r\nThe standardized definition of what an eKYC data model is supposed to look like is a bit ambiguous, so I assume what you\u2019re concerned with is something like OIDC...\r\n```\r\n\"_sd\": {\r\n  \"oidc_req\": {\r\n    \"h\": \"...\",\r\n    \"s\": \"...\",\r\n    \"v\": {\r\n      \"scope\": [..., ..., ...],\r\n      \"response_type\": \"code\",\r\n      \"client_id\": \"...\",\r\n      \"redirect_uri\": \"...\",\r\n      \"nonce\": \"...\"\r\n    }\r\n  }\r\n}\r\n```\r\nthe \"v\" of the claim is valid, and validatable JSON. The semantic meaning of the outer, securely disclosable, claim name can be either domain-specific or use a JSON-LD context.\r\n",
      "createdAt": "2022-09-20T20:23:25Z",
      "updatedAt": "2022-10-17T07:30:07Z",
      "closedAt": "2022-10-17T07:30:06Z",
      "comments": [
        {
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "body": "```\r\n\"id\": \"did:jwk:894fa94hg10AOEe82\u2026#0\"\r\n```\r\n\r\nI wonder if these are `iss` or `kid` or both (as is the current example).",
          "createdAt": "2022-09-20T20:57:31Z",
          "updatedAt": "2022-09-20T20:57:31Z"
        },
        {
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Do you even need canonicalization? are these serialized formats ever stored in a \"decoded\" form?\r\n\r\nFor example, in JWTs.\r\n\r\n{ header, payload, signature } is a fine way to store a token, if you are assured member ordering of header and payload are preserved, and whitespace is trimmed.\r\n\r\nIf you are worried about that, you store the entire thing encoded as a `jwt`... I don't know enough about sd-jwt, but its possible that cannonicalization can be accomplished in a \"light mode\" with normative statements, similar to the instructions for https://www.rfc-editor.org/rfc/rfc7638#section-3.2",
          "createdAt": "2022-09-20T21:02:32Z",
          "updatedAt": "2022-09-20T21:02:37Z"
        },
        {
          "author": "sbutterfield",
          "authorAssociation": "NONE",
          "body": "> ```\r\n> \"id\": \"did:jwk:894fa94hg10AOEe82\u2026#0\"\r\n> ```\r\n> \r\n> I wonder if these are `iss` or `kid` or both (as is the current example).\r\n\r\nIt's a really good question, Orie. The way I thought of it was the identifier `kid` - but it's something I just happened to add here for consideration. Instead of `did:jwk`, could it be any DID method URL allowing issuer-specific claim binding? or \"any party\" specific claim binding?\r\nMaybe putting `did:` there is the wrong idea altogether. I'd love to iterate on it. ",
          "createdAt": "2022-09-20T21:06:00Z",
          "updatedAt": "2022-09-20T21:06:00Z"
        },
        {
          "author": "sbutterfield",
          "authorAssociation": "NONE",
          "body": "> Do you even need canonicalization? are these serialized formats ever stored in a \"decoded\" form?\r\n\r\nI think this is a key question I'm poking at here. Could sd-jwt be better off not **_over-specifying_** a canonicalized form, allowing room for implementation specs unique to the domain of use for the sd-jwt spec?",
          "createdAt": "2022-09-20T21:10:02Z",
          "updatedAt": "2022-09-20T21:10:02Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "As discussed on our call with Shawn yesterday, it is important to separate the representation of values in the credential (SD-JWT) from the actual values of properties that are resolved after the verification of the presentation (SD-JWT and SD-JWT-Release). The use of the escaped JSON in the credential is what allows SD-JWT to support any type, including objects, for property values. Ideally, anything that builds on top of SD-JWT will not need to handle the escaped JSON format, as (for example) the verification algorithm outputs a JSON without any JSON escaped values for further processing by the application. I'm therefore not convinced that the \"unusual\" format for property values in the credential is a problem.\r\n\r\nThat said, the escaped JSON is not a great solution and raises a lot of eyebrows. But we think that it is the best solution we have. It is trivially easy to implement correctly, using any JSON library out there. The issue we're addressing is not solvable by prescribing a certain JSON schema (as it works on a higher layer). JCS would solve the problem, but increase implementation complexity. Even just compacting objects, as proposed below, is a relatively complex operation requiring a full JSON parser.\r\n",
          "createdAt": "2022-09-21T07:29:57Z",
          "updatedAt": "2022-09-21T07:29:57Z"
        },
        {
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sometimes you can avoid escaping by translating... I've used https://www.npmjs.com/package/json-pointer do do selective disclosure with merkle proofs before... I would rather have JSON Pointer as a dependency than see escaped JSON payloads or have to manage transforms that were only defined in the sd-jwt spec.\r\n\r\n```ts\r\nimport pointer from 'json-pointer';\r\n\r\nconst objectToMessages = (obj: any) => {\r\n  const dict = pointer.dict(obj);\r\n  const messages = Object.keys(dict).map(key => {\r\n    return `{\"${key}\": \"${dict[key]}\"}`;\r\n  });\r\n  return messages;\r\n};\r\n\r\nconst messagesToObject = (messages: string[]) => {\r\n  const obj = {};\r\n  messages\r\n    .map(m => {\r\n      return JSON.parse(m);\r\n    })\r\n    .forEach(m => {\r\n      const [key] = Object.keys(m);\r\n      const value = m[key];\r\n      pointer.set(obj, key, value);\r\n    });\r\n  return obj;\r\n};\r\n\r\nexport { objectToMessages, messagesToObject };\r\n```\r\n\r\nThere are other approaches considered here: https://github.com/w3c-ccg/Merkle-Disclosure-2021/tree/main/packages/linked-data-proof/src/merkle/normalization\r\n\r\nConsider building blocks that are widely available in substitute for more normative spec definitions.",
          "createdAt": "2022-09-21T13:17:48Z",
          "updatedAt": "2022-09-21T13:22:19Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I'm not following - can you give an example how JSON pointers or the code above would solve the hashing problem? ",
          "createdAt": "2022-09-21T13:34:14Z",
          "updatedAt": "2022-09-21T13:34:14Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "> Do you even need canonicalization? are these serialized formats ever stored in a \"decoded\" form?\r\n> \r\n> For example, in JWTs.\r\n\r\nInterestingly, JWTs are an example where normalization was avoided by just encoding the whole body into the token without any normalization, not unlike what we're doing in SD-JWT. (The ~~header~~ _edit: JWK Thumbprint_ data is treated differently, but that is a very controlled and small data set.) ",
          "createdAt": "2022-09-21T13:37:19Z",
          "updatedAt": "2022-09-26T14:42:30Z"
        },
        {
          "author": "sbutterfield",
          "authorAssociation": "NONE",
          "body": "@danielfett, not sure if you saw this new bit from my write-up: \r\n\r\n> Would it be possible for SD-JWT to specify that prior to salting and hashing the attribute - its value must be:\r\nFully compacted (in the case of a JSON graph)\r\nEncoded using utf-8 octal, base_xyz_, hex, or some other specific encoding scheme\r\nThen salted and hashed?\r\n\r\nSimilar to the JWP spec, pre-encoding the value using utf-8 octal byte array (or something else, I don't care), then salting and hashing (JWP generates a proof instead).",
          "createdAt": "2022-09-21T15:24:33Z",
          "updatedAt": "2022-09-21T15:24:33Z"
        },
        {
          "author": "sbutterfield",
          "authorAssociation": "NONE",
          "body": "I _think_ what you want to ensure is that the issuer's intended data format is assured and therefore the hash is always reproducible. With a byte-level encoding, to my knowledge, I cannot think of a language or library that screws this up (although I'm sure one exists), which is why many universal \"XYZ to hash\" producer libraries reify values in some encoded byte format.",
          "createdAt": "2022-09-21T15:37:01Z",
          "updatedAt": "2022-09-21T15:37:01Z"
        },
        {
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I'm not following - can you give an example how JSON pointers or the code above would solve the hashing problem?\r\n\r\nhttps://github.com/w3c-ccg/Merkle-Disclosure-2021/blob/main/packages/linked-data-proof/src/merkle/normalization/__tests__/json-pointer.test.ts\r\n\r\nhttps://github.com/transmute-industries/verifiable-data/tree/main/packages/merkle-proof#custom-hash-functions\r\n\r\nNormalize to a set of messages which are built from json pointer.\r\n\r\nThen use any multi-message scheme on those messages. (such as bbs+ signatures OR merkle set membership proofs)\r\n\r\nThats what we did to create merkle proofs for selective disclosure of object tree subsets.\r\n\r\n",
          "createdAt": "2022-09-21T21:48:31Z",
          "updatedAt": "2022-09-21T21:49:07Z"
        },
        {
          "author": "sbutterfield",
          "authorAssociation": "NONE",
          "body": "@OR13, \r\nIf I try and catch your drift here, your approach would be to process the value sub-graph into JSON pointers and then generate merkle set membership proofs for each fragment - is that right? Then, use the concatenation of the merkle proofs as the value for the salted attribute? ",
          "createdAt": "2022-09-22T14:38:26Z",
          "updatedAt": "2022-09-22T14:38:26Z"
        },
        {
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I showed how to convert an object to a set of messages.\r\n\r\nYou would want to apply the blinding to the messages.\r\n\r\nThe approach I showed is similar in that it relies on JSON encoding as strings... and then selective disclosure of those strings... which is then converted back to a selectively disclosed object.\r\n\r\nJust sharing the approach, not sure how exactly it might map to sd-jwt.",
          "createdAt": "2022-09-22T17:19:20Z",
          "updatedAt": "2022-09-22T17:20:22Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "@sbutterfield: Are you thinking about putting the pre-encoded value into the document produced by the issuer and then sent to the holder (what we call SVC in SD-JWT)?\r\n\r\n@OR13: I don't see how this approach would reduce complexity or make life easier for implementers. Why is an intermediate representation as a set of messages better than one where some values are JSON strings? In both cases, anybody working with the contents of the credential would need to apply some algorithms to convert it back into the original representation. With both approaches, the same data can be transported.\r\n\r\nOne of the main goals of SD-JWT is simplicity, which is why we have a fully working spec and four running implementations after only a couple of months of development. Right now, all that is needed to implement SD-JWT is a JSON library and a hash function. ",
          "createdAt": "2022-09-23T07:31:04Z",
          "updatedAt": "2022-09-23T07:31:04Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "The aesthetics of the string values with escaped JSON are not great, at best. But it obviates the need to do c18n/normalization with a straightforward approach that doesn't come with other baggage. I believe the draft should do a better job explaining that rational but stick with the current approach.  ",
          "createdAt": "2022-09-23T20:52:29Z",
          "updatedAt": "2022-09-23T20:52:29Z"
        },
        {
          "author": "sbutterfield",
          "authorAssociation": "NONE",
          "body": "@danielfett \r\nBasically, yes. Let me try and clarify with some examples to see if it makes sense. The encoding methodology employed here is similar to what some standards already employ and seems to be normatively used in JPT. \r\n\r\nFirst for a property value that we want to blind (let's use some arbitrary JSON): \r\n```\r\n{\r\n  \"array\": [\r\n    1,\r\n    2,\r\n    3\r\n  ],\r\n  \"boolean\": true,\r\n  \"color\": \"gold\",\r\n  \"null\": null,\r\n  \"number\": 123,\r\n  \"object\": {\r\n    \"a\": \"b\",\r\n    \"c\": \"d\"\r\n  },\r\n  \"string\": \"Hello World\"\r\n}\r\n```\r\n\r\nMust first be in compact form (normatively): \r\n```\r\n{\"array\":[1,2,3],\"boolean\":true,\"color\":\"gold\",\"null\":null,\"number\":123,\"object\":{\"a\":\"b\",\"c\":\"d\"},\"string\":\"Hello World\"}\r\n```\r\n\r\nNext, using a natively available json library function, or an easily supported polyfill - uint8array the value: \r\n```\r\nlet uc1 = '{\"array\":[1,2,3],\"boolean\":true,\"color\":\"gold\",\"null\":null,\"number\":123,\"object\":{\"a\":\"b\",\"c\":\"d\"},\"string\":\"Hello World\"}';\r\nlet encoder = new TextEncoder();\r\nlet uc1Uint8Array = encoder.encode(uc1);\r\nconsole.log(\"uc1: \", uc1Uint8Array.toString());\r\n//\"uc1: \", \"123,34,97,114,114,97,121,34,58,91,49,44,50,44,51,93,44,34,98,111,111,108,101,97,110,34,58,116,114,117,101,44,34,99,111,108,111,114,34,58,34,103,111,108,100,34,44,34,110,117,108,108,34,58,110,117,108,108,44,34,110,117,109,98,101,114,34,58,49,50,51,44,34,111,98,106,101,99,116,34,58,123,34,97,34,58,34,98,34,44,34,99,34,58,34,100,34,125,44,34,115,116,114,105,110,103,34,58,34,72,101,108,108,111,32,87,111,114,108,100,34,125\"\r\n```\r\n\r\nNow, it's possible to go in a number of directions in the representation... the uint8array string is quite simple and leaves little room for misinterpretation by an application during reproduction.\r\nUsing the hashing algorithm specified in the security envelope, salt & hash the string to get your digest. I have not had any problems reproducing the hash locally using different languages and libraries. I've added arbitrary whitespace, kanji, etc. No issues getting the same representation back out\r\n```\r\n\"_sd\": {\r\n  \"myjson\": {\r\n    \"h\": \"OGI2OTUzNjEwNDg0MmFiY2QzYjFiNWJmMTgzYTE2ZjZmOWNiYjU5MWFkYzI2ZDJjNzE4YjM1MmZkYzMzNTRhNg==\",\r\n    \"s\": \"6YCYrdrSxs7q6dlO562YI6GhAktsBExFe6rcCZ+OX9I=\",\r\n    \"v\": \"123,34,97,114,114,97,121,34,58,91,49,44,50,44,51,93,44,34,98,111,111,108,101,97,110,34,58,116,114,117,101,44,34,99,111,108,111,114,34,58,34,103,111,108,100,34,44,34,110,117,108,108,34,58,110,117,108,108,44,34,110,117,109,98,101,114,34,58,49,50,51,44,34,111,98,106,101,99,116,34,58,123,34,97,34,58,34,98,34,44,34,99,34,58,34,100,34,125,44,34,115,116,114,105,110,103,34,58,34,72,101,108,108,111,32,87,111,114,108,100,34,125\"\r\n  }\r\n}\r\n```\r\n",
          "createdAt": "2022-09-27T19:19:39Z",
          "updatedAt": "2022-09-27T19:19:39Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "So the string\r\n`123,34,97,114,114,97,121,34,58,91,49,44,50,44,51,93,44,34,98,111,111,108,101,97,110,34,58,116,114,117,101,44,34,99,111,108,111,114,34,58,34,103,111,108,100,34,44,34,110,117,108,108,34,58,110,117,108,108,44,34,110,117,109,98,101,114,34,58,49,50,51,44,34,111,98,106,101,99,116,34,58,123,34,97,34,58,34,98,34,44,34,99,34,58,34,100,34,125,44,34,115,116,114,105,110,103,34,58,34,72,101,108,108,111,32,87,111,114,108,100,34,125`\r\nis sent from the issuer to the wallet and then on to the verifier for the selectively disclosed claims, if I understand your proposal correctly. How does this improve on the current solution, which would be sending the string\r\n`{\\\"array\\\": [1, 2, 3], \\\"boolean\\\": true, \\\"color\\\": \\\"gold\\\", \\\"null\\\": null, \\\"number\\\": 123, \\\"object\\\": {\\\"a\\\": \\\"b\\\", \\\"c\\\": \\\"d\\\"}, \\\"string\\\": \\\"Hello World\\\"}`?\r\n`",
          "createdAt": "2022-09-28T06:54:22Z",
          "updatedAt": "2022-09-28T06:54:22Z"
        },
        {
          "author": "sbutterfield",
          "authorAssociation": "NONE",
          "body": "> How does this improve on the current solution, which would be sending the string\r\n\r\nIt's not inline escaped json",
          "createdAt": "2022-09-28T19:46:19Z",
          "updatedAt": "2022-09-28T19:46:19Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "We have added an explanation why we have chosen JSON encoding here: https://drafts.oauth.net/oauth-selective-disclosure-jwt/draft-ietf-oauth-selective-disclosure-jwt.html#the-challenge-of-canonicalization\r\n\r\nI still consider escaped JSON the most simple, most robust, and an extremely easy-to-implement solution. We will certainly not invent our own way of encoding bytes just to avoid unusually-looking strings in a document most applications will never even deal with. (To this point, please also take a look at the [proposed processing model](https://drafts.oauth.net/oauth-selective-disclosure-jwt/draft-ietf-oauth-selective-disclosure-jwt.html#processing_model) and the examples in the appendix.)",
          "createdAt": "2022-10-17T07:30:06Z",
          "updatedAt": "2022-10-17T07:30:06Z"
        }
      ]
    },
    {
      "number": 142,
      "id": "I_kwDOHTmVzM5SR41M",
      "title": "Can we achieve this structure ??",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/142",
      "state": "CLOSED",
      "author": "Muthurajj",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "{\r\n  \"sub\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\",\r\n  \"jti\": \"http://example.edu/credentials/3732\",\r\n  \"iss\": \"https://example.com/keys/foo.jwk\",\r\n  \"nbf\": 1541493724,\r\n  \"iat\": 1541493724,\r\n  \"exp\": 1573029723,\r\n  \"vc\": {\r\n    \"@context\": [\r\n      \"https://www.w3.org/2018/credentials/v1\",\r\n      \"https://www.w3.org/2018/credentials/examples/v1\"\r\n    ],\r\n    \"type\": [\r\n      \"VerifiableCredential\",\r\n      \"UniversityDegreeCredential\"\r\n    ]\r\n  },\r\n  \"sd_digests\": {\r\n    \"given_name\": \"fUMdn88aaoyKTHrvZd6AuLmPraGhPJ0zF5r_JhxCVZs\",\r\n    \"family_name\": \"9h5vgv6TpFV6GmnPtugiMLl5tHetHeb5X_2cKHjN7cw\",\r\n    \"birthdate\": \"fvLCnDm3r4VSYcBF3pIlXP4ulEoHuHOfG_YmFZEuxpQ\"\r\n  }\r\n}\r\n\r\n\r\nThis python code support for VC generation?\r\nAny changes require for achieving this structure?\r\nPls respond i am  new to python..\r\n ",
      "createdAt": "2022-09-21T06:54:21Z",
      "updatedAt": "2022-11-23T12:37:12Z",
      "closedAt": "2022-11-23T12:37:12Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "current python code supports only example 1 and not VCs as in example 4",
          "createdAt": "2022-09-29T05:17:54Z",
          "updatedAt": "2022-09-29T05:17:54Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "there are also 3 other implementations in different languages jfyi\r\n",
          "createdAt": "2022-09-29T05:18:21Z",
          "updatedAt": "2022-09-29T05:18:21Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "We added an example in the document with PR #174 that shows a W3C VC. The example is generated from the python code.",
          "createdAt": "2022-11-23T12:37:12Z",
          "updatedAt": "2022-11-23T12:37:12Z"
        }
      ]
    },
    {
      "number": 143,
      "id": "I_kwDOHTmVzM5SYLFC",
      "title": "VC generation in sd-jwt",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/143",
      "state": "CLOSED",
      "author": "Muthurajj",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "1.Can we generate VC using SD-JWT?\r\n\r\n2.What is the verification_process and sub that you have mentioned in example yml file\r\n\r\n3.If we can generate VC what should we change?\r\n\r\n4.How to generate context and type like you have mentioned in document example 4?\r\n5.Openid connect include in this library?",
      "createdAt": "2022-09-22T08:43:59Z",
      "updatedAt": "2022-09-29T14:47:11Z",
      "closedAt": "2022-09-29T14:47:11Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "1: See Issue #142 \r\n2: See the eKYC spec for the verification_process, but the value here is only an example\r\n3/4: The aim of the current python code is not to generate VCs, but to generate (more general) SD-JWTs.\r\n5: I don't understand this question.",
          "createdAt": "2022-09-29T14:47:04Z",
          "updatedAt": "2022-09-29T14:47:04Z"
        }
      ]
    },
    {
      "number": 144,
      "id": "I_kwDOHTmVzM5S6bdC",
      "title": "Add an example of ISO 18013-5 data model as SD-JWT",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/144",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "Sakurann"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "",
      "createdAt": "2022-09-29T15:15:43Z",
      "updatedAt": "2023-06-28T18:34:53Z",
      "closedAt": "2023-06-28T18:34:52Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "moving to sd-jwt-vc repo",
          "createdAt": "2023-06-28T18:34:52Z",
          "updatedAt": "2023-06-28T18:34:52Z"
        }
      ]
    },
    {
      "number": 156,
      "id": "I_kwDOHTmVzM5UU1Zm",
      "title": "typo in python code after #149",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/156",
      "state": "CLOSED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "bug"
      ],
      "body": "        @Sakurann sorry for the late revision\r\n\r\nit seems that here we have merge conflicts exposed\r\nhttps://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/149/files#diff-ce646751295775c4b20fb384cedc0e3374a9c288cc7c93c345f227a422979f46R12\r\n\r\n_Originally posted by @peppelinux in https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/149#issuecomment-1283809439_\r\n      ",
      "createdAt": "2022-10-19T10:52:04Z",
      "updatedAt": "2022-10-19T13:53:16Z",
      "closedAt": "2022-10-19T13:53:16Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I think this was fixed in a later revision. I don't see it in master.",
          "createdAt": "2022-10-19T11:12:31Z",
          "updatedAt": "2022-10-19T11:12:31Z"
        }
      ]
    },
    {
      "number": 159,
      "id": "I_kwDOHTmVzM5UlKK-",
      "title": "A section summarizing features ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/159",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I think we need a section summarizing what kind of claims SD-JWT can consist of...\r\n\r\n- claims in SD-JWT can all be selectively disclosable claims, or can also include always-disclosed claims\r\n- claim names in SD-JWT can all be blinded, or can include non-blinded claim names\r\n- claim structure can be simple or complex and claims in the complex structure can be blinded/not-blinded and disclosable/not-disclosable\r\n- same claim names can appear within multiple complex claim structures and can be blinded/not-blinded and disclosable/not-disclosable...",
      "createdAt": "2022-10-22T01:56:47Z",
      "updatedAt": "2022-10-24T16:25:58Z",
      "closedAt": "2022-10-24T16:25:58Z",
      "comments": []
    },
    {
      "number": 165,
      "id": "I_kwDOHTmVzM5VdMrL",
      "title": "missing word -01",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/165",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-01.html#section-5.8-3 \r\n\r\n\"For each claim, a JSON literal that decodes to an object with the and the claim value (plus optionally the claim name) is contained in the sd_hs_disclosures object.\" -> \"... decodes to an object with the *salt* and the claim value (plus ...\" or something about the salt I think. \r\n\r\n",
      "createdAt": "2022-11-02T20:04:37Z",
      "updatedAt": "2022-11-06T18:24:33Z",
      "closedAt": "2022-11-06T18:24:33Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "It has been fixed - you can see in the latest editor's version - will be in -02\r\nhttps://drafts.oauth.net/oauth-selective-disclosure-jwt/draft-ietf-oauth-selective-disclosure-jwt.html#section-5.8-3\r\n",
          "createdAt": "2022-11-06T18:24:33Z",
          "updatedAt": "2022-11-06T18:24:33Z"
        }
      ]
    },
    {
      "number": 166,
      "id": "I_kwDOHTmVzM5VdfyD",
      "title": "validate what? -01 ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/166",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-01.html#section-6.2-3.5.1 has, \"Validate the HS-Disclosures JWT: ... If Holder Binding is required, validate the signature over the SD-JWT using the same steps as for the SD-JWT plus the following steps:\", which can't be right with both mentions of SD-JWT.  \r\n\r\nFurthermore I'd strongly suggest that validation steps for the HS-Disclosures JWT be described independently.  Things like \"using the same steps as for the SD-JWT\" seem likely to lead to confusion and/or require extrapolation (which steps exactly? the issuer step above is kinda about the signature but not really needed in HS-Disclosures).  ",
      "createdAt": "2022-11-02T21:13:49Z",
      "updatedAt": "2022-11-23T12:32:57Z",
      "closedAt": "2022-11-23T12:32:57Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I would be strongly in favor of saying HS-DIsclosures is an object - always unsigned - that includes only `sd_hs_disclosures`. and that part is absolutely normative in SD-JWT spec. \r\n\r\nthis would allow us to define an optional Holder binding mechanism that requires a signed JWT - that includes nonce, aud, etc.\r\nmeaning if NO holder binding - 4 `.` separated parts like issuance. if yes holder binding - 7 `.` separated parts\r\n\r\nthe benefits of this approach include an easier alignment with other credential formats",
          "createdAt": "2022-11-07T14:31:16Z",
          "updatedAt": "2022-11-07T14:31:16Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm sure this is no surprise but I'm very much in favor of moving in that direction, @Sakurann. It's a bigger scope than was intended by this issue. But is exactly where I was hoping the conversations in London this week would lead.  \r\n\r\nThe HS-DIsclosures object could drop the sd_hs_disclosures key too and have one less level of nesting (simpler and smaller). \r\n\r\ni.e. just,\r\n\r\n```\r\n{\r\n \"given_name\": \"{\\\"s\\\": \\\"6Ij7tM-a5iVPGboS5tmvVA\\\", \\\"v\\\": \\\"John\\\"}\",\r\n \"family_name\": \"{\\\"s\\\": \\\"Qg_O64zqAxe412a108iroA\\\", \\\"v\\\": \\\"Doe\\\"}\",\r\n \"address\": \"{\\\"s\\\": \\\"5bPs1IquZNa0hkaFzzzZNw\\\", \\\"v\\\": {\\\"street_address\\\": \\\"123 Main St\\\", \\\"locality\\\": \\\"Anytown\\\", \\\"region\\\": \\\"Anystate\\\", \\\"country\\\": \\\"US\\\"}}\"\r\n}\r\n```\r\n\r\nSimilarly, the Issuer-Issued Disclosures could do without the outer sd_ii_disclosures layer.  \r\n\r\n",
          "createdAt": "2022-11-07T14:53:05Z",
          "updatedAt": "2022-11-08T08:26:29Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "(This is also larger than this issue, but) With this new approach, the combined formats could be expressed with each component being separated by the tilda and if there are multiple SD-JWTs (w/ HSD objects) being presented with one Holder Disclosure JWT, they can be separated with two tildas:\r\n\u201csd-jwt~hsd-object~~sd-jwt~hsd-object~~sd-jwt~hsd-object~~HD JWT\u201d\r\n\r\nIf hsd-object is absolutely one per as-JWT it might make sense dropping \u2018sd_hs_disclosures\u201d, which means \u2018sd_ii_disclosures\u2019 is also dropped. Not sure yet if we are limiting future extensibility here.. probably not ",
          "createdAt": "2022-11-08T08:21:20Z",
          "updatedAt": "2022-11-08T08:21:20Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "This has been solved in the PR for the new format, PR #174.",
          "createdAt": "2022-11-23T12:32:57Z",
          "updatedAt": "2022-11-23T12:32:57Z"
        }
      ]
    },
    {
      "number": 169,
      "id": "I_kwDOHTmVzM5V0uxm",
      "title": "digest algorithm agility needs refinement",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/169",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "As discussed during IETF 115, the approach to hash algorithm agility in -01 is problematic and needs some refinement. *Some* of the issues that jumped out at me are listed below. But I *think* that simplifying to just the hashes might be the way to go.\r\n\r\n- Where does the HMAC key come from? The salt value that would conceptually/presumably be the HMAC key is part of the string literal value that the digest is computed over, which is awkward. But also not explicitly defined. So it's an exercise left up to the reader, which isn't great for interoperability. \r\n- The JOSE alg registry doesn't seem appropriate for the HMAC algs in this different context. And isn't sufficient (see point above) for interoperability.\r\n- Allowing the value to come from two different unrelated registries or \"another specification and/or profile of this specification\" without a registry seems problematic on a number of fronts \r\n- The name `sd_digest_derivation_alg` is longer than typical JWT names (sha 256 could also potentially be a default if the thing isn't present to make things smaller in the common MTI case) \r\n- digest derivation function doesn't seem like a commonly used term\r\n- seems like the alg indicator could/should go under the `sd_digests` rather than being an independent claim at the same level (unless `sd_digests` goes away, which I'm starting to think it should based on conversations with Dr. @danielfett on Tues, in which case this point is moot) \r\n",
      "createdAt": "2022-11-08T10:10:51Z",
      "updatedAt": "2022-12-07T18:54:42Z",
      "closedAt": "2022-12-07T18:54:42Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "mostly done with f044eae6bb714e1423056e91940c3a71a548cdb9 and e9cea2ccf1dd164759f9d135797321fc16686768\r\n\r\na bit more tracked with #183",
          "createdAt": "2022-12-07T18:54:42Z",
          "updatedAt": "2022-12-07T18:54:42Z"
        }
      ]
    },
    {
      "number": 170,
      "id": "I_kwDOHTmVzM5WEu0e",
      "title": "Avoid leaking information with number of digests.",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/170",
      "state": "CLOSED",
      "author": "cobward",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "In order to prevent the number of digests leaking any information, ISO-18013-5 suggests adding additional digests that do not correlate to any of the hidden elements. The recently suggested format of sd-jwt would mean you would have to add these at every level that hidden elements are defined:\r\n\r\n```diff\r\n     \"family_name\": \"M\u00f6bius\",\r\n     \"sd|<real-digest>\": \"\",\r\n+    \"sd|<fake-digest-1>\": \"\",\r\n+    \"sd|<fake-digest-2>\": \"\",\r\n+    \"sd|<fake-digest-3>\": \"\"\r\n     \"address\": {\r\n       \"street_address\": \"Schulstr. 12\",\r\n       \"locality\": \"Schulpforta\",\r\n       \"sd|<real-digest>\": \"\",\r\n+      \"sd|<fake-digest-4>\": \"\",\r\n+      \"sd|<fake-digest-5>\": \"\",\r\n+      \"sd|<fake-digest-6>\": \"\"\r\n     }\r\n```\r\n\r\nThis obviously adds a lot of bloat. A better alternative for this would be for all selective-disclosures to be defined in a top-level array.\r\n\r\n```json\r\n     \"family_name\": \"M\u00f6bius\",\r\n     \"address\": {\r\n       \"street_address\": \"Schulstr. 12\",\r\n       \"locality\": \"Schulpforta\",\r\n     }\r\n     \"sd\": [\r\n       \"<real-digest-1>\",\r\n       \"<real-digest-2>\",\r\n       \"<fake-digest-1>\",\r\n       \"<fake-digest-2>\",\r\n       \"<fake-digest-3>\"\r\n     ]\r\n```",
      "createdAt": "2022-11-10T15:13:11Z",
      "updatedAt": "2022-11-23T12:32:06Z",
      "closedAt": "2022-11-23T12:31:55Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "This has been solved in the recently merged PR #174. We did not, however, pull the sd hashes to the top level, as the structured approach encourages secure implementations (see \"Verification by the Verifier\" and \"Manipulation of Disclosures\" sections in the updated document).",
          "createdAt": "2022-11-23T12:31:55Z",
          "updatedAt": "2022-11-23T12:32:06Z"
        }
      ]
    },
    {
      "number": 171,
      "id": "I_kwDOHTmVzM5WJZaI",
      "title": "Refactor the spec text and the code to the approach agreed in IETF 115:",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/171",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "danielfett"
      ],
      "labels": [],
      "body": "Refactor the spec text and the code to the approach agreed in IETF 115 described here:\r\nhttps://docs.google.com/presentation/d/1Hc3xBNN2RL9usCJQKQetrCRk7nYFw6OSLMZPvs1fh_Q/edit?usp=sharing\r\n\r\n`+ probably add Justin's suggestion to put hashes in an array as opposed to having them as separate top-level items.",
      "createdAt": "2022-11-11T10:57:34Z",
      "updatedAt": "2022-11-23T12:30:02Z",
      "closedAt": "2022-11-23T12:30:02Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "This was done in PR #174 which has been merged.",
          "createdAt": "2022-11-23T12:30:02Z",
          "updatedAt": "2022-11-23T12:30:02Z"
        }
      ]
    },
    {
      "number": 172,
      "id": "I_kwDOHTmVzM5WJZfQ",
      "title": "add Brian as an editor",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/172",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-11-11T10:57:51Z",
      "updatedAt": "2022-11-23T17:38:39Z",
      "closedAt": "2022-11-23T17:38:39Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "PR in #179 ",
          "createdAt": "2022-11-23T13:11:33Z",
          "updatedAt": "2022-11-23T13:11:33Z"
        }
      ]
    },
    {
      "number": 173,
      "id": "I_kwDOHTmVzM5WigGr",
      "title": "Talk about language tags in claims",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/173",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [
        "danielfett"
      ],
      "labels": [],
      "body": "- Add example\r\n- Holder has to release all necessary language tags\r\n",
      "createdAt": "2022-11-16T16:15:35Z",
      "updatedAt": "2023-03-24T14:14:33Z",
      "closedAt": "2023-03-24T14:14:32Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I am not sure we need a separate example for this - if this is part of existing example, might be ok.\r\n\r\nto be clear, this is about showing that SD works in the same manner when [OIDC style language tags approach](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts) is used.",
          "createdAt": "2023-02-22T17:58:17Z",
          "updatedAt": "2023-02-22T17:58:17Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "The OIDC style language tags approach can be used/applied to SD-JWT just as it can to regular JWT. And note that JWT RFC 7519 says nothing about it. There's nothing inherently different about SD-JWT that requires different/additional treatment at the JWT/SD-JWT layer that'd defining the token container format. ",
          "createdAt": "2023-03-24T14:14:32Z",
          "updatedAt": "2023-03-24T14:14:32Z"
        }
      ]
    },
    {
      "number": 175,
      "id": "I_kwDOHTmVzM5XC-Js",
      "title": "Location of \"Challenge of Canonicalization Section\"",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/175",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "bc-pi"
      ],
      "labels": [
        "ready-for-PR"
      ],
      "body": "Suggest we move this section lower, as with the new encoding approach I anticipate less questions regarding canonicalization, while this is a good clarification.\r\n\r\nhttps://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/174/files#r1028969018\r\n",
      "createdAt": "2022-11-22T18:52:06Z",
      "updatedAt": "2023-02-09T19:03:51Z",
      "closedAt": "2023-02-09T19:03:51Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Maybe move to appendix.",
          "createdAt": "2023-01-31T16:40:17Z",
          "updatedAt": "2023-01-31T16:40:17Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I recently had a conversation with a guy (editor of RFC7520 FWIW) who had some comments/observations that would support the idea of moving it into an appendix.\r\n\r\n\"my opinion: the entire discussion about canonicalization only serves to distract.  This document should only ever talk about the source hardening; if you really want/need to talk about c14n, put it in an appendix at the end\" and \"then that entire Section 5.1 ought to just be dropped then, I think\"\r\n\r\n ",
          "createdAt": "2023-02-01T19:43:24Z",
          "updatedAt": "2023-02-01T19:43:24Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "ok, let's move to appendix",
          "createdAt": "2023-02-02T04:04:45Z",
          "updatedAt": "2023-02-02T04:04:45Z"
        }
      ]
    },
    {
      "number": 176,
      "id": "I_kwDOHTmVzM5XC-hE",
      "title": "terminology \"Source String hardening\"",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/176",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Might be clear enough, or might need alternative suggestion.\r\n\r\nhttps://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/174/files#r1028968119",
      "createdAt": "2022-11-22T18:53:20Z",
      "updatedAt": "2023-02-28T17:13:42Z",
      "closedAt": "2023-02-28T17:13:42Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "\"armoring\" is also often used. Let's summon the native speaker to guide us! @bc-pi ",
          "createdAt": "2022-11-28T14:24:30Z",
          "updatedAt": "2022-11-28T14:24:30Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Offhand, I think going back to just \"encoding\" is probably the way to go in this context. ",
          "createdAt": "2022-11-28T18:06:38Z",
          "updatedAt": "2022-11-28T18:06:38Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "On reading it again, \"hardening\" seems okay too. I feel like \"armoring\" is mostly used in a different context so don't like that here. ",
          "createdAt": "2022-12-02T20:07:00Z",
          "updatedAt": "2022-12-02T20:07:00Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "editors agreed to keep it as-is",
          "createdAt": "2023-02-28T17:13:42Z",
          "updatedAt": "2023-02-28T17:13:42Z"
        }
      ]
    },
    {
      "number": 177,
      "id": "I_kwDOHTmVzM5XDEKY",
      "title": "\"structured data\" or \"nested data\"?",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/177",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "+1 to nested data re conversation here: https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/174/files#r1029001951",
      "createdAt": "2022-11-22T19:11:47Z",
      "updatedAt": "2023-02-28T17:17:45Z",
      "closedAt": "2023-02-28T17:17:44Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "editors agreed to keep nested data, as-is",
          "createdAt": "2023-02-28T17:17:44Z",
          "updatedAt": "2023-02-28T17:17:44Z"
        }
      ]
    },
    {
      "number": 178,
      "id": "I_kwDOHTmVzM5XDFIm",
      "title": "editorial",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/178",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "pending-close"
      ],
      "body": "add a text somewhere before \"combined format for presentation\" saying that \"how to send disclosures alongside SD-JWT\" will be described later in the text.\r\nhttps://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/174/files#r1029003793",
      "createdAt": "2022-11-22T19:15:08Z",
      "updatedAt": "2023-03-07T16:52:06Z",
      "closedAt": "2023-03-07T16:52:05Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Outdated. I re-read the introduction and everything read smoothly.",
          "createdAt": "2023-03-07T16:52:05Z",
          "updatedAt": "2023-03-07T16:52:05Z"
        }
      ]
    },
    {
      "number": 180,
      "id": "I_kwDOHTmVzM5XLrgg",
      "title": "separate sd-jwt and Disclosures using `.` and not `~`",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/180",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "separation between sd-jwt and Disclosures should be ., not ~ for consistency and mental model wise. so `<SD-JWT>.<Disclosure 1>~<Disclosure 2>~...~<Disclosure N>`, instead of `<SD-JWT>~<Disclosure 1>~<Disclosure 2>~...~<Disclosure N>`. ",
      "createdAt": "2022-11-24T02:59:06Z",
      "updatedAt": "2022-12-08T09:56:23Z",
      "closedAt": "2022-12-08T09:56:22Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I guess this depends on the mental model :-)\r\n\r\nFor me, the SD-JWT is primarily a normal JWT. When sending it, some things (the Disclosures) are attached to it. There needs to be a separator different from the ones in the JWT itself for distinguishing the JWT from the \"attachment\". So these two would work in that mental model:\r\n`<SD-JWT>~<Disclosure 1>~<Disclosure 2>~...~<Disclosure N>`\r\nor\r\n`<SD-JWT>~<Disclosure 1>.<Disclosure 2>.<...>.<Disclosure N>`\r\n\r\nI assume that your and the devs' mental model is that the whole thing that is being sent is a special form of JWT that consists of four instead of three parts:\r\n`<Header>.<Payload>.<Signature>.<Attachment>` where the Attachment is the `~`-separated Disclosures.\r\n\r\nThat would mean, however, that the whole Combined Format is a special kind of JWT with four parts. I don't see it that way. The Combined Format is just a means of sending a JWT and some extra data. ",
          "createdAt": "2022-11-24T09:09:45Z",
          "updatedAt": "2022-11-24T09:09:45Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Also, isn't it much easier to separate the document by `~` and then to process the individual parts, instead of splitting by `.` and then re-assembling the JWT?",
          "createdAt": "2022-11-24T09:52:55Z",
          "updatedAt": "2022-11-24T09:52:55Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I think the concern was that some libraries will take received string and process everything after the last \u2018.\u2019 as a signature, which in SD-JWT case includes disclosures.\n________________________________\nFrom: Daniel Fett ***@***.***>\nSent: Thursday, November 24, 2022 1:53:05 AM\nTo: oauth-wg/oauth-selective-disclosure-jwt ***@***.***>\nCc: Kristina Yasuda ***@***.***>; Author ***@***.***>\nSubject: Re: [oauth-wg/oauth-selective-disclosure-jwt] separate sd-jwt and Disclosures using `.` and not `~` (Issue #180)\n\n\nAlso, isn't it much easier to separate the document by ~ and then to process the individual parts, instead of splitting by . and then re-assembling the JWT?\n\n\u2014\nReply to this email directly, view it on GitHub<https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Foauth-wg%2Foauth-selective-disclosure-jwt%2Fissues%2F180%23issuecomment-1326209633&data=05%7C01%7Ckristina.yasuda%40microsoft.com%7C350ba78360eb426828d808dace01afac%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C638048803898080811%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&sdata=lwGYrWXo8sV%2FnLlxtme7cCN37MGG5MpIptAYirOQnnM%3D&reserved=0>, or unsubscribe<https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAMTNZUYUHYARAKQOZXW3CALWJ43IDANCNFSM6AAAAAASJUPQUY&data=05%7C01%7Ckristina.yasuda%40microsoft.com%7C350ba78360eb426828d808dace01afac%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C638048803898080811%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&sdata=wefrc90v3DXGw0qftPZSFOsxgftEddNbQcan5CTKoCw%3D&reserved=0>.\nYou are receiving this because you authored the thread.Message ID: ***@***.***>\n",
          "createdAt": "2022-11-25T03:51:20Z",
          "updatedAt": "2022-11-25T03:51:20Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I don't understand that. The whole string will fail JWT validation in any case, as it is more than a JWT. Devs need to split it before processing.",
          "createdAt": "2022-11-25T07:36:51Z",
          "updatedAt": "2022-11-25T07:36:51Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "You assume that the JWT Is signed, a JWT May be encrypted and the Number of values separated by . would be 5\r\n\r\nThe libraries used to parse a jwt checks the jwt headers to know if It is signed or encrypted and, where needed, also the typ.\r\n\r\nUsing . would be a pain for the parser libraries (and the implementers). \r\nUsing a typ like `sd+jwt` or `sd+jwt-disclosure` (for an envelope JWT) would be recommended to easy the implementers life.\r\nUsing an envelope jwt (with holder binding claims in It) would be better because this solution represent a self consistent object that could be also encrypted (bringing uniqueness in its presentation and being hard to be tracked on the wire. Its encrypted format would change during each presentation due to claims nonce/aud/iat/ext).\r\n\r\nWe have an issue on the envelope format (cryptable) and a PR for the typ header claim.\r\n\r\nhttps://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/118\r\n\r\nInstead of dealing with separation chars I'm in favor of an envelope schema encoded in JWT, signed or encrypted (nested)\r\n\r\n",
          "createdAt": "2022-11-27T00:19:57Z",
          "updatedAt": "2022-11-28T09:13:21Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "This issue is also related to this thread\r\n\r\nhttps://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/114#issuecomment-1193920626",
          "createdAt": "2022-11-27T00:31:00Z",
          "updatedAt": "2022-11-27T00:31:00Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "IMHO `~` is a more appropriate model.",
          "createdAt": "2022-11-28T13:17:52Z",
          "updatedAt": "2022-11-28T13:17:52Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Let's discuss in our call later.\r\n\r\nSome initial thoughts:\r\n\r\n- If we use the `~` format, Giuseppe makes a good point with the number of dots.\r\n- An envelope increases the size of the data that needs to be transferred.\r\n- An envelope also means we need to think about `alg=none` again in case no signature/encryption is needed.\r\n- It adds two new JWTs that we need to describe and distinguish from existing ones (one JWT at issuance time, one at presentation time)\r\n- How does the envelope and a W3C VP work together?",
          "createdAt": "2022-11-28T13:29:01Z",
          "updatedAt": "2022-11-28T13:29:01Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "`Let's discuss in our call later.` +1 ",
          "createdAt": "2022-11-28T14:35:54Z",
          "updatedAt": "2022-11-28T14:35:54Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": ">     * An envelope increases the size of the data that needs to be transferred.\r\n\r\nOnly if you don't have the optional Holder binding attestation, otherwise it would be quite similar in size.\r\n \r\n>     * An envelope also means we need to think about `alg=none` again in case no signature/encryption is needed.\r\n\r\nthe Holder binding should consider to not use alg=none, otherwise it would be as without the holder binding attestation.\r\n \r\n>     * It adds two new JWTs that we need to describe and distinguish from existing ones (one JWT at issuance time, one at presentation time)\r\n\r\nyes, one is the envelope of another, and the first should have a `typ` claim in the header attesting its scope (combined disclosure)\r\n\r\n>     * How does the envelope and a W3C VP work together?\r\n\r\ngood question, SD-JWT-Combined-Disclosure  and W3C VP are self consistent formats, they should be agnostic and avulse each other. We may use SD-JWT even outside W3C vc-data-model. Anyway the SD-JWT disclosure envelope would be submitted in the W3C VP as it is.\r\n",
          "createdAt": "2022-11-28T14:54:07Z",
          "updatedAt": "2022-11-28T14:54:07Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "> > ```\r\n> > * An envelope increases the size of the data that needs to be transferred.\r\n> > ```\r\n> \r\n> Only if you don't have the optional Holder binding attestation, otherwise it would be quite similar in size.\r\n\r\nThere is a size increase due to the added layer of Base64. \r\n\r\nThis is an SD-JWT with Holder Binding according to the current draft in the repo:\r\n\r\n```\r\neyJhbGciOiAiUlMyNTYiLCAia2lkIjogImNBRUlVcUowY21MekQxa3pHemhlaUJhZzBZUkF6VmRsZnhOMjgwTmdIYUEifQ.eyJfc2QiOiBbIk5ZQ29TUktFWXdYZHBlNXlkdUpYQ3h4aHluRVU4ei1iNFR5TmlhcDc3VVkiLCAiU1k4bjJCYmtYOWxyWTNleEhsU3dQUkZYb0QwOUdGOGE5Q1BPLUc4ajIwOCIsICJUUHNHTlBZQTQ2d21CeGZ2MnpuT0poZmRvTjVZMUdrZXpicGFHWkNUMWFjIiwgIlprU0p4eGVHbHVJZFlCYjdDcWtaYkpWbTB3MlY1VXJSZU5UekFRQ1lCanciLCAibDlxSUo5SlRRd0xHN09MRUlDVEZCVnhtQXJ3OFBqeTY1ZEQ2bXRRVkc1YyIsICJvMVNBc0ozM1lNaW9POXBYNVZlQU0xbHh1SEY2aFpXMmtHZGtLS0JuVmxvIiwgInFxdmNxbmN6QU1nWXg3RXlrSTZ3d3RzcHl2eXZLNzkwZ2U3TUJiUS1OdXMiXSwgImlzcyI6ICJodHRwczovL2V4YW1wbGUuY29tL2lzc3VlciIsICJpYXQiOiAxNTE2MjM5MDIyLCAiZXhwIjogMTUxNjI0NzAyMiwgInNkX2RpZ2VzdF9kZXJpdmF0aW9uX2FsZyI6ICJzaGEtMjU2IiwgImNuZiI6IHsiandrIjogeyJrdHkiOiAiUlNBIiwgIm4iOiAicG00Yk9IQmctb1loQXlQV3pSNTZBV1gzclVJWHAxMV9JQ0RrR2dTNlczWldMdHMtaHp3STN4NjU2NTlrZzRoVm85ZGJHb0NKRTNaR0ZfZWFldEUzMFVoQlVFZ3BHd3JEclFpSjl6cXBybWNGZnIzcXZ2a0dqdHRoOFpnbDFlTTJiSmNPd0U3UENCSFdUS1dZczE1MlI3ZzZKZzJPVnBoLWE4cnEtcTc5TWhLRzVRb1dfbVR6MTBRVF82SDRjN1BqV0cxZmpoOGhwV05uYlBfcHY2ZDF6U3daZmM1Zmw2eVZSTDBEVjBWM2xHSEtlMldxZl9lTkdqQnJCTFZrbERUazgtc3RYX01XTGNSLUVHbVhBT3YwVUJXaXRTX2RYSktKdS12WEp5dzE0bkhTR3V4VElLMmh4MXB0dE1mdDlDc3ZxaW1YS2VEVFUxNHFRTDFlRTdpaGN3IiwgImUiOiAiQVFBQiJ9fX0.rV7UrCdR64tA-G0_rjqYaKYukzIJi1RPgvX4eGSk5HHYWPl3-j8LEUnePSX-OlQXe5RgsOqPo9DCj7-CLvKKxam-PbEQZurYX4qEzFyCJUOTMbOTQSLdsSe9tf1pD_yIrJhIscjXiq_mtJww_abdT8fIiS4h8kir2ClZifjNnLkKzqceVgrCipjbt76iZ6m_DGO2jFhU8Zzrat3UZALacw4fRD0l5MGIGHdQcipouhhvVBnWyl6lH8gtcOFMl4YSSoWP9ytFLoahCSRrF5mCo1tSFg3I70v4mk2U59GfcU94GaEB0q6uF__fbEmOClUPX9yOrYryeqjJR0bBRUK_NA~WyIweEd6bjNNaXFzY3RaSV9PcERsQWJRIiwgImFkZHJlc3MiLCB7InN0cmVldF9hZGRyZXNzIjogIjEyMyBNYWluIFN0IiwgImxvY2FsaXR5IjogIkFueXRvd24iLCAicmVnaW9uIjogIkFueXN0YXRlIiwgImNvdW50cnkiOiAiVVMifV0~WyJxUVdtakpsMXMxUjRscWhFTkxScnJ3IiwgImZhbWlseV9uYW1lIiwgIkRvZSJd~WyIzanFjYjY3ejl3a3MwOHp3aUs3RXlRIiwgImdpdmVuX25hbWUiLCAiSm9obiJd~eyJhbGciOiAiUlMyNTYiLCAia2lkIjogIkxkeVRYd0F5ZnJpcjRfVjZORzFSYzEwVThKZExZVHJFQktKaF9oNWlfclUifQ.eyJub25jZSI6ICJYWk9VY28xdV9nRVBrbnhTNzhzV1dnIiwgImF1ZCI6ICJodHRwczovL2V4YW1wbGUuY29tL3ZlcmlmaWVyIiwgImlhdCI6IDE2NjkxOTM3MDR9.Y5xmEip11zOmZR1xvgdbi9IanCNQ4ODJDNW8JKpNvBNOCP2j_DbsCMoYAv6RrOYSzEPZplJ8MlfiZzC9ldcvByiAjWeJbMStZ1vf_K-AJnyNLwnA_v0zVwA0d8rkrIqSQomS5-GqN3zJtUpl2BslLa799UpdCwg7Rfow2wFSfL6S2J9j2mb5Q5UVxTcU27OXcLUn0aN8slIr5AmYd-EcoAqWe8feV6plkHnYac6M9LclgInE5IzwFJTezNmERocADNB7ZGGoy9FzdNdepjnzjFVjazYT0gtR0XgOg5epZoTeOrJwdYT0d5VFwO4ep9_Q591bxnNHfPbr5AhdYALCGg\r\n```\r\nIt has ~2440 chars.\r\n\r\nWith an envelope, the envelope JWT is as follows (quickly put together in jwt.io):\r\n\r\n```\r\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzZC1qd3QiOiJleUpoYkdjaU9pQWlVbE15TlRZaUxDQWlhMmxrSWpvZ0ltTkJSVWxWY1Vvd1kyMU1la1F4YTNwSGVtaGxhVUpoWnpCWlVrRjZWbVJzWm5oT01qZ3dUbWRJWVVFaWZRLmV5SmZjMlFpT2lCYklrNVpRMjlUVWt0RldYZFlaSEJsTlhsa2RVcFlRM2g0YUhsdVJWVTRlaTFpTkZSNVRtbGhjRGMzVlZraUxDQWlVMWs0YmpKQ1ltdFlPV3h5V1RObGVFaHNVM2RRVWtaWWIwUXdPVWRHT0dFNVExQlBMVWM0YWpJd09DSXNJQ0pVVUhOSFRsQlpRVFEyZDIxQ2VHWjJNbnB1VDBwb1ptUnZUalZaTVVkclpYcGljR0ZIV2tOVU1XRmpJaXdnSWxwclUwcDRlR1ZIYkhWSlpGbENZamREY1d0YVlrcFdiVEIzTWxZMVZYSlNaVTVVZWtGUlExbENhbmNpTENBaWJEbHhTVW81U2xSUmQweEhOMDlNUlVsRFZFWkNWbmh0UVhKM09GQnFlVFkxWkVRMmJYUlJWa2MxWXlJc0lDSnZNVk5CYzBvek0xbE5hVzlQT1hCWU5WWmxRVTB4YkhoMVNFWTJhRnBYTW10SFpHdExTMEp1Vm14dklpd2dJbkZ4ZG1OeGJtTjZRVTFuV1hnM1JYbHJTVFozZDNSemNIbDJlWFpMTnprd1oyVTNUVUppVVMxT2RYTWlYU3dnSW1semN5STZJQ0pvZEhSd2N6b3ZMMlY0WVcxd2JHVXVZMjl0TDJsemMzVmxjaUlzSUNKcFlYUWlPaUF4TlRFMk1qTTVNREl5TENBaVpYaHdJam9nTVRVeE5qSTBOekF5TWl3Z0luTmtYMlJwWjJWemRGOWtaWEpwZG1GMGFXOXVYMkZzWnlJNklDSnphR0V0TWpVMklpd2dJbU51WmlJNklIc2lhbmRySWpvZ2V5SnJkSGtpT2lBaVVsTkJJaXdnSW00aU9pQWljRzAwWWs5SVFtY3RiMWxvUVhsUVYzcFNOVFpCVjFnemNsVkpXSEF4TVY5SlEwUnJSMmRUTmxjeldsZE1kSE10YUhwM1NUTjROalUyTlRsclp6Um9WbTg1WkdKSGIwTktSVE5hUjBaZlpXRmxkRVV6TUZWb1FsVkZaM0JIZDNKRWNsRnBTamw2Y1hCeWJXTkdabkl6Y1haMmEwZHFkSFJvT0ZwbmJERmxUVEppU21OUGQwVTNVRU5DU0ZkVVMxZFpjekUxTWxJM1p6WktaekpQVm5Cb0xXRTRjbkV0Y1RjNVRXaExSelZSYjFkZmJWUjZNVEJSVkY4MlNEUmpOMUJxVjBjeFptcG9PR2h3VjA1dVlsQmZjSFkyWkRGNlUzZGFabU0xWm13MmVWWlNUREJFVmpCV00yeEhTRXRsTWxkeFpsOWxUa2RxUW5KQ1RGWnJiRVJVYXpndGMzUllYMDFYVEdOU0xVVkhiVmhCVDNZd1ZVSlhhWFJUWDJSWVNrdEtkUzEyV0VwNWR6RTBia2hUUjNWNFZFbExNbWg0TVhCMGRFMW1kRGxEYzNaeGFXMVlTMlZFVkZVeE5IRlJUREZsUlRkcGFHTjNJaXdnSW1VaU9pQWlRVkZCUWlKOWZYMC5yVjdVckNkUjY0dEEtRzBfcmpxWWFLWXVreklKaTFSUGd2WDRlR1NrNUhIWVdQbDMtajhMRVVuZVBTWC1PbFFYZTVSZ3NPcVBvOURDajctQ0x2S0t4YW0tUGJFUVp1cllYNHFFekZ5Q0pVT1RNYk9UUVNMZHNTZTl0ZjFwRF95SXJKaElzY2pYaXFfbXRKd3dfYWJkVDhmSWlTNGg4a2lyMkNsWmlmak5uTGtLenFjZVZnckNpcGpidDc2aVo2bV9ER08yakZoVThaenJhdDNVWkFMYWN3NGZSRDBsNU1HSUdIZFFjaXBvdWhodlZCbld5bDZsSDhndGNPRk1sNFlTU29XUDl5dEZMb2FoQ1NSckY1bUNvMXRTRmczSTcwdjRtazJVNTlHZmNVOTRHYUVCMHE2dUZfX2ZiRW1PQ2xVUFg5eU9yWXJ5ZXFqSlIwYkJSVUtfTkEiLCJkaXNjbG9zdXJlcyI6WyJXeUl3ZUVkNmJqTk5hWEZ6WTNSYVNWOVBjRVJzUVdKUklpd2dJbUZrWkhKbGMzTWlMQ0I3SW5OMGNtVmxkRjloWkdSeVpYTnpJam9nSWpFeU15Qk5ZV2x1SUZOMElpd2dJbXh2WTJGc2FYUjVJam9nSWtGdWVYUnZkMjRpTENBaWNtVm5hVzl1SWpvZ0lrRnVlWE4wWVhSbElpd2dJbU52ZFc1MGNua2lPaUFpVlZNaWZWMCIsIld5SnhVVmR0YWtwc01YTXhValJzY1doRlRreFNjbkozSWl3Z0ltWmhiV2xzZVY5dVlXMWxJaXdnSWtSdlpTSmQiLCJXeUl6YW5GallqWTNlamwzYTNNd09IcDNhVXMzUlhsUklpd2dJbWRwZG1WdVgyNWhiV1VpTENBaVNtOW9iaUpkIl0sIm5vbmNlIjoiYWJjZCIsImF1ZCI6Imh0dHBzOi8vZXhhbXBsZS5jb20ifQ.0T47qH5qwRsWiAVN1JQVdhWAFfD4BIgDCSoJmapd92M\r\n```\r\nThis has ~2700 chars.\r\n\r\n> \r\n> > ```\r\n> > * An envelope also means we need to think about `alg=none` again in case no signature/encryption is needed.\r\n> > ```\r\n> \r\n> the Holder binding should consider to not use alg=none, otherwise it would be as without the holder binding attestation.\r\n\r\nHow would you do HB with an envelope but without alg=none? Just a JSON document?\r\n\r\n> \r\n> > ```\r\n> > * It adds two new JWTs that we need to describe and distinguish from existing ones (one JWT at issuance time, one at presentation time)\r\n> > ```\r\n> \r\n> yes, one is the envelope of another, and the first should have a `typ` claim in the header attesting its scope (combined disclosure)\r\n\r\nIgnoring the inner SD-JWT, two envelopes are needed: One during issuance (no Holder Binding, but maybe encrypted?), one during presentation (with optional HB).\r\n\r\n",
          "createdAt": "2022-11-28T15:14:22Z",
          "updatedAt": "2022-11-28T15:14:22Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "\r\n> There is a size increase due to the added layer of Base64.\r\n\r\nthank you for this empiric analysis, we have roughly the 10% of additional weight using an envelope JWT.\r\n\r\nThe benefit is that an envelope JWT can be encrypted and be tracking resistant on the wire (in short/raw RF links), because the sequence of the bytes would always be different (thanks to variable claims like iat, exp, nonce ...). The disclosure object in the raw concatenation we already have are transmitted in plain b64 encoded text. The potential, and optional, encryption of the envelope JWT (sd-disclosure+jwt or whatever typ) wouldn't be a useless and exceeding security device I believe, it would concretely protect the confidentiality at the data format level.\r\n\r\n> How would you do HB with an envelope but without alg=none? Just a JSON document?\r\n\r\nNot sure to get this, I'm sorry. I mean that I wouldn't support alg=none for HB.\r\n\r\n> Ignoring the inner SD-JWT, two envelopes are needed: One during issuance (no Holder Binding, but maybe encrypted?), one during presentation (with optional HB).\r\n\r\nWell, probably it would be a necessary work of normalization between the two flows and I agree. For the issuance the holder binding would be in the inned SD-JWT (cnf, for example). But probably I'm missing something, my excuses again.\r\n\r\n",
          "createdAt": "2022-11-28T23:52:57Z",
          "updatedAt": "2022-11-28T23:52:57Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "> > There is a size increase due to the added layer of Base64.\r\n> \r\n> thank you for this empiric analysis, we have roughly the 10% of additional weight using an envelope JWT.\r\n\r\nThe size increase should be (in the generalized case) around 33%.\r\n\r\n\r\n> The benefit is that an envelope JWT can be encrypted and be tracking resistant on the wire (in short/raw RF links), because the sequence of the bytes would always be different (thanks to variable claims like iat, exp, nonce ...). The disclosure object in the raw concatenation we already have are transmitted in plain b64 encoded text. The potential, and optional, encryption of the envelope JWT (sd-disclosure+jwt or whatever typ) wouldn't be a useless and exceeding security device I believe, it would concretely protect the confidentiality at the data format level.\r\n\r\nI do see the benefit of the encryption, but I think that this should be handled by a lower layer, e.g., BLE encryption. In many cases, there is no benefit from the encryption or signing. In fact, if BLE is used, the 33% increase in size is certainly not desirable.\r\n\r\n> > How would you do HB with an envelope but without alg=none? Just a JSON document?\r\n> \r\n> Not sure to get this, I'm sorry. I mean that I wouldn't support alg=none for HB.\r\n\r\nCan you please provide a full example of what you imaging an SD-JWT issuance and presentation with and without HB look like for the benefit of the discussion? I'd like to avoid that we're talking about different things here.\r\n\r\n> > Ignoring the inner SD-JWT, two envelopes are needed: One during issuance (no Holder Binding, but maybe encrypted?), one during presentation (with optional HB).\r\n> \r\n> Well, probably it would be a necessary work of normalization between the two flows and I agree. For the issuance the holder binding would be in the inned SD-JWT (cnf, for example). But probably I'm missing something, my excuses again.\r\n\r\nAgain, a full example would be helpful to continue this discussion.",
          "createdAt": "2022-11-29T08:04:55Z",
          "updatedAt": "2022-11-29T08:04:55Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "> I do see the benefit of the encryption, but I think that this should be handled by a lower layer, e.g., BLE encryption. In many cases, there is no benefit from the encryption or signing. In fact, if BLE is used, the 33% increase in size is certainly not desirable.\r\n\r\nthis implies that the security of the data format is dependant of the transport protocol. I'd prefer to keep it self-consistent also in this aspect\r\n\r\n> Can you please provide a full example of what you imaging an SD-JWT issuance and presentation with and without HB look like for the benefit of the discussion? I'd like to avoid that we're talking about different things here.\r\n\r\ntrue, I should have done that sooner!\r\n\r\nHere a Combined issuance:\r\n````\r\n{\r\n  \"alg\": \"RS256\", \r\n  \"kid\": \"TGBKFdOKy5t-1m2Km4X22n7DEj553yjGJVdprbOjR6c\",\r\n  \"typ\": \"sd+jwt-combined-issuance\"\r\n}\r\n.\r\n{\r\n  \"iss\": \"https://example.com/issuer\",\r\n  \"sub\": \"subject-id\",\r\n  \"iat\": \"unix-timestamp\",\r\n  \"aud\": \"holder-id\",\r\n  \"nonce\": \"that-unique-and-random-sequence\",\r\n  \"sd_jwt\": $sd-jwt,\r\n  \"sd_disclosures\": {\r\n    \"30jdaA9OfGpa3Tj5XJbtWiVrl4i66my26mOnbIuwY0w\": [\"Lz-3RoXunbH2oLZXNRbqLw\", \"number\", \"154554\"],\r\n    ... others ...\r\n  }\r\n}\r\n````\r\n\r\nWhere $sd-jwt is\r\n````\r\n{\r\n  \"alg\": \"RS256\", \r\n  \"kid\": \"TGBKFdOKy5t-1m2Km4X22n7DEj553yjGJVdprbOjR6c\",\r\n  \"typ\": \"sd+jwt\"\r\n}\r\n.\r\n{\r\n  \"_sd\": [\r\n    \"UxYjx8bYA86RGAHOjRjntztJ16doIL9tAFREFeQCKz0\"\r\n  ],\r\n  \"verified_claims\": {\r\n    \"verification\": {\r\n      \"_sd\": [\r\n        \"OKbpoO_RGyeF1FP_X4RI67ytOW5OO5pj8iAEHPPmGzQ\"\r\n      ],\r\n      \"trust_framework\": \"eidas\",\r\n      \"evidence\": [\r\n        {\r\n          \"_sd\": [\r\n            \"DwtOtYlPczP3j0CAGmwK_sG1PS15BePEWennozJtnc4\",\r\n            \"N5X-cmduA_hEiG-2-TFHWlYFPmuPAhgMSDAd5-_0ANw\"\r\n          ],\r\n          \"document\": {\r\n            \"_sd\": [\r\n              \"30jdaA9OfGpa3Tj5XJbtWiVrl4i66my26mOnbIuwY0w\",\r\n              \"Fsu1XL9NW1tHVpytr44jFbXwdhX1avNlRArOzRRj6FQ\",\r\n              \"PPzuOzIrbneVJ49-K3zgqOPDJvFgbipGcU1Psg2BqPY\",\r\n              \"wnXuBaY3ZVHy7qb8zhyVqGjs5ZywuwfDxJ3pIc1vHQo\"\r\n            ],\r\n            \"issuer\": {\r\n              \"_sd\": [\r\n                \"S-K8XHQ5-TipWeWHZNcKLe4gyqoTW8QPl6XXdmnBPiI\",\r\n                \"VBsVXxKHbC7-6dVZcdFg9kU7yCNsPWob4bDcVbZB4-w\"\r\n              ]\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    },\r\n    \"claims\": {\r\n      \"_sd\": [\r\n        \"9C3BrCMDx2zsqn9IhN7siBJXSyZvvJoDYzGsyHhhnZU\",\r\n        \"QVtNjGpLtd7NpJgfjBTMhKwwef4EE2VuEE-jBKQJueA\",\r\n        \"zXwogmNL4aJrhL7OikfJCpDYpPNSA1SyFciDIcWP14k\"\r\n      ]\r\n    }\r\n  },\r\n  \"iss\": \"https://example.com/issuer\",\r\n  \"iat\": 1516239022,\r\n  \"exp\": 1516247022,\r\n  \"sd_digest_derivation_alg\": \"sha-256\"\r\n}\r\n````\r\n\r\nFor combined presentation the same formula of the issuance but with:\r\n\r\n- iss: different, that's the holder\r\n- sub: a pseudonymization issued by the holder is possibile here (additional feature)\r\n- aud: RP entity id \r\n- nonce: another-one\r\n- sd_jwt: as it is\r\n- sd_disclosure: what the end-users decides to disclose\r\n\r\nregarding the header of the presentation, the `typ` would be `sd+jwt-disclosure`.\r\n\r\nMay we add the JWT envelopes keeping at the same time the raw-combined approach with string concatenation in the draft for embedded implementations where size matters? The `typ` and the `~` help also in this, to understand which kind of format we're dealing with\r\n\r\n",
          "createdAt": "2022-11-29T08:59:29Z",
          "updatedAt": "2022-11-29T08:59:29Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Thank you! In your example above, the disclosure is plain JSON, which will require canonicalization for reproducible hashes. Is that intentional?",
          "createdAt": "2022-11-29T09:01:34Z",
          "updatedAt": "2022-11-29T09:01:34Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "> Thank you! In your example above, the disclosure is plain JSON, which will require canonicalization for reproducible hashes. Is that intentional?\r\n\r\ngood point. I think that we can adopt base64 encodings instead of plain json array if you agree.\r\n\r\nan important aspect of the proposed new structure is the mapping between the digest and the disclosure (which would be encoded in base64 following our last comments). This better explains the mapping between hashed _sd and related disclosure\r\n\r\nalso the disclosure would be resistant to reply attacks by default",
          "createdAt": "2022-11-29T11:42:55Z",
          "updatedAt": "2022-11-29T11:44:40Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "This mapping is a bit dangerous - it allows a verifier to extract the claim contents without verifying the hash. This means that a malicious holder can modify the disclosures and a verifier might not notice it. In the current draft, this mapping is omitted on purpose - it forces verifiers to hash before they can use the contents.",
          "createdAt": "2022-11-29T12:27:22Z",
          "updatedAt": "2022-11-29T12:27:22Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "> This mapping is a bit dangerous - it allows a verifier to extract the claim contents without verifying the hash. This means that a malicious holder can modify the disclosures and a verifier might not notice it. In the current draft, this mapping is omitted on purpose - it forces verifiers to hash before they can use the contents.\r\n\r\nwell, in the real world nothing prevents that an implementation simply decodes a JWT without verify its signature and so on, but I got the point and I agree with your strategy. So the mapping can be abandoned and a json array would be applied.",
          "createdAt": "2022-11-29T13:40:03Z",
          "updatedAt": "2022-11-29T13:40:03Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I thought about this a little more and I'm still convinced we're entering a whole new protocol layer with the envelope.\r\n\r\nWith the current proposal, we have:\r\n\r\n- Two byte-level interoperable string formats as output of Issuer and Holder and input to Holder and Verifier.\r\n- These strings can be packed into other objects as necessary.\r\n\r\nWith the envelope we have:\r\n\r\n- Another JWT that we need to explain and distinguish from the inner SD-JWT.\r\n- Fuzzy boundaries between the contents: E.g., we may have two `iat` claims.\r\n- A size increase due to double base64 encoding.\r\n- This may be my main concern: we default to a JWT for presentation, so if we want to skip holder binding, it's either:\r\n  - a deviation from the default by using a base64 encoded JSON, or\r\n  - a JWT with alg=none.\r\n\r\nThe only real advantage that I see for the envelope is the encryption.\r\n\r\nWhat about this?\r\n\r\n- Issuance combined format remains as-is, i.e., `<SD-JWT>~<Disclosure 1>~<Disclosure 2>~...~<Disclosure N>` (`<SD-JWT>~<Disclosure 1>.<Disclosure 2>.<...>.<Disclosure N>` would be fine for me as well)\r\n- Presentation combined format remains as-is, but\r\n- we highlight that the implementers that want to do holder binding using an envelope JWT can do so, and\r\n- implementers that need encryption should use an outer JWT.\r\n\r\nWe will define a claim, e.g., `_sd_jwt_presentation` that contains the presentation combined format in the envelope JWT.  ",
          "createdAt": "2022-12-01T12:47:34Z",
          "updatedAt": "2022-12-01T12:47:34Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "> we highlight that the implementers that want to do holder binding using an envelope JWT can do so\r\n\r\nOk\r\n\r\n> implementers that need encryption should use an outer JWT.\r\n\r\nOk\r\n\r\n> We will define a claim, e.g., _sd_jwt_presentation that contains the presentation combined format in the envelope JWT.\r\n\r\nFair enough!",
          "createdAt": "2022-12-06T06:37:54Z",
          "updatedAt": "2022-12-06T06:37:54Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I tried to capture the results of this discussion in a PR. Please review! \r\n\r\nhttps://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/184",
          "createdAt": "2022-12-06T08:44:29Z",
          "updatedAt": "2022-12-06T08:44:29Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "This has been addressed with PR #184. We agreed that there is no need for further discussion on the initial suggestion (`.` vs. `~`). I'll therefore close this issue.",
          "createdAt": "2022-12-08T09:56:22Z",
          "updatedAt": "2022-12-08T09:56:22Z"
        }
      ]
    },
    {
      "number": 183,
      "id": "I_kwDOHTmVzM5X0cOL",
      "title": "truncated hashes",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/183",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "bc-pi"
      ],
      "labels": [],
      "body": "> Do we need to say anything about truncated hashes here? I think probably so. The [registry](https://www.iana.org/assignments/named-information/named-information.xhtml) has several including sha-256-128, which is probably okay security-wise and even useful as a space saving device. But it also has sha-256-32, which is probably never okay in this context. And a few in between those two that I'm not sure about.\r\n\r\nfrom this PR https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/181#pullrequestreview-1195712714",
      "createdAt": "2022-12-02T19:47:49Z",
      "updatedAt": "2023-02-08T01:38:15Z",
      "closedAt": "2023-02-08T01:38:15Z",
      "comments": []
    },
    {
      "number": 185,
      "id": "I_kwDOHTmVzM5YNXmj",
      "title": "more context/background WRT JWT & OAuth ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/185",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "bc-pi"
      ],
      "labels": [],
      "body": "In response to comments/questions from the WG co-chair (thread: https://mailarchive.ietf.org/arch/msg/oauth/1FBNpziHxR0Y8qHWIY0XYnZ2Q9U/) and the anticipation of maybe seeing similarish lines of questions: Try and add a little more context/background about the indented applicability of SD-JWT and its relation to JWT and OAuth. But without going too far into the weeds and keeping it appropriate for readers coming in with a variety of prior knowledge and preconceptions or lack thereof. \r\n   \r\n",
      "createdAt": "2022-12-06T18:52:30Z",
      "updatedAt": "2023-01-12T13:07:03Z",
      "closedAt": "2023-01-12T13:07:03Z",
      "comments": []
    },
    {
      "number": 188,
      "id": "I_kwDOHTmVzM5YUg5J",
      "title": "Use EC crypto to generate shorter examples",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/188",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [
        "danielfett"
      ],
      "labels": [],
      "body": "Per @bc-pi's comment",
      "createdAt": "2022-12-07T12:13:39Z",
      "updatedAt": "2022-12-15T17:15:06Z",
      "closedAt": "2022-12-15T17:15:05Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "See PR #192 ",
          "createdAt": "2022-12-08T10:38:10Z",
          "updatedAt": "2022-12-08T10:38:10Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR merged",
          "createdAt": "2022-12-15T17:15:05Z",
          "updatedAt": "2022-12-15T17:15:05Z"
        }
      ]
    },
    {
      "number": 189,
      "id": "I_kwDOHTmVzM5YUjCG",
      "title": "salt is too short",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/189",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "bc-pi"
      ],
      "labels": [],
      "body": "in https://drafts.oauth.net/oauth-selective-disclosure-jwt/draft-ietf-oauth-selective-disclosure-jwt.html#name-creating-disclosures ",
      "createdAt": "2022-12-07T12:17:29Z",
      "updatedAt": "2022-12-07T18:51:45Z",
      "closedAt": "2022-12-07T18:51:45Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/commit/88cd058e2bb5813e2d4a2979601656bde08e7900",
          "createdAt": "2022-12-07T18:51:45Z",
          "updatedAt": "2022-12-07T18:51:45Z"
        }
      ]
    },
    {
      "number": 194,
      "id": "I_kwDOHTmVzM5aHfhr",
      "title": "Support for SD in arrays",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/194",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [
        "danielfett"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "We currently do not support selective disclosure for elements in an array (we do support it for keys within objects within arrays, but not for arbitrary array elements).\r\n\r\nExample:\r\n\r\nThe key `foo` in `{\"foo\": [23, \"bar\", false]}` can be SD, but we can't apply SD to the array elements, i.e., we cannot disclose `23` without disclosing `\"bar\"`. \r\n\r\nProposal:\r\n\r\nFor object keys, we use the new key `_sd` to collect the disclosure hashes. For arrays, we would need to mark the array as selectively disclosable, e.g., by using a special first element in the array like this:\r\n\r\n`{\"foo\": [\"_sd\", \"7pHe1uQ5uSClgAxXdG0E6dKnBgXcxEO1zvoQO9E5Lr4\", \"9-VdSnvRTZNDo-4Bxcp3X-V9VtLOCRUkR6oLWZQl81I\",\r\n      \"nTzPZ3Q68z1Ko_9ao9LK0mSYXY5gY6UG6KEkQ_BdqU0\"]}`\r\n\r\nThe three hashes correspond to the three elements in the array. The verifier can resolve the disclosed elements into their original values and ignore/replace the other values. Order is preserved. This works for arbitrary element types.\r\n\r\nThis would not allow to mix SD and non-SD elements in an array, but it seems unlikely that that would be a problem. WDYT @bc-pi @Sakurann?\r\n   ",
      "createdAt": "2022-12-27T15:36:00Z",
      "updatedAt": "2023-06-14T16:57:44Z",
      "closedAt": "2023-06-14T16:57:43Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "IMHO the need to allow for selective disclosure of individual elements in an array doesn't warrant the additional complexity. Which, by itself isn't particularly complicated. But it is different than the general model we've got now that covers a name and value (of any type) in the same way at any level. The model is consistent and conceptually simple. I might go so far as to say it's elegant. Is there a real concrete requirement or use case for this that is likely to be commonly occurring? And couldn't be achieved modeling the data a little differently, when/if necessary. ",
          "createdAt": "2022-12-27T18:40:03Z",
          "updatedAt": "2023-02-13T16:50:59Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "There's a concrete use case in the eKYC syntax where the `evidence` element may contain multiple descriptions of documents etc., not all of which are necessary to disclose for all use cases. With the current syntax, either all documents need to be revealed or at least the structure of undisclosed documents is visible to a verifier. This is not ideal. \r\n\r\n@tlodderstedt also had another use case where, for example, multiple types of holder binding are encoded into the SD-JWT and only one needs to be disclosed for using the credential (see https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/193/files#diff-573098781f9a66e1e4eb42edf9799c0ea4dc69fed1db6b72805aec27563eafe7). ",
          "createdAt": "2022-12-28T10:09:57Z",
          "updatedAt": "2022-12-28T10:09:57Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I must admit that I don't find those cases terribly compelling. But point taken nonetheless. \r\n\r\n> @tlodderstedt also had another use case where, for example, multiple types of holder binding are encoded into the SD-JWT and only one needs to be disclosed for using the credential (see https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/193/files#diff-573098781f9a66e1e4eb42edf9799c0ea4dc69fed1db6b72805aec27563eafe7).\r\n\r\nIs that holder binding syntax actually defined (or aspiring to be) somewhere?  I couldn't find it looking through the VC WG publications and google/bing search for ClaimsBindinding2022 gives zero results. ",
          "createdAt": "2022-12-30T21:10:01Z",
          "updatedAt": "2022-12-30T21:10:01Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "The content of disclosures (https://datatracker.ietf.org/doc/html/draft-ietf-oauth-selective-disclosure-jwt-02#name-creating-disclosures ) would need to conditionally omit the name when for a value in an array. \r\n\r\nWe might also want to think about a prefix on the value vs a special first element in the array - e.g, ` {\"foo\": [\"_sd:7pHe1uQ5uSClgAxXdG0E6dKnBgXcxEO1zvoQO9E5Lr4\", \"_sd:9-VdSnvRTZNDo-4Bxcp3X-V9VtLOCRUkR6oLWZQl81I\", \"_sd:nTzPZ3Q68z1Ko_9ao9LK0mSYXY5gY6UG6KEkQ_BdqU0\"]}`. I dunno, it's a little bikesheddy but would allow mixing of SD and non-SD elements in an array. \r\n\r\nWith that said, I still really like the consistency and simplicity of the current model and don't love the idea of expanding it. ",
          "createdAt": "2022-12-30T21:31:29Z",
          "updatedAt": "2022-12-30T21:31:29Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "The prefix solution has the advantage that the number of elements in the array is unchanged. For the other questions, it would be great if @tlodderstedt could chime in :-) ",
          "createdAt": "2023-01-03T17:28:21Z",
          "updatedAt": "2023-01-03T17:28:21Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The most obvious example is the EBSI schema for diplomas. \r\n\r\nhttps://ec.europa.eu/digital-building-blocks/code/projects/EBSI/repos/json-schema/browse/schemas/ebsi-muti-uni-pilot/verifiable-diploma/2022-11/examples/Ildiko%20Mazar_Graduate%20University%20Study%20of%20Civil%20Engineering_shortened.json\r\n\r\nWhen I tried to transform this into a sd-jwt, I learned it uses arrays on various levels for the different objects (e.g. achievements). I would assume it is desirable to be able to selectively disclose those. \r\n\r\nI have also worked on an example of an eID (PID in eIDAS terms) VC that has different kins of holder binding. The syntax is inspired by a proposal Oliver Terbu and Paul Bastian presented at IIW. \r\n\r\n``` json\r\n{\r\n    \"iss\": \"https://pid_issuer.memberstate.eu\",\r\n    \"iat\": 1541493724,\r\n    \"type\": \"PersonIdentificationData\",\r\n            \"holder\":\r\n            {\r\n                \"binding\":\r\n                    [\r\n                        {\r\n                            \"type\": \"CryptographicBinding2022\",\r\n                            \"did\": \"did:example:1386147674571545\"\r\n                        },\r\n                                                {\r\n                            \"type\": \"BiometricBinding2022\",\r\n                            \"template\": \"...\"\r\n                        },\r\n                    ],\r\n            },\r\n    \"credentialSubject\":\r\n      {\r\n        \"given_name\": \"Erika\",\r\n        \"family_name\": \"Mustermann\",\r\n        \"nationalities\": [\"DE\"],\r\n        \"birth_family_name\": \"Schmidt\",\r\n        \"birthdate\": \"1973-01-01\",\r\n        \"place_of_birth\": \"Regensburg\",\r\n        \"address\":\r\n          {\r\n            \"postal_code\": \"12345\",\r\n            \"locality\": \"Irgendwo\",\r\n            \"street_address\": \"Sonnenstrasse 23\",\r\n            \"country_code\": \"DE\"\r\n          },\r\n        \"is_over_18\": true,\r\n        \"is_over_21\": true,\r\n        \"is_over_65\": false\r\n      }\r\n  }\r\n``` \r\n\r\n\r\nBoth entries define a certain binding (one to a cryptographically bound identifier, the other one has a biometric template). Only one of them is relevant for a certain verifier (online - crypto, offline/supervised - biometry). So I would like to disclose them individually. \r\n",
          "createdAt": "2023-01-25T09:12:13Z",
          "updatedAt": "2023-01-25T09:14:38Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Another option would be to replace the array elements by something like this: `{\"_sd\": \"9-VdSnvRTZNDo-4Bxcp3X-V9VtLOCRUkR6oLWZQl81I\"}` (note that the value here is not an array). Also just bikeshedding here.",
          "createdAt": "2023-02-06T16:52:19Z",
          "updatedAt": "2023-02-06T16:52:19Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "this claimset\r\n```\r\n\"claims\": {\r\n      \"given_name\": \"Max\",\r\n      \"family_name\": \"M\u00fcller\",\r\n      \"nationalities\": [\r\n        \"DE\",\r\n        \"JPN\"\r\n      ]\r\n```\r\nwould be\r\n```\r\n\"claims\": {\r\n        \"_sd\": [\r\n          \"1qb26tNg6OZuZyVDYwK4--mQxXbZqwcQbhUxGHrXeLM\",\r\n          \"AHX0EgNpd_wak07lK8HX2izDNntsUZojuzyEWd2GJdk\",\r\n          \"FwzTz0THaEOzexgEzLRXu-zsTPND7by3aBF57AwKCZI\",\r\n        ],\r\n        \"nationalities\" : [\r\n          \"_sd\", \r\n          \"7pHe1uQ5uSClgAxXdG0E6dKnBgXcxEO1zvoQO9E5Lr4\", \r\n          \"9-VdSnvRTZNDo-4Bxcp3X-V9VtLOCRUkR6oLWZQl81I\"\r\n        ]\r\n```\r\nor\r\n```\r\n\"claims\": {\r\n        \"_sd\": [\r\n          \"1qb26tNg6OZuZyVDYwK4--mQxXbZqwcQbhUxGHrXeLM\",\r\n          \"AHX0EgNpd_wak07lK8HX2izDNntsUZojuzyEWd2GJdk\",\r\n          \"FwzTz0THaEOzexgEzLRXu-zsTPND7by3aBF57AwKCZI\",\r\n        ],\r\n        \"nationalities\" : [\r\n           \"_sd:7pHe1uQ5uSClgAxXdG0E6dKnBgXcxEO1zvoQO9E5Lr4\", \r\n           \"_sd:9-VdSnvRTZNDo-4Bxcp3X-V9VtLOCRUkR6oLWZQl81I\"\r\n         ]\r\n```",
          "createdAt": "2023-02-06T17:05:17Z",
          "updatedAt": "2023-02-06T17:06:29Z"
        },
        {
          "author": "TakahikoKawasaki",
          "authorAssociation": "NONE",
          "body": "As I'm a newbie in SD-JWT discussion, I don't know whether this issue has already reached an agreed solution or not. But if not yet, another approach that may be worth considering is to **include an array index in the claim name** when a disclosure is prepared. For example, ...\r\n\r\n**Plain Payload**\r\n\r\n```json\r\n{\r\n  \"array\": [ \"value0\", \"value1\" ]\r\n}\r\n```\r\n\r\n**Disclosure for the first element**\r\n\r\n```json\r\n[ \"{salt}\", \"array[0]\", \"value0\" ]\r\n```\r\n\r\n**Payload with `_sd`**\r\n\r\n```json\r\n{\r\n  \"_sd\": [ \"{digest of the Disclosure}\" ],\r\n  \"array\": [ null, \"value1\" ]\r\n}\r\n```\r\n\r\n",
          "createdAt": "2023-02-25T14:33:59Z",
          "updatedAt": "2023-02-25T14:33:59Z"
        },
        {
          "author": "jogu",
          "authorAssociation": "NONE",
          "body": "The nationalities example is kind of interesting - if I've understood the proposals, all of them require that disclosing one of your nationalities requires disclosing that you have more than one nationality. i.e. if I'm French & Iranian, I think there's no way to selectivity disclose \"I'm a French national\" without disclosing \"I also have another nationality\" because [even if the nationality claim was not previously disclosed] disclosing one element will disclose the number of elements in the array?\r\n",
          "createdAt": "2023-03-28T03:19:36Z",
          "updatedAt": "2023-03-28T03:19:36Z"
        },
        {
          "author": "TakahikoKawasaki",
          "authorAssociation": "NONE",
          "body": "@jogu I suppose that [decoy digests](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-03.html#name-decoy-digests-2) can be used for the concern.",
          "createdAt": "2023-03-28T03:33:19Z",
          "updatedAt": "2023-03-28T03:33:19Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Taka's idea would nicely work around two problems that my proposals above have:\r\n\r\n* There would be two very different types of Disclosures.\r\n*  The number of elements would always be disclosed.\r\n\r\nI would like to entertain a slightly modified version of Taka's proposal:\r\n\r\n1. To avoid string manipulation, escaping problems, and a temptation to use jsonpath or similar, the disclosures would not encode the element index in the key name, but separately - like this:\r\n\r\n```\r\n[ \"{salt}\", [\"array\", 2], \"value0\" ]\r\n```\r\n\r\nAdmittedly, this would introduce polymorphism, but it would not be much worse than with my approach above.\r\n\r\n2. I would not allow non-sd plaintext values in the array in the SD-JWT, but for simplicity constrain arrays to \"always disclosed\" or \"always sd\". The array in the SD-JWT would just be omitted:\r\n\r\n```\r\n{\r\n  \"_sd\": [ \"{digest of the Disclosure}\" ]\r\n}\r\n```",
          "createdAt": "2023-03-29T02:30:52Z",
          "updatedAt": "2023-03-29T02:30:52Z"
        },
        {
          "author": "TakahikoKawasaki",
          "authorAssociation": "NONE",
          "body": "Encoding an array name and an index into an array like `[\"array\", 2]` seems a good idea.",
          "createdAt": "2023-03-29T05:16:08Z",
          "updatedAt": "2023-03-29T05:16:08Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Daniel's slightly modified version of Taka's proposal seems like the way to go. ",
          "createdAt": "2023-05-23T14:44:15Z",
          "updatedAt": "2023-05-23T17:13:25Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "... and I'm just working on implementing this in the SD-JWT reference implementation.",
          "createdAt": "2023-05-23T14:47:32Z",
          "updatedAt": "2023-05-23T14:47:32Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "While implementing this I noticed a problem with the recently chosen approach: This approach relies on the fact that an array must be nested within an object. This means that \r\n\r\n- the approach does not work for top-level arrays (without defining another exception, like a \"null\" array name),\r\n- the approach does not work for arrays nested in arrays, and\r\n- the implementation for creating the SD-JWT becomes more complex: So far, a simple recursive function call was sufficient (each function call operating on a single key/value in an object at a time, creating the disclosure and returning the hash to add to the _sd element). Now if there's an array, we need to go back one level higher to find the _sd element and add more hashes there. The behavior is undefined for arrays-in-arrays.\r\n\r\n@TakahikoKawasaki Did you encounter any of these problems? What are your thoughts?\r\n\r\nI'm thinking about going back to the prefix variant, which suddenly seems **much more** attractive :-)",
          "createdAt": "2023-05-23T16:54:43Z",
          "updatedAt": "2023-05-23T16:54:43Z"
        },
        {
          "author": "TakahikoKawasaki",
          "authorAssociation": "NONE",
          "body": "@danielfett Good points. I didn't imagine the cases you mentioned. \ud83d\ude05 \r\n\r\n### Top-level Array\r\n\r\nIf you mean the data like below,\r\n\r\n```json\r\n[ \"apple\", \"banana\", \"cherry\" ]\r\n```\r\n\r\nthe following JSON for disclosure may work by using `null` as the array name\r\n\r\n```json\r\n[ \"<salt>\", [ null, 0 ], \"apple\" ]\r\n```\r\n\r\nand creating an outer JSON object like below.\r\n\r\n```json\r\n{\r\n  \"_sd\": [ \"<digest0>\" ]\r\n}\r\n```\r\n\r\nHowever, this approach would make it difficult to judge, if not possible, whether the outer JSON object has existed from the beginning or has been added just for the top-level anonymous array.\r\n\r\nTherefore, my gut feeling tells that `\"_sd\"` for array elements should exist in the array whichever approach (an additional `\"_sd\"` element or `_sd:` prefix) is used.\r\n\r\n### Nested Array\r\n\r\nThis needs special considerations. At least, it seems difficult to create disclosures and `\"_sd\"` arrays for the following data with the `[\"salt\",[\"array-name\",index],value]` approach...\r\n\r\n```json\r\n[ [ \"apple\", \"banana\", \"cherry\" ] ]\r\n```\r\n\r\nA conclusion is that discussions need to continue. \ud83d\ude05 \r\n",
          "createdAt": "2023-05-23T17:50:15Z",
          "updatedAt": "2023-05-23T17:50:15Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> the approach does not work for top-level arrays (without defining another exception, like a \"null\" array name),\r\n> the approach does not work for arrays nested in arrays\r\n\r\nOffhand, I feel like those could be considered acceptable limitations and that allowing for SD in top-level arrays or inside arrays nested in arrays isn't necessary. ",
          "createdAt": "2023-05-23T18:28:36Z",
          "updatedAt": "2023-05-23T18:28:36Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Thanks @TakahikoKawasaki! I think I agree to your conclusions.\r\n\r\n@bc-pi I'd like to add that I'm actually less concerned about the restrictions themselves but feel that they (and the need to explain them) are strong indicators of a less-than-ideal approach.",
          "createdAt": "2023-05-23T18:36:32Z",
          "updatedAt": "2023-05-23T18:36:32Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> indicators of a less-than-ideal approach.\r\n\r\nThat's a fair/good point :) All the approaches thus far have had (in my mind anyway) some indicators of being less-than-ideal though. I'm not sure there's an obvious \"best\" one, so I'm not necessarily advocating for one over the other. I'm just trying to \"contribute\" to the discussions.  ",
          "createdAt": "2023-05-23T19:07:23Z",
          "updatedAt": "2023-05-23T19:07:23Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I implemented the prefix solution now, but I introduced a mechanism to avoid one concern that I had. The basic idea is to use arrays like this:\r\n\r\n```json\r\n  \"nationalities\": [\r\n    \"_sd:Q7R_-cBP9LWCq9At1XWNRZyLTFHOr0S9fLcXQjyBgH4\",\r\n    \"_sd:o9qCZPD-_n0pa9nH_sBxtVKXuDyx1ALQjzYPrOJ3p4s\",\r\n    \"DE\"\r\n  ],\r\n```\r\n\r\n(Here, the third element is non-SD.)\r\n\r\nThe main concern that I had with this solution is that there may be conflicts. If somebody has data where `_sd` can appear as part of the data (for example, user-supplied data), the processing will not be correct. Therefore I propose to use `_sd:` as the default prefix, but to allow definition of a different prefix by adding the top-level key `_sd_arr_pfx`. For example, the prefix can consist of a nonce or another string that is guaranteed to not appear in real data items. This approach is similar to [boundaries in multipart MIME](https://en.wikipedia.org/wiki/Delimiter#Content_boundary). (There is no need to use `_sd_arr_pfx` if there are no arrays with SD or if the default prefix is used.)\r\n\r\nThe following is a full SD-JWT payload using the new array feature and defining `_sdx:` as a prefix:\r\n\r\n```json\r\n{\r\n  \"_sd\": [\r\n    \"sGmV2tSLHmJScETevXgTQ-bM7O5ZnQuu-ypqI2vB-JU\"\r\n  ],\r\n  \"iss\": \"https://example.com/issuer\",\r\n  \"iat\": 1683000000,\r\n  \"exp\": 1883000000,\r\n  \"sub\": \"john_doe_42\",\r\n  \"nationalities\": [\r\n    \"_sdx:Q7R_-cBP9LWCq9At1XWNRZyLTFHOr0S9fLcXQjyBgH4\",\r\n    \"_sdx:o9qCZPD-_n0pa9nH_sBxtVKXuDyx1ALQjzYPrOJ3p4s\",\r\n    \"DE\"\r\n  ],\r\n  \"is_over\": {\r\n    \"_sd\": [\r\n      \"NKZs2QqvniVtS3k-YXxMag_PiyUQizlgdsXgfIEWZcs\",\r\n      \"hLJKFgko4IvkO_R8lbX3xNRcaEo0t0awFMnrO0dXdvg\",\r\n      \"hN7ybNRpz_UIZAH4rPTNl_c07JyUQtzHlAwuyVrsQgs\"\r\n    ]\r\n  },\r\n  \"addresses\": [\r\n    {\r\n      \"street\": \"123 Main St\",\r\n      \"city\": \"Anytown\",\r\n      \"state\": \"NY\",\r\n      \"zip\": \"12345\",\r\n      \"type\": \"main_address\"\r\n    },\r\n    \"_sdx:TDx4IHvi4gxmIGbEKZa4AM6PYRIHtP5VxjraME72Nh8\"\r\n  ],\r\n  \"null_values\": [\r\n    null,\r\n    \"_sdx:YImgtY5gfEpLKDA8PQ93hkUCeAL0lz-UKsnK1IGJHFo\",\r\n    \"_sdx:duZZCCrTo-ROiWT8uEpPkgu_XnpsIWDtXhOqSOJ1EEo\",\r\n    null\r\n  ],\r\n  \"data_types\": [\r\n    \"_sdx:llHOoLZriL1NCNBOB3lLj5cFhZS2I4UvXeWIofOSyzU\",\r\n    \"_sdx:5h5X-YP38eRr7yS1sydUGJzbTXQiYoZy2CELGTpy63w\",\r\n    \"_sdx:ZcGhdemizhDvOKiM3huX69MO5MJ3k_6N4TDADYi1KI8\",\r\n    \"_sdx:MtEhyiQLsysJR9x6XgGPo2AS_audhRVXEZ3GsNVM30o\",\r\n    \"_sdx:auIGvdZGiGSzFmMXxM2ErtbN-5h-y0BIeFsl_aDEN48\",\r\n    \"_sdx:HTw5A7z-pzJ8RI37pC9Z2-1IyM-ZjVYG-iUkhpV4Ahw\",\r\n    \"_sdx:0MZET02ximXt6FxwBPOsEBUxuo_OBlNxQsfmRiatBeY\"\r\n  ],\r\n  \"nested_array\": [\r\n    [\r\n      \"_sdx:xlEWQP4kR9414Kyp5YqMNOBFMlcTa4zqR8ueeSVUCbs\",\r\n      \"_sdx:hcy7DI4AiQaPPTw40V6NYGzllLikLeyifv43a7SaX6w\"\r\n    ],\r\n    [\r\n      \"_sdx:czFUZij2d-W1nAOU68i6khwwphueeOyTwSJDCmh7gIk\",\r\n      \"_sdx:nLEUS7NSV2EUExiiET2itDjWi6dzV7re0Btcf0omUso\"\r\n    ]\r\n  ],\r\n  \"array_with_recursive_sd\": [\r\n    \"boring\",\r\n    \"_sdx:uaf1fEDM93C4zWX_PZlGCgcfkEgvMpEJUCCFozWCccY\",\r\n    [\r\n      \"_sdx:DWRkboVZ-cTya_WGt0-vaaQVmETozAtFip68mxU1Z0I\",\r\n      \"_sdx:RfQ40cSzxPe494mtOEbWjgA-ymegpiBiPyGTz2dyS4M\"\r\n    ]\r\n  ],\r\n  \"_sd_alg\": \"sha-256\",\r\n  \"cnf\": {\r\n    \"jwk\": {\r\n      \"kty\": \"EC\",\r\n      \"crv\": \"P-256\",\r\n      \"x\": \"TCAER19Zvu3OHF4j4W4vfSVoHIP1ILilDls7vCeGemc\",\r\n      \"y\": \"ZxjiWWbZMQGHVWKVQ4hbSIirsVfuecCE6t4jT9F2HZQ\"\r\n    }\r\n  },\r\n  \"_sd_arr_pfx\": \"_sdx:\"\r\n}\r\n```\r\n\r\nThe code is in the sd-jwt repo, this is not finished yet but you should be able to play with the examples: https://github.com/danielfett/sd-jwt/pull/4\r\n\r\nLet me know what you think!",
          "createdAt": "2023-05-24T14:35:33Z",
          "updatedAt": "2023-05-24T14:42:37Z"
        },
        {
          "author": "TakahikoKawasaki",
          "authorAssociation": "NONE",
          "body": "Where to embed `\"_sd_arr_pfx\"` (and `\"_sd_alg\"`) in the case of a top-level anonymous array?",
          "createdAt": "2023-05-24T14:53:56Z",
          "updatedAt": "2023-05-24T14:53:56Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "That case is so far not covered by the spec. I think that might be acceptable.",
          "createdAt": "2023-05-24T15:02:24Z",
          "updatedAt": "2023-05-24T15:02:24Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Regular old JWT itself requires the JWS/JWE payload be a JSON object so that probably is acceptable (even with trying to be more accommodating to arbitrary JSON payloads).",
          "createdAt": "2023-05-24T15:20:52Z",
          "updatedAt": "2023-05-24T15:20:52Z"
        },
        {
          "author": "TakahikoKawasaki",
          "authorAssociation": "NONE",
          "body": "Another idea came up (brainstorming). Converting any element to a **map** which contains only `\"_sd\"` as a key. This approach conflicts with the current `\"_sd\"` **array** approach. I've not examined yet whether this approach would be able to work for all cases, though. Just showing an idea.\r\n\r\n### Example 1\r\n```json\r\n[\"A\", \"B\"]\r\n```\r\n\u2b07\ufe0f \r\n```json\r\n[\r\n  {\"_sd\":\"digest of [salt, 0, A]\"},\r\n  {\"_sd\":\"digest of [salt, 1, B]\"}\r\n]\r\n```\r\n\r\n### Example 2\r\n```json\r\n[\"A\", [ \"B\", \"C\" ]]\r\n```\r\n\u2b07\ufe0f \r\n```json\r\n[\r\n  {\"_sd\":\"digest of [salt, 0, A]\"},\r\n  [\r\n    {\"_sd\":\"digest of [salt, 0, B]\"},\r\n    {\"_sd\":\"digest of [salt, 1, C]\"}\r\n  ]\r\n]\r\n```\r\n\r\n### Example 3\r\n```json\r\n{\r\n  \"a\": \"A\",\r\n  \"b\": [\r\n    \"B\",\r\n    {\"c\": \"C\"},\r\n    {\"d\": \"D\"},\r\n    [\"E\"],\r\n    [\"F\"]\r\n  ]\r\n}\r\n```\r\n\u2b07\ufe0f \r\n```json\r\n{\r\n  {\"_sd\":\"digest of [salt, a, A]\"},\r\n  \"b\": [\r\n    {\"_sd\":\"digest of [salt, 0, B]\"},\r\n    {\r\n      {\"_sd\":\"digest of [salt, c, C]\"}\r\n    },\r\n    {\"_sd\":\"digest of [salt, 2, {d:D}]\"},\r\n    [\r\n      {\"_sd\":\"digest of [salt, 0, E]\"}\r\n    ],\r\n    {\"_sd\":\"digest of [salt, 4, [F]]\"}\r\n  ]\r\n}\r\n```\r\n",
          "createdAt": "2023-05-24T15:35:16Z",
          "updatedAt": "2023-05-24T15:35:16Z"
        },
        {
          "author": "TakahikoKawasaki",
          "authorAssociation": "NONE",
          "body": "Sorry, the above examples are malformed as JSON, probably.",
          "createdAt": "2023-05-24T15:41:07Z",
          "updatedAt": "2023-05-24T15:41:07Z"
        },
        {
          "author": "TakahikoKawasaki",
          "authorAssociation": "NONE",
          "body": "I meant the following is wrong.\r\n\r\n```json\r\n{\r\n  {\"_sd\": \"digest\"}\r\n}\r\n```\r\n\r\n---\r\n\r\nIn the case of a JSON object, an `\"_sd\"` array would work. In the case of array elements, a JSON object containing an `\"_sd\"` key would work.\r\n\r\n```json\r\n{\r\n  \"a\": \"A\",\r\n  \"b\": [\"B\"]\r\n}\r\n```\r\n\r\n```json\r\n{\r\n  \"_sd\": [\r\n    \"digest of [salt, a, A]\"\r\n  ],\r\n  \"b\": [\r\n    {\"_sd\":\"digest of [salt, 0, B]\"}\r\n  ]\r\n}\r\n```",
          "createdAt": "2023-05-24T15:52:35Z",
          "updatedAt": "2023-05-24T15:52:35Z"
        },
        {
          "author": "TakahikoKawasaki",
          "authorAssociation": "NONE",
          "body": "Or, it may be possible to make `\"_sd\"` be always an array.\r\n\r\n```json\r\n{\r\n  \"_sd\": [\r\n    \"digest of [salt, a, A]\"\r\n  ],\r\n  \"b\": [\r\n    {\r\n      \"_sd\": [\r\n        \"digest of [salt, 0, B]\"\r\n      ]\r\n    }\r\n  ]\r\n}\r\n```",
          "createdAt": "2023-05-24T15:57:54Z",
          "updatedAt": "2023-05-24T15:57:54Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I implemented the solution using objects `{\"_sd\": \"digest\"}` instead of strings `\"_sd:digest\"` as well now and I must say that both are very similar. When iterating through an array, it is slightly easier to check for a string prefix (\"_sd:...\") instead of checking that an entry is \r\n\r\n- an object\r\n- with exactly one element\r\n- which is not an array, but a string\r\n\r\nin order to avoid confusion with an object containing SD'd keys. I like about this solution that it doesn't involve string handling and it most likely doesn't need the `_sd_arr_pfx` construction to avoid conflicts. First of all, we're using the already defined \"_sd\", and second, we're only using it as a key value (which is generally less likely to contain very variable or user-supplied data). \r\n\r\nFor the disclosures, I think it makes sense to stick to a two-element format (`[\"eluV5Og3gSNII8EYnsxA_A\", \"CA\"]`). As Brian pointed out yesterday, we should keep the Disclosures short. And we don't need the position in the array if the position is already encoded in the SD-JWT itself.\r\n\r\nHere is a full example:\r\n\r\n```json\r\n{\r\n  \"_sd\": [\r\n    \"sGmV2tSLHmJScETevXgTQ-bM7O5ZnQuu-ypqI2vB-JU\"\r\n  ],\r\n  \"iss\": \"https://example.com/issuer\",\r\n  \"iat\": 1683000000,\r\n  \"exp\": 1883000000,\r\n  \"sub\": \"john_doe_42\",\r\n  \"nationalities\": [\r\n    {\r\n      \"_sd\": \"i7eKdHc_ZMOnhiyu3TJj5GVDQ7ZwJOMXFD3XgUbo8GQ\"\r\n    },\r\n    {\r\n      \"_sd\": \"usWXFPKaqKMreTrj72QD24wB8xc7lQ4zCnrnn8ZRVeo\"\r\n    },\r\n    \"DE\"\r\n  ],\r\n  \"is_over\": {\r\n    \"_sd\": [\r\n      \"2ovMJR_ZNMB6ngFK3SUQnRIgyM548DzR7tJFTO-ZzBM\",\r\n      \"CeVqxVUVHpva5Xp0X-NeUvhixjDYp7PTZ4BaFWGXUek\",\r\n      \"dg1pBJV-dABilqD2RYiG8z4gRtuDFdRBdlwHgdLFEx8\"\r\n    ]\r\n  },\r\n  \"addresses\": [\r\n    {\r\n      \"street\": \"123 Main St\",\r\n      \"city\": \"Anytown\",\r\n      \"state\": \"NY\",\r\n      \"zip\": \"12345\",\r\n      \"type\": \"main_address\"\r\n    },\r\n    {\r\n      \"_sd\": \"RNWcxPD8A1ZhAm6_wAiJSoSzIRb_w1QUaKGvS240K-Y\"\r\n    }\r\n  ],\r\n  \"null_values\": [\r\n    null,\r\n    {\r\n      \"_sd\": \"hhB5pziS4s0dSx0kql31vDtuo3JVDfB4VZ-YHcj2A9M\"\r\n    },\r\n    {\r\n      \"_sd\": \"o_VFRluA190wrH5E1yr2r39UyTnx3-m3qPREikSr6Qo\"\r\n    },\r\n    null\r\n  ],\r\n  \"data_types\": [\r\n    {\r\n      \"_sd\": \"nY72P6V5uHQe-BYkwYj-paG2y3fmj614FKQQhhk6T1E\"\r\n    },\r\n    {\r\n      \"_sd\": \"zt7kWPtZTpMYKPoaQd-L71L-aKYMYYNLOFOf-yH3uLY\"\r\n    },\r\n    {\r\n      \"_sd\": \"K1yxHJ4z10JKd2jRmQuziCym3D1oXB0NaFVLHEOv8XM\"\r\n    },\r\n    {\r\n      \"_sd\": \"yr-1NDhAaFYPvLrAzvdFfBwRJS_wn199JX0adDYa6Ak\"\r\n    },\r\n    {\r\n      \"_sd\": \"NoTOTjWq1_cYu3kfQKh3jWrx9OLSIIdhYX0_92-RD-Y\"\r\n    },\r\n    {\r\n      \"_sd\": \"biBLCP424CoDYTpBmden-zGmYOdE0GSHlerSaoYeQZ0\"\r\n    },\r\n    {\r\n      \"_sd\": \"_z-We_gbvKo84jpuhBQS9v9yVhDo2--FCDNWMHMezUQ\"\r\n    }\r\n  ],\r\n  \"nested_array\": [\r\n    [\r\n      {\r\n        \"_sd\": \"FbJ_W_M-Gl9rMUR8fcsMFdiHV-qEabiT-u9eHvNKSAA\"\r\n      },\r\n      {\r\n        \"_sd\": \"zo6muzFQJ9UCeFuy3Dq_YInQzLGimJVIztHGntWVxw0\"\r\n      }\r\n    ],\r\n    [\r\n      {\r\n        \"_sd\": \"n-TOQDur9EA2k9G_VVqlvkOYCzIFb28LKA99IaQfFt8\"\r\n      },\r\n      {\r\n        \"_sd\": \"xvJ7NwhRY93UqhcqVKF-Ap7HwZpKe1raEWZg_WozBBs\"\r\n      }\r\n    ]\r\n  ],\r\n  \"array_with_recursive_sd\": [\r\n    \"boring\",\r\n    {\r\n      \"_sd\": \"KIK9FOQ3C-jLxGW9oRYTL-AETF3eGolP8lyVRVFOqX8\"\r\n    },\r\n    [\r\n      {\r\n        \"_sd\": \"uN8DYtT68Do3MAO9deTagWZx-akgd6DmzI4x9xFN7bs\"\r\n      },\r\n      {\r\n        \"_sd\": \"F5STX6452Aw9VQyFh5vclX-SlUAuu_r_ax-ow35e4Jw\"\r\n      }\r\n    ]\r\n  ],\r\n  \"_sd_alg\": \"sha-256\",\r\n  \"cnf\": {\r\n    \"jwk\": {\r\n      \"kty\": \"EC\",\r\n      \"crv\": \"P-256\",\r\n      \"x\": \"TCAER19Zvu3OHF4j4W4vfSVoHIP1ILilDls7vCeGemc\",\r\n      \"y\": \"ZxjiWWbZMQGHVWKVQ4hbSIirsVfuecCE6t4jT9F2HZQ\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n__Array Entry__:\r\n\r\n * SHA-256 Hash: `i7eKdHc_ZMOnhiyu3TJj5GVDQ7ZwJOMXFD3XgUbo8GQ`\r\n * Disclosure:\\\r\n`WyIyR0xDNDJzS1F2ZUNmR2ZyeU5STjl3IiwgIlVTIl0`\r\n * Contents:\r\n`[\"2GLC42sKQveCfGfryNRN9w\", \"US\"]`\r\n\r\n\r\n__Array Entry__:\r\n\r\n * SHA-256 Hash: `usWXFPKaqKMreTrj72QD24wB8xc7lQ4zCnrnn8ZRVeo`\r\n * Disclosure:\\\r\n`WyJlbHVWNU9nM2dTTklJOEVZbnN4QV9BIiwgIkNBIl0`\r\n * Contents:\r\n`[\"eluV5Og3gSNII8EYnsxA_A\", \"CA\"]`\r\n\r\n\r\n__Claim `13`__:\r\n\r\n * SHA-256 Hash: `dg1pBJV-dABilqD2RYiG8z4gRtuDFdRBdlwHgdLFEx8`\r\n * Disclosure:\\\r\n`WyI2SWo3dE0tYTVpVlBHYm9TNXRtdlZBIiwgIjEzIiwgdHJ1ZV0`\r\n * Contents:\r\n`[\"6Ij7tM-a5iVPGboS5tmvVA\", \"13\", true]`\r\n\r\n\r\n__Claim `18`__:\r\n\r\n * SHA-256 Hash: `CeVqxVUVHpva5Xp0X-NeUvhixjDYp7PTZ4BaFWGXUek`\r\n * Disclosure:\\\r\n`WyJlSThaV205UW5LUHBOUGVOZW5IZGhRIiwgIjE4IiwgZmFsc2Vd`\r\n * Contents:\r\n`[\"eI8ZWm9QnKPpNPeNenHdhQ\", \"18\", false]`\r\n\r\n\r\n__Claim `21`__:\r\n\r\n * SHA-256 Hash: `2ovMJR_ZNMB6ngFK3SUQnRIgyM548DzR7tJFTO-ZzBM`\r\n * Disclosure:\\\r\n`WyJRZ19PNjR6cUF4ZTQxMmExMDhpcm9BIiwgIjIxIiwgZmFsc2Vd`\r\n * Contents:\r\n`[\"Qg_O64zqAxe412a108iroA\", \"21\", false]`\r\n\r\n\r\n__Array Entry__:\r\n\r\n * SHA-256 Hash: `RNWcxPD8A1ZhAm6_wAiJSoSzIRb_w1QUaKGvS240K-Y`\r\n * Disclosure:\\\r\n`WyJBSngtMDk1VlBycFR0TjRRTU9xUk9BIiwgeyJzdHJlZXQiOiAiNDU2IE1h`\\\r\n`aW4gU3QiLCAiY2l0eSI6ICJBbnl0b3duIiwgInN0YXRlIjogIk5ZIiwgInpp`\\\r\n`cCI6ICIxMjM0NSIsICJ0eXBlIjogInNlY29uZGFyeV9hZGRyZXNzIn1d`\r\n * Contents:\r\n`[\"AJx-095VPrpTtN4QMOqROA\", {\"street\": \"456 Main St\", \"city\":`\\\r\n`\"Anytown\", \"state\": \"NY\", \"zip\": \"12345\", \"type\":`\\\r\n`\"secondary_address\"}]`\r\n\r\n\r\n__Array Entry__:\r\n\r\n * SHA-256 Hash: `hhB5pziS4s0dSx0kql31vDtuo3JVDfB4VZ-YHcj2A9M`\r\n * Disclosure:\\\r\n`WyJQYzMzSk0yTGNoY1VfbEhnZ3ZfdWZRIiwgbnVsbF0`\r\n * Contents:\r\n`[\"Pc33JM2LchcU_lHggv_ufQ\", null]`\r\n\r\n\r\n__Array Entry__:\r\n\r\n * SHA-256 Hash: `o_VFRluA190wrH5E1yr2r39UyTnx3-m3qPREikSr6Qo`\r\n * Disclosure:\\\r\n`WyJHMDJOU3JRZmpGWFE3SW8wOXN5YWpBIiwgbnVsbF0`\r\n * Contents:\r\n`[\"G02NSrQfjFXQ7Io09syajA\", null]`\r\n\r\n\r\n__Array Entry__:\r\n\r\n * SHA-256 Hash: `nY72P6V5uHQe-BYkwYj-paG2y3fmj614FKQQhhk6T1E`\r\n * Disclosure:\\\r\n`WyJsa2x4RjVqTVlsR1RQVW92TU5JdkNBIiwgbnVsbF0`\r\n * Contents:\r\n`[\"lklxF5jMYlGTPUovMNIvCA\", null]`\r\n\r\n\r\n__Array Entry__:\r\n\r\n * SHA-256 Hash: `zt7kWPtZTpMYKPoaQd-L71L-aKYMYYNLOFOf-yH3uLY`\r\n * Disclosure:\\\r\n`WyJuUHVvUW5rUkZxM0JJZUFtN0FuWEZBIiwgNDJd`\r\n * Contents:\r\n`[\"nPuoQnkRFq3BIeAm7AnXFA\", 42]`\r\n\r\n\r\n__Array Entry__:\r\n\r\n * SHA-256 Hash: `K1yxHJ4z10JKd2jRmQuziCym3D1oXB0NaFVLHEOv8XM`\r\n * Disclosure:\\\r\n`WyI1YlBzMUlxdVpOYTBoa2FGenp6Wk53IiwgMy4xNF0`\r\n * Contents:\r\n`[\"5bPs1IquZNa0hkaFzzzZNw\", 3.14]`\r\n\r\n\r\n__Array Entry__:\r\n\r\n * SHA-256 Hash: `yr-1NDhAaFYPvLrAzvdFfBwRJS_wn199JX0adDYa6Ak`\r\n * Disclosure:\\\r\n`WyI1YTJXMF9OcmxFWnpmcW1rXzdQcS13IiwgImZvbyJd`\r\n * Contents:\r\n`[\"5a2W0_NrlEZzfqmk_7Pq-w\", \"foo\"]`\r\n\r\n\r\n__Array Entry__:\r\n\r\n * SHA-256 Hash: `NoTOTjWq1_cYu3kfQKh3jWrx9OLSIIdhYX0_92-RD-Y`\r\n * Disclosure:\\\r\n`WyJ5MXNWVTV3ZGZKYWhWZGd3UGdTN1JRIiwgdHJ1ZV0`\r\n * Contents:\r\n`[\"y1sVU5wdfJahVdgwPgS7RQ\", true]`\r\n\r\n\r\n__Array Entry__:\r\n\r\n * SHA-256 Hash: `biBLCP424CoDYTpBmden-zGmYOdE0GSHlerSaoYeQZ0`\r\n * Disclosure:\\\r\n`WyJIYlE0WDhzclZXM1FEeG5JSmRxeU9BIiwgWyJUZXN0Il1d`\r\n * Contents:\r\n`[\"HbQ4X8srVW3QDxnIJdqyOA\", [\"Test\"]]`\r\n\r\n\r\n__Array Entry__:\r\n\r\n * SHA-256 Hash: `_z-We_gbvKo84jpuhBQS9v9yVhDo2--FCDNWMHMezUQ`\r\n * Disclosure:\\\r\n`WyJDOUdTb3VqdmlKcXVFZ1lmb2pDYjFBIiwgeyJmb28iOiAiYmFyIn1d`\r\n * Contents:\r\n`[\"C9GSoujviJquEgYfojCb1A\", {\"foo\": \"bar\"}]`\r\n\r\n\r\n__Array Entry__:\r\n\r\n * SHA-256 Hash: `FbJ_W_M-Gl9rMUR8fcsMFdiHV-qEabiT-u9eHvNKSAA`\r\n * Disclosure:\\\r\n`WyJreDVrRjE3Vi14MEptd1V4OXZndnR3IiwgImZvbyJd`\r\n * Contents:\r\n`[\"kx5kF17V-x0JmwUx9vgvtw\", \"foo\"]`\r\n\r\n\r\n__Array Entry__:\r\n\r\n * SHA-256 Hash: `zo6muzFQJ9UCeFuy3Dq_YInQzLGimJVIztHGntWVxw0`\r\n * Disclosure:\\\r\n`WyJIM28xdXN3UDc2MEZpMnllR2RWQ0VRIiwgImJhciJd`\r\n * Contents:\r\n`[\"H3o1uswP760Fi2yeGdVCEQ\", \"bar\"]`\r\n\r\n\r\n__Array Entry__:\r\n\r\n * SHA-256 Hash: `n-TOQDur9EA2k9G_VVqlvkOYCzIFb28LKA99IaQfFt8`\r\n * Disclosure:\\\r\n`WyJPQktsVFZsdkxnLUFkd3FZR2JQOFpBIiwgImJheiJd`\r\n * Contents:\r\n`[\"OBKlTVlvLg-AdwqYGbP8ZA\", \"baz\"]`\r\n\r\n\r\n__Array Entry__:\r\n\r\n * SHA-256 Hash: `xvJ7NwhRY93UqhcqVKF-Ap7HwZpKe1raEWZg_WozBBs`\r\n * Disclosure:\\\r\n`WyJNMEpiNTd0NDF1YnJrU3V5ckRUM3hBIiwgInF1eCJd`\r\n * Contents:\r\n`[\"M0Jb57t41ubrkSuyrDT3xA\", \"qux\"]`\r\n\r\n\r\n__Claim `baz`__:\r\n\r\n * SHA-256 Hash: `6ZSZVDX4TeL5yplka7RIt1w_V_BA2ebI041AEod-IAI`\r\n * Disclosure:\\\r\n`WyJEc210S05ncFY0ZEFIcGpyY2Fvc0F3IiwgImJheiIsIHsicXV4IjogInF1`\\\r\n`dXgifV0`\r\n * Contents:\r\n`[\"DsmtKNgpV4dAHpjrcaosAw\", \"baz\", {\"qux\": \"quux\"}]`\r\n\r\n\r\n__Array Entry__:\r\n\r\n * SHA-256 Hash: `KIK9FOQ3C-jLxGW9oRYTL-AETF3eGolP8lyVRVFOqX8`\r\n * Disclosure:\\\r\n`WyJlSzVvNXBIZmd1cFBwbHRqMXFoQUp3IiwgeyJfc2QiOiBbIjZaU1pWRFg0`\\\r\n`VGVMNXlwbGthN1JJdDF3X1ZfQkEyZWJJMDQxQUVvZC1JQUkiXSwgImZvbyI6`\\\r\n`ICJiYXIifV0`\r\n * Contents:\r\n`[\"eK5o5pHfgupPpltj1qhAJw\", {\"_sd\":`\\\r\n`[\"6ZSZVDX4TeL5yplka7RIt1w_V_BA2ebI041AEod-IAI\"], \"foo\":`\\\r\n`\"bar\"}]`\r\n\r\n\r\n__Array Entry__:\r\n\r\n * SHA-256 Hash: `uN8DYtT68Do3MAO9deTagWZx-akgd6DmzI4x9xFN7bs`\r\n * Disclosure:\\\r\n`WyJqN0FEZGIwVVZiMExpMGNpUGNQMGV3IiwgImZvbyJd`\r\n * Contents:\r\n`[\"j7ADdb0UVb0Li0ciPcP0ew\", \"foo\"]`\r\n\r\n\r\n__Array Entry__:\r\n\r\n * SHA-256 Hash: `F5STX6452Aw9VQyFh5vclX-SlUAuu_r_ax-ow35e4Jw`\r\n * Disclosure:\\\r\n`WyJXcHhKckZ1WDh1U2kycDRodDA5anZ3IiwgImJhciJd`\r\n * Contents:\r\n`[\"WpxJrFuX8uSi2p4ht09jvw\", \"bar\"]`\r\n\r\n\r\n__Claim `sd_array`__:\r\n\r\n * SHA-256 Hash: `sGmV2tSLHmJScETevXgTQ-bM7O5ZnQuu-ypqI2vB-JU`\r\n * Disclosure:\\\r\n`WyJhdFNtRkFDWU1iSlZLRDA1bzNKZ3RRIiwgInNkX2FycmF5IiwgWzMyLCAy`\\\r\n`M11d`\r\n * Contents:\r\n`[\"atSmFACYMbJVKD05o3JgtQ\", \"sd_array\", [32, 23]]`",
          "createdAt": "2023-05-25T08:22:40Z",
          "updatedAt": "2023-05-25T08:22:40Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "And here is another example showing both an SD'd array element and a single-key object with SD:\r\n\r\n```json\r\n{\r\n  \"iss\": \"https://example.com/issuer\",\r\n  \"iat\": 1683000000,\r\n  \"exp\": 1883000000,\r\n  \"addresses\": [\r\n    {\r\n      \"street\": \"123 Main St\",\r\n      \"city\": \"Anytown\",\r\n      \"state\": \"NY\",\r\n      \"zip\": \"12345\",\r\n      \"type\": \"main_address\"\r\n    },\r\n    {\r\n      \"_sd\": \"k63-wMoGu03I9dCyrrNnB0ncOXLZhYaA_Q4lCKFIWcU\"\r\n    }\r\n  ],\r\n  \"array_with_one_sd_object\": [\r\n    {\r\n      \"_sd\": [\r\n        \"1R6ziZ1b4uvXf4-DuKx0JSDRoeVTGrzJldw7Jgqac3Q\"\r\n      ]\r\n    }\r\n  ],\r\n  \"_sd_alg\": \"sha-256\"\r\n}\r\n```",
          "createdAt": "2023-05-25T08:27:00Z",
          "updatedAt": "2023-05-25T08:27:00Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Would you say you prefer the object `{\"_sd\": \"digest\"}` based approach over the string `\"_sd:digest\"` based approach, @danielfett? It does seem \"more correct\" to me. And not needing the `_sd_arr_pfx` construction is a plus. Looking at the examples you have, I must admit that I don't love the aesthetics of it. But that shouldn't be part of the criteria for choosing.  \r\n\r\n> using the already defined \"_sd\"\r\n\r\nThis is true and I agree that using a special key name is cleaner than a string prefix and much better avoids conflict.  However, we'd need to be a little careful with it's treatment in the text. There's a lot of current text that would need to be adjusted to allow for the `_sd` key to have different syntax and semantics based on where it is in the JSON. [This sentence](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-04.html#section-5.1.1.4-6) and [these steps](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-04.html#section-6.2-4.4.1) are just two examples. Which might be tricky and risky. We might want to use a new special key name. Maybe `_sda` or  `_sdae` or something (roughly for selectively disclosable array element but I'm just throwing out ideas). A different key might also be easier to see the difference when just looking at the JSON. \r\n\r\n\r\n",
          "createdAt": "2023-05-25T19:21:25Z",
          "updatedAt": "2023-05-25T19:21:25Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "The `{\"_sd\": \"digest\"}` feels cleaner, the `\"_sd:digest\"` looks a bit better. But I have a slight preference for the first one. What do @TakahikoKawasaki @Sakurann think?\r\n\r\nI think that using a different key makes sense. It is easier to implement (\"check for _sde\" instead of \"check for a single-element object, where _sd refers to a string not an array\") and we avoid polymorphism (`_sd` is always an array, `_sde` is always a string).\r\n\r\nNow for the bikeshedding part:\r\n\r\n- Ideally, we would use two or max three characters after the underscore.\r\n- `_sdae` is quite long\r\n- `_sda` or `_sde` (selective disclosure element) looks like a linux harddisk path, but would be fine\r\n- `_sa` or `_se` would short, but what would that stand for? `_se` is at least alphabetically next after `_sd`.\r\n- `_[]` or `[]` would look array-ish, but readers might interpret to much into the meaning of the string (\"Can I write `_[2]`?\")\r\n- just `_` is too short and might cause conflicts\r\n- `[_]` looks like a nice placeholder, but doesn't follow our own convention to start with `_`\r\n- `...` transports the meaning that something is elided at this position in the array (and this is an operator with a remotely related meaning both in JavaScript and Python)\r\n- `__` or `_*` or `_:` or `=>` are other options, but I don't think I like them\r\n\r\nAny other ideas? I think I like `...` and `_se` most.",
          "createdAt": "2023-05-26T07:47:59Z",
          "updatedAt": "2023-05-26T09:03:26Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> Any other ideas? \r\n\r\njust more bikeshedding but perhaps `_sdi` or `_si` where the `i` is loosely for item in the array ",
          "createdAt": "2023-05-26T13:38:55Z",
          "updatedAt": "2023-05-26T13:38:55Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I vote for `{\"_sd\": \"digest\"}` because it avoids the concern we had earlier on the collision of the `_sd:` prefix and potentially introducing \"_sd_arr_pfx\". and it also feels cleaner and is easier to check for `_sd` from Daniel's experience.",
          "createdAt": "2023-05-30T22:44:22Z",
          "updatedAt": "2023-05-30T22:44:22Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I also like `...` \r\ndon't want to think every single time what `_sa`, `_si`, `_sde` etc stands for and other characters proposed feel like might cause conflicts. though `_:` looks cute..",
          "createdAt": "2023-05-30T22:45:36Z",
          "updatedAt": "2023-05-30T22:45:36Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Pull request for spec text: #283 ",
          "createdAt": "2023-05-31T22:12:22Z",
          "updatedAt": "2023-05-31T22:12:22Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR merged",
          "createdAt": "2023-06-14T16:57:43Z",
          "updatedAt": "2023-06-14T16:57:43Z"
        }
      ]
    },
    {
      "number": 196,
      "id": "I_kwDOHTmVzM5bCGNn",
      "title": "Include biometric holder binding in discussion around holder binding",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/196",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial",
        "ready-for-PR"
      ],
      "body": "This was removed from PR #195 ",
      "createdAt": "2023-01-10T12:05:27Z",
      "updatedAt": "2023-06-14T16:58:55Z",
      "closedAt": "2023-06-14T16:58:54Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "ok with this kind of separation: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#section-2-3.22.1\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2023-02-22T18:00:51Z",
          "updatedAt": "2023-02-22T18:00:51Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #286 addressed this",
          "createdAt": "2023-06-14T16:58:54Z",
          "updatedAt": "2023-06-14T16:58:54Z"
        }
      ]
    },
    {
      "number": 198,
      "id": "I_kwDOHTmVzM5bQp1k",
      "title": "SD-JWT with JWS with JSON serialization",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/198",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "danielfett"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "There are implementations that have a need to use SD-JWT with JWS with JSON serialization.\r\nJWS defines JSON serialization and compact serialization, but JWT does not. \r\nWould be very helpful in sd-jwt spec defined how to do sd-jwt with JSON serialization.\r\n\r\nExample generated by Torsten:\r\n\r\nSD-JWT\r\n```\r\n{\r\n       \"payload\":\r\n       \"eyJpc3MiOiAiaHR0cHM6Ly9leGFtcGxlLmNvbS9pc3N1Z\r\n       XIiLCAiaWF0IjogMTUxNjIzOTAyMiwgInR5cGUiOiAiUGVyc29uSWRlbnRpZmljYXRpb\r\n       25EYXRhIiwgImNyZWRlbnRpYWxTdWJqZWN0IjogeyJfc2QiOiBbIi1Bek9ZcEFSbmViN\r\n       VE0UXlESDRhdzJqT3NDdlUtaHZBWUFxS3FpQUlveVEiLCAiLU9vS3ZMS2pvSFVhUEVvQ\r\n       1lzNGM2M1FqTlN5QU9GWEhfNmRPWjdtUjhCUSIsICJCM3gzVE0yNkMxekdOUGpocVNpN\r\n       21acGJiMTNSUEJnS0FEM1NvTEp0ZHhZIiwgIkdYNTg3RnB4Um5uaWJOcjhEcTFJMHhqS\r\n       UN5YmdEYVFkR3EyZGtYeUNheDAiLCAiSnNzR3IzcksyNFQ0bkQyY19XSTVMY0pkSGpoa\r\n       HRjT29KaE9hUkJLTlpHTSIsICJiMWExWmJUcFJYaldVdzJNeEppWHlTaDNIYnZ3SGRSW\r\n       WgyVkRMS09SWXZNIiwgImVOUEZpMmNUZVBHM1ZtOVlNcXNLT3lyMlBzcEZIU2dlNllXW\r\n       GxqUTdlWlkiLCAiamM0SHk0NzEtY1NEcUM1T2dkbWdqYl83Y0dIUURBZGdkcVBGME8ya\r\n       EczUSIsICJ0OHlDYmpTNFVQR1ZkcV9DTEp5U2RSTGVYUm9Gel9aemVvTUM4TjJOX2pjI\r\n       l0sICJhZGRyZXNzIjogeyJfc2QiOiBbIjFpQlV0QWcxdlpmTFFodkE5MloydUFSLTFTV\r\n       3psNjJWRVNGN19xenc3UGsiLCAiSV93WXFkMmJ0TG43cFFQMnhLbnRYTUxENGd0dHlHM\r\n       V9ERFpJUkVtSWtHYyIsICJaNVBSN1RNclQtZXNDUW1KM2w2UXgteXhDT09sVTliZG9TV\r\n       UlhZmxpMVRFIiwgIlpheHZkYlJJRFpwX1ppUlpzSVNXcmZFd0UtOGhkbm9FM2c2WUU3b\r\n       0x5TlEiXX19LCAiZXhwIjogMTUxNjI0NzAyMiwgIl9zZF9hbGciOiAic2hhLTI1NiIsI\r\n       CJjbmYiOiB7Imp3ayI6IHsia3R5IjogIkVDIiwgImNydiI6ICJQLTI1NiIsICJ4IjogI\r\n       lRDQUVSMTladnUzT0hGNGo0VzR2ZlNWb0hJUDFJTGlsRGxzN3ZDZUdlbWMiLCAieSI6I\r\n       CJaeGppV1diWk1RR0hWV0tWUTRoYlNJaXJzVmZ1ZWNDRTZ0NGpUOUYySFpRIn19fQ\",\r\n      \"protected\": \"eyJhbGciOiAiRVMyNTYifQ\",\r\n      \"header\": {\r\n        \"kid\": \"e9bc097a-ce51-4036-9562-d2ade882db0d\"\r\n      },\r\n      \"signature\": \"mcndQ15m-4FbIzyfBqDeFxfJ-a6F0vgLY1-DzYJHowrhgYyYteVIxHwApv6dNEwYKnegk5\r\n       vg1jxwwYUHU2ZX7g\"\r\n}\r\n```\r\n'+ disclosures\r\n```\r\n      \"disclosures\": [\r\n        [\r\n          \"qfUdTVp1zsb019pLaGHrow\",\r\n          \"given_name\",\r\n          \"Erika\"\r\n        ],\r\n        [\r\n          \"cNSnLg5v5T26PxMt3NKj7g\",\r\n          \"family_name\",\r\n          \"Mustermann\"\r\n        ],\r\n        [\r\n          \"J7f73QLAe2nnT4GO2HTWLg\",\r\n          \"nationalities\",\r\n          [\r\n            \"DE\"\r\n          ]\r\n        ],\r\n        [\r\n          \"_cfWMDPMxsRMGHzitGA64A\",\r\n          \"birth_family_name\",\r\n          \"Schmidt\"\r\n        ],\r\n        [\r\n          \"Lnhx-vdNLAwQN2VsPvoqbg\",\r\n          \"birthdate\",\r\n          \"1973-01-01\"\r\n        ],\r\n        [\r\n          \"MGM4tUQu9MtDSOzVxc010g\",\r\n          \"place_of_birth\",\r\n          \"Regensburg\"\r\n        ],\r\n        [\r\n          \"RdEnoePP67aqtaeYhP3kYA\",\r\n          \"postal_code\",\r\n          \"12345\"\r\n        ],\r\n        [\r\n          \"XoINaxEBN_mdeJCUS-PuwQ\",\r\n          \"locality\",\r\n          \"Irgendwo\"\r\n        ],\r\n        [\r\n          \"Wzrr883PdksfkVHwvk90Kg\",\r\n          \"street_address\",\r\n          \"Sonnenstrasse 23\"\r\n        ],\r\n        [\r\n          \"k3Z2k_W6aVfHNb_8P4pIXQ\",\r\n          \"country_code\",\r\n          \"DE\"\r\n        ],\r\n        [\r\n          \"KisX1X1oqftlY2XystVe3g\",\r\n          \"is_over_18\",\r\n          true\r\n        ],\r\n        [\r\n          \"MZzvAyDIlAWjDz_7KzZvTQ\",\r\n          \"is_over_21\",\r\n          true\r\n        ],\r\n        [\r\n          \"MnF2WogLSlhPoQlBbF-XbQ\",\r\n          \"is_over_65\",\r\n          false\r\n        ]\r\n      ]\r\n    }\r\n```",
      "createdAt": "2023-01-12T17:17:26Z",
      "updatedAt": "2023-06-14T17:23:07Z",
      "closedAt": "2023-06-14T17:23:06Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I agree that this would be useful. The example is not quite right (disclosures should not be decoded), but I can adapt the code to produce JWS with JSON serialization.",
          "createdAt": "2023-01-13T09:16:15Z",
          "updatedAt": "2023-01-13T09:16:15Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "There needs to be some care taken with how this is worded/presented in the SD-JWT document. By definition https://www.rfc-editor.org/rfc/rfc7519#section-1 JWT is only compact serialization. So there is no JWT with JWS JSON serialization and that makes it a little awkward as to how it layers in.  This would be something more like a JWS JSON serialization of a JWT claim set with selective disclosures too. \r\n",
          "createdAt": "2023-01-13T17:06:35Z",
          "updatedAt": "2023-01-13T17:06:35Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "this line between JWT and JWS has been driving me crazy recently..\r\nI agree that as long as we say selective disclosure for **JWTs**, we shouldn't put JSON serialization into the main body. so Annex would be the most appropriate probably..",
          "createdAt": "2023-01-14T01:29:08Z",
          "updatedAt": "2023-01-14T01:29:08Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I think it'd be okay as a separate section in the main document. We'd just need to be a little careful with it. ",
          "createdAt": "2023-01-15T13:18:18Z",
          "updatedAt": "2023-01-15T13:18:18Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "example updated. so the question becomes how to pass Disclosures - Brian suggested base64url encoding all of the disclosures as one string as opposed to being tilda separated. ",
          "createdAt": "2023-01-18T16:31:57Z",
          "updatedAt": "2023-01-18T16:31:57Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "array of strings like\r\n```\r\n\"disclosures\": [\r\n \"WyJkcVR2WE14UzBHYTNEb2FHbmU5eDBRIiwgInN1YiIsICJqb2huX2RvZV80MiJd\", \r\n \"WyIzanFjYjY3ejl3a3MwOHp3aUs3RXlRIiwgImdpdmVuX25hbWUiLCAiSm9obiJd\",   \r\n \"WyJxUVdtakpsMXMxUjRscWhFTkxScnJ3IiwgImZhbWlseV9uYW1lIiwgIkRvZSJd\"\r\n ]\r\n```\r\n",
          "createdAt": "2023-01-18T16:45:13Z",
          "updatedAt": "2023-01-18T16:52:10Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Mention of both [General JWS JSON Serialization](https://www.rfc-editor.org/rfc/rfc7515#section-7.2.1) and [Flattened JWS JSON Serialization](https://www.rfc-editor.org/rfc/rfc7515#section-7.2.2) is probably needed. Although the `disclosures` array will be the same and at the same level as the `payload` in both.",
          "createdAt": "2023-01-18T17:32:14Z",
          "updatedAt": "2023-03-23T21:08:34Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Shortened example I created for the IETF116 slides from the partial examples above:\r\n\r\n```\r\n{\r\n  \"payload\": \"eyJpc3MiOiAiaHR0cHM6L...Z0NGpUOUYySFpRIn19fQ\",\r\n  \"protected\": \"eyJhbGciOiAiRVMyNTYifQ\",\r\n  \"header\": {\r\n    \"kid\": \"e9bc097a-ce51-4036-9562-d2ade882db0d\"\r\n  },\r\n  \"signature\": \"mcndQ15m-4FbIzyfB...U2ZX7g\",\r\n  \"disclosures\": [\r\n    \"WyJkcVR2WE14UzBHYTNEb2FHbmU5eDBRIiwgInN1YiIsICJqb2huX2RvZV80MiJd\",\r\n    \"WyIzanFjYjY3ejl3a3MwOHp3aUs3RXlRIiwgImdpdmVuX25hbWUiLCAiSm9obiJd\",\r\n    \"WyJxUVdtakpsMXMxUjRscWhFTkxScnJ3IiwgImZhbWlseV9uYW1lIiwgIkRvZSJd\"\r\n  ]\r\n}\r\n```",
          "createdAt": "2023-03-22T09:50:00Z",
          "updatedAt": "2023-03-22T09:50:08Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I am not in favor of defining a new disclosures array because it means the Combined Formats for both issuance and presentation will be different depending on the serialization of JWS, which would be an unnecessary complexity when processing. \r\nInstead, simply saying SD-JWT can be signed as a JSON serialization in addition to compact serialization should be sufficient, because it will allow to keep the same Combined Formats for both issuance and presentation: `SD-JWT(can be either serialization)~Disclosures~HolderBindingJWT([opt] in presentation)`",
          "createdAt": "2023-03-27T05:34:22Z",
          "updatedAt": "2023-03-27T05:37:50Z"
        },
        {
          "author": "mickrau",
          "authorAssociation": "NONE",
          "body": "Hi, I became aware of this issue through @tlodderstedt when we were talking about combining SD-JWT with JAdES ([TS 119 182-1](https://www.etsi.org/deliver/etsi_ts/119100_119199/11918201/01.01.01_60/ts_11918201v010101p.pdf)). JAdES signatures need JSON Serialization for the most signature levels: B-T, B-LT, B-LTA. \r\n\r\nI agree with @Sakurann and would prefer not to embed the disclosures in the SD-JWT JSON object. My additional arguments:\r\n\r\n- If the disclosures are contained in the same object as the SD-JWT, the user is more likely to forget to extract the disclosures before the presentation, which would result in a full disclosure. The first part of the issuance Combined Format should be passed untouched in the first part of the pressentation Combined Format.\r\n- The first part of the Combined Format should be a well-formed JWT or JSON-Encoded JWS which can be directly validated without removing parts of the JSON Object.\r\n\r\nI have two related questions:\r\nShould the JSON serialized SD-JWT be base64url encoded in the Combined Formats to avoid `~` or other special characters in the SD-JWT part? This would mean:\r\n\r\n`base64url(SD-JWT in JSON Serialization)~Disclosures~HolderBindingJWT`\r\n\r\nHow to distinguish between the two serializations on the holder and verifier side? Do we need two different types?\r\n\r\n",
          "createdAt": "2023-04-06T16:18:03Z",
          "updatedAt": "2023-04-06T16:22:15Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "> Should the JSON serialized SD-JWT be base64url encoded in the Combined Formats to avoid ~ or other special characters in the SD-JWT part? This would mean: `base64url(SD-JWT in JSON Serialization)~Disclosures~HolderBindingJWT`\r\n\r\nyes, SD-JWT in JSON serialization would be b64url encoded in this approach.\r\n\r\n> How to distinguish between the two serializations on the holder and verifier side? Do we need two different types?\r\n\r\nyeah, I had the same question... I think realistically, based on the trust framework/interoperability profile, holder/verifier will know which serialization to expect. otherwise, holder/verifier needs to check every time after b64url decoding an SD-JWT part for the serialization, based on things like the presence of a JWS header..",
          "createdAt": "2023-04-16T09:26:29Z",
          "updatedAt": "2023-04-16T09:26:29Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I really don't think defining a base64url-encoding of a JWS JSON serialization is at all appropriate for this document. ",
          "createdAt": "2023-04-16T16:33:21Z",
          "updatedAt": "2023-04-16T21:54:48Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "We chose the tilda-separated format specifically because the compact serialization does not support unsigned values. The JSON serialization does, so I think we should make use of that.",
          "createdAt": "2023-04-17T13:58:56Z",
          "updatedAt": "2023-04-17T13:58:56Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "NONE",
          "body": "If JSON serialisation is added, then I'd suggest changing the name of the spec to SD-JWS. JWT suggests compact serialisation according to the JWT spec.",
          "createdAt": "2023-05-08T12:40:29Z",
          "updatedAt": "2023-05-08T12:40:29Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "NONE",
          "body": "What is the requirement for JSON Serialization in this document? It appears to me that we are talking about a very specific use case that contains specific form of JSON Serialization that should be supported. The reason why I'm asking is because JWS JSON Serialization can sign any arbitrary data (as base64url encoded string). For example, that data can be also a binary image. Having an SD-JWT of a b64url-encoded image would feel a bit awkward to me. I don't think that this is something that we want to achieve. \r\n\r\nI guess what we want is to support signing JSON Objects (e.g., JSON-LD) and encoding the thing as a JWS using JSON Serialization. Having anything other than JSON Objects in the payload would make no sense for the SD-JWT spec.",
          "createdAt": "2023-05-15T12:35:57Z",
          "updatedAt": "2023-05-15T12:35:57Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree with @awoie that having anything other than JSON Objects in the payload would make no sense for the SD-JWT spec.",
          "createdAt": "2023-05-15T12:49:13Z",
          "updatedAt": "2023-05-15T12:49:13Z"
        },
        {
          "author": "mickrau",
          "authorAssociation": "NONE",
          "body": "As @awoie said, the discussion here is about the representation of an SD-JWT in JWS JSON Serialization, not about encoding arbitrary payload. Building only on top of JWT with JWS Compact Serialization comes with limitations that not meet the following requirements:\r\n\r\n1. unsigned attributes (for e.g. time-stamping the JWS Signature, counter-signature.., see JAdES) \r\n2. multiple signatures (for e.g. for PQC aware hybrid signatures)",
          "createdAt": "2023-05-16T10:17:16Z",
          "updatedAt": "2023-05-16T10:17:16Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "> If JSON serialisation is added, then I'd suggest changing the name of the spec to SD-JWS. JWT suggests compact serialisation according to the JWT spec.\r\n\r\nThis is a very important observation. Current specifications assume that the output of hiding of the claims is JWT that supports only compact serialised JWS, which makes it incompatible with JAdES.\r\n\r\n+1 to scope the specification to JSON object + JWS",
          "createdAt": "2023-06-12T20:53:58Z",
          "updatedAt": "2023-06-12T20:56:36Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> +1 to scope the specification to JSON object + JWS\r\n\r\nNote that https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/276/files updated the title to be more inclusive of general JWS with JSON and added some corresponding/explanatory text to the Abstract and Introduction. Which is aiming for that JSON object + JWS scope. For this issue, @danielfett is planning on describing the JWS JSON serialization. ",
          "createdAt": "2023-06-12T21:16:58Z",
          "updatedAt": "2023-06-12T21:16:58Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "Will it still require that JSON object signed with JWS (compact or JSON serialised) contains JWT claims?",
          "createdAt": "2023-06-12T21:23:16Z",
          "updatedAt": "2023-06-12T21:23:16Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> Will it still require that JSON object signed with JWS (compact or JSON serialised) contains JWT claims?\r\n\r\nNo, it shouldn't require that. The text in https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/276/files attempts to allow for the case where the JSON object signed with JWS is not JWT claims. For example: \r\n\r\n> This specification defines a mechanism for selective disclosure of individual elements of a JSON object\r\nused as the payload of a JSON Web Signature (JWS) structure.\r\n> It encompasses various applications, including but not limited to the selective disclosure of JSON Web Tokens (JWT) claims.",
          "createdAt": "2023-06-12T21:32:51Z",
          "updatedAt": "2023-06-12T21:33:37Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "See PR #289 ",
          "createdAt": "2023-06-14T12:42:05Z",
          "updatedAt": "2023-06-14T12:42:05Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "merged PR https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/289",
          "createdAt": "2023-06-14T17:23:06Z",
          "updatedAt": "2023-06-14T17:23:06Z"
        }
      ]
    },
    {
      "number": 199,
      "id": "I_kwDOHTmVzM5bsLAc",
      "title": "fix doc history",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/199",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "bc-pi"
      ],
      "labels": [],
      "body": "-02 published has history for -03 \r\nneeds to be fixed ",
      "createdAt": "2023-01-18T16:27:13Z",
      "updatedAt": "2023-01-19T12:51:40Z",
      "closedAt": "2023-01-19T12:51:40Z",
      "comments": []
    },
    {
      "number": 200,
      "id": "I_kwDOHTmVzM5bsQiP",
      "title": "brush up the language around crypto algorithms ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/200",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "a list of algs pointed is not exactly the right one.\r\nsome of the algorithms listed are ruled out by other text.\r\n\r\ncc: @bc-pi ",
      "createdAt": "2023-01-18T16:44:07Z",
      "updatedAt": "2023-01-19T00:10:42Z",
      "closedAt": "2023-01-19T00:10:42Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "AFAIR #183 was created for this ",
          "createdAt": "2023-01-18T17:04:55Z",
          "updatedAt": "2023-01-18T17:04:55Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "duplicate",
          "createdAt": "2023-01-19T00:10:42Z",
          "updatedAt": "2023-01-19T00:10:42Z"
        }
      ]
    },
    {
      "number": 203,
      "id": "I_kwDOHTmVzM5dQuLI",
      "title": "\"4. Concepts\" section",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/203",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "danielfett",
        "bc-pi"
      ],
      "labels": [
        "editorial",
        "ready-for-PR"
      ],
      "body": "How relevant/useful to the reader is \"4. Concepts\" section?\r\n\r\nIf not, should it be removed? Should it be moved to Appendix?",
      "createdAt": "2023-01-31T16:42:49Z",
      "updatedAt": "2023-03-01T00:12:17Z",
      "closedAt": "2023-03-01T00:12:17Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "We agreed to try to remove the notational stuff and keep the explanations.",
          "createdAt": "2023-02-06T16:48:27Z",
          "updatedAt": "2023-02-06T16:48:27Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "merged PR #217 that tries to remove the notational stuff but keep the explanations",
          "createdAt": "2023-03-01T00:12:17Z",
          "updatedAt": "2023-03-01T00:12:17Z"
        }
      ]
    },
    {
      "number": 208,
      "id": "I_kwDOHTmVzM5eCBRg",
      "title": "Terminology: \"JWT\" / JSON-LD Example",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/208",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [
        "Sakurann"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "Note to myself:\r\n\r\n- SD-JWT is a JWT (or JWS Serialization as discussed)\r\n- Content (in/out) needs to be JSON\r\n- Content does not need specific claims, can be JSON-LD\r\n- We should provide an example for JSON-LD",
      "createdAt": "2023-02-09T10:03:04Z",
      "updatedAt": "2023-03-19T09:48:07Z",
      "closedAt": "2023-03-19T09:48:07Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "update processing rules to add a nuance \"take JSON\", which implies (?) it can be JSON-LD which is also JSON?\r\n\r\nalso nuance SD-JWT is based on a JWT. ",
          "createdAt": "2023-02-22T17:16:51Z",
          "updatedAt": "2023-02-22T17:16:51Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR merged",
          "createdAt": "2023-03-19T09:48:07Z",
          "updatedAt": "2023-03-19T09:48:07Z"
        }
      ]
    },
    {
      "number": 213,
      "id": "I_kwDOHTmVzM5eqVrf",
      "title": "Object Key Name Blinding",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/213",
      "state": "CLOSED",
      "author": "fabian-hk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "danielfett"
      ],
      "labels": [],
      "body": "I have implemented the latest draft of the specification in my [Kotlin](https://github.com/IDunion/SD-JWT-Kotlin) library, and I was thinking, why not also blind object key names? This would have the advantage that no key names are revealed to the verifier, which in turn improves privacy. So a simple credential like this:\r\n\r\n```\r\n{\r\n    birthday: \"1950-01-01\",\r\n    address: {\r\n        street_address: \"123 Main St\",\r\n        country: \"US\",\r\n        locality: \"Anytown\",\r\n        region: \"Anystate\",\r\n        zip_code: 123456\r\n    },\r\n    nicknames: [\r\n        \"A\",\r\n        \"B\"\r\n    ],\r\n    given_name: \"Alice\",\r\n    family_name: \"Wonderland\",\r\n    email: \"alice@example.com\"\r\n}\r\n```\r\n\r\nwould produce an SD-JWT which also has a digest value for the ``address`` key:\r\n\r\n```\r\n{\r\n  \"_sd\": [\r\n    \"igI9yClAfzYXq7aeHSlOXDGiMa_-YtXKV5Efnc4FSqI\",\r\n    \"CRcudjVh9L518a4k8gYrzMtcP7XAyjeAihr0MTIU9us\",\r\n    \"sp3HA4QS5o1I1R2DnrBNvhrveG14K2_qXiry3nmKTG4\",\r\n    \"8nlxltqpUUGYffQKXYvaamZQPrvGrFJHRob5UGTIaco\",\r\n    \"zm2ur1QxWqgA_v6fzE7y6iRpVMQoikJqf-FTyWnBoRg\",\r\n    \"td4nlcMY_ltwYAHZqSHViqjrDha1muPsJwJ3aY7QA4s\",\r\n    \"mELeKWyBm_RgNGzOgCxQwqbaNkAH0CKi3UsigqaBtqo\"\r\n  ],\r\n  \"_sd_alg\": \"sha-256\",\r\n  \"iss\": \"http://issuer.example.com\",\r\n  \"exp\": 1676656291,\r\n  \"iat\": 1676569891,\r\n  \"IYUO3yeyrLcnUq71btorYfUMi2K-MJVLnmylG5qbqQI\": {\r\n    \"_sd\": [\r\n      \"_Dyl_b2TEeBU92z3X_pDLYBgU2ymDFl-c_BWYCvTN4w\",\r\n      \"9k13ilEUn0jJvKw5h8aYiDHPJJ2-P1Ze5tSl0Yr8xEM\",\r\n      \"1qIjSVkHME5KW0BuSIvtt2BaZruheu371V3Pb9HxU8U\",\r\n      \"uQ9oX166S0fELlFKBMjO1jS8VoAvOtcEVway3WlLxEQ\",\r\n      \"fREXtv8ZbeP3OxOwWYC4-snC3xbpjjJQv9ti6NIyLGM\",\r\n      \"JNwla2uNQakFuiusGTpY-LDKUnzLhOUeqIRayimzprE\",\r\n      \"mu9z7FTxYoQzY_uu6sM1r4mqBqEXIM6ioRDNcAup_uA\"\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nIn order to recreate the original credential, we would need an additional disclosure, which would look something like this:\r\n\r\n```\r\nWyJyckRKdGNOVzFpcUFYWEdTdl9qWUtBIiwiYWRkcmVzcyJd\r\n\r\n# Decoded\r\n[\r\n    \"rrDJtcNW1iqAXXGSv_jYKA\",\r\n    \"address\"\r\n]\r\n```\r\n\r\nThere is of course an additional complexity in implementing this, but it is quite simple. I have implemented it in the [feature/object-key-blinding](https://github.com/IDunion/SD-JWT-Kotlin/tree/feature/object-key-blinding) branch of my Kotlin library.",
      "createdAt": "2023-02-16T18:19:12Z",
      "updatedAt": "2023-03-07T19:46:31Z",
      "closedAt": "2023-03-07T19:45:36Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "There's also some additional complexity that maybe isn't obvious at first. The entities would have to deal with and reason about the additional optionality. For example, a holder would need to know to disclose the name whenever disclosing a subordinate so would have to keep track of a lot more in terms of the Disclosures and the relationship between some of them. A verifier would need to deal with disclosed claims under an undisclosed name. The approach would need to say whether clear text claims would be allowed under a blinded name/key. And there too, what would it mean to a verifier to get claims where a key name is blinded but has clear data under it. \r\n\r\nAlso I'm not sure it's acceptable to use the digest value directly as the key value. Thus far we've tried to clearly differentiate the blinded parts with the \"_sd\" array claim. And in other design discussions we've avoided use of the hash value directly in place of where the actual value would be. \r\n\r\nOn one level it is quite simple. But it's deceptively so. I'm not sure it warrants the additional complexity.",
          "createdAt": "2023-02-17T00:18:32Z",
          "updatedAt": "2023-02-17T00:28:46Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "There is some relation to #194 that's probably worth considering. ",
          "createdAt": "2023-02-17T00:24:04Z",
          "updatedAt": "2023-02-17T00:24:04Z"
        },
        {
          "author": "fabian-hk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Looking at #194, we could prefix the blinded key names with ``_sd:`` to make it clear that this is a digest and the verifier must look for a disclosure. I do not think it makes much sense to disclose plaintext claims under an undisclosed key. For example, it would make it impossible to create a type-safe class from the credential in my Kotlin library. So I would suggest that a verifier should not process the key if it cannot find the plaintext value.",
          "createdAt": "2023-02-17T17:27:45Z",
          "updatedAt": "2023-02-17T17:27:45Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "We talked about this in our editor's meeting and think that it might be preferable to instead allow recursive SD-JWTs - i.e., digests may contain objects with _sd keys. ",
          "createdAt": "2023-02-22T17:01:40Z",
          "updatedAt": "2023-02-22T17:01:40Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "\"i.e., digests may contain objects with _sd keys.\" -> I *think* you mean digests can point to Disclosures that may contain objects with _sd keys. ",
          "createdAt": "2023-02-22T17:26:15Z",
          "updatedAt": "2023-02-22T17:26:15Z"
        }
      ]
    },
    {
      "number": 214,
      "id": "I_kwDOHTmVzM5er1va",
      "title": "\"nihon.com\" is real exist domain",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/214",
      "state": "CLOSED",
      "author": "snakaya",
      "authorAssociation": "NONE",
      "assignees": [
        "Sakurann",
        "bc-pi"
      ],
      "labels": [
        "editorial",
        "ready-for-PR"
      ],
      "body": "It should be use \"example.jp\" or \".example\" TLD instead.",
      "createdAt": "2023-02-17T00:11:23Z",
      "updatedAt": "2023-02-27T17:58:13Z",
      "closedAt": "2023-02-27T17:58:13Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "yeah, should probably use an explicit example domain per guidance from https://datatracker.ietf.org/doc/html/rfc2606 ",
          "createdAt": "2023-02-19T14:57:43Z",
          "updatedAt": "2023-02-19T14:57:43Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": " #216 was merged",
          "createdAt": "2023-02-27T17:58:12Z",
          "updatedAt": "2023-02-27T17:58:12Z"
        }
      ]
    },
    {
      "number": 215,
      "id": "I_kwDOHTmVzM5e5UNP",
      "title": "Tooling: Dump header, allow header modification",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/215",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [
        "danielfett"
      ],
      "labels": [
        "pending-close"
      ],
      "body": "Got external feedback:\r\n\r\n* The tooling should allow custom values in the header\r\n* We currently have no way to show the headers",
      "createdAt": "2023-02-20T15:40:00Z",
      "updatedAt": "2023-06-28T16:47:15Z",
      "closedAt": "2023-06-23T21:31:23Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "more relevant to externalized reference implementation repo now. header to HB JWT is introduced in this PR: https://github.com/danielfett/sd-jwt/pull/3 ",
          "createdAt": "2023-05-30T22:34:33Z",
          "updatedAt": "2023-05-30T22:34:33Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "this issue really now (after \"Use external SD-JWT library to generate examples #273\") applies to the python reference implementation that is used to generate the examples https://github.com/danielfett/sd-jwt ",
          "createdAt": "2023-06-23T21:22:57Z",
          "updatedAt": "2023-06-23T21:25:40Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "created a new issue in reference implementation to track this https://github.com/danielfett/sd-jwt/issues/12",
          "createdAt": "2023-06-23T21:31:23Z",
          "updatedAt": "2023-06-23T21:31:23Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "you could have transferred the issue to daniel's repo too :)",
          "createdAt": "2023-06-28T16:47:15Z",
          "updatedAt": "2023-06-28T16:47:15Z"
        }
      ]
    },
    {
      "number": 218,
      "id": "I_kwDOHTmVzM5fW4ER",
      "title": "type of salt in disclosures",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/218",
      "state": "CLOSED",
      "author": "TakahikoKawasaki",
      "authorAssociation": "NONE",
      "assignees": [
        "bc-pi"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "The current snapshot of the SD-JWT specification allows the type of salt in disclosures to be any type allowed in JSON (e.g. number) although the specification recommends a base64url-encoded string.\r\n\r\nAfter finishing implementing a small Java library for SD-JWT, I now feel that such flexibility does not bring much benefit and instead brings problems such as incompatibility and complexity in implementations.\r\n\r\nI think that the specification should require the type of salt be always a base64url-encoded string.",
      "createdAt": "2023-02-25T20:32:39Z",
      "updatedAt": "2023-02-28T16:38:56Z",
      "closedAt": "2023-02-28T16:38:49Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": " I tend to agree that having salt always be a string would be sufficient and more straightforward. I don't see any real benefit in allowing any type, actually. But I think @danielfett is the originator of that text so maybe he can explain the rational? If there's not a good reason (that I'm missing) to allow for the flexibility, however, I'd suggest we make salt always be a string. ",
          "createdAt": "2023-02-27T00:11:28Z",
          "updatedAt": "2023-02-27T00:11:28Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "The reason for \"any type\" is that *ideally*, nobody needs to handle this element, as it just sits there introducing randomness. Nobody needs to read it, process it, decode it, etc.. \r\n\r\nBut I tend to think from a Python world where \"any type\" is a thing. Of course, in other languages and frameworks (especially JSON libraries), this may introduce complexity and having a fixed type would be useful. And I guess there's no real downside to that. So I would be open to changing this to a string.",
          "createdAt": "2023-02-27T08:31:15Z",
          "updatedAt": "2023-02-27T08:31:15Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Totally agree with the idea that ideally, nobody needs to handle the element, as it just sits there introducing randomness and will be discarded. But there are JSON frameworks that want to be helpful by doing all sorts of data type binding. Which can be super helpful in general but can make dealing with \"any type\" somewhat cumbersome. ",
          "createdAt": "2023-02-27T13:31:33Z",
          "updatedAt": "2023-02-27T13:31:33Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR merged",
          "createdAt": "2023-02-28T16:38:56Z",
          "updatedAt": "2023-02-28T16:38:56Z"
        }
      ]
    },
    {
      "number": 219,
      "id": "I_kwDOHTmVzM5fW5Mo",
      "title": "default hash algorithm",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/219",
      "state": "CLOSED",
      "author": "TakahikoKawasaki",
      "authorAssociation": "NONE",
      "assignees": [
        "bc-pi"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "If the SD-JWT specification specifies `sha-256` as the default hash algorithm, the `_sd_alg` claim can be omitted and implementations can be a little simpler and more interoperable.",
      "createdAt": "2023-02-25T20:42:41Z",
      "updatedAt": "2023-02-28T12:59:06Z",
      "closedAt": "2023-02-28T12:59:05Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I'd suggested this somewhat in passing as part of #169. But it kinda got lost in the noise of that one. I still think it's worthwhile, however. Unless my esteemed  co-editors have strong/good objections, I'd like to make this change. ",
          "createdAt": "2023-02-27T00:03:37Z",
          "updatedAt": "2023-02-27T00:03:37Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Works for me!",
          "createdAt": "2023-02-27T08:31:49Z",
          "updatedAt": "2023-02-27T08:31:49Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Please adapt the implementation as well or assign this issue to me so that I remember to do that.\r\n\r\nI suspect that only these lines need to be adapted for verification:\r\n\r\n\r\n        if DIGEST_ALG_KEY not in self._sd_jwt_payload:\r\n            raise ValueError(\"Missing hash algorithm\")",
          "createdAt": "2023-02-27T09:56:34Z",
          "updatedAt": "2023-02-27T09:56:43Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "#222 was merged ",
          "createdAt": "2023-02-28T12:59:05Z",
          "updatedAt": "2023-02-28T12:59:05Z"
        }
      ]
    },
    {
      "number": 223,
      "id": "I_kwDOHTmVzM5ffxMx",
      "title": "Java Library for SD-JWT (com.authlete:sd-jwt)",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/223",
      "state": "CLOSED",
      "author": "TakahikoKawasaki",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "I published an open-source Java library for SD-JWT at https://github.com/authlete/sd-jwt. It would be appreciated if the library is added in the README.md file of this repository.",
      "createdAt": "2023-02-28T00:21:04Z",
      "updatedAt": "2023-03-07T19:44:44Z",
      "closedAt": "2023-03-07T19:44:43Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Thank you!! That's awesome!! will do a PR",
          "createdAt": "2023-02-28T16:39:48Z",
          "updatedAt": "2023-02-28T16:39:48Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #227 merged ",
          "createdAt": "2023-03-07T19:44:43Z",
          "updatedAt": "2023-03-07T19:44:43Z"
        }
      ]
    },
    {
      "number": 231,
      "id": "I_kwDOHTmVzM5gixs6",
      "title": "Is there a better way to format Disclosures in the examples?",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/231",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "danielfett"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "Below is how Disclosures are currently formatted in the examples. Maybe only me, but I think it might be more readable if there were indentations or bulletpoints...\r\n\r\n> **Disclosure for is_over_65:**\r\n> \r\n> WyI0RDd2N1JWTTh2THUwN0tRVUJqOF9RIiwgImlzX292ZXJfNjUiLCB0cnVlXQ\r\n> \r\n> Contents:\r\n> \r\n> [\"4D7v7RVM8vLu07KQUBj8_Q\", \"is_over_65\", true]\r\n> \r\n> SHA-256 Hash: 8Bcr2ZGImJ9FlsBNmGiLgj7XmHm-g8QOuYVSXOWoM58\r\n\r\nMaybe something like:\r\n\r\n> Claim `is_over_65`:\r\n> - Disclosure: WyI0RDd2N1JWTTh2THUwN0tRVUJqOF9RIiwgImlzX292ZXJfNjUiLCB0cnVlXQ\r\n> - Contents: [\"4D7v7RVM8vLu07KQUBj8_Q\", \"is_over_65\", true]\r\n> - SHA-256 Hash: 8Bcr2ZGImJ9FlsBNmGiLgj7XmHm-g8QOuYVSXOWoM58\r\n\r\n\r\n",
      "createdAt": "2023-03-10T23:01:11Z",
      "updatedAt": "2023-05-02T06:56:07Z",
      "closedAt": "2023-05-02T06:56:07Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I did consider that, but there were some problems regarding the length of the lines in the legacy text format. But I can give this another try.",
          "createdAt": "2023-03-13T09:22:44Z",
          "updatedAt": "2023-03-13T09:22:44Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "New attempt to fix this in #252. ",
          "createdAt": "2023-04-14T14:29:10Z",
          "updatedAt": "2023-04-14T14:29:10Z"
        }
      ]
    },
    {
      "number": 235,
      "id": "I_kwDOHTmVzM5gpPVF",
      "title": "Add more details on attacker model",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/235",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [
        "danielfett"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "Issue #87 discusses the security and privacy targets. This was fixed in PR #225, but we should add more details on the attacker model.",
      "createdAt": "2023-03-13T12:50:15Z",
      "updatedAt": "2023-05-30T22:27:20Z",
      "closedAt": "2023-05-30T22:27:20Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "PR was merged",
          "createdAt": "2023-05-30T22:27:20Z",
          "updatedAt": "2023-05-30T22:27:20Z"
        }
      ]
    },
    {
      "number": 236,
      "id": "I_kwDOHTmVzM5gpepE",
      "title": "Considering registering a media type that can be used as `typ` for SD-JWT-VC",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/236",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "`vc+sd-jwt` is being suggested per issue-comment [here](https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/232#discussion_r1133083641)\r\n\r\nrelated to issue #74 and PR #229.",
      "createdAt": "2023-03-13T13:24:43Z",
      "updatedAt": "2023-04-25T15:57:43Z",
      "closedAt": "2023-04-25T15:57:42Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm wondering/thinking that maybe this doc should define an `application/sd-jwt` media type as well as a `+sd-jwt` structured syntax suffix.\r\n\r\nhttps://www.iana.org/assignments/media-types/media-types.xhtml is Media Types \r\n\r\nhttps://www.iana.org/assignments/media-type-structured-suffix/media-type-structured-suffix.xhtml is Structured Syntax Suffixes",
          "createdAt": "2023-03-13T16:04:26Z",
          "updatedAt": "2023-04-11T18:28:23Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I wasn't there but my understanding of the outcome of discussions at IETF116 is that the sd-jwt spec should to register general +sd-jwt, and application/sd-jwt.  \r\n\r\n PR #249 attempts to do that. ",
          "createdAt": "2023-04-11T19:00:13Z",
          "updatedAt": "2023-04-12T19:48:06Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #249 merged ",
          "createdAt": "2023-04-25T15:57:42Z",
          "updatedAt": "2023-04-25T15:57:42Z"
        }
      ]
    },
    {
      "number": 237,
      "id": "I_kwDOHTmVzM5gpmlF",
      "title": "[editorial] Change a VC_JWT reference URL once it goes to FPWD",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/237",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "Sakurann"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "reminder from Orie's comment [here](https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/232/files#r1133264279)",
      "createdAt": "2023-03-13T13:44:04Z",
      "updatedAt": "2023-06-13T05:28:32Z",
      "closedAt": "2023-06-13T05:28:32Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #284. no more dependency in sd-jwt specification on w3c jwt-vc specification, so removing the reference entirely",
          "createdAt": "2023-06-13T05:28:32Z",
          "updatedAt": "2023-06-13T05:28:32Z"
        }
      ]
    },
    {
      "number": 240,
      "id": "I_kwDOHTmVzM5h6or0",
      "title": "Example 2 mismatch",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/240",
      "state": "CLOSED",
      "author": "christianpaquin",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "[Example 2b](https://drafts.oauth.net/oauth-selective-disclosure-jwt/draft-ietf-oauth-selective-disclosure-jwt.html#name-example-2b-adding-decoys) states that it was created using data from [Example 2a](https://drafts.oauth.net/oauth-selective-disclosure-jwt/draft-ietf-oauth-selective-disclosure-jwt.html#name-example-2a-handling-structu), but adding decoy values. I'd expect its `_sd` param to be a superset of example 2a's, but it's not the case. Am I missing something?",
      "createdAt": "2023-03-27T20:23:08Z",
      "updatedAt": "2023-05-30T22:28:10Z",
      "closedAt": "2023-05-30T22:28:09Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Example 2b includes different nonces than Example 2a.\r\n\r\nWe try to use deterministic random numbers to generate the examples, but in this case, due to the order in which the decoys and regular salts are created, this approach does not produce the same nonces for the same \"real\" disclosures.",
          "createdAt": "2023-03-29T02:02:56Z",
          "updatedAt": "2023-03-29T02:02:56Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "PR was merged ",
          "createdAt": "2023-05-30T22:28:09Z",
          "updatedAt": "2023-05-30T22:28:09Z"
        }
      ]
    },
    {
      "number": 241,
      "id": "I_kwDOHTmVzM5h6pTa",
      "title": "Add public keys to examples",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/241",
      "state": "CLOSED",
      "author": "christianpaquin",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "danielfett",
        "Sakurann"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "It would be useful to publish the issuer's public key used to generate the examples. This would allow implementations for validate the JWS from the spec. ",
      "createdAt": "2023-03-27T20:25:22Z",
      "updatedAt": "2023-06-20T16:36:08Z",
      "closedAt": "2023-06-20T16:36:08Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "The key pairs can be found here: https://github.com/oauth-wg/oauth-selective-disclosure-jwt/blob/master/sd_jwt/demo_settings.py\r\n\r\nHowever, there is the idea of exposing all data (keys, examples, outputs of reference implementation, etc.) in a more accessible way to allow cross-library testing. I have not worked on that yet, but it's on my list.",
          "createdAt": "2023-03-29T01:55:43Z",
          "updatedAt": "2023-03-29T01:55:43Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "We should put the keys into the spec (maybe in an appendix) as mentioned by @bc-pi on the call today.",
          "createdAt": "2023-04-17T15:29:23Z",
          "updatedAt": "2023-04-17T15:29:23Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "take the public key from settings.yml and put it in JWK format with some text saying it can be used to verify the examples ",
          "createdAt": "2023-06-02T01:50:57Z",
          "updatedAt": "2023-06-02T01:50:57Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "PR https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/296 was merged ",
          "createdAt": "2023-06-20T16:36:08Z",
          "updatedAt": "2023-06-20T16:36:08Z"
        }
      ]
    },
    {
      "number": 242,
      "id": "I_kwDOHTmVzM5h_DL7",
      "title": "use of decoys results in rejection by the holder as well as the verifier",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/242",
      "state": "CLOSED",
      "author": "panva",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "When decoys are used (_sd members not corresponding to a disclosure are added) the [Processing by the Holder](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-selective-disclosure-jwt-03#section-6.1-2.3) says to\r\n\r\n> If any of the digests cannot be found, the Holder MUST reject the SD-JWT.\r\n\r\nI imagine this is not intended and the holder should ignore missing disclosures instead?\r\n\r\nSame in [Verification by the Verifier](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-selective-disclosure-jwt-03#section-6.2-4.5.2.2.2.2.2.1)\r\n\r\n> Find the Disclosure referenced by the digests. If no such Disclosure can be found, the Verifier MUST reject the presentation.",
      "createdAt": "2023-03-28T13:09:01Z",
      "updatedAt": "2023-04-11T16:08:35Z",
      "closedAt": "2023-04-11T16:08:35Z",
      "comments": [
        {
          "author": "panva",
          "authorAssociation": "MEMBER",
          "body": "Actually the following in [Verification by the Verifier](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-selective-disclosure-jwt-03#section-6.2-4.5.2.2.2.2.2.1) doesn't make sense to me at all since the whole point is to selectively not release disclosures.\r\n\r\n> If no such Disclosure can be found, the Verifier MUST reject the presentation.",
          "createdAt": "2023-03-28T13:13:18Z",
          "updatedAt": "2023-03-28T13:13:18Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Good point/catch Filip. I think the intent was to say that if a disclosure\nis found that isn't referenced by a _sd hash value, that should be a\nrejection. But the language got turned around somewhat. I think anyway. It\nneeds to be fixed or clarified regardless though.\n\nOn Tue, Mar 28, 2023, 8:13 AM Filip Skokan ***@***.***> wrote:\n\n> Actually the following in Verification by the Verifier\n> <https://datatracker.ietf.org/doc/html/draft-ietf-oauth-selective-disclosure-jwt-03#section-6.2-4.5.2.2.2.2.2.1>\n> doesn't make sense to me at all since the whole point is to selectively not\n> release disclosures.\n>\n> If no such Disclosure can be found, the Verifier MUST reject the\n> presentation.\n>\n> \u2014\n> Reply to this email directly, view it on GitHub\n> <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/242#issuecomment-1486865620>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/ARAXIJ54F7DQGYS7DIMCCG3W6LPXTANCNFSM6AAAAAAWKRSF7U>\n> .\n> You are receiving this because you are subscribed to this thread.Message\n> ID: ***@***.***\n> com>\n>\n\n-- \n_CONFIDENTIALITY NOTICE: This email may contain confidential and privileged \nmaterial for the sole use of the intended recipient(s). Any review, use, \ndistribution or disclosure by others is strictly prohibited.\u00a0 If you have \nreceived this communication in error, please notify the sender immediately \nby e-mail and delete the message and any file attachments from your \ncomputer. Thank you._\n",
          "createdAt": "2023-03-28T20:56:43Z",
          "updatedAt": "2023-03-28T20:56:43Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "**Processing by the Holder:**\r\n> > If any of the digests cannot be found, the Holder MUST reject the SD-JWT.\r\n\r\nThis seems fine to me. In the context, \"the digests\" refers to \"the digests of the Disclosures\". If there is a Disclosure that hashes to a digest not found in any _sd array, the SD-JWT is invalid.\r\n \r\nMaybe we can clarify by modifying this to:\r\n\r\n> If there is a digest of a Disclosure that cannot be found, the Holder MUST reject the SD-JWT.\r\n\r\n**Verification by the Verifier:**\r\n\r\n> > Find the Disclosure referenced by the digests. If no such Disclosure can be found, the Verifier MUST reject the presentation.\r\n\r\nThis is wrong and should read \"If no such Disclosure can be found, the digests MUST be ignored.\"\r\n\r\nThanks for bringing this up, Filip!\r\n",
          "createdAt": "2023-03-29T01:53:22Z",
          "updatedAt": "2023-03-29T01:53:22Z"
        },
        {
          "author": "c2bo",
          "authorAssociation": "MEMBER",
          "body": "Don't we then also need something at the end of Verification by the Verifier - `5.  Process the Disclosures.  For each Disclosure provided:` that makes sure all of the provided disclosures match a digest in the payload and reject if that is not the case or am I missing something here?",
          "createdAt": "2023-03-30T11:09:38Z",
          "updatedAt": "2023-03-30T11:09:38Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "That would force the Holder to act correctly, but would it provide any benefit beyond that?",
          "createdAt": "2023-04-03T07:10:53Z",
          "updatedAt": "2023-04-03T07:10:53Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "The changes above are included in PR #245 - please review @panva @c2bo ",
          "createdAt": "2023-04-03T07:16:13Z",
          "updatedAt": "2023-04-03T07:16:13Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR merged",
          "createdAt": "2023-04-11T16:08:34Z",
          "updatedAt": "2023-04-11T16:08:34Z"
        }
      ]
    },
    {
      "number": 243,
      "id": "I_kwDOHTmVzM5iCmSU",
      "title": "Progressive multiple hop redaction / disclosure",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/243",
      "state": "CLOSED",
      "author": "OR13",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "There are use cases where an original issuer chooses not to apply holder binding, and expects a document to be progressively redacted as it is exchanged between multiple parties, for example:\r\n\r\nOriginal full disclosure -> selective disclosure 1 -> selective disclosure 2 ->  selective disclosure 3 -> ...\r\n\r\nA concrete use case is in supply chain documents exchanged relating to supplier origins.\r\n\r\nThis construction is possible in sd-jwt with no changes to the specification, but with caveats about holder binding and possibly unique privacy and security considerations. \r\n\r\nIf we can agree to some rough text here, I am happy to raise a PR.\r\n\r\n",
      "createdAt": "2023-03-29T00:29:43Z",
      "updatedAt": "2023-04-25T15:49:28Z",
      "closedAt": "2023-04-25T15:49:28Z",
      "comments": [
        {
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Rough proposed text for security / privacy considerations:\r\n\r\n### 9.x Progressive Redaction\r\n\r\nIssuers should be aware that when holder binding is not present, documents can be progressively redacted by any holder, and further redaction can be applied to an already disclosed token.\r\n\r\nFor example, a device manufacturer might produce an SD-JWT containing information about upstream and downstream supply chain contributors.\r\n\r\nEach supply chain party can verify only the disclosed claims they have received from an upstream party, and they can choose to redact claims before presenting the redacted token to a downstream party.\r\n\r\nIn some scenarios this behavior could be desirable, but if it is not, issuers are encouraged to apply holder binding.\r\n",
          "createdAt": "2023-03-29T00:53:26Z",
          "updatedAt": "2023-03-29T00:53:26Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Sounds reasonable to me.",
          "createdAt": "2023-03-29T01:42:58Z",
          "updatedAt": "2023-03-29T01:42:58Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "May I ask you to create a PR from this?",
          "createdAt": "2023-04-03T07:10:03Z",
          "updatedAt": "2023-04-03T07:10:03Z"
        }
      ]
    },
    {
      "number": 244,
      "id": "I_kwDOHTmVzM5iMX27",
      "title": "Recursive disclosures: Enforce ordering of disclosures?",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/244",
      "state": "CLOSED",
      "author": "c2bo",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "When implementing the validation of a SD-JWT, we will run into problems (or rather increased complexity) for recursive disclosures if they are not presented in order. If we take the current example for recursive disclosures:\r\n\r\n**address Disclosure:**\r\n```\r\nWyJGcDBqLTd6Q2FOVFdmX3dLNjdzeGlnIiwgImFkZHJlc3MiLCB7Il9zZCI6IFsiMXpn\r\nc3U5RmU2YmtiUVk5ekpzZlBUbzF1QlBNVmw0OG00RWFmeEpUWVN1MCIsICJES3ROX3FX\r\nX2hheVlDR0NLaWhTMzlNM3NvYnMxUlRla3hhS25NYkUxNy1RIiwgImgyRHh4RTgwQzdx\r\nUld4Q1Fqd1I5NmRhNDZqcjJCOGJMU1J3QWRiWlNSbG8iLCAidWRGV0Z4XzkxTmdDamhM\r\nVEhKQXZ2QUh3TlQydmxIQnNXeFBJT3hLMllkbyJdfV0\r\n```\r\n**address Content:**\r\n```\r\n[\"Fp0j-7zCaNTWf_wK67sxig\", \"address\", {\"_sd\":\r\n[\"1zgsu9Fe6bkbQY9zJsfPTo1uBPMVl48m4EafxJTYSu0\",\r\n\"DKtN_qW_hayYCGCKihS39M3sobs1RTekxaKnMbE17-Q\",\r\n\"h2DxxE80C7qRWxCQjwR96da46jr2B8bLSRwAdbZSRlo\",\r\n\"udFWFx_91NgCjhLTHJAvvAHwNT2vlHBsWxPIOxK2Ydo\"]}]\r\n```\r\n\r\n**street_address Disclosure:**\r\n```\r\nWyIyUzBkSXhpSE9CblVldFBKMW5GbERBIiwgInN0cmVldF9hZGRyZXNzIiwgIlNjaHVs\r\nc3RyLiAxMiJd\r\n```\r\n**street_address Content:**\r\n```\r\n[\"2S0dIxiHOBnUetPJ1nFlDA\", \"street_address\", \"Schulstr. 12\"]\r\n```\r\n**streed_address digest:**\r\n```\r\nudFWFx_91NgCjhLTHJAvvAHwNT2vlHBsWxPIOxK2Ydo\r\n```\r\n\r\nThese should imho be presented in order: The `streed_address` disclosure that is referencing a digest from the `_sd` element from the `address` disclosure should be presented only after the address disclosure is presented. This would make the implementation of validation quite a bit easier because you need to hold less internal state or avoid re-ordering the disclosures before further processing them.\r\n\r\nDoes it make sense to you to put this burden of ordering on the holder (when creating the presentation) instead of the verifier?",
      "createdAt": "2023-03-30T11:14:46Z",
      "updatedAt": "2023-04-11T16:09:07Z",
      "closedAt": "2023-04-11T16:09:07Z",
      "comments": [
        {
          "author": "redsstriker",
          "authorAssociation": "NONE",
          "body": "I am not sure about SD-JWT specification, however ICAO Doc9303 SOD and ISO mdoc both use map structure to identify the original data of hash values. ",
          "createdAt": "2023-03-30T11:52:09Z",
          "updatedAt": "2023-03-30T11:52:09Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "If the processing starts with the digest values in the _sd claim and\noperates on each of the referenced disclosures (possibly recursively), the\norder of the disclosures themselves shouldn't really matter.\n\nOn Thu, Mar 30, 2023, 6:14 AM Christian Bormann ***@***.***>\nwrote:\n\n> When implementing the validation of a SD-JWT, we will run into problems\n> (or rather increased complexity) for recursive disclosures if they are not\n> presented in order. If we take the current example for recursive\n> disclosures:\n>\n> *address Disclosure:*\n>\n> WyJGcDBqLTd6Q2FOVFdmX3dLNjdzeGlnIiwgImFkZHJlc3MiLCB7Il9zZCI6IFsiMXpn\n> c3U5RmU2YmtiUVk5ekpzZlBUbzF1QlBNVmw0OG00RWFmeEpUWVN1MCIsICJES3ROX3FX\n> X2hheVlDR0NLaWhTMzlNM3NvYnMxUlRla3hhS25NYkUxNy1RIiwgImgyRHh4RTgwQzdx\n> Uld4Q1Fqd1I5NmRhNDZqcjJCOGJMU1J3QWRiWlNSbG8iLCAidWRGV0Z4XzkxTmdDamhM\n> VEhKQXZ2QUh3TlQydmxIQnNXeFBJT3hLMllkbyJdfV0\n>\n> *address Content:*\n>\n> [\"Fp0j-7zCaNTWf_wK67sxig\", \"address\", {\"_sd\":\n> [\"1zgsu9Fe6bkbQY9zJsfPTo1uBPMVl48m4EafxJTYSu0\",\n> \"DKtN_qW_hayYCGCKihS39M3sobs1RTekxaKnMbE17-Q\",\n> \"h2DxxE80C7qRWxCQjwR96da46jr2B8bLSRwAdbZSRlo\",\n> \"udFWFx_91NgCjhLTHJAvvAHwNT2vlHBsWxPIOxK2Ydo\"]}]\n>\n> *street_address Disclosure:*\n>\n> WyIyUzBkSXhpSE9CblVldFBKMW5GbERBIiwgInN0cmVldF9hZGRyZXNzIiwgIlNjaHVs\n> c3RyLiAxMiJd\n>\n> *street_address Content:*\n>\n> [\"2S0dIxiHOBnUetPJ1nFlDA\", \"street_address\", \"Schulstr. 12\"]\n>\n> *streed_address digest:*\n>\n> udFWFx_91NgCjhLTHJAvvAHwNT2vlHBsWxPIOxK2Ydo\n>\n> These should imho be presented in order: The streed_address disclosure\n> that is referencing a digest from the _sd element from the address\n> disclosure should be presented only after the address disclosure is\n> presented. This would make the implementation of validation quite a bit\n> easier because you need to hold less internal state or avoid re-ordering\n> the disclosures before further processing them.\n>\n> Does it make sense to you to put this burden of ordering on the holder\n> (when creating the presentation) instead of the verifier?\n>\n> \u2014\n> Reply to this email directly, view it on GitHub\n> <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/244>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/ARAXIJ6BXBEEEDGRJWJTAHTW6VTLFANCNFSM6AAAAAAWNEP4U4>\n> .\n> You are receiving this because you are subscribed to this thread.Message\n> ID: ***@***.***>\n>\n\n-- \n_CONFIDENTIALITY NOTICE: This email may contain confidential and privileged \nmaterial for the sole use of the intended recipient(s). Any review, use, \ndistribution or disclosure by others is strictly prohibited.\u00a0 If you have \nreceived this communication in error, please notify the sender immediately \nby e-mail and delete the message and any file attachments from your \ncomputer. Thank you._\n",
          "createdAt": "2023-03-30T13:32:04Z",
          "updatedAt": "2023-03-30T13:32:04Z"
        },
        {
          "author": "c2bo",
          "authorAssociation": "MEMBER",
          "body": "That is the way i did an initial/experimental implementation (which also made sense in my mind), but the steps provided in the spec start with the disclosures and then process all `_sd` fields for each disclosure unless I am misunderstanding this part?\r\n\r\n```\r\n 5.  Process the Disclosures.  For each Disclosure provided:\r\n\r\n       1.  Calculate the digest over the base64url string as described\r\n           in Section 5.1.1.2.\r\n\r\n       2.  Find all _sd keys in the SD-JWT payload.  For each such key:\r\n\r\n           1.  If the key does not refer to an array, the Verifier MUST\r\n               reject the Presentation.\r\n\r\n           2.  Otherwise, process each digest in the _sd array as\r\n               follows:\r\n\r\n               1.  Find the Disclosure referenced by the digests.  If no\r\n                   such Disclosure can be found, the Verifier MUST\r\n                   reject the presentation.\r\n\r\n               2.  If the Disclosure is not a JSON-encoded array of\r\n                   three elements, the Verifier MUST reject the\r\n                   Presentation.\r\n\r\n               3.  Insert, at the level of the _sd key, a new claim\r\n                   using the claim name and claim value from the\r\n                   Disclosure.\r\n\r\n               4.  If the claim name already exists at the same level,\r\n                   the Verifier MUST reject the Presentation.\r\n\r\n               5.  If the decoded value contains an _sd key, recursively\r\n                   process the key as described before.\r\n\r\n       3.  If any digests were found more than once in the previous\r\n           step, the Verifier MUST reject the Presentation.\r\n\r\n       4.  Remove all _sd keys from the SD-JWT payload.\r\n\r\n       5.  Remove the claim _sd_alg from the SD-JWT payload.\r\n```\r\n\r\nAfter re-reading this, I guess the \"for each Disclosure provided\" part needs to be moved to part 5.1 - otherwise the removal of _sd and _sd_alg also don't work or make sense?\r\n\r\nSo basically:\r\n- calculate digests for all disclosures\r\n- walk over the jwt payload and find all _sd fields (digests)\r\n- find disclosures that match the digest (the reject part here is wrong)\r\n  -  if this contains new _sd fields walk them recursively\r\n- check that all disclosures were consumed\r\n- remove all _sd keys from payload\r\n- remove _sd_alg from payload\r\n",
          "createdAt": "2023-03-30T14:57:37Z",
          "updatedAt": "2023-03-30T14:57:37Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah, I think that basic algorithm you describe is correct and the text in\nthe draft needs to be adjusted somewhat to better reflect that.\n\nOn Thu, Mar 30, 2023, 9:57 AM Christian Bormann ***@***.***>\nwrote:\n\n> That is the way i did an initial/experimental implementation (which also\n> made sense in my mind), but the steps provided in the spec start with the\n> disclosures and then process all _sd fields for each disclosure unless I\n> am misunderstanding this part?\n>\n>  5.  Process the Disclosures.  For each Disclosure provided:\n>\n>        1.  Calculate the digest over the base64url string as described\n>            in Section 5.1.1.2.\n>\n>        2.  Find all _sd keys in the SD-JWT payload.  For each such key:\n>\n>            1.  If the key does not refer to an array, the Verifier MUST\n>                reject the Presentation.\n>\n>            2.  Otherwise, process each digest in the _sd array as\n>                follows:\n>\n>                1.  Find the Disclosure referenced by the digests.  If no\n>                    such Disclosure can be found, the Verifier MUST\n>                    reject the presentation.\n>\n>                2.  If the Disclosure is not a JSON-encoded array of\n>                    three elements, the Verifier MUST reject the\n>                    Presentation.\n>\n>                3.  Insert, at the level of the _sd key, a new claim\n>                    using the claim name and claim value from the\n>                    Disclosure.\n>\n>                4.  If the claim name already exists at the same level,\n>                    the Verifier MUST reject the Presentation.\n>\n>                5.  If the decoded value contains an _sd key, recursively\n>                    process the key as described before.\n>\n>        3.  If any digests were found more than once in the previous\n>            step, the Verifier MUST reject the Presentation.\n>\n>        4.  Remove all _sd keys from the SD-JWT payload.\n>\n>        5.  Remove the claim _sd_alg from the SD-JWT payload.\n>\n> After re-reading this, I guess the \"for each Disclosure provided\" part\n> needs to be moved to part 5.1 - otherwise the removal of _sd and _sd_alg\n> also don't work or make sense?\n>\n> So basically:\n>\n>    - calculate digests for all disclosures\n>    - walk over the jwt payload and find all _sd fields (digests)\n>    - find disclosures that match the digest (the reject part here is\n>    wrong)\n>       - if this contains new _sd fields walk them recursively\n>    - check that all disclosures were consumed\n>    - remove all _sd keys from payload\n>    - remove _sd_alg from payload\n>\n> \u2014\n> Reply to this email directly, view it on GitHub\n> <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/244#issuecomment-1490455621>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/ARAXIJY37K5ENYE77334BJLW6WNOXANCNFSM6AAAAAAWNEP4U4>\n> .\n> You are receiving this because you commented.Message ID:\n> ***@***.***>\n>\n\n-- \n_CONFIDENTIALITY NOTICE: This email may contain confidential and privileged \nmaterial for the sole use of the intended recipient(s). Any review, use, \ndistribution or disclosure by others is strictly prohibited.\u00a0 If you have \nreceived this communication in error, please notify the sender immediately \nby e-mail and delete the message and any file attachments from your \ncomputer. Thank you._\n",
          "createdAt": "2023-03-31T10:30:30Z",
          "updatedAt": "2023-03-31T10:30:30Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "The \"2. Find all _sd keys\" and everything below needs to be one level higher, then it should be correct.",
          "createdAt": "2023-03-31T14:14:13Z",
          "updatedAt": "2023-03-31T14:14:13Z"
        },
        {
          "author": "c2bo",
          "authorAssociation": "MEMBER",
          "body": "Does this make sense to you?\r\n```\r\n 5.  Process the Disclosures:\r\n\r\n       1. For each Disclosure provided:\r\n     \r\n               1.  Calculate the digest over the base64url string as described\r\n                    in Section 5.1.1.2.\r\n\r\n       2.  Find all _sd keys in the SD-JWT payload.  For each such key:\r\n       \r\n               1.  If the key does not refer to an array, the Verifier MUST\r\n                   reject the Presentation.\r\n\r\n               2.  Otherwise, process each digest in the _sd array as\r\n                   follows:\r\n\r\n                      1.  Find the Disclosure referenced by the digest. If no such\r\n                           Disclosure can be found, the digests MUST be ignored.\r\n\r\n                      2.  If the Disclosure is not a JSON-encoded array of\r\n                          three elements, the Verifier MUST reject the \r\n                          Presentation.\r\n\r\n                      3.  Insert, at the level of the _sd key, a new claim\r\n                          using the claim name and claim value from the\r\n                          Disclosure.\r\n\r\n                      4.  If the claim name already exists at the same level,\r\n                           the Verifier MUST reject the Presentation.\r\n\r\n                      5.  If the decoded value contains an _sd key, recursively\r\n                          process the key as described before.\r\n\r\n       3.   If any digests were found more than once in the previous\r\n           step, the Verifier MUST reject the Presentation.\r\n\r\n       4.  If any disclosures did not correspond to a digest in the jwt\r\n          payload, the Verifier MUST reject the Presentation.\r\n\r\n       5.  Remove all _sd keys from the SD-JWT payload.\r\n\r\n       6.  Remove the claim _sd_alg from the SD-JWT payload.\r\n```",
          "createdAt": "2023-03-31T17:06:04Z",
          "updatedAt": "2023-03-31T17:06:04Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Thanks, I'll create a PR based on this.",
          "createdAt": "2023-04-03T03:10:06Z",
          "updatedAt": "2023-04-03T03:10:06Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Created a PR for this: https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/245\r\n\r\nNot sure about the part where the verifier must reject if unknown disclosures are sent. Is there a benefit besides enforcing correctness?",
          "createdAt": "2023-04-03T03:21:08Z",
          "updatedAt": "2023-04-03T03:21:08Z"
        },
        {
          "author": "c2bo",
          "authorAssociation": "MEMBER",
          "body": "There seems to be no benefit in adding a disclosure that is not used from a holder side, so not finding the digest for a provided disclosure seems to be an indicator that something went wrong / is missing?\r\nWe can leave that part out - it just felt that this is a clear indicator that something went wrong.",
          "createdAt": "2023-04-03T07:09:15Z",
          "updatedAt": "2023-04-03T07:09:15Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I'm a bit hesitant to add such a strict clause if the underlying error (a disclosure that shouldn't be there) does not necessarily point to a security problem (it may be, but it may be innocent).",
          "createdAt": "2023-04-03T07:18:34Z",
          "updatedAt": "2023-04-03T07:18:34Z"
        },
        {
          "author": "c2bo",
          "authorAssociation": "MEMBER",
          "body": "We can leave it out or add a small remark, that it is up to the verifier how to deal with such a case.",
          "createdAt": "2023-04-03T07:19:22Z",
          "updatedAt": "2023-04-03T07:19:22Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR merged",
          "createdAt": "2023-04-11T16:09:07Z",
          "updatedAt": "2023-04-11T16:09:07Z"
        }
      ]
    },
    {
      "number": 247,
      "id": "I_kwDOHTmVzM5jHH1t",
      "title": "Create a copy of the SD-JWT payload",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/247",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "> Create a copy of the SD-JWT payload, if required for further processing.\r\n\r\nnot sure, but might be a need for a clarification of this implementation consideration.",
      "createdAt": "2023-04-11T15:59:49Z",
      "updatedAt": "2023-05-01T15:17:14Z",
      "closedAt": "2023-05-01T15:17:13Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "After reading the processing section again, I agree that we can remove this line. I'll file a PR.",
          "createdAt": "2023-04-17T13:48:14Z",
          "updatedAt": "2023-04-17T13:48:14Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I accidentally committed my changes to master instead of a new branch first. The second commit above is the proper one.",
          "createdAt": "2023-04-17T13:53:54Z",
          "updatedAt": "2023-04-17T13:53:54Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR merged",
          "createdAt": "2023-05-01T15:17:13Z",
          "updatedAt": "2023-05-01T15:17:13Z"
        }
      ]
    },
    {
      "number": 248,
      "id": "I_kwDOHTmVzM5jHPPa",
      "title": "not to do anything with the content of a Disclosure until/unless it's digest value is found ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/248",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Do we need implementation consideration \"to suggests not to do anything with the content of a Disclosure until/unless it's digest value is found in an _sd element.\" maybe it is already clear.",
      "createdAt": "2023-04-11T16:18:03Z",
      "updatedAt": "2023-05-01T15:27:49Z",
      "closedAt": "2023-05-01T15:27:49Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I think it's clear enough as it is. That was just a note in the PR about why I thought a particular verification step was in the appropriate place.  I don't think it needs an implementation consideration or anything more.   ",
          "createdAt": "2023-04-18T14:34:58Z",
          "updatedAt": "2023-04-18T14:34:58Z"
        }
      ]
    },
    {
      "number": 253,
      "id": "I_kwDOHTmVzM5jhz1y",
      "title": "make holder binding JWT first in the combined formats for presentation",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/253",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Would it make sense to change the order of strings in the combined formats for presentation, so that the holder binding JWT is first? that way it is easier to understand whether it is a combined format for presentation or issuance?",
      "createdAt": "2023-04-16T09:28:48Z",
      "updatedAt": "2023-05-30T22:27:55Z",
      "closedAt": "2023-05-30T22:27:55Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "My initial reaction here is no.  Saying which (HB first vs. last) is easier is pretty subjective. And a breaking change in the format shouldn't be undertaken without pretty compelling reason. ",
          "createdAt": "2023-04-16T15:24:15Z",
          "updatedAt": "2023-04-16T15:24:15Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "That's an idea that Torsten has been entertaining for quite a while, but I still see no compelling reason to do so. \r\n\r\nThe main purpose would be to allow some receiver to distinguish between issuance and presentation, but ...\r\n  1. ... I don't see in what situations a receiver would not already know what to expect (iss. vs. pres.).\r\n  2. ... if the receiver needs to distinguish, it can just look at the last part of the iss. or presentation to figure out what to do. The effort with the new proposal is roughly the same, and in both cases one cannot just feed the presentation or issuance to a naive JWT library.\r\n     - Processing with the current format: \"Split by ~, then if the last part is empty or contains a dot, it's a presentation; otherwise: issuance.\" \r\n     - With the proposed change: \"Split by ~, decode the first JWT and look at some header or claim telling you what to do.\" ",
          "createdAt": "2023-04-17T09:14:44Z",
          "updatedAt": "2023-04-17T09:14:44Z"
        },
        {
          "author": "TakahikoKawasaki",
          "authorAssociation": "NONE",
          "body": "My SD-JWT library (authlete/[sd-jwt](https://github.com/authlete/sd-jwt)) for Java parses a given string as @danielfett describes above.\r\n\r\n- The implementation is here -> [SDCombinedFormatParser.java](https://github.com/authlete/sd-jwt/blob/main/src/main/java/com/authlete/sd/SDCombinedFormatParser.java)\r\n- Test cases are here -> [SDCombinedFormatTest.java](https://github.com/authlete/sd-jwt/blob/main/src/test/java/com/authlete/sd/SDCombinedFormatTest.java)\r\n\r\nIf the proposed change results in requiring SD-JWT libraries to parse JWTs in order to judge whether the given string is Issuance or Presentation, the current specification is better.\r\n\r\nMy SD-JWT library intentionally avoids parsing JWTs so that the library can be used combinedly with any existing JWT library. This intention is explicitly written in the [SD-JWT section](https://github.com/authlete/sd-jwt#sd-jwt) in the README of the library. The current order can give this flexibility to developers.",
          "createdAt": "2023-05-08T01:46:34Z",
          "updatedAt": "2023-05-08T01:46:34Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I think Taka is right. even if HB-JWT will be the first in order, the receiving entity will now have to parse that JWT to check if it is sd-jwt or a hb-jwt...",
          "createdAt": "2023-05-08T02:10:13Z",
          "updatedAt": "2023-05-08T02:10:13Z"
        }
      ]
    },
    {
      "number": 254,
      "id": "I_kwDOHTmVzM5jh0RT",
      "title": "rename `combined format for presentation/issuance` terms?",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/254",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "bc-pi"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "I find myself using `combined format for presentation/issuance` to refer to the entire `series of base64url-encoded values`, which is not exactly accurate..? would it make sense to rename to something like `combined issuance/presentation values\"?",
      "createdAt": "2023-04-16T09:33:11Z",
      "updatedAt": "2023-06-20T14:37:52Z",
      "closedAt": "2023-06-20T14:37:52Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Let's talk about naming on a call soon. There does seem to be some opportunity for improvement (I'm not sure I use the terms right!). You'd also shared some notes from IETF 116 that had similar sentiment, \"suggestion to rename combined formats to SD-JWT issuance and SD-JWT presentation? Torsten feedback: many people are confused that SD-JWT means combined formats and not just a JWT.\"  ",
          "createdAt": "2023-04-16T13:54:28Z",
          "updatedAt": "2023-04-16T13:54:28Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "But the combined format for presentation *is* the series of base64url-encoded values?\r\n\r\nAnyway, I think it should be just (SD-JWT) Presentation and (SD-JWT) Issuance.\r\n\r\nI usually use the terms as follows:\r\n\r\n * SD-JWT - just the JWT (i.e., the first part of the Presentation/Issuance)\r\n * (SD-JWT) Presentation: what we currently call Combined Format for Presentation\r\n * (SD-JWT) Issuance: what we currently call Combined Format for Issuance\r\n\r\nIIRC what Torsten referred to was that the whole Combined Format (for I./P.) should be called SD-JWT. I think we should not go down that road.",
          "createdAt": "2023-04-17T09:03:07Z",
          "updatedAt": "2023-04-17T09:03:07Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I generally agree with @danielfett above but do admit to using the term SD-JWT generically to mean any or all of those three. I doubt I'm alone in that. ",
          "createdAt": "2023-04-17T17:17:04Z",
          "updatedAt": "2023-04-17T17:17:04Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "> But the combined format for presentation is the series of base64url-encoded values?\r\n\r\nit is not intuitive to be call \"values\", a \"format\"...\r\n\r\n> I generally agree with @danielfett above but do admit to using the term SD-JWT generically to mean any or all of those three. I doubt I'm alone in that.\r\n\r\nyou are not.. I generally use `SD-JWT` to mean SD-JWT with disclosures and `issuer-signed SD-JWT` to point only to JWS.\r\n\r\nI would rather not change the terms again, but I do see people struggle with using the terms \"combined formats for issuance/presentation\". maybe it should simply be something like \"SD-JWT for issuance\" and \"SD-JWT for presentation\"...",
          "createdAt": "2023-05-03T05:53:14Z",
          "updatedAt": "2023-05-03T05:53:14Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "NONE",
          "body": "I think it might not be even necessary to distinguish these two in the specification and just merge both sections together. \r\n",
          "createdAt": "2023-05-08T08:08:43Z",
          "updatedAt": "2023-05-08T08:08:43Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "NONE",
          "body": "Combined format for presentation might cover both use cases. It is also fine to see the data object that travels from the issuer to the holder as a combined format for presentation (without HB).",
          "createdAt": "2023-05-08T08:10:36Z",
          "updatedAt": "2023-05-08T08:10:36Z"
        },
        {
          "author": "TakahikoKawasaki",
          "authorAssociation": "NONE",
          "body": "One idea.\r\n\r\n| old name | new name | new short name |\r\n|:--|:--|:--|\r\n| SD-JWT | SD-JWT | |\r\n| Combined Format | SD-JWT Package | |\r\n| Combined Format for Issuance | SD-JWT Package for Issuance<br>or SD-JWT Issuance Package | SD-JWT Issuance |\r\n| Combined Format for Presentation | SD-JWT Package for Presentation<br>or SD-JWT Presentation Package | SD-JWT Presentation |",
          "createdAt": "2023-05-15T05:33:11Z",
          "updatedAt": "2023-05-15T05:33:11Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "NONE",
          "body": "Can we call it \"presentation object\" or \"presentation envelope\" or \"presentation container\", \"issuance object\" or \"issuance envelope\" or \"issuance container\". When referred to in other specs, it would be much easier to read.",
          "createdAt": "2023-05-15T12:18:37Z",
          "updatedAt": "2023-05-15T12:18:37Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Editors are leaning towards `SD-JWT Issuance format` and `SD-JWT Presentation format`. and short names will establish themselves :) ",
          "createdAt": "2023-05-31T22:47:56Z",
          "updatedAt": "2023-05-31T22:47:56Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "> I think it might not be even necessary to distinguish these two in the specification and just merge both sections together.\r\n\r\ngood point. editors are leaning towards having one section \"SD-JWT Issuance/Presentation format\" where the Issuance format is `<SD-JWT>~<Disclosure>...<Disclosure>~`, so same as Presentation format without HB JWT. ",
          "createdAt": "2023-05-31T23:09:26Z",
          "updatedAt": "2023-05-31T23:09:26Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": ">good point. editors are leaning towards having one section \"SD-JWT Issuance/Presentation format\" where the Issuance format is <SD-JWT>~<Disclosure>...<Disclosure>~, so same as Presentation format without HB JWT. \r\n\r\nI'd suggest just calling the whole structure SD-JWT then...",
          "createdAt": "2023-06-01T04:25:28Z",
          "updatedAt": "2023-06-01T04:25:28Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Let's do that.",
          "createdAt": "2023-06-01T16:44:51Z",
          "updatedAt": "2023-06-01T16:44:51Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "\"Issuer issues SD-JWT and verifier presents sd-jwt\"\r\nie no explicit term for the issuer-signed JWS\r\nneeds to PRs, adding `~` to issued SD-JWT and changing terminology.",
          "createdAt": "2023-06-02T00:58:16Z",
          "updatedAt": "2023-06-02T00:58:16Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "The terms \"Combined Format for Issuance\" and \"Combined Format for Presentation'' go away and the whole structure, issued or presented, can be called an SD-JWT. To align the two formats, the last Disclosure will always be followed by a ~ (tilde) character (currently the Combined Format for Issuance does not have the trailing tilde). When key binding is required for presentation, a key binding JWT will be appended to the end of the whole thing after the trailing tilde.",
          "createdAt": "2023-06-15T23:27:40Z",
          "updatedAt": "2023-06-15T23:27:40Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR merged",
          "createdAt": "2023-06-20T14:37:50Z",
          "updatedAt": "2023-06-20T14:37:50Z"
        }
      ]
    },
    {
      "number": 255,
      "id": "I_kwDOHTmVzM5jjEzk",
      "title": "decoy digest sections duplication",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/255",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "both sections 9.3 and 5.1.1.3 talk about decoy digests and they are overlapping in content - would be good to consolidate.",
      "createdAt": "2023-04-16T21:01:16Z",
      "updatedAt": "2023-05-01T15:19:19Z",
      "closedAt": "2023-05-01T15:19:19Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Section 5.1.1.3 explains the mechanics, 9.3 the privacy considerations. I don't see a duplication here.",
          "createdAt": "2023-04-17T08:56:57Z",
          "updatedAt": "2023-04-17T08:56:57Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Looking again at [5.1.1.3](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-04.html#section-5.1.1.3) and [9.3](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-04.html#section-9.3) - I don't see need to consolidate. ",
          "createdAt": "2023-04-17T17:01:10Z",
          "updatedAt": "2023-04-17T17:01:10Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "ok!",
          "createdAt": "2023-05-01T15:19:19Z",
          "updatedAt": "2023-05-01T15:19:19Z"
        }
      ]
    },
    {
      "number": 256,
      "id": "I_kwDOHTmVzM5jjhH4",
      "title": " A.1.: explanatory text doesn't match example content",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/256",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "The text in [A.1. ](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-04.html#appendix-A.1)[Example 2a: Handling Structured Claims](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-04.html#name-example-2a-handling-structu) doesn't line up with the example content. Looks like this https://github.com/oauth-wg/oauth-selective-disclosure-jwt/commit/a94e2d1a2c4306a45e7d4a42df482d3fa19a9972#diff-419b00ae17c9bf1fc5862b7cb23eb2c0b44423b8422ccda8fcf4df73b7cef7a6 change took the text and content out of sync.  Text like \"a structured object for the address claim, allowing for separate disclosure of the individual members of the claim\" and \"discloses only region and country of the address property\" doesn't match with the example content that has the whole address claim selectively disclosable. \r\n\r\n",
      "createdAt": "2023-04-17T01:36:15Z",
      "updatedAt": "2023-04-25T16:14:07Z",
      "closedAt": "2023-04-25T16:14:07Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I could (probably) fix this but am unsure if there was intent behind that change... ",
          "createdAt": "2023-04-17T02:50:37Z",
          "updatedAt": "2023-04-17T02:50:37Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "That was most likely accidental as I had to touch all examples for that change and probably got confused in between :-)",
          "createdAt": "2023-04-17T08:52:18Z",
          "updatedAt": "2023-04-17T08:52:18Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "merged PR #257 which is only touching examples/simple_structured.yml but should eventually get incorporated with merging of some other PRs around the examples like #252 and #251 ",
          "createdAt": "2023-04-25T16:14:06Z",
          "updatedAt": "2023-04-25T16:14:06Z"
        }
      ]
    },
    {
      "number": 259,
      "id": "I_kwDOHTmVzM5jn5xZ",
      "title": "Remove generated examples from repository and generate examples in build pipeline",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/259",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [
        "danielfett"
      ],
      "labels": [],
      "body": "",
      "createdAt": "2023-04-17T15:07:15Z",
      "updatedAt": "2023-05-24T22:57:48Z",
      "closedAt": "2023-05-24T22:57:48Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Addressed in PR #273 ",
          "createdAt": "2023-05-22T16:09:29Z",
          "updatedAt": "2023-05-22T16:09:29Z"
        }
      ]
    },
    {
      "number": 260,
      "id": "I_kwDOHTmVzM5joF9t",
      "title": "Creation of decoys",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/260",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "pending-close"
      ],
      "body": "Why `create the decoy digests by hashing over a cryptographically secure random number` (and use `the same digest function as for. the Disclosures`)? \r\n\r\nFeedback received why apply a cryptographic hash function over the output of a cryptographically secure RNG. That is a bit excessive. However, having read a bit about the topic. Since there is no cryptographically secure RNG of the operating system, it is possible to analyze the decoys to determine entropy / detect patterns, thereby undermining security. but hashing the RNG output just makes this process a lot slower. It simply adds computational overhead to any attempt to brute force it. \r\n\r\nIt seems to that the text simply \"inherited\" the security best practice from generating sensitive material like tokens. In the context of decoys the risks are perhaps not that great, but it is not like adding a SHA256 step results in any performance hit",
      "createdAt": "2023-04-17T15:29:23Z",
      "updatedAt": "2023-05-15T14:54:06Z",
      "closedAt": "2023-05-15T14:54:05Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "The application of the hash function is a simple and computationally cheap way to reduce the chances that decoys become easily distinguishable from the real digests, for example because of\r\n\r\n * bad implementation of the nonce (e.g., insufficient length or insufficient entropy), or\r\n * properties of the hash function that make the output distinguishable from nonces (although practically used hash functions probably don't have this problem).\r\n\r\nFor example, without applying the hash, if the hash function is switched from SHA256 to SHA512, the developer needs to adapt the choice of the nonce accordingly. With the proposed method, the nonce can just always be, e.g., a 128 bit integer that gets hashed to whatever the hash function defines.",
          "createdAt": "2023-04-18T08:49:45Z",
          "updatedAt": "2023-04-18T08:49:45Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "agreed with the original reporter that decoys are needed and the way they are generated currently is appropriate.",
          "createdAt": "2023-05-15T14:54:05Z",
          "updatedAt": "2023-05-15T14:54:05Z"
        }
      ]
    },
    {
      "number": 261,
      "id": "I_kwDOHTmVzM5kVv5r",
      "title": "add a note that Quantum resistant algs could be used with sd-jwt",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/261",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "danielfett"
      ],
      "labels": [
        "ready-for-PR"
      ],
      "body": "based on the feedback during the IIW session",
      "createdAt": "2023-04-25T15:41:33Z",
      "updatedAt": "2023-06-20T14:36:40Z",
      "closedAt": "2023-06-20T14:36:40Z",
      "comments": [
        {
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If these make it through, they would all work for sd-jwt.\r\n\r\n- [draft-ietf-cose-dilithium](https://datatracker.ietf.org/doc/draft-ietf-cose-dilithium/)\r\n- [draft-ietf-cose-falcon](https://datatracker.ietf.org/doc/draft-ietf-cose-falcon/)\r\n- [draft-ietf-cose-sphincs-plus](https://datatracker.ietf.org/doc/draft-ietf-cose-sphincs-plus/)\r\n\r\nI would not add a direct pointer to any of them, but perhaps a direct pointer to \"signature algorithms\" in \r\n\r\nhttps://www.iana.org/assignments/jose/jose.xhtml#web-signature-encryption-algorithms\r\n\r\nwould work.",
          "createdAt": "2023-04-28T15:31:32Z",
          "updatedAt": "2023-04-28T15:31:32Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Add something like \"... for the security of the SD-JWT depends on the security of the signature algorithm. Any of the defined JWS algorithms can be used including future PQ stuff\" to [8.1](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-04.html#section-8.1).  [Mandatory signing of the SD-JWT](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-04.html#name-mandatory-signing-of-the-sd)",
          "createdAt": "2023-06-02T01:37:18Z",
          "updatedAt": "2023-06-02T01:37:18Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR merged",
          "createdAt": "2023-06-20T14:36:40Z",
          "updatedAt": "2023-06-20T14:36:40Z"
        }
      ]
    },
    {
      "number": 264,
      "id": "I_kwDOHTmVzM5luDLZ",
      "title": "complex.yml referenced in readme is missing",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/264",
      "state": "CLOSED",
      "author": "thomasdarimont",
      "authorAssociation": "NONE",
      "assignees": [
        "danielfett"
      ],
      "labels": [],
      "body": "The example mentioned in the readme does not work since the complex.yml file is missing:\r\n```\r\nsd_jwt sd_jwt/examples/complex.yml\r\n````\r\nyields:\r\n```\r\n$ sd_jwt sd_jwt/examples/complex.yml\r\nTraceback (most recent call last):\r\n  File \"/home/tom/.local/bin/sd_jwt\", line 170, in <module>\r\n    example = load_yaml_example(_args.example)\r\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/home/tom/.local/bin/sd_jwt\", line 160, in load_yaml_example\r\n    with open(_args.example, \"r\") as f:\r\n         ^^^^^^^^^^^^^^^^^^^^^^^^\r\nFileNotFoundError: [Errno 2] No such file or directory: 'sd_jwt/examples/complex.yml'\r\n````\r\n",
      "createdAt": "2023-05-11T21:17:09Z",
      "updatedAt": "2023-05-23T17:57:57Z",
      "closedAt": "2023-05-23T17:57:57Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Gr\u00fc\u00dfe ins Saarland and thanks for catching that. The examples was renamed, we'll update the readme.",
          "createdAt": "2023-05-15T14:00:55Z",
          "updatedAt": "2023-05-15T14:00:55Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Thanks again for catching this. I'll close this issue as the code will be moved to https://github.com/danielfett/sd-jwt. The Readme will be adapted accordingly in #273.",
          "createdAt": "2023-05-23T17:57:57Z",
          "updatedAt": "2023-05-23T17:57:57Z"
        }
      ]
    },
    {
      "number": 265,
      "id": "I_kwDOHTmVzM5l15Ux",
      "title": "rename specification to SD-JWS",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/265",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "bc-pi"
      ],
      "labels": [],
      "body": "We are adding JSON serialization which is prohibited by JWT, but allowed by JWS\r\n(cc @awoie @paulbastian)",
      "createdAt": "2023-05-13T14:37:33Z",
      "updatedAt": "2023-06-02T01:22:33Z",
      "closedAt": "2023-06-02T01:22:32Z",
      "comments": [
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "I would not change the name. Even once a JSON Serialization is added, SD-JWTs are more like JWTs than JWSs. We are using a JSON payload. We are using JWT claims. We are not signing arbitrary binary data.\r\n\r\nAlso, brands matter - they matter a lot! We have a recognized brand used by other people and other specs. Let's not throw away the value of that name recognition. \r\n\r\nFinally,  SD-JWT is easier to say than SD-JWS!",
          "createdAt": "2023-05-13T15:15:11Z",
          "updatedAt": "2023-05-13T15:15:11Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "strong +1 to all of what Mike said!\r\n\r\nAlso, JWT will still be the main format in terms of how everything is presented in the spec.",
          "createdAt": "2023-05-13T15:44:43Z",
          "updatedAt": "2023-05-13T15:44:43Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "also strong +1 to **not** changing the name ",
          "createdAt": "2023-05-13T15:47:00Z",
          "updatedAt": "2023-05-13T15:47:19Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "NONE",
          "body": "I might agree with Michaels points. I didn't know yet that JWT limits JWS to json payload. I would vote to keep the name therefore to SD-JWT but consider adding the json serialization to it anyway as it allows the support for JAdES and more better possibilities for multi signature having PQC in mind",
          "createdAt": "2023-05-13T15:52:09Z",
          "updatedAt": "2023-05-13T15:52:09Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "> We are using a JSON payload. We are using JWT claims.\r\n\r\nthis is not true. we are allowing JSON-LD (which is still JSON, yes), but we are not mandating the use of JWT claims. SD-JWT does not care about the paylaod beyond _sd and _sd_alg. \r\n\r\nI do not understand \"Even when JSON Serialization is added, SD-JWTs are more like JWTs than JWSs. \"",
          "createdAt": "2023-05-13T16:16:35Z",
          "updatedAt": "2023-05-13T16:16:35Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Nothing in RFC7515 (JWS) mandates what is signed by JWS to be a JWT, I think SD-JWT should do the same.",
          "createdAt": "2023-05-13T16:21:02Z",
          "updatedAt": "2023-05-13T16:21:02Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "> Also, JWT will still be the main format in terms of how everything is presented in the spec.\r\n\r\nYes, It's same in JWS RFC, but the name is still JWS :)",
          "createdAt": "2023-05-13T16:21:27Z",
          "updatedAt": "2023-05-13T16:21:35Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I would have no problem with clarifying this in the long-form title, but keeping SD-JWT as the short form. Something like this:\r\n\r\n> SD-JWT: Selective Disclosure for JSON Web Tokens and JWS\r\n\r\nor, maybe a bit more clear:\r\n\r\n> Selective Disclosure for JSON Web Tokens (SD-JWT) and JWS",
          "createdAt": "2023-05-15T13:41:24Z",
          "updatedAt": "2023-05-15T13:46:02Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Or maybe: \r\n\r\n> Selective Disclosure for JSON Web Tokens (SD-JWT) and JWS with JSON payloads",
          "createdAt": "2023-05-15T14:13:31Z",
          "updatedAt": "2023-05-15T14:13:31Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I would actually prefer this:\r\n\r\n> SD-JWT: Selective Disclosure for JSON Web Tokens and JWS with JSON payloads",
          "createdAt": "2023-05-15T14:27:39Z",
          "updatedAt": "2023-05-15T14:27:39Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Solely for branding purposes, I think it should stay as \"SD-JWT\" for short name.\r\nas long as editors agree \"it is more general than JWT, specialized form of JWS\", and that is reflected, I am satisfied.",
          "createdAt": "2023-05-15T14:29:02Z",
          "updatedAt": "2023-05-15T14:29:02Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> I would actually prefer this:\r\n>\r\n> >    SD-JWT: Selective Disclosure for JSON Web Tokens and JWS with JSON payloads\r\n\r\n\r\nProbably shouldn't mix long (JSON Web Tokens) and short (JWS) in the title so maybe: \r\n\r\n> SD-JWT: Selective Disclosure for JWT and JWS with JSON payloads\r\n\r\n",
          "createdAt": "2023-05-24T20:30:05Z",
          "updatedAt": "2023-05-24T20:30:05Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #276 updates the title to be more inclusive of general JWS with JSON and added some corresponding/explanatory text to the Abstract and Introduction. I'm not convinced this is the right thing to do or that PR is the right way to do it. But it's there as something concrete to discuss. ",
          "createdAt": "2023-05-25T22:42:13Z",
          "updatedAt": "2023-05-25T22:42:13Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #276 merged",
          "createdAt": "2023-06-02T01:22:32Z",
          "updatedAt": "2023-06-02T01:22:32Z"
        }
      ]
    },
    {
      "number": 266,
      "id": "I_kwDOHTmVzM5l6jJO",
      "title": "Where is _sd_alg allowed?",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/266",
      "state": "CLOSED",
      "author": "yaronf",
      "authorAssociation": "NONE",
      "assignees": [
        "danielfett"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "Now that `_sd` is allowed at multiple locations in the JSON document, including recursively, I would expect Sec. 5.1.2 to define explicitly where the `_sd_alg` claim should appear. Once at the top of the document? Can it also appear alongside `_sd` claims located deeper in the document?\r\n\r\nAlso, please change the section heading from \"hash function\" to \"hash algorithm\", for consistency.",
      "createdAt": "2023-05-15T10:59:44Z",
      "updatedAt": "2023-06-14T07:28:55Z",
      "closedAt": "2023-06-14T07:28:55Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Thank you! The intention is that there is only one `_sd_alg` at the top level. We will clarify.",
          "createdAt": "2023-05-15T13:34:51Z",
          "updatedAt": "2023-05-15T13:34:51Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Concur with @danielfett ",
          "createdAt": "2023-05-15T13:49:28Z",
          "updatedAt": "2023-05-15T13:49:28Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "+1\r\n",
          "createdAt": "2023-05-15T14:10:51Z",
          "updatedAt": "2023-05-15T14:10:51Z"
        }
      ]
    },
    {
      "number": 267,
      "id": "I_kwDOHTmVzM5l6rwj",
      "title": "Explicit typing",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/267",
      "state": "CLOSED",
      "author": "yaronf",
      "authorAssociation": "NONE",
      "assignees": [
        "bc-pi"
      ],
      "labels": [],
      "body": "Whether this format is JWT or JWT-like, the considerations in the [JWT BCP](https://www.rfc-editor.org/rfc/rfc8725.html#name-use-explicit-typing) still apply. Please consider adding a `typ` claim.\r\n\r\ncc @selfissued ",
      "createdAt": "2023-05-15T11:21:07Z",
      "updatedAt": "2023-05-24T13:31:49Z",
      "closedAt": "2023-05-24T13:31:49Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Explicit typing via the `typ` header can and should be done by specific applications or types of SD-JWT. But this SD-JWT draft is defining the general JWT-like construct and explicit typing of the generic thing isn't particularly useful or meaningful. ",
          "createdAt": "2023-05-15T14:00:46Z",
          "updatedAt": "2023-05-15T14:00:46Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "The The next draft will have a media type and structured suffix that can help with specific applications or types of SD-JWT doing explicit typing FWIW https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/249 ",
          "createdAt": "2023-05-15T14:03:29Z",
          "updatedAt": "2023-05-15T14:03:29Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I would be open to adding one sentence in the draft saying \"applications of SD-JWT SHOULD be explicitly typed\".\r\nI agree there cannot be only one type for all SD-JWTs.",
          "createdAt": "2023-05-15T14:10:17Z",
          "updatedAt": "2023-05-15T14:10:17Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm not quite sure where to add that one sentence. And a bit more context might be needed with it. I'll see what I can figure out. Maybe a small section like 3.11 in rfc8725. But (helpful) suggestions/ideas would be welcome in the meantime. ",
          "createdAt": "2023-05-15T21:26:13Z",
          "updatedAt": "2023-05-15T21:26:13Z"
        },
        {
          "author": "yaronf",
          "authorAssociation": "NONE",
          "body": "* Add this sentence at the end of 5.1: The `typ` header parameter is RECOMMENDED, see Sec. 5.1.4 for more details.\r\n\r\n* And as a new Sec. 5.1.4, \"Explicit Typing\":\r\n\r\nA commonly seen attack is for one kind of JWT to be confused for another. Both regular JWTs as well as SD-JWTs are vulnerable to confusion attacks. To prevent these attacks, it is RECOMMENDED to specify an explicit type by including the `typ` header parameter when the token is issued, and for Verifiers to check this value. The relevant token's content type can be used, e.g. `credential-claims-set+json`, but often a more application-specific value is preferred. See Sec. 3.11 of RFC 8725 for more details.",
          "createdAt": "2023-05-16T10:25:22Z",
          "updatedAt": "2023-05-16T10:25:22Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @yaronf, I took some inspiration from you words in creating PR #275. ",
          "createdAt": "2023-05-24T03:31:28Z",
          "updatedAt": "2023-05-24T03:31:28Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "merged PR #275 to close this one ",
          "createdAt": "2023-05-24T13:31:48Z",
          "updatedAt": "2023-05-24T13:31:48Z"
        }
      ]
    },
    {
      "number": 268,
      "id": "I_kwDOHTmVzM5l6wir",
      "title": "Verifying the claim value",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/268",
      "state": "CLOSED",
      "author": "yaronf",
      "authorAssociation": "NONE",
      "assignees": [
        "danielfett"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "In the section [Verification by the Verifier](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-04.html#name-verification-by-the-verifie), we should require that the Verifier should check that each claim's value is valid JSON. This should probably be after step 4.3.2.2. If weird claim values are accepted, e.g. `[\"bla\",` (no closing bracket) we'd be open to interesting injection attacks.",
      "createdAt": "2023-05-15T11:31:41Z",
      "updatedAt": "2023-06-14T17:24:19Z",
      "closedAt": "2023-06-14T17:24:18Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Maybe we need to clarify, but step 4.3.2.2. is intended to capture this already:\r\n\r\n> If the Disclosure is not a JSON-encoded array of three elements, the Verifier MUST reject the Presentation.\r\n\r\nWe may want to change this to\r\n\r\n> If the Disclosure is not valid JSON or is not a JSON-encoded array of three elements, the Verifier MUST reject the Presentation.\r\n",
          "createdAt": "2023-05-15T13:37:39Z",
          "updatedAt": "2023-05-15T13:37:39Z"
        },
        {
          "author": "yaronf",
          "authorAssociation": "NONE",
          "body": "Sorry if I wasn't clear. Here's an example:\r\n```\r\n[\"F3s1PCF9KwzIDiKJj6kzJQ\", \"names\", \"[\\\"john\\\", \\\"jill\\\"]\"]\r\n```\r\nis a valid disclosure with a valid claim value (an array with 2 string elements which resolves to `[\"john\", \"jill\"]`), but\r\n```\r\n[\"F3s1PCF9KwzIDiKJj6kzJQ\", \"names\", \"[\\\"john\\\", \\\"jill\\\"\"]\r\n```\r\nhas an invalid claim value because there's no closing bracket.\r\n\r\nIn other words, we need to validate the disclosure but also the claim value inside it.",
          "createdAt": "2023-05-15T16:20:39Z",
          "updatedAt": "2023-05-15T16:21:53Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "From the point of SD-JWT, the claim value that is disclosed in your example is a string with the content `[\\\"john\\\", \\\"jill\\\"]` (or `[\\\"john\\\", \\\"jill\\\"` in the second example). The contents of the string may or may not be JSON, and it most cases it will not be JSON. SD-JWT does not make any assumptions on the contents.\r\n\r\nSo from the point of SD-JWT, both your examples are perfectly fine claims with the name `name` and a string value that just happens to look like JSON.\r\n\r\nI would however expect that a claim called `names` would use a JSON array instead (see [this example](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-04.html#appendix-A.3-55) in the spec):\r\n\r\n    [\"F3s1PCF9KwzIDiKJj6kzJQ\", \"names\", [\"john\", \"jill\"]]\r\n\r\nThis would be covered by the current wording (and more clearly by the proposed new wording).",
          "createdAt": "2023-05-15T16:39:51Z",
          "updatedAt": "2023-05-15T16:39:51Z"
        },
        {
          "author": "yaronf",
          "authorAssociation": "NONE",
          "body": "You are totally right, sorry. It would be nice if there were some examples with claims that are integers or booleans, to demonstrate this point.",
          "createdAt": "2023-05-15T16:46:33Z",
          "updatedAt": "2023-05-15T16:46:33Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #292 merged",
          "createdAt": "2023-06-14T17:24:18Z",
          "updatedAt": "2023-06-14T17:24:18Z"
        }
      ]
    },
    {
      "number": 269,
      "id": "I_kwDOHTmVzM5l6yfu",
      "title": "Typo in 8.2?",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/269",
      "state": "CLOSED",
      "author": "yaronf",
      "authorAssociation": "NONE",
      "assignees": [
        "bc-pi"
      ],
      "labels": [],
      "body": "I think the first paragraph mixes Issuer with Verifier.\r\n\r\nOld:\r\n> Holders can manipulate the Disclosures by changing the values of the claims before sending them to the Issuer. The Issuer MUST check the Disclosures to ensure that the values of the claims are correct, i.e., the digests of the Disclosures are actually present in the signed SD-JWT.\r\n\r\nNew:\r\n> Holders can manipulate the Disclosures by changing the values of the claims before sending them to the Verifier. The Verifier MUST check the Disclosures to ensure that the values of the claims are correct, i.e., the digests of the Disclosures are actually present in the signed SD-JWT.",
      "createdAt": "2023-05-15T11:36:44Z",
      "updatedAt": "2023-05-22T09:09:13Z",
      "closedAt": "2023-05-22T09:09:13Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for catching that. We'll fix. ",
          "createdAt": "2023-05-15T13:50:30Z",
          "updatedAt": "2023-05-15T13:50:30Z"
        }
      ]
    },
    {
      "number": 271,
      "id": "I_kwDOHTmVzM5mMWEv",
      "title": "Terms \"Holder-Selected Disclosures\" and \"Issuer-Issued D.\"",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/271",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "We're using the above terms only in this figure: https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-04.html#section-3\r\n\r\nThe terms are not wrong, but we should lower-case them as they're not defined terms any longer.",
      "createdAt": "2023-05-17T19:11:01Z",
      "updatedAt": "2023-05-31T00:36:13Z",
      "closedAt": "2023-05-31T00:36:13Z",
      "comments": []
    },
    {
      "number": 272,
      "id": "I_kwDOHTmVzM5mVb-6",
      "title": "SD-JWT VC example ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/272",
      "state": "CLOSED",
      "author": "tlodderstedt",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "Sakurann"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "I suggest to align the example https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-04.html#name-example-4a-w3c-verifiable-c with the design specified in https://github.com/vcstuff/draft-terbu-sd-jwt-vc. The obvious difference is the use (or omission) of \u2019credentialSubject\u2018.",
      "createdAt": "2023-05-19T09:00:26Z",
      "updatedAt": "2023-06-22T16:18:44Z",
      "closedAt": "2023-06-22T16:11:33Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR merged",
          "createdAt": "2023-06-22T16:11:33Z",
          "updatedAt": "2023-06-22T16:11:33Z"
        }
      ]
    },
    {
      "number": 274,
      "id": "I_kwDOHTmVzM5mnJbq",
      "title": "Introduce proper term for payload (before turning it into a JWT)",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/274",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [
        "Sakurann"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "There is currently no good name for the claims before they are packaged into the SD-JWT. \"Payload\" can refer to the payload of the SD-JWT, which may not contain all user claims. ",
      "createdAt": "2023-05-23T08:41:48Z",
      "updatedAt": "2023-06-28T18:17:55Z",
      "closedAt": "2023-06-28T18:17:54Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm not sure what the term should be but I'd agree that text like what we've got now, \"object as the set of claims that the Issuer is issuing\" [from sec 5](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-04.html#section-5.2-1) isn't easy to say or particularly meaningful out of context :) \r\n",
          "createdAt": "2023-05-24T14:07:54Z",
          "updatedAt": "2023-05-24T19:24:35Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "We use \"the set of claims that the Issuer is issuing\" when explaining in the Examples section what is in the payload. I kind of like it?",
          "createdAt": "2023-05-31T22:40:39Z",
          "updatedAt": "2023-05-31T22:40:39Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "\"input claim set\" seems to be directionality correct ",
          "createdAt": "2023-06-02T01:12:04Z",
          "updatedAt": "2023-06-02T01:12:04Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR merged",
          "createdAt": "2023-06-28T18:17:54Z",
          "updatedAt": "2023-06-28T18:17:54Z"
        }
      ]
    },
    {
      "number": 277,
      "id": "I_kwDOHTmVzM5nBc-O",
      "title": "Presented form of an SD-JWT using holder binding doesn't prove integrity of disclosures back to holder",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/277",
      "state": "CLOSED",
      "author": "tplooker",
      "authorAssociation": "NONE",
      "assignees": [
        "danielfett",
        "bc-pi"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "From what I can understand an SD-JWT that is presented by a holder using holder binding doesn't prove integrity of the disclosures to the holder, only instead back to the issuer. This means a party in the middle could remove values that were intended to be presented from a presented form SD-JWT without a verifier being able to detect it, similarly a party that knows the claim values and salts could inject other disclosure values beyond what the holder intended to present (e.g an issuer). \r\n\r\nIn general I believe the presented form of an SD-JWT should provide holder integrity over the disclosures when holder binding is in use.",
      "createdAt": "2023-05-27T03:35:28Z",
      "updatedAt": "2023-06-23T19:22:01Z",
      "closedAt": "2023-06-23T19:22:00Z",
      "comments": [
        {
          "author": "tplooker",
          "authorAssociation": "NONE",
          "body": "As a proposed solution to this that doesn't really effect the existing structure, I would suggest adding in a claim to the holder binding JWT that includes an array of the digests being revealed in the overall presentation and add language that requires processing of and validation of this claim by a verifier.",
          "createdAt": "2023-05-27T04:41:28Z",
          "updatedAt": "2023-05-27T04:41:28Z"
        },
        {
          "author": "tplooker",
          "authorAssociation": "NONE",
          "body": "For example the HB JWT would look like\r\n\r\n```\r\n{\r\n  \"nonce\": \"XZOUco1u_gEPknxS78sWWg\",\r\n  \"aud\": \"https://example.com/verifier\",\r\n  \"iat\": 1677838084,\r\n  \"_sd\": [\r\n    \"5nXy0Z3QiEba1V1lJzeKhAOGQXFlKLIWCLlhf_O-cmo\",\r\n    \"9gZhHAhV7LZnOFZq_q7Fh8rzdqrrNM-hRWsVOlW3nuw\",\r\n    \"S-JPBSkvqliFv1__thuXt3IzX5B_ZXm4W2qs4BoNFrA\",\r\n    \"bviw7pWAkbzI078ZNVa_eMZvk0tdPa5w2o9R3Zycjo4\",\r\n    \"o-LBCDrFF6tC9ew1vAlUmw6Y30CHZF5jOUFhpx5mogI\",\r\n    \"pzkHIM9sv7oZH6YKDsRqNgFGLpEKIj3c5G6UKaTsAjQ\",\r\n    \"rnAzCT6DTy4TsX9QCDv2wwAE4Ze20uRigtVNQkA52X0\"\r\n   ]\r\n}\r\n```\r\n\r\nWhere the digests in the `_sd` array match the disclosures presented.",
          "createdAt": "2023-05-27T04:43:41Z",
          "updatedAt": "2023-05-27T04:44:15Z"
        },
        {
          "author": "tplooker",
          "authorAssociation": "NONE",
          "body": "Another possible solution is to just include a hash of everything that precedes the HB JWT, this would be simpler to verify and also more terse in overall payload length.",
          "createdAt": "2023-05-27T04:48:38Z",
          "updatedAt": "2023-05-27T04:48:38Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "NONE",
          "body": "That's great Tobias. I think it's easier to include `Hash (SD-JWT~disclosure 1~disclosure 2~)` because this is what the holder has to build anyway?\nThe verifier would strip of the HB-JWT, hash the rest and check if it matches the new claim in the HB-JWT",
          "createdAt": "2023-05-27T07:20:30Z",
          "updatedAt": "2023-05-27T07:22:07Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "It took me some work to convince @danielfett that the holder signing the disclosures wasn't needed. So I must admit that I wasn't exactly exited to see this issue and reopen the discussion. He's \"the security guy\" though so I'll defer to his judgement here. But I remain unconvinced that it is needed. The integrity of the disclosures as issued by the issuer is the important thing. The integrity of the number of disclosures sent by the holder over what really should be a secure channel anyway just doesn't seem like a concern to me.  Maybe I'm not paranoid enough...\r\n\r\nIf we do add something for this, I prefer the approach of one hash in the HB-JWT that is calculated over the whole presentation up to but not including the HB-JWT. That kind of thing does introduce one more opportunity for interop problems, however, and ones that can be difficult to debug in practice. \r\n\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2023-05-27T21:52:59Z",
          "updatedAt": "2023-05-28T19:43:23Z"
        },
        {
          "author": "tplooker",
          "authorAssociation": "NONE",
          "body": "I agree that integrity of the disclosures back to the issuer is the most important, however I do think holder integrity is also required otherwise it leaves presentations free to a form of unintuitive manipulation that I can see having downstream consequences such as a verifier stripping information from a presentation and saying \"i wasnt presented that claim\", or a man in the middle dropping information from a presentation. Really what a lack of holder integrity does here in general is introduce ambiguity, e.g did the verifier strip claims from a presentation, did the holder never reveal them or did someone in the middle drop them. I understand that we want to be careful about managing implementation complexity to avoid interoperability issues, but I do think the single hash over everything that precedes the HB-JWT is relatively easy to perform. ",
          "createdAt": "2023-05-27T23:38:08Z",
          "updatedAt": "2023-05-29T03:15:02Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "We just discussed this among the editors. We see the following problems with signing over the disclosures or their digests:\r\n\r\n- When holder binding is not used, this method of proving integrity of the disclosure set is not possible.\r\n- For the JSON Serialization, we would need to define a different way to do it. There is no obvious way how to sign over the JSON-serialized SD-JWT in that case.\r\n\r\nMeanwhile, we think there are good reasons not do this:\r\n\r\n- The specification promises integrity of the data, but does not guarantee to the verifier that a holder wanted to release this exact dataset even in presence of an adversary. We should call this out more expicitly and will create a PR for this.\r\n- In the presence of such a powerful adversary, it seems plausible that the protection can be circumvented or stronger attacks can be mounted; e.g., by manipulating the request to the holder as well.\r\n- For these reasons, integrity and non-repudiation of the message, if needed, must be provided by the transport protocol (in the most simple form by TLS to protect integrity, but things like JARM can provide a second layer for integrity and provide non-repudiation).\r\n-  Hashing can be hard to debug and adds another complexity for developers.\r\n\r\n",
          "createdAt": "2023-05-30T22:19:10Z",
          "updatedAt": "2023-05-30T22:19:10Z"
        },
        {
          "author": "tplooker",
          "authorAssociation": "NONE",
          "body": "Appreciate the context but I'm not sure I agree with the conclusions here\r\n\r\n> When holder binding is not used, this method of proving integrity of the disclosure set is not possible.\r\n\r\nThis is true but I dont think this a reason not to do this, following this logic one would not define a HB-JWT in the first place because SD-JWTs without it dont have replay attack detection capability.\r\n\r\n> For the JSON Serialization, we would need to define a different way to do it. There is no obvious way how to sign over the JSON-serialized SD-JWT in that case.\r\n\r\nUnderstand there is complexity here and a solution would need to exist for consistency reasons one such that I believe would work is [the solution I proposed above](https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/277#issuecomment-1565205222) which is slightly more complex then validating a single hash, but very much the kind of expected behaviour already going on with SD-JWT when it comes to validating disclosures.\r\n\r\n> The specification promises integrity of the data, but does not guarantee to the verifier that a holder wanted to release this exact dataset even in presence of an adversary. We should call this out more expicitly and will create a PR for this.\r\n\r\nIm not sure what the presences of an adversary here has to do with it, this is about having no ambiguity around what was sent and that once that presentation is prepared it cant be modified in anyway without it being cryptographically invalid.\r\n\r\n> In the presence of such a powerful adversary, it seems plausible that the protection can be circumvented or stronger attacks can be mounted; e.g., by manipulating the request to the holder as well.\r\n\r\nI think this is kind of a seperate issue, if the holder was tricked into revealing more information then intended that doesn't negate the need for wanting integrity around what was presented, in fact ironically it perhaps underscores the importance of having such an integrity check in the first place.\r\n\r\n> For these reasons, integrity and non-repudiation of the message, if needed, must be provided by the transport protocol (in the most simple form by TLS to protect integrity, but things like JARM can provide a second layer for integrity and provide non-repudiation).\r\n\r\nThis is certainly possible but part of the point I was trying to make is it splits where the integrity in a presented SD-JWT comes from, e.g most of it is from the signatures, the rest from the transport and that can make it awkward to evaluate from a security perspective. \r\n\r\n> Hashing can be hard to debug and adds another complexity for developers.\r\n\r\nI mean considering how much hashing is used as a primitive in this spec I really do find it a bit hard to believe this check is where implementations will struggle. I agree it adds another check though which is additional implementation work, but I think the cost is worth it. \r\n\r\nAs a compromise perhaps it could be added as an optional check in the sort of same way the at_hash is optional in OpenID Connect (for different reasons entirely of course).",
          "createdAt": "2023-05-31T10:27:25Z",
          "updatedAt": "2023-05-31T10:28:05Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "#305 was merged. It adds some security considerations text about what the Key Binding JWT does and does not cover. And some suggestions about what can be done in situations that need more. ",
          "createdAt": "2023-06-23T19:22:00Z",
          "updatedAt": "2023-06-23T19:22:00Z"
        }
      ]
    },
    {
      "number": 278,
      "id": "I_kwDOHTmVzM5nNa7D",
      "title": "Guidance on what to do when encountering an invalid _sd value",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/278",
      "state": "CLOSED",
      "author": "tplooker",
      "authorAssociation": "NONE",
      "assignees": [
        "danielfett"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "Its clear from the draft the expected format of the `_sd` member in an SD-JWT, however the processing behaviour for verifying parties when this is incorrect is unclear, e.g should a verifier error, or ignore in the following cases.\r\n\r\n1. Where the value of an `_sd` claim is not an array, instead some other permitted JSON type.\r\n2. Where the value of an `_sd` claim is an array, but polymorphic e.g containing elements that are not strings as expected.\r\n\r\nI would assume a verifier should fail in either case?",
      "createdAt": "2023-05-30T06:13:28Z",
      "updatedAt": "2023-06-14T16:59:31Z",
      "closedAt": "2023-06-14T16:59:31Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I think 1 is covered by this:\r\n\r\n> Find all _sd keys in the SD-JWT payload. For each such key perform the following steps (*): \r\n>   * If the key does not refer to an array, the Verifier MUST reject the Presentation.\r\n\r\n2 is not explicitly covered yet, but should be.",
          "createdAt": "2023-05-30T11:25:09Z",
          "updatedAt": "2023-05-30T11:25:09Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "this will be done with PR #283",
          "createdAt": "2023-06-02T01:41:55Z",
          "updatedAt": "2023-06-02T01:41:55Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR merged.",
          "createdAt": "2023-06-14T16:59:31Z",
          "updatedAt": "2023-06-14T16:59:31Z"
        }
      ]
    },
    {
      "number": 279,
      "id": "I_kwDOHTmVzM5nNc8D",
      "title": "Suggested efficiency update to the verification procedure",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/279",
      "state": "CLOSED",
      "author": "tplooker",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Currently [section 6.2](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-04.html#section-6.2) implies that you validate the disclosure is a JSON array of three elements after you have matched it to a digest in the JWT, this would appear less efficient then validating all disclosures prior to checking for matches and substituting values.",
      "createdAt": "2023-05-30T06:17:34Z",
      "updatedAt": "2023-05-30T20:08:50Z",
      "closedAt": "2023-05-30T20:08:50Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "We should keep that as it currently is for the following reasons:\r\n\r\n- First matching it in the SD-JWT makes it harder or near impossible to exploit JSON parsing bugs at least for the disclosures, and\r\n- (more importantly) as we will [introduce arrays](https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/194) which most likely will use two instead of three elements in the disclosure, it is important to know what to expect first before verifying the disclosure.",
          "createdAt": "2023-05-30T11:23:34Z",
          "updatedAt": "2023-05-30T11:23:34Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Only looking at disclosures for which there is a digest in the JWT also helps reduce the likelihood that an implementation will mistakenly use the content of maliciously inserted disclosures. ",
          "createdAt": "2023-05-30T15:35:58Z",
          "updatedAt": "2023-05-30T15:36:29Z"
        },
        {
          "author": "tplooker",
          "authorAssociation": "NONE",
          "body": "Understood, thinking about it again in that light makes sense from a security perspective in effect you are proving issuer integrity over the payload before even attempting to parse the payload as JSON, which is consistent with how vanilla JWT processing works",
          "createdAt": "2023-05-30T20:08:50Z",
          "updatedAt": "2023-05-30T20:08:50Z"
        }
      ]
    },
    {
      "number": 280,
      "id": "I_kwDOHTmVzM5nNd47",
      "title": "Guidance on what to do when a disclosure presented does not match to a digest element in JWT",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/280",
      "state": "CLOSED",
      "author": "tplooker",
      "authorAssociation": "NONE",
      "assignees": [
        "danielfett",
        "Sakurann"
      ],
      "labels": [],
      "body": "There is language in the specification which defines behaviour (to error) when encountering duplicate usages of a single disclosure, but I couldn't find any guidance on what to do if a supplied disclosure does not match to any digest in the JWT.\r\n\r\nSuggested behaviour here would be to error, but is that too strict?",
      "createdAt": "2023-05-30T06:19:38Z",
      "updatedAt": "2023-06-20T15:51:09Z",
      "closedAt": "2023-06-20T15:51:01Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "For the holder, the [current text](https://drafts.oauth.net/oauth-selective-disclosure-jwt/draft-ietf-oauth-selective-disclosure-jwt.html#section-6.1) specifies:\r\n\r\n> If there is a Disclosure with a digest that cannot be found in any _sd array, the SD-JWT is invalid and the Holder MUST reject the SD-JWT.\r\n\r\nFor the Verifier, we say\r\n\r\n> Verifiers MUST ensure that (...) the SD-JWT is valid, i.e., it is signed by the Issuer and the signature is valid, all Disclosures are correct, i.e., their digests are referenced in the SD-JWT or in other Disclosures referenced in the SD-JWT (...)\r\n\r\nThis is however not currently reflected in the Algorithm provided in Section 6.2. We might want to add that after this step:\r\n\r\n> If any digests were found more than once in the previous step, the Verifier MUST reject the Presentation.",
          "createdAt": "2023-05-30T11:20:03Z",
          "updatedAt": "2023-05-30T11:20:03Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "See also Issue #244 where we concluded the we don't need such a check. In any case we need to resolve the disconnect between the requirements on the Verifier and the actual algorithm as shown in my previous comment.",
          "createdAt": "2023-05-30T22:35:34Z",
          "updatedAt": "2023-05-30T22:35:34Z"
        },
        {
          "author": "tplooker",
          "authorAssociation": "NONE",
          "body": "Understood, it would appear the consensus is not to be so strict then? E.g a verifier processing an SD-JWT that contains a digest that is un-used should just ignore it?",
          "createdAt": "2023-05-31T09:55:39Z",
          "updatedAt": "2023-05-31T09:55:39Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> E.g a verifier processing an SD-JWT that contains a digest that is un-used should just ignore it?\r\n\r\nYes, digests that are unused have to be ignored. The whole selective disclosure mechanism relies on that - any decoy digest or Disclosure that the holder doesn't release will have a digest in the SD-JWT payload or referenced disclosures that is unused (meaning that it doesn't reference a Disclosure that exists from the verifiers perspective).\r\n\r\nI think this comment thread was mostly about how to treat unreferenced Disclosures though. Current text has the holder reject.  For the verifier it's maybe a bit ambiguous now with the text Daniel quoted above while no mention in the actual verification algorithm steps. #244 did result in thinking it was not needed. But I think it'd be good to treat unreferenced Disclosures the same for both Holder and Verifier as it might make code paths for general checking the whole SD-JWT more reusable.  And honestly either reject or ignore would seem okay. \r\n\r\n",
          "createdAt": "2023-06-01T04:20:46Z",
          "updatedAt": "2023-06-01T04:20:46Z"
        },
        {
          "author": "tplooker",
          "authorAssociation": "NONE",
          "body": "Right yes sorry I should have been clearer in my latest comment that I was actually meaning to talk about unreferenced disclosures. I agree it should be the same for both issued and presented forms of SD-JWTs too. What I would add though is I dont really see much of a downside in doing this check given it might reduce some risk. For example implementations already need to track during the substitution phase that a disclosure isn't substitute twice right? So it wouldn't be that complex to just say for all the disclosures substituted make sure it matches the set you started with.",
          "createdAt": "2023-06-02T00:09:02Z",
          "updatedAt": "2023-06-02T00:11:57Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussion offline and plan is to better align/combine the verification steps and then have additional steps as need for holder and verifier. ",
          "createdAt": "2023-06-02T01:02:50Z",
          "updatedAt": "2023-06-02T01:02:50Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": " #294 has been merged so now the relevant verification steps are consolidated for holders and verifiers  ",
          "createdAt": "2023-06-20T15:51:00Z",
          "updatedAt": "2023-06-20T15:51:09Z"
        }
      ]
    },
    {
      "number": 281,
      "id": "I_kwDOHTmVzM5nTRnc",
      "title": "A better name for HB-JWT is KB-JWT",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/281",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [
        "bc-pi"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "In some use cases of SD-JWT, the key for what we currently call Holder Binding may not be bound to a holder (but, for example, to a device). We should therefore consider renaming Holder Binding to Key Binding.",
      "createdAt": "2023-05-30T22:27:48Z",
      "updatedAt": "2023-06-13T14:04:15Z",
      "closedAt": "2023-06-13T14:04:15Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "PRs have been merged",
          "createdAt": "2023-06-13T14:04:15Z",
          "updatedAt": "2023-06-13T14:04:15Z"
        }
      ]
    },
    {
      "number": 290,
      "id": "I_kwDOHTmVzM5okwrD",
      "title": "Improve Structure, especially around Example 1",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/290",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [
        "danielfett"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "_Originally posted by @Sakurann in https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/283#discussion_r1227387227_\r\n\r\n>               I don't disagree this section probably belongs here in terms of the order, but the level of this section feels off (looked at [the rendered ver of this branch](https://drafts.oauth.net/oauth-selective-disclosure-jwt/danielfett/arrays/draft-ietf-oauth-selective-disclosure-jwt.html#name-format-of-an-sd-jwt)).\r\n> \r\n> I think there is a logical separations between sections from 5.1 to 5.5 (basic operations) and from sections 5.6 to 5.7 (advanced concepts) from 5.8 to 5.9 (content of the SD-JWT) and 5.10 to 5.11 (combined formats). and having them all at the same level makes it hard to read..\r\n\r\nI agree. There will be other changes coming to the presentation/issuance format sections and a new section for the JWS JSON Serialization. After these changes, we should revisit the current structure and modify as needed.\r\n            ",
      "createdAt": "2023-06-13T09:38:35Z",
      "updatedAt": "2023-10-23T15:55:50Z",
      "closedAt": "2023-10-23T15:55:50Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "We should also consider moving the \"enveloping\" section into an appendix or downgrading it otherwise. Let's discuss.",
          "createdAt": "2023-06-15T12:12:00Z",
          "updatedAt": "2023-06-15T12:12:00Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "@rohan-wire, were you planning to do a PR that could partially address this?",
          "createdAt": "2023-08-10T22:53:39Z",
          "updatedAt": "2023-08-10T22:53:39Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR merged",
          "createdAt": "2023-10-23T15:55:50Z",
          "updatedAt": "2023-10-23T15:55:50Z"
        }
      ]
    },
    {
      "number": 291,
      "id": "I_kwDOHTmVzM5omXIG",
      "title": "Proposal for alternative Disclosures data model",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/291",
      "state": "CLOSED",
      "author": "mtaimela",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-04.html#section-5.3-2\r\n> The data format for sending the SD-JWT and the Disclosures to the Holder MUST be a series of base64url-encoded values, each separated from the next by a single tilde ('~') character as follows\r\n\r\nThe tilde is definitely very innovative, but it still introduces interesting mapping challenge. Is there a reason why the Disclosures cannot be signed? If there is no reason to NOT sign the Disclosures, then I do propose an alternative design.\r\n\r\nThere could be a `Holder Disclosed VC` or so to **aggregate** the `Issuer-Issued Disclosure` AND `SD-JWT`. This will fit into the normal way of treating VCs, stored as is and queried through VP exchange.\r\n\r\nIssuer-Issued Disclosures in could be a list.\r\nSD-JWT would be embedded JWT, aka \"raw\" JWT inside JWT.\r\n\r\nJWT in JWT will incur size penalty. If the size of the SD-JWT is an issue, it could be issued in binary presentation. I still would propose to take the size impact.\r\n\r\n---\r\nEdit: removed parsing parts as it will just be interesting mapping challenge",
      "createdAt": "2023-06-13T13:22:23Z",
      "updatedAt": "2023-06-28T16:45:47Z",
      "closedAt": "2023-06-23T20:55:51Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Hi Matti,\r\n\r\nthis design was considered and discarded. The problem is that such an approach would mean that both the signed object and the disclosures* are double-base64-encoded, increasing their size considerably. The current approach was chosen because it allows for a relatively compact representation.\r\n\r\n*The disclosures need to be protected against modification that would lead to different hash values. For this reason, they are base64 encoded. We did consider a different approach using JSON-in-JSON (see earlier drafts), but that had the potential to introduce subtle problems.",
          "createdAt": "2023-06-13T19:08:54Z",
          "updatedAt": "2023-06-13T19:08:54Z"
        },
        {
          "author": "mtaimela",
          "authorAssociation": "NONE",
          "body": "Hi Daniel,\r\n\r\nThank you for the very prompt reply. Double encoding do increase the size, which I personally do not think would be an issue. Would you happen to know if \"JWS unencoded payload\" option was checked https://www.rfc-editor.org/rfc/rfc7797 ? This would effectively remove the second \"full encoding\", but might cause the SD to not be \"jwt\".\r\n\r\nIf the unencoded payload is represented as JWS Compacted then the content requires \"some\" encoding, but the Flattened JWS JSON would work out of the box but be JSON.\r\n\r\n",
          "createdAt": "2023-06-13T20:08:37Z",
          "updatedAt": "2023-06-13T20:09:05Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I think https://www.rfc-editor.org/rfc/rfc7797#section-5.2 is pretty clear that \r\n>    When using the JWS Compact Serialization, unencoded non-detached\r\n   payloads using period ('.') characters would cause parsing errors;\r\n   such payloads MUST NOT be used with the JWS Compact Serialization.\r\n",
          "createdAt": "2023-06-14T05:27:24Z",
          "updatedAt": "2023-06-14T05:27:24Z"
        },
        {
          "author": "mtaimela",
          "authorAssociation": "NONE",
          "body": "Hi Kristina,\r\n\r\nYes indeed, the unencoded payload, to be part of the \"jwt style\" serialization, must not have dots in the content.\r\n\r\nThere is still room to play with \"some\" encoding (before signing) OR use the JWS Flattened JSON serialisation which doesn't have such limitations, where I think the JWS Flattened JSON would be more suitable for the use case.\r\n\r\nThe outer wrapper could be done \"unencoded\", and the SD-JWT inside can be JWT. Outer wrapper is always kept by Holder and never given away, so it is just temporary structure allowing signed disclosures and flexible structure.\r\n\r\nAny thoughts on this?",
          "createdAt": "2023-06-14T05:59:58Z",
          "updatedAt": "2023-06-14T06:16:34Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "One design goal was that the default encoding of an SD-JWT (both for issuance and presentation) is URL safe, just like JWTs are URL safe. The JSON serialization does not fulfill this requirement. ",
          "createdAt": "2023-06-14T07:28:27Z",
          "updatedAt": "2023-06-14T07:28:27Z"
        },
        {
          "author": "mtaimela",
          "authorAssociation": "NONE",
          "body": "Hi Daniel,\r\n\r\nAre you referring the SD-JWT as the proof carrier, or the whole specification? The latter imposes issues, but the SD-JWT itself is still JWT, even if the wrapper is Flattened JWS in JSON.\r\n\r\nIf the target is to issue the SD-JWT and Disclosures inside URL, instead of limiting into payloads, then I fully understand the concatenated string methodology. \r\n\r\nUsually the URL should not contain important information, like email, even as encoded.",
          "createdAt": "2023-06-14T08:10:39Z",
          "updatedAt": "2023-06-14T08:10:39Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I'm referring to the issuer-signed part (the JWT) plus the disclosures (we'll clear up terminology soon to call this whole thing \"SD-JWT\"); both for issuance and presentation.\r\n\r\nActual URLs are only one concern, but, for example, OAuth bearer access tokens are effectively limited to a URL safe character set (plus some, see RFC6750). \r\n\r\nMore generally, to enable the use of SD-JWTs in as many use cases as possible that so far used JWTs, we want to be URL safe.",
          "createdAt": "2023-06-14T09:15:16Z",
          "updatedAt": "2023-06-14T09:15:16Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "Hi, all. The topics has been raised before and I agree with Matti's proposal. The current design (for the compact serialised JWS)\r\n- breaks the JWS signature\r\n- introduces an undefined holder binding\r\n- issuer issued disclosures don't have the possibility to be encrypted (or the holder selected disclosures)\r\n\r\nEssentially, the issuer issued disclosures are fully exposed when exchanged via front-channel. Should in those cases encryption be recommended?\r\n\r\nSharing personal information and secrets via URL may result with insecure implementations and practices",
          "createdAt": "2023-06-14T12:49:40Z",
          "updatedAt": "2023-06-14T12:50:18Z"
        },
        {
          "author": "mtaimela",
          "authorAssociation": "NONE",
          "body": "Thank you for the support @alenhorvat \r\n\r\nI think it might be helpful to build a very minimal issuance payload, to make it very visible that SD-JWT VC is not touched and it will contain all properties as it currently has.\r\n\r\nThe proposal here is to get rid of the string concatenation, with a data structure, and to get issuer signature for the Disclosures. Just by modifying this will not affect presentation at all. Of course, currently the presentation side has the string concatenation thingy going on too, so there should to be an alternative model too. These two topics are separate from each other, and the issuance side should be evaluated before the presentation.\r\n\r\nThe alternatives for presentation side, that would support Disclosures encryption would be: Holder self-issuing a VC before presentation, choosing the disclosures she/he wants to present. This would be carried with-in the VP exchange, next to the SD-JWT.  The self-issued VC should refer to the correct SD-JWT as there might be many. Holder binding would also be covered.\r\n\r\nSecond alternative approach to disclosing the Disclosures would be just the use of VP itself. There's plenty of room, but there's no way to encrypt these with VCs natural toolings and patterns, so I think the self-issued VC method for presentation should be evaluated.\r\n\r\nThere definitely are other approaches too.",
          "createdAt": "2023-06-14T15:04:08Z",
          "updatedAt": "2023-06-14T15:04:08Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "@alenhorvat \r\n>breaks the JWS signature\r\n\r\nCan you please explain how? Issuers signs over the payload with digests using JWS. and attach disclosures to it.\r\n\r\n> introduces an undefined holder binding\r\n\r\nThe use of Key Binding JWT is optional, but the structure of the Key binding JWT is normatively defined.\r\n\r\n> issuer issued disclosures don't have the possibility to be encrypted (or the holder selected disclosures)\r\n\r\nYes, there is. You encrypt the entire string that is comprised of the issuer signed JWT and the Disclosures using JWE. also stated in this paragraph: https://drafts.oauth.net/oauth-selective-disclosure-jwt/draft-ietf-oauth-selective-disclosure-jwt.html#section-10.2-4",
          "createdAt": "2023-06-14T17:50:05Z",
          "updatedAt": "2023-06-14T17:53:55Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "> Essentially, the issuer issued disclosures are fully exposed when exchanged via front-channel. Should in those cases encryption be recommended?\r\n\r\nthere is already a section on that https://drafts.oauth.net/oauth-selective-disclosure-jwt/draft-ietf-oauth-selective-disclosure-jwt.html#name-confidentiality-during-tran\r\n\r\nand this is a separate topic than the original question raised. signing over Disclosures will not solve this.",
          "createdAt": "2023-06-14T17:54:54Z",
          "updatedAt": "2023-06-14T17:54:54Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "If the attacker can modify the Disclosures, there is a bigger problem going on, and the attack would probably be more effective by inserting an attacker-signed SD-JWT with intercepted valid `nonce` and `aud` values for example. So I still do not see a strong argument to modify the issuance/presentation structure.",
          "createdAt": "2023-06-14T17:58:11Z",
          "updatedAt": "2023-06-14T17:58:11Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "> https://drafts.oauth.net/oauth-selective-disclosure-jwt/draft-ietf-oauth-selective-disclosure-jwt.html#name-confidentiality-during-tran\r\n\r\nHi, Kristina. I admire all the magnificent work this team is doing.\r\n\r\nThe current proposal appends information to the JWS. And the appended information can be of two types: issuer issued disclosure, and holder binding. Hence, this document is defining a new signature format for compact serialised JWS. This is also reflected in the newly registered IANA media types specified in the document.\r\n\r\nThis comment is addressing Compact Serialised JWS\r\n\r\nJWS defines media types: JOSE and JOSE+JSON\r\nIf my understanding is correct, media types could also be just: JOSE+sd+jwt (and the one with holder binding JWT)\r\nJWS libraries don't recognise the new typ, hence the comment about breaking the JWS implementation.\r\n\r\nBy inspecting https://www.etsi.org/deliver/etsi_ts/119100_119199/11918201/01.01.01_60/ts_11918201v010101p.pdf and https://www.rfc-editor.org/rfc/rfc7797, there appeared to be a solution that is compatible with the existing JWS, however, it turns out that one cannot combine two JWS signatures without additional serialisation. Namely, in some cases issuer would like to sign the sd-jwt, but also the issuer issued disclosures to have a proof that it shared everything with the holder.\r\n\r\nThe only case where we benefit from smaller size is when issuer-issued disclosures are unsigned and when holder selected disclosures are unsigned. Key binding is not securing the payload (it could solve part of the problem)\r\n\r\nIf holder needs to sign the whole payload (for integrity/nonrepudiation/...), I believe section 7 is the one that's useful, and is applicable to JWT, VCs, ..., any other JSON.\r\n\r\nQuestions are:\r\n- should the structure presented in section 7 be the default one - there's a claim disclosures. (this also solves the issue with JWS mentioned above)\r\n- should the structure in sec. 7 adopt syntax from JSON serialised JWS - introducing the disclosures claim in the payload \r\n- render the current JWS compact serialisation as a way to do SD when disclosures are unsigned and when size is an issue\r\n\r\nWith this we cover all cases in an unambiguous way\r\n- JSON serialised JWS works as described. If disclosures need to be signed over, they can also be moved to the protected header\r\n- JWS libs as they are can be used to sign and verify signatures of SD\r\n- issuer can sign the disclosures (if required)\r\n- holder can sign the disclosures (if required)\r\n- if size limit is a constraint, there's an optimisation as presented in the document. Limitation: disclosures are unsigned",
          "createdAt": "2023-06-15T04:53:04Z",
          "updatedAt": "2023-06-15T04:53:04Z"
        },
        {
          "author": "mtaimela",
          "authorAssociation": "NONE",
          "body": "Hi all,\r\n\r\nI'm happy to see such a vibrant community, with multiple angles, thank you all for contributing into brainstorming. The SD-JWT design is great, and would definitely work, but the issue is open because I do think that it could be even better.\r\n\r\nThe section 7 also introduces the original issue of double encoding, which is why the tilde exists in first place. Luckily the JWS Compacted serialization is not the only option so I crafted the small examples for the [JWS Unencoded Payload](https://www.rfc-editor.org/rfc/rfc7797) WITH JWS Flattened serialization.\r\n\r\nThe actual structure for the wrapper can be anything, it contains SD-JWT as is (no double encoding), the Disclosures are signed, and the thing do not need new a content-type. The JWS Flattened expects \"string\" output and byte input, thus the JSON object we are carrying must be encoded to be compatible. I have chosen JSON serialisation, aka stringifying the JSON object in this case. Feel free to propose amendments, alternatives or deeper data structures. The data structures can also be used to solve the disclosures mapping, as with this we have real data structure to express information. If there is a need to transfer this information over URI, it can be made URI compatible through normal encoding practises (which skips base64url, thus there is no double encoding for sd-jwt).\r\n\r\nThe Issuance \"wrapper\": replacing tilde and preserving everything else.\r\n```javascript\r\n{\r\n  signature: 'u0OKqXBRq_hXhcKkmnZ5XGi3Lm9t2-2RpcjdGkocwo2u7bpCE0nJZ92DsBmCay-ZZij5lO5e6Ebk9WoG1zJsPg',\r\n  payload: '{\"sd\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiJ9.eyJAY29udGV4dCI6WyJodHRwczovL3d3dy53My5vcmcvbnMvY3JlZGVudGlhbHMvdjIiXSwiaWQiOiI5YmNjOWFhYS0zYmRjLTQ0MTQtOTQ1MC03MzljMjk1Yzc1MmMiLCJ0eXBlIjpbIlZlcmlmaWFibGVDcmVkZW50aWFsIiwiU3R1ZGVudElEIl0sImlzc3VlciI6ImRpZDplYnNpOnp2SFdYMzU5QTNDdmZKbkNZYUFpQWRlIiwidmFsaWRGcm9tIjoiMjAyMy0wMS0wMVQwMDowMDowMFoiLCJ2YWxpZFVudGlsIjoiMjAzMy0wMS0wMVQwMDowMDowMFoiLCJjcmVkZW50aWFsU3ViamVjdCI6eyJpZCI6ImRpZDprZXk6Li4uIiwiX3NkIjpbInpTbUltV0hQSnpRN1J4OFpHMElZaFVGMU96ajhmMTd3REtKR2h4VWtyZFUiLCJUNFJuRG0xY2xWTENhdjJNcnNlbDZzTk16OHBxR0NlTXJycF9fWXJWXy13IiwiU0ZRVGpyOTFJa1BpNmJldFEwRVlzNXJkSjJUYk1lc0pHZnRGNmg3aGpUQSJdLCJzdHVkZW50Ijp0cnVlfX0.qbKCK100Pqg1fJPKS1QXmI4u1bwPQSMewMQxzD19sf4qgk_hIWQRBy4BTbADYrQa30ct8no0dhV--PZREkjf5A\",\"disclosures\":[\"WyIyR0xDNDJzS1F2ZUNmR2ZyeU5STjl3IiwgImZhbWlseU5hbWUiLCAiQ2Fycm9sbCJd\",\"WyJlbHVWNU9nM2dTTklJOEVZbnN4QV9BIiwgImdpdmVuTmFtZSIsICJMZXdpcyJd\",\"WyI2SWo3dE0tYTVpVlBHYm9TNXRtdlZBIiwgImJpcnRoRGF0ZSIsICIxODMyLTAxLTI3Il0\"]}',\r\n  protected: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19'\r\n}\r\n```\r\n\r\nJWK keys for validation\r\n```javascript\r\n{\r\n  kty: \"EC\",\r\n  d: \"z617Hhdusxqt3KN98NHvFtWTpSW_sq2cCZpNSzu8m88\",\r\n  crv: \"P-256\",\r\n  x: \"ZYE6uX3XvQ9rLc6s0eeo2YiOM2VfwrEZOZXzTOthcHE\",\r\n  y: \"k-t1bfe-MmmXWQ0QaxK3uJMYlMNkJHYGUSLpxP9RQak\"\r\n}\r\n```\r\n\r\nIt is also good to refresh the memory that URI/URL components do not use content-type at all in HTTP, the media-type is meant for the HTTP body only. The SD-JWT + Disclosures with tilde will break all existing JWT parsers when transported outside of HTTP body, or the processing must be forced into application logic and the tilde pre-processing must be handled there beforehand.\r\n\r\n----\r\nEdit: re-order and add json stringify clarification.",
          "createdAt": "2023-06-15T20:31:08Z",
          "updatedAt": "2023-06-16T05:34:18Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "@alenhorvat I'm not sure I fully understand your proposal. You say:\r\n\r\n> JSON serialised JWS works as described. If disclosures need to be signed over, they can also be moved to the protected header\r\n\r\nThen the signature would break once the Holder removes any Disclosures.\r\n\r\n@mtaimela As I said above, we are not concerned about the transfer of SD-JWTs over actual URLs. We are concerned about places where the character set is limited to URL-safe characters like an OAuth bearer token. That would require another round of base64url-encoding the proposed format.\r\n\r\nAnd while I do appreciate the input of both of you and your thoughts about these alternative formats, let me address two important points:\r\n\r\n - We're not breaking the JWS parser in any way. The current format is just not meant to be fed into an JWS parser directly, and that is perfectly fine. The JWS parser in the current format is meant to run after extracting the various parts.\r\n - SD-JWT has gained a lot of momentum in the past months and there is a lot of \"running code\" already. We are not willing to break existing implementations in a substantial way, and any breaking change must provide tangible advantages. In its current form, SD-JWT provides an extremely simple-to-understand, compact format that serves many use cases really well. Yes, the disclosures are not signed over, but I do not think that this is a good enough reason to completely change the format. I'm happy to discuss what is defined in Section 7 and 8 (as the less-used alternatives to the current default format), and I'm happy to discuss a hash over the disclosures (although I'm still not convinced), but I honestly do not see the default format changing substantially in the future unless there is a working group consensus to do so.",
          "createdAt": "2023-06-19T16:57:39Z",
          "updatedAt": "2023-06-19T16:57:39Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "> @alenhorvat I'm not sure I fully understand your proposal. You say:\r\n> \r\n> > JSON serialised JWS works as described. If disclosures need to be signed over, they can also be moved to the protected header\r\n> \r\n> Then the signature would break once the Holder removes any Disclosures.\r\n> \r\n> @mtaimela As I said above, we are not concerned about the transfer of SD-JWTs over actual URLs. We are concerned about places where the character set is limited to URL-safe characters like an OAuth bearer token. That would require another round of base64url-encoding the proposed format.\r\n> \r\n> And while I do appreciate the input of both of you and your thoughts about these alternative formats, let me address two important points:\r\n> \r\n> * We're not breaking the JWS parser in any way. The current format is just not meant to be fed into an JWS parser directly, and that is perfectly fine. The JWS parser in the current format is meant to run after extracting the various parts.\r\n> * SD-JWT has gained a lot of momentum in the past months and there is a lot of \"running code\" already. We are not willing to break existing implementations in a substantial way, and any breaking change must provide tangible advantages. In its current form, SD-JWT provides an extremely simple-to-understand, compact format that serves many use cases really well. Yes, the disclosures are not signed over, but I do not think that this is a good enough reason to completely change the format. I'm happy to discuss what is defined in Section 7 and 8 (as the less-used alternatives to the current default format), and I'm happy to discuss a hash over the disclosures (although I'm still not convinced), but I honestly do not see the default format changing substantially in the future unless there is a working group consensus to do so.\r\n\r\nHi, @danielfett. Thank you for the swift reply. JSON serialisation supports multiple signatures. First protects the SD-JWT, as today, second one protects the whole payload.\r\n\r\n> We are concerned about places where the character set is limited to URL-safe characters like an OAuth bearer token. That would require another round of base64url-encoding the proposed format.\r\n\r\nThis sounds like an interesting use case. Can you elaborate in which scenarios SD-JWTs would be transferred as bearer tokens?\r\n\r\n> We're not breaking the JWS parser in any way. The current format is just not meant to be fed into an JWS parser directly, and that is perfectly fine. The JWS parser in the current format is meant to run after extracting the various parts.\r\n\r\nMy concern is that in the limit, where noting is hidden, extra 'tilde' is still required and with it another serialisation - even though that doesn't have to be the case. We can (at least in our use cases) always go with JSON serialisation and leave the compact for the cases where there's no other option.",
          "createdAt": "2023-06-19T17:19:48Z",
          "updatedAt": "2023-06-19T17:19:48Z"
        },
        {
          "author": "mtaimela",
          "authorAssociation": "NONE",
          "body": "Thank you @danielfett for the reply. \r\n\r\n> We're not breaking the JWS parser in any way\r\n\r\nRequiring a new Media-Type for the parsing makes it very explicit that it is not compliant with existing ones. URL components cannot carry Media-Types, thus it is a burden for the implementors to do this kind of check for one specific data structure. This data structure requires new types in OID4 standards, as it is not jwt_vc_json or jwt_vc_ld, but \"jwt_sd_tilde\"?. A pattern where each data structure defines own media-types, external types, etc is not sustainable and ask you again to reconsider this from the implementors point of view.\r\n\r\n> * SD-JWT has gained a lot of momentum in the past months and there is a lot of \"running code\" already. We are not willing to break existing implementations in a substantial way, and any breaking change must provide tangible advantages\r\n\r\nI'm actually not looking to break things, just to make them more aligned with existing patterns and target implementors native tooling. One of the recent amendments, while this conversation has been carried, is extension of \"JWS Serialisation\". It doesn't break anything and also touches the SD-JWT.\r\n\r\n",
          "createdAt": "2023-06-19T17:39:31Z",
          "updatedAt": "2023-06-19T17:39:47Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "Hi. Can we make a PR with the proposal mentioned in this issue?",
          "createdAt": "2023-06-23T15:39:49Z",
          "updatedAt": "2023-06-23T15:39:49Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> Hi. Can we make a PR with the proposal mentioned in this issue?\r\n\r\nThere is not, as far as I can tell, a tangible cohesive proposal mentioned in this issue for which a PR could be made. And the various piecemeal suggestions have received polite but firm push-back from the draft editors (who are also representing the working group rough consensus on the draft). As such, I don't think a PR here is appropriate. If you really believe there is a coherent proposal that can be expressed more clearly in a PR, then you are free to create one (of course). But please set your expectations accordingly and realize that it likely will not be accepted. ",
          "createdAt": "2023-06-23T20:55:51Z",
          "updatedAt": "2023-06-23T20:55:51Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "> Is there a reason why the Disclosures cannot be signed? If there is no reason to NOT sign the Disclosures, then I do propose an alternative design.\r\n>\r\n> There could be a Holder Disclosed VC or so to aggregate the Issuer-Issued Disclosure AND SD-JWT. This will fit into the normal way of treating VCs, stored as is and queried through VP exchange.\r\n\r\nyou can still do this. there is [an entire section on \"Enveloping\"](https://drafts.oauth.net/oauth-selective-disclosure-jwt/draft-ietf-oauth-selective-disclosure-jwt.html#name-enveloping-sd-jwts) which allows you to do this",
          "createdAt": "2023-06-28T16:45:47Z",
          "updatedAt": "2023-06-28T16:45:47Z"
        }
      ]
    },
    {
      "number": 295,
      "id": "I_kwDOHTmVzM5oyYTf",
      "title": "Essentially, the issuer issued disclosures are fully exposed when exchanged via front-channel. Should in those cases encryption be recommended?",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/295",
      "state": "CLOSED",
      "author": "alenhorvat",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "              > Essentially, the issuer issued disclosures are fully exposed when exchanged via front-channel. Should in those cases encryption be recommended?\r\n\r\nthere is already a section on that https://drafts.oauth.net/oauth-selective-disclosure-jwt/draft-ietf-oauth-selective-disclosure-jwt.html#name-confidentiality-during-tran\r\n\r\nand this is a separate topic than the original question raised. signing over Disclosures will not solve this.\r\n\r\n_Originally posted by @Sakurann in https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/291#issuecomment-1591739581_\r\n            ",
      "createdAt": "2023-06-15T04:59:55Z",
      "updatedAt": "2023-06-28T18:28:17Z",
      "closedAt": "2023-06-28T18:28:17Z",
      "comments": [
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "@Sakurann moving this to a separate, but related issue (when it comes to size of the payload).\r\n\r\nI fully agree that the signing of disclosures is not solving the problem. \r\n\r\nTLS protects confidentiality, but when the payload is exchanged via the URL, TLS won't help since information remains in the browser history. Here the security model relies on the security of the browser. In this case, the payload should be (always) encrypted since we're dealing with personal data.\r\n\r\nIf the SD-JWT with disclosures are encrypted, is the size optimisation for compact serialised JWS justifiable? (when content is sent directly to the server or fetched from it, size optimisation can be dropped) - for other protocols like NFC/BLE more efficient encodings exist",
          "createdAt": "2023-06-15T05:06:41Z",
          "updatedAt": "2023-06-15T05:06:41Z"
        },
        {
          "author": "mtaimela",
          "authorAssociation": "NONE",
          "body": "Good points @alenhorvat,\r\n\r\nI would like to add that on top of the browser history, there's also browser cache, shoulder surfing and web logs issues. Web logs brings other dimension to the adopters of the technology, as the web logs can possibly be populated with GDPR related data and cause issues for the current operational practices.",
          "createdAt": "2023-06-16T05:51:12Z",
          "updatedAt": "2023-06-16T05:51:12Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Transporting SD-JWT is out of scope of this specification - SD-JWT might be transported via the browser, NFC/BLE, or it might not. I don't disagree there are occurrences when TLS might not be enough, for those cases, we have a following sentence:\r\n> Implementers MAY define an envelope format (such as described in [Section 7](https://drafts.oauth.net/oauth-selective-disclosure-jwt/draft-ietf-oauth-selective-disclosure-jwt.html#enveloping) or nesting the SD-JWT as the plaintext payload of a JWE) to encrypt the SD-JWT when transmitted over an insecure channel.\r\n\r\nWould it be helpful if we make it a little more clearer how to encrypt SD-JWT using JWE?",
          "createdAt": "2023-06-23T06:00:12Z",
          "updatedAt": "2023-06-23T06:00:12Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "Hi @Sakurann.\r\n\r\nShort answer: yes; See below if you agree.\r\n\r\nTo limit the scope of this issue, here we should only address:\r\n\r\nWhen is the encryption is recommended? (e.g., whenever the payload could be cached, like browser URL) - I believe we can reach an agreement wrt this point.\r\n\r\nThis would require a sentence or two in a sense: When SD-JWT and disclosures contain personal information (this is a tautology) and the information may be cached or otherwise captured (in plain text) during the transmission, the SD-JWT and the disclosures SHOULD be encrypted using JWE. Example: when SD-JWT and disclosures are transmitted via URL, the information may be stored/cached in the browser's history, ...",
          "createdAt": "2023-06-23T06:25:01Z",
          "updatedAt": "2023-06-23T06:25:01Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Some additions or clarifications to [the section currently called \"Confidentiality during Transport\"](https://drafts.oauth.net/oauth-selective-disclosure-jwt/draft-ietf-oauth-selective-disclosure-jwt.html#name-confidentiality-during-tran) along those lines certainly seem appropriate and useful. A PR with concrete suggested text would be helpful. ",
          "createdAt": "2023-06-23T21:17:06Z",
          "updatedAt": "2023-06-23T21:17:06Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": " #309 has been merged ",
          "createdAt": "2023-06-28T18:28:16Z",
          "updatedAt": "2023-06-28T18:28:16Z"
        }
      ]
    },
    {
      "number": 299,
      "id": "I_kwDOHTmVzM5pOOg0",
      "title": "two dots as &#168 display issue ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/299",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "\"it shows as `two dots &#168; placed over the letter` is there any way to change that..? (this is not the change introduced in this PR)\" on the text in the doc at https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-04.html#section-5.1.1.1-9.1 \"A different way to encode the umlaut (two dots &#168; placed over the letter):\"\r\n\r\n_Originally posted by @Sakurann in https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/293#discussion_r1234687656_\r\n            \r\n",
      "createdAt": "2023-06-20T12:48:41Z",
      "updatedAt": "2023-06-22T16:21:54Z",
      "closedAt": "2023-06-22T16:21:53Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Not sure why this broke now. I created a PR because the example wasn't ideal anyway: https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/300",
          "createdAt": "2023-06-20T19:07:22Z",
          "updatedAt": "2023-06-20T19:07:22Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I just noticed that the PR does not fully solve the problem. We have the same problem somewhere else as well: \r\n\r\n![Screenshot_20230620_211135](https://github.com/oauth-wg/oauth-selective-disclosure-jwt/assets/89476/36ffd67f-9014-4c69-9d7b-fc5d8e5dd3d7)\r\n",
          "createdAt": "2023-06-20T19:12:57Z",
          "updatedAt": "2023-06-20T19:12:57Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "it's seems to have been an issue at least back to -01 https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-01.html#section-5.1-9 and/or -02 https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-02.html#section-5.2.1.1-9.1 (so basically since inception).\r\n\r\nI'm sure we could fight with the tool chain to fix it. But at what cost? I'm inclined to just reword that \"The two representations... \" part to make the issue go away. Which I did with this 48efde35a81ca3520eb30ceea6c43d62e8cd96f8 update to https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/300\r\n",
          "createdAt": "2023-06-20T20:52:06Z",
          "updatedAt": "2023-06-21T14:03:51Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR merged",
          "createdAt": "2023-06-22T16:21:53Z",
          "updatedAt": "2023-06-22T16:21:53Z"
        }
      ]
    },
    {
      "number": 311,
      "id": "I_kwDOHTmVzM5qY73A",
      "title": "Seperate domains for issuer and verifier in examples ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/311",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Most of the examples have `\"iss\": \"https://example.com/issuer\"` for the issuer of the SD-JWT and the KB-JWT has `\"aud\": \"https://example.com/verifier\",` for the verifier. It's not wrong but a little weird to show examples where these two entities have the same domain or shared etld+1 so could share cookies. Changing to something like https://issuer.example.com and https://verifier.example.org respectively might make for a better example. ",
      "createdAt": "2023-07-02T21:52:40Z",
      "updatedAt": "2023-07-28T14:55:55Z",
      "closedAt": "2023-07-28T14:55:34Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/314 was merged ",
          "createdAt": "2023-07-28T14:55:55Z",
          "updatedAt": "2023-07-28T14:55:55Z"
        }
      ]
    },
    {
      "number": 312,
      "id": "I_kwDOHTmVzM5qdoKg",
      "title": "VCDM Example shouldn't have regular JWT claims",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/312",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The `iss`, `iat`, and `exp` claims should be removed from the examples in [Example 4a - SD-JWT-based Verifiable Credentials (SD-JWT VC)](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-05.html#name-example-4a-sd-jwt-based-ver)",
      "createdAt": "2023-07-03T13:07:32Z",
      "updatedAt": "2023-07-28T14:56:14Z",
      "closedAt": "2023-07-28T14:56:13Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/314",
          "createdAt": "2023-07-28T14:56:13Z",
          "updatedAt": "2023-07-28T14:56:13Z"
        }
      ]
    },
    {
      "number": 313,
      "id": "I_kwDOHTmVzM5qezBa",
      "title": "Examples: verified contents probably shouldn't have _sd_alg ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/313",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "[Verification and Processing say to remove the `_sd_alg` claim](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-05.html#section-6.1-4.3.2.7) but the the verified_contents.json files, typically qualified with \"[After the validation, the Verifier will have the following data for further processing](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-05.html#appendix-A.2-41)\", have the claim in them. \r\n\r\n`_sd_alg` probably should not be included in the verified data provided to the application. \r\n\r\n",
      "createdAt": "2023-07-03T16:00:53Z",
      "updatedAt": "2023-07-28T14:56:27Z",
      "closedAt": "2023-07-28T14:56:26Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "FWIW I noticed the stray `_sd_alg` in the verified payload content while looking at https://github.com/w3c/vc-jwt/pull/114 and trying to figure out what it was trying to accomplish but (at the time of looking) the only SD-JWT thing in that PR was `_sd_alg`.",
          "createdAt": "2023-07-03T22:02:17Z",
          "updatedAt": "2023-07-03T22:27:30Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/314",
          "createdAt": "2023-07-28T14:56:26Z",
          "updatedAt": "2023-07-28T14:56:26Z"
        }
      ]
    },
    {
      "number": 315,
      "id": "I_kwDOHTmVzM5rgY-2",
      "title": "JWT claims IANA registration requests",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/315",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "bc-pi"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "This [TBD](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-05.html#section-12-1) was meant as a placeholder/reminder for JWT Claims Registration requests to IANA that would be needed eventually.   \r\n\r\n The `_sd` and `_sd_alg` claims should be registered. \r\n\r\nI'm not sure about `...` to be honest, which is ironic b/c I'm supposed to know about such things (see the so-called experts [listed in the registry](https://www.iana.org/assignments/jwt/jwt.xhtml#claims)). But it's somewhat different than the other claims in the registry. But, I dunno, requesting registration is probably the way to go w/ `...`.  ",
      "createdAt": "2023-07-13T19:38:13Z",
      "updatedAt": "2023-10-16T15:27:51Z",
      "closedAt": "2023-10-16T15:27:51Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I share your unsureness, and agree that requesting registration is the way to go.\r\nbtw in the spec, we have a text registered `...` claim, so if we decide not to register it, that text needs to be updated.\r\n",
          "createdAt": "2023-08-16T18:04:48Z",
          "updatedAt": "2023-08-16T18:04:48Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> btw in the spec, we have a text registered `...` claim\r\n\r\nWait... really, where?\r\n\r\n\r\n",
          "createdAt": "2023-10-04T21:25:01Z",
          "updatedAt": "2023-10-04T21:25:01Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "PR has been merged.",
          "createdAt": "2023-10-16T15:27:51Z",
          "updatedAt": "2023-10-16T15:27:51Z"
        }
      ]
    },
    {
      "number": 316,
      "id": "I_kwDOHTmVzM5tG4UF",
      "title": "consistent terminology around \"random / pseudorandom\" salt",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/316",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Feedback received:\r\n\r\n---\r\nThe provisions for random / pseudorandom data make use of different terminology:\r\n\u2022\t4.1: \"\u2026a random salt\u2026.\"\r\n\u2022\t5.2.1: \"\u2026128 bits of cryptographically secure pseudorandom data\u2026\"The provisions for random / pseudorandom data make use of different terminology:\r\n\u2022\t4.1: \"\u2026a random salt\u2026.\"\r\n\u2022\t5.2.1: \"\u2026128 bits of cryptographically secure pseudorandom data\u2026\"\r\n\u2022\t5.6: \"\u2026cryptographically secure random number\u2026\"\r\n\u2022\t9.3: \"\u2026cryptographically random\u2026\"\r\n\u2022\t9.4: \"\u2026randomly-generated\u2026\"\r\n\r\nA consistent terminology would be helpful to prevent any misinterpretations.\r\nThis terminology should not exclude pseudorandom number generators (i.e. deterministic generators) as properly designed and implemented generators are able to produce pseudorandom numbers of sufficient quality (as proven e.g. in several Common Criteria security evaluations).\r\n\r\n\u2022\t5.6: \"\u2026cryptographically secure random number\u2026\"\r\n\u2022\t9.3: \"\u2026cryptographically random\u2026\"\r\n\u2022\t9.4: \"\u2026randomly-generated\u2026\"\r\n\r\nA consistent terminology would be helpful to prevent any misinterpretations.\r\nThis terminology should not exclude pseudorandom number generators (i.e. deterministic generators) as properly designed and implemented generators are able to produce pseudorandom numbers of sufficient quality (as proven e.g. in several Common Criteria security evaluations).\r\n",
      "createdAt": "2023-08-01T05:57:36Z",
      "updatedAt": "2023-08-29T15:42:26Z",
      "closedAt": "2023-08-29T15:42:26Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR merged",
          "createdAt": "2023-08-29T15:42:26Z",
          "updatedAt": "2023-08-29T15:42:26Z"
        }
      ]
    },
    {
      "number": 317,
      "id": "I_kwDOHTmVzM5tG4lM",
      "title": "One or more Holder keys",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/317",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "feedback received:\r\n\r\n---\r\n\r\n> The payload MAY also contain a Holder's public key or a reference thereto\u2026\r\n\r\nThis seems to be a restriction to 0 or 1 public key. But it could be beneficial to support more than 1 key pair, e.g. for different purposes (signature and key agreement) or for different communities (ECDH keys supporting different curves for different communities) etc.\r\n\r\nAn alternative would of course be to issue an SD-JWT for every public key separately, but the SD-JWT specification should leave the decision on the approach to the issuer.\r\n\r\nSuggestion is to change to \"The payload MAY contain one or more public keys of the holder or references thereto\u2026.\".",
      "createdAt": "2023-08-01T05:58:43Z",
      "updatedAt": "2023-08-29T15:43:33Z",
      "closedAt": "2023-08-29T15:43:33Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "#318 has changes that would address this, I think - https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/318/files#diff-40bc3800dd9a7d4411799637caf0b01f82a01242d57264a2e4beb408c3835704R258 ",
          "createdAt": "2023-08-28T21:13:29Z",
          "updatedAt": "2023-08-28T21:13:29Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR merged",
          "createdAt": "2023-08-29T15:43:33Z",
          "updatedAt": "2023-08-29T15:43:33Z"
        }
      ]
    },
    {
      "number": 319,
      "id": "I_kwDOHTmVzM5tG6N5",
      "title": "terminology: JWT payload, JWT body, JWS payload",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/319",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "feedback received:\r\n\r\n---\r\n\r\nThe draft uses the terms \"JWT body\" and \"JWT payload\" which are not used / not defined in RFC 7519.\r\nWhile it is quite clear from the context what is meant, it could be preferable to use the term (JWT Claims Set) defined in RFC 7519 in order to avoid any misinterpretations.",
      "createdAt": "2023-08-01T06:05:15Z",
      "updatedAt": "2023-08-29T15:42:41Z",
      "closedAt": "2023-08-29T15:42:41Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "it is true that https://www.rfc-editor.org/rfc/rfc7515#section-2 only defines JWS payload. JWT payload is mainly used as \"SD-JWT payload\", which I think it fine, but JWT body might be worth revisiting..",
          "createdAt": "2023-08-01T06:06:01Z",
          "updatedAt": "2023-08-01T06:06:01Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "FWIW [DPoP](https://www.ietf.org/archive/id/draft-ietf-oauth-dpop-16.html), which is past last calls and IESG reviews and in the RFC editor queue, uses \"JWT payload\". ",
          "createdAt": "2023-08-02T22:55:34Z",
          "updatedAt": "2023-08-02T22:55:34Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "Maybe related to this (or can be a separate issue):\r\n\r\nhttps://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-05.html#section-7\r\n\r\nsection 7 is referring to enveloping + using JWT claims. Some JWS signatures don't use JWT claims.\r\n\r\nIn the text:\r\n- \"JWT container\"\r\n- JWT\r\n- JWT payload\r\n \r\nappear. \r\nDepending on the signature type, payload may or may not contain JWT claims.",
          "createdAt": "2023-08-09T07:58:56Z",
          "updatedAt": "2023-08-09T07:58:56Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "Similar with \"issuer signed JWT\" appears quite frequently in the text, even though some JWS signatures don't use JWT claims or are JSON serialised JWS.",
          "createdAt": "2023-08-09T08:05:06Z",
          "updatedAt": "2023-08-09T08:05:27Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR merged",
          "createdAt": "2023-08-29T15:42:41Z",
          "updatedAt": "2023-08-29T15:42:41Z"
        }
      ]
    },
    {
      "number": 320,
      "id": "I_kwDOHTmVzM5tT0GI",
      "title": "W3C VC Example lacks cnf",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/320",
      "state": "CLOSED",
      "author": "OR13",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "https://datatracker.ietf.org/doc/html/draft-ietf-oauth-selective-disclosure-jwt-05#appendix-A.4\r\n\r\ncompared to https://datatracker.ietf.org/doc/html/draft-ietf-oauth-selective-disclosure-jwt-05#section-5.5\r\n\r\nexpected to see this:\r\n\r\n```json\r\n{\r\n  \"iss\": \"https://example.com/issuer\",\r\n  \"iat\": 1683000000,\r\n  \"exp\": 1883000000,\r\n  \"@context\": [\r\n    \"https://www.w3.org/2018/credentials/v1\",\r\n    \"https://w3id.org/vaccination/v1\"\r\n  ],\r\n  \"type\": [\r\n    \"VerifiableCredential\",\r\n    \"VaccinationCertificate\"\r\n  ],\r\n  \"issuer\": \"https://example.com/issuer\",\r\n  \"issuanceDate\": \"2023-02-09T11:01:59Z\",\r\n  \"expirationDate\": \"2028-02-08T11:01:59Z\",\r\n  \"name\": \"COVID-19 Vaccination Certificate\",\r\n  \"description\": \"COVID-19 Vaccination Certificate\",\r\n  \"credentialSubject\": {\r\n    \"vaccine\": {\r\n      \"type\": \"Vaccine\",\r\n      \"atcCode\": \"J07BX03\",\r\n      \"medicinalProductName\": \"COVID-19 Vaccine Moderna\"\r\n    },\r\n    \"recipient\": {\r\n      \"type\": \"VaccineRecipient\"\r\n    },\r\n    \"type\": \"VaccinationEvent\",\r\n    \"order\": \"3/3\",\r\n    \"dateOfVaccination\": \"2021-06-23T13:40:12Z\"\r\n  },\r\n  \"_sd_alg\": \"sha-256\",\r\n  // this part needs to be added.\r\n  \"cnf\": {\r\n    \"jwk\": {\r\n      \"kty\": \"EC\",\r\n      \"crv\": \"P-256\",\r\n      \"x\": \"TCAER19Zvu3OHF4j4W4vfSVoHIP1ILilDls7vCeGemc\",\r\n      \"y\": \"ZxjiWWbZMQGHVWKVQ4hbSIirsVfuecCE6t4jT9F2HZQ\"\r\n    }\r\n  }\r\n}\r\n```",
      "createdAt": "2023-08-02T21:12:21Z",
      "updatedAt": "2023-10-02T15:43:18Z",
      "closedAt": "2023-10-02T15:43:18Z",
      "comments": [
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "VC can be signed with JWS only without JWT claims or cnf.\r\nI guess both examples could/should be presented. One would be securing using JWS, other would be securing using JWT.",
          "createdAt": "2023-08-09T08:10:55Z",
          "updatedAt": "2023-08-09T08:10:55Z"
        },
        {
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@alenhorvat your comment seems not relevant to the issue... the issue is that the text suggests `cnf` will be present in the example, but it is not. \r\n\r\n> VC can be signed with JWS only without JWT claims or cnf.\r\n\r\nIn w3c vcdm v1.1 `typ` MUST be JWT.\r\nIn w3c vcdm v2, see https://github.com/w3c/vc-jose-cose\r\n\r\nI don't think your statement is accurate currently, regarding w3c vcdm... but it could be accurate regarding \"other things called vcs\".\r\n\r\n> I guess both examples could/should be presented. One would be securing using JWS, other would be securing using JWT.\r\n\r\nI would expect the SD-JWT repo to only have examples that are `sd-jwt`.... regardless of if they have a `typ` value set that follows the JWT BCP.\r\n\r\nI would not expect JWS to be relevant to this repo, even if its used internally by JWT or SD-JWT.\r\n\r\n",
          "createdAt": "2023-08-09T13:55:20Z",
          "updatedAt": "2023-08-09T13:55:20Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "@OR13 thank you for the corrections.\r\n\r\nAgree.",
          "createdAt": "2023-08-09T14:17:40Z",
          "updatedAt": "2023-08-09T14:17:40Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah, it does say \"Key Binding is applied using the Holder's public key passed in a cnf claim in the SD-JWT.\" right there at https://datatracker.ietf.org/doc/html/draft-ietf-oauth-selective-disclosure-jwt-05#appendix-A.4 so a `cnf` claim should be in the example that follows. It'll show up in the example SD-JWT payload as it does in other examples.  ",
          "createdAt": "2023-09-07T21:52:01Z",
          "updatedAt": "2023-09-07T21:52:01Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #339 adds `cnf` to example 4b \r\n\r\nsee, for example, https://drafts.oauth.net/oauth-selective-disclosure-jwt/bc-cnf-to-ex4b/draft-ietf-oauth-selective-disclosure-jwt.html#appendix-A.4-8",
          "createdAt": "2023-09-07T22:15:27Z",
          "updatedAt": "2023-09-07T22:15:27Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "#339 merged ",
          "createdAt": "2023-10-02T15:43:18Z",
          "updatedAt": "2023-10-02T15:43:18Z"
        }
      ]
    },
    {
      "number": 322,
      "id": "I_kwDOHTmVzM5t1XVg",
      "title": "Disclosing claims from different credentials",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/322",
      "state": "CLOSED",
      "author": "alenhorvat",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "duplicate"
      ],
      "body": "Does the specification support disclosing claims from different credentials?\r\n\r\nThe text doesn't seem to cover the scenario (maybe I missed it);\r\n\r\nI guess option is:\r\n- create multiple SD-JWTs, sign each of them and send it as array?\r\n",
      "createdAt": "2023-08-09T08:03:14Z",
      "updatedAt": "2023-08-09T08:40:42Z",
      "closedAt": "2023-08-09T08:37:59Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "The option to handle multiple credentials was considered (there are a couple of closed issues on this, e.g., https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/114), but ultimately considered out of scope for the reasons discussed there. Presenting multiple credentials is left to the transport protocol.",
          "createdAt": "2023-08-09T08:32:54Z",
          "updatedAt": "2023-08-09T08:32:54Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "Can the text in section 7 be improved?\r\n_For such use cases, the SD-JWT SHOULD be transported as a single string_\r\n\r\nIf sd-jwt is signed using JSON serialised JWS sd-jwt won't be a string but a JSON object.\r\n\r\nShould this also be mentioned in the holder binding section? E.g., when claims from multiple credentials are shared each of them need holder binding, etc. and the rest is left to the protocol?\r\n\r\nHolder binding, currently, already assumes something about the protocol (nonce).",
          "createdAt": "2023-08-09T08:40:42Z",
          "updatedAt": "2023-08-09T08:40:42Z"
        }
      ]
    },
    {
      "number": 324,
      "id": "I_kwDOHTmVzM5t1b9M",
      "title": "JSON serialisation - disclosures to protected/unprotected header?",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/324",
      "state": "CLOSED",
      "author": "alenhorvat",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "pending-close"
      ],
      "body": "Current document introduces a new serialisation for JSON serialised JWS by adding a new claim at the top level (disclosures).\r\n\r\nTo make it fully compatible with JSON serialised JWS, the claim could be included in the protected or unprotected header, depending on whether the disclosures need to be (explicitly) signed or not.\r\n\r\nWould it be possible to move the \"disclosures\" claim to the protected/unprotected header?\r\n\r\nIf the disclosures must be signed explicitly, the disclosures must be in the protected header, if the don't have to be signed, they should be in the unprotected header.",
      "createdAt": "2023-08-09T08:15:31Z",
      "updatedAt": "2023-08-11T04:53:58Z",
      "closedAt": "2023-08-11T04:53:58Z",
      "comments": [
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "@danielfett this is also related to the question: https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/325\r\n\r\nIf holder protects the shared SD-JWT, then holder binding JWT is not required.\r\n\r\nThese are 2 possible approaches for holder binding.\r\n\r\nI realised that Section 8 actually introduces a new JSON JWS serialisation by adding additional claims.",
          "createdAt": "2023-08-09T08:52:55Z",
          "updatedAt": "2023-08-09T08:52:55Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Adding disclosures to a protected header would make selective disclosure impossible, since there will be no way to remove the disclosures without breaking the issuer's signature, so I don't think it's an option. (it's the Issuer, not the Holder who signs JSON serialized JWS)\r\n\r\nPutting Disclosures in an unprotected header might be an option, though my gut reaction is that I do not really like how it encourages the holder to modify the Issuer-created unprotected header. What problem are you are trying to solve by not putting disclosures in the JSON as currently defined? \r\n\r\n> I realised that Section 8 actually introduces a new JSON JWS serialisation by adding additional claims.\r\n\r\nI am not sure I follow what you mean by `a new JSON JWS serialisation`",
          "createdAt": "2023-08-10T22:52:25Z",
          "updatedAt": "2023-08-10T22:52:25Z"
        }
      ]
    },
    {
      "number": 325,
      "id": "I_kwDOHTmVzM5t1d5u",
      "title": "kb_jwt in JSON serialisation",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/325",
      "state": "CLOSED",
      "author": "alenhorvat",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "_Holder adds the key kb_jwt at the top-level of the serialized JWS with a string value containing the Key Binding JWT as described in [Section 5.10](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-05.html#kb-jwt)._\r\n\r\nOnce the JWS is signed, the key binding is ensured via the signature. The current proposal asks the user to sign 2x\r\n1. signature is the \"signature\" of the payload and protected header\r\n2. is the key binding JWT which actually proves the same\r\n\r\nShould the kb_jwt be removed from the JSON serialised JWS?",
      "createdAt": "2023-08-09T08:20:39Z",
      "updatedAt": "2023-10-16T20:10:26Z",
      "closedAt": "2023-10-16T15:26:09Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I'm not sure I understand your point. The first signature is the signature by the Issuer, the second one by the Holder. This is the same for all data formats. Who is 'user' in your case?",
          "createdAt": "2023-08-09T08:30:11Z",
          "updatedAt": "2023-08-09T08:30:11Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "User is the holder. When writing https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/326 I realised that the JSON serialised JWS is signed by the issuer and then holder adds extra information to the JSON serialised JWS without signing it.\r\n\r\nWhat's the rationale behind the design? I expected that holder, when sharing the SD-JWT + disclosures signs the whole thing, but that's not the case.",
          "createdAt": "2023-08-09T08:35:10Z",
          "updatedAt": "2023-08-09T08:35:10Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Please see See https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/277 and https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/291. The gist is: The attack is fuzzy, while at the same time signing over everything has a huge penalty on the size of the SD-JWT. I would be open to discussing including the hash of the SD-JWT and disclosures in the KB-JWT if we identify that there is a clear need for it.",
          "createdAt": "2023-08-09T08:47:49Z",
          "updatedAt": "2023-08-09T08:47:49Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "In our use cases we're not concerned about the size since information is always retrieved from the server or sent to the server directly. Simplest is to ask the wallet providers just to sign the whole thing and that's it.\r\n\r\nBut I agree, if there are cases where the size is critical, e.g., sharing the payload via redirects, optimisation can applied.",
          "createdAt": "2023-08-09T08:50:04Z",
          "updatedAt": "2023-08-09T08:50:19Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "NONE",
          "body": "An argument that I see for linking the disclosures (probably as hash) into the payload of the KB-JWT is, that:\r\n- a holder could later dispute that he actually released certain claims as disclosures \r\n- a verifier could dispute that he actually received certain disclosures\r\nTo me this is a little weird because right now the signature gives us non-repudiation while the disclosures are repudiable.",
          "createdAt": "2023-08-15T08:02:32Z",
          "updatedAt": "2023-08-15T08:02:32Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #344 removes the kb_jwt from the JSON serialization and so will address this issue once merged. \r\n\r\nIssue #346 is to separately track adding an option for a hash of the SD-JWT and Disclosures in the KB-JWT.",
          "createdAt": "2023-10-02T17:56:22Z",
          "updatedAt": "2023-10-16T20:10:26Z"
        }
      ]
    },
    {
      "number": 326,
      "id": "I_kwDOHTmVzM5t1iOw",
      "title": "Signing SD-JWT and key binding",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/326",
      "state": "CLOSED",
      "author": "alenhorvat",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "duplicate"
      ],
      "body": "The current design, if my understanding is correct, does not sign the sd-jwt and the disclosures when shared by the holder.\r\n\r\nKey binding JWT does not include any binding between the information (sd-jwt + disclosures) and the key binding jwt itself.\r\n\r\nJSON serialised JWS can enable the protection of SD-JWT (without disclosures) when shared by the holder since the holder can put the sd-jwt in the payload and sign it.\r\n\r\nKey binding JWT is either detached from any payload or needs to be signed along with the payload.\r\n\r\nIs there a reason to not sign the holder shared SD-JWT and disclosures? (a simplest attack, removing or adding fake disclosures or modifying any value, simply leads to denial of service)",
      "createdAt": "2023-08-09T08:32:15Z",
      "updatedAt": "2023-08-09T08:45:31Z",
      "closedAt": "2023-08-09T08:36:47Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Please look up previous issues before opening duplicates.\r\n\r\nSee https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/277 and https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/291",
          "createdAt": "2023-08-09T08:36:47Z",
          "updatedAt": "2023-08-09T08:36:47Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "Thank you for pointing out the existing issues.\r\n\r\nIt seems that several people raised the same concern. I wasn't aware of #277.\r\n\r\nAs expressed above, holder binding JWT and protecting the holder-shared SD-JWT can achieve the same so there are 2 methods to achieve the holder binding.",
          "createdAt": "2023-08-09T08:45:31Z",
          "updatedAt": "2023-08-09T08:45:31Z"
        }
      ]
    },
    {
      "number": 327,
      "id": "I_kwDOHTmVzM5t42PC",
      "title": "Request a media type for JSON Serialization",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/327",
      "state": "CLOSED",
      "author": "OR13",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "bc-pi"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "https://datatracker.ietf.org/doc/html/draft-ietf-oauth-selective-disclosure-jwt-05#section-12.1\r\n\r\nSomething like `+sd-jwt+json`, that supports the JSON serialization and in particular the unprotected header.",
      "createdAt": "2023-08-09T16:22:10Z",
      "updatedAt": "2023-10-16T15:25:51Z",
      "closedAt": "2023-10-16T15:25:51Z",
      "comments": [
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "After some reflection I realised that SD-JWT (compact/JSON) is not a new encoding for securing mechanism but it is a presentation since it only adds information to existing JWS (compact/JSON). In a sense it is an alternative to Verifiable Presentation.\r\n\r\nI guess\r\n`+sd-jwt`\r\n`+sd-jwt+json`\r\ncover the two cases.",
          "createdAt": "2023-08-10T06:43:02Z",
          "updatedAt": "2023-08-10T06:43:02Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I do not see the need to request registration of a new media type. `+sd-jwt` and `+json` will both exist independently and if someone sees the need to combine they could but I do not feel comfortable advocating for the use of combining them. It does not have to be a media type that is used to differentiate JWS compact and JSON serializations.",
          "createdAt": "2023-08-10T22:38:14Z",
          "updatedAt": "2023-08-10T22:38:14Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "I'm just trying to follow the JWS RFC:\r\n\r\n_The \"typ\" value \"JOSE\" can be used by applications to indicate that\r\n   this object is a JWS or JWE using the JWS Compact Serialization or\r\n   the JWE Compact Serialization.  The \"typ\" value \"JOSE+JSON\" can be\r\n   used by applications to indicate that this object is a JWS or JWE\r\n   using the JWS JSON Serialization or the JWE JSON Serialization.\r\n   Other type values can also be used by applications._\r\n\r\nSince the two encodings are completely different, we should be able to communicate the exact encoding, else devs need to try whether it is compact or JSON.",
          "createdAt": "2023-08-11T04:49:24Z",
          "updatedAt": "2023-08-11T04:49:24Z"
        },
        {
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@Sakurann do you see a reason for `+jwt` to be here: https://www.iana.org/assignments/media-type-structured-suffix/media-type-structured-suffix.xhtml\r\n\r\nbut for `+sd-jwt` to not be?\r\n\r\nwon't that just lead to `application/vc+sd-jwt` using an \"unregistered structured suffix\" ?\r\n\r\n`application/sd-jwt+json` would mirror `application/jose+json`\r\n\r\nhttps://www.iana.org/assignments/media-types/media-types.xhtml\r\n\r\nYou should not create a JSON serialization but not document which media type expresses or distinguishes it from its compact cousin.\r\n\r\n> It does not have to be a media type that is used to differentiate JWS compact and JSON serializations.\r\n\r\nIndeed, its current not possible to use media types like this with `sd-jwt`, thats not a feature when comparing `sd-jwt` to `jwt` or `jose`... its a bug.",
          "createdAt": "2023-08-11T12:48:55Z",
          "updatedAt": "2023-08-11T12:50:45Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Why do we need a different media type for the JSON representation? In the moment somebody reads the `typ` value, they should have discovered the serialization format already.",
          "createdAt": "2023-08-15T19:55:05Z",
          "updatedAt": "2023-08-15T19:55:05Z"
        },
        {
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I would not use +json in a typ value.\n\nI would use it with http headers like accept and content type.\n\nI might also use it when nesting a JSON serialized sd-jwt inside other json, and conveying the media type for the nested object... but that's not the primary example.\n\nPrimary example:\n\nGET /identity-document\naccept application/jose\naccept application/jose+json\n\nCould be replaced with:\n\nGET /identity-document\naccept application/sd-jwt \naccept application/sd-jwt+json\n\nInside the header you might find typ: sd-jwt or vc+sd-jwt \n\n... If you were signing a json serialized sd-jwt, you might see typ:jwt, cty: sd-jwt+json.\n",
          "createdAt": "2023-08-18T18:50:53Z",
          "updatedAt": "2023-08-18T18:50:53Z"
        },
        {
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Of course you can use application/json instead of application/jose+json or application/sd-jwt+json... You just can't negotiate for what you want if it's not registered.",
          "createdAt": "2023-08-18T18:52:10Z",
          "updatedAt": "2023-08-18T18:52:10Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "It's always struck me as rather awkward that JWS/JWE/JWT have a 'typ' header[1] inside the thing that's used to declare the media type of that thing and that thing has to have already been (at least partially) processed to get to the value of that `typ` header that will say how to process the thing that's already being processed.  I mean, by the time you've read the `typ` value of a JWS you've already had to figure out that it's a JWS and whether it's compact serialization or one of the JSON serializations. And, of course, there's the fun fact that a JSON serialized JWS might have more than one 'typ' header and it can show show up in variety of places[2]. \r\n\r\nPreventing JWT confusion attacks with explicit typing is a worthwhile thing. Honestly though, in retrospect, I'm not sure `typ` and media types[3] were the best tool for it. But it's a \"Best Current Practice\" now with a registered `+jwt` structured syntax suffix[4] and several registered media types using it[5]. So it's out there and has some momentum in usage. The SD-JWT compact serialization is similar enough to JWT that it made sense to follow the same pattern/recommendation[6] with a structured syntax suffix registration request for `+sd-jwt`[7].  \r\n\r\nI'm becoming less and less convinced that adding the SD-JWT JWS JSON serialization[8] was necessary or a good idea. But it's there in -05 and that leads us here to this issue. Given that 0...n `typ` headers could appear in a JSON serialized SD-JWT, I don't think it's an appropriate construct to employ for preventing type confusion (if JSON serialized SD-JWTs even need such a construct). And (I think similar to @Sakurann) I am not comfortable advocating for the use of multiple structured suffixes and not at all interested in trying to register one with this draft. Which is to say that `+sd-jwt+json` is a pretty hard \"no\" from me. \r\n\r\nFor use with HTTP header fields like `accept` and `content-type` or other contexts where the media type might be used to say what the thing is or ask for a certain thing, the existing `application/jose+json` media type kinda feels like it'd be sufficient. But I can also see the potential usefulness of a more specific `application/sd-jwt+json` and could maybe be convinced that this draft should request registration of such. \r\n\r\n\r\n\r\n[1]\r\nhttps://datatracker.ietf.org/doc/html/rfc7515#section-4.1.9 JWS typ\r\nhttps://datatracker.ietf.org/doc/html/rfc7516#section-4.1.11 JWE typ\r\nhttps://www.rfc-editor.org/rfc/rfc7519#section-5.1 JWT typ\r\n\r\n[2] lots of different places typ header(s) could show up \r\nhttps://datatracker.ietf.org/doc/html/rfc7515#section-7.2.1 General JWS JSON Serialization \r\nhttps://datatracker.ietf.org/doc/html/rfc7515#section-7.2.2 Flattened JWS JSON Serialization\r\n\r\n[3]\r\nhttps://www.rfc-editor.org/rfc/rfc8725#name-use-explicit-typing JWT BCP explicit typing\r\n\r\n[4]\r\nhttps://www.iana.org/assignments/media-type-structured-suffix/media-type-structured-suffix.xhtml\r\n\r\n[5] (somewhat rhetorical) does `dpop+jwt` really need to be an IANA registered media type? \r\nhttps://www.iana.org/assignments/media-types/media-types.xhtml\r\n\r\n[6]\r\nhttps://datatracker.ietf.org/doc/html/draft-ietf-oauth-selective-disclosure-jwt#name-explicit-typing\r\n\r\n[7]\r\nhttps://datatracker.ietf.org/doc/html/draft-ietf-oauth-selective-disclosure-jwt#name-structured-syntax-suffix-re\r\n\r\n[8]\r\nhttps://datatracker.ietf.org/doc/html/draft-ietf-oauth-selective-disclosure-jwt#name-jws-json-serialization",
          "createdAt": "2023-09-26T23:29:33Z",
          "updatedAt": "2023-09-27T00:56:50Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> ... If you were signing a json serialized sd-jwt, you might see typ:jwt, cty: sd-jwt+json.\r\n\r\nWait, what!? How would a json serialized sd-jwt be a jwt (per typ:jwt) or have a payload that is itself a json serialized sd-jwt (per cty:sd-jwt+json)? It doesn't make any sense to me. Was that a mistake made in haste? Or are we on *really* different pages with this stuff?\r\n\r\n",
          "createdAt": "2023-09-26T23:44:18Z",
          "updatedAt": "2023-09-26T23:44:18Z"
        },
        {
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Lets forget about sd-jwt for a second, and just think in terms of:\r\n\r\n- https://www.iana.org/assignments/media-types/application/jwt\r\n- https://www.iana.org/assignments/media-types/application/jose\r\n- https://www.iana.org/assignments/media-types/application/jose+json\r\n\r\nYou could have a JWT with the following header:\r\n\r\n`{ typ: application/foo+jwt, cty: application/jose+json`\r\n\r\nWhen you serve this token as the response body of a network request... you could return it as a compact jws with content type:\r\n\r\nhttps://www.iana.org/assignments/media-types/application/jose\r\n\r\nor as flat jws with content type:\r\n\r\nhttps://www.iana.org/assignments/media-types/application/jose+json\r\n\r\nSD-JWT has a JSON serialization:\r\n\r\n- https://datatracker.ietf.org/doc/html/draft-ietf-oauth-selective-disclosure-jwt-05#name-jws-json-serialization\r\n\r\nWhat is the media type that describes this JSON serialization? is it:\r\n\r\nA. application/json\r\nB: application/jose+json\r\nC: application/sd-jwt+json\r\n\r\nIf you don't say, people will probably guess A or B.\r\n\r\nReturning to the original comment, lets say you have an SD-JWT that is selectively disclosing an already JSON encoded SD-JWT... you would have the following header:\r\n\r\n`{ typ: application/foo+sd-jwt, cty: (A, B, C) }`\r\n\r\nI'm not suggesting this use case is critical, I am saying that its confusing, and media types could help clarify it... even if the recommendation is... don't do this... but there seem to be use cases for this sort of thing being discussing in WIMSE right now : )",
          "createdAt": "2023-09-28T13:24:25Z",
          "updatedAt": "2023-09-28T13:25:19Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Had a slack conversation with @OR13 and think it can be summarized as him being in favor of this draft requesting registration of `application/sd-jwt+json` for the SD-JWT JSON Serialization and me not being opposed to it. \r\n",
          "createdAt": "2023-09-28T22:29:06Z",
          "updatedAt": "2023-09-28T22:29:06Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #349 adds a registration request for a media type for the JSON Serialization",
          "createdAt": "2023-10-05T21:48:09Z",
          "updatedAt": "2023-10-05T21:48:09Z"
        }
      ]
    },
    {
      "number": 328,
      "id": "I_kwDOHTmVzM5uCHsJ",
      "title": "HMAC Issuer-signed JWT and/or KB-JWT",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/328",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "duplicate",
        "discuss-first"
      ],
      "body": "[filing on behalf, not my issue]\r\nA request has been received via work in ISO to enable an option to HMAC KB JWT to enable non-repudiation.",
      "createdAt": "2023-08-11T00:29:20Z",
      "updatedAt": "2024-01-09T17:29:09Z",
      "closedAt": "2024-01-09T17:29:09Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "My understanding is that it's not about non-repudiation but rather that it enables some degree of repudiation b/c the HMAC key is known to both parties (likely resulting from an ECDH exchange at the \"protocol\" layer requesting/presenting the credential). There have been some other claims of privacy benefits too but I'd be lying if I said I understood them.",
          "createdAt": "2023-08-21T01:13:56Z",
          "updatedAt": "2023-09-25T21:58:50Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "A potential variation on this issue (and maybe common point of misunderstanding/confusion in general) would instead be to allow for the Issuer-signed JWT to be HMAC'd. It's been discussed a few times I think but came up again with Neil Madden being supportive of the idea in this ML thread https://mailarchive.ietf.org/arch/msg/oauth/rPitG7FvJcVEyIcAwn0bXzGToGM/ that I've copied relevant parts from:\r\n\r\n\r\n> > >  [Neil] The draft repeatedly says that a symmetric signature algorithm (MAC) must not be used. Perhaps I\u2019m missing something here, but why not? It doesn\u2019t seem like it compromises any of the intended security properties. Use of a symmetric MAC may also limit the privacy impacts on users as it provides some measure of deniability (similar to that mentioned in section 12.1), as any Verifier in possession of the secret key could also have produced any claims that are subsequently leaked, allowing the user to deny that they were produced by the supposed Issuer. (This deniability property holds even without subsequent leaking of old signing keys).\r\n\r\n> > [Brian] The thinking behind that was basically that this Issuer-Holder-Verifier model implies/assumes that an Issuer issues a token with no idea of where it\u2019ll be presented and having a shared symmetric key seemed really weird in that situation. Also hard to explain why or how a shared symmetric key would work in that situation too. That said, there\u2019s been some talk about loosening that restriction - largely around the same reasoning on deniability that you cite - I guess your comment here should be taken as supportive of that prospective change?\r\n\r\n>  [Neil] Yes. \r\n\r\n",
          "createdAt": "2023-10-26T19:57:36Z",
          "updatedAt": "2023-10-26T21:50:41Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "closing this because confirmed that what is potentially needed is HMACing issuer-signed credential and not KB JWT.",
          "createdAt": "2023-11-07T13:10:07Z",
          "updatedAt": "2023-11-07T13:10:07Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "reopening to have some tracking of the potential variation on this issue of having the Issuer-signed JWT to be HMAC'd",
          "createdAt": "2023-11-07T15:44:11Z",
          "updatedAt": "2023-11-07T15:44:11Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this as it is effectively a duplicate of #369",
          "createdAt": "2024-01-09T17:29:09Z",
          "updatedAt": "2024-01-09T17:29:09Z"
        }
      ]
    },
    {
      "number": 329,
      "id": "I_kwDOHTmVzM5uCb2O",
      "title": "batch issuing SD-JWTs without duplicating plain text claim values....?",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/329",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "pending-close"
      ],
      "body": "the issue comes from mso_mdoc world. the issued credential contains claim values huge in size, like portrait images, so when the issuer tries to issue a lot of the copies of the same credential to enable verifier unlinkability, the issuer has to duplicate something big in size, also increasing the size of the credentials the wallet needs to store.\r\n\r\nI think this is possible with SD-JWTs only if when the issuer will define a version of not-full \"disclosures\" that does not contain the plaintext claim value. so that when the wallet will send the full SD-JWT to the verifier, the wallet will have to reconstruct the full disclosures using the plaintext claim value it has received from elsewhere and the not-full disclosures...\r\n\r\nrelated to this OID4VCI issue in Bitbucket: https://bitbucket.org/openid/connect/issues/2003/de-duplication-of-unsigned-data-when",
      "createdAt": "2023-08-11T03:07:11Z",
      "updatedAt": "2024-02-14T20:10:39Z",
      "closedAt": "2024-02-14T20:10:39Z",
      "comments": [
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "This is related to how the issued credentials are structured. E.g., if name, surname, photo are plaintext and you issue 10 sd-jwt, I guess the model could be:\r\n```\r\n{\r\n\"plain\": {\r\n  \"name\": \"Alice\",\r\n  \"surname\": \"Wonderland\",\r\n  \"photo\": \"abc...123\"\r\n},\r\n\"hidden\": [\r\n  {\r\n    here credentials contain the hidden values + json path to the plain text claim\r\n  }, ...\r\n]\r\n}\r\n```\r\nThe issue is that JSON is non-deterministic and it will be very hard to reproduce a deterministic structure you need to verify the signature without the use of JCS or approach introduced in JAdES where you have additional JSON object defining which elements are used to re-produce the signature.\r\n\r\nAnother option would be to split the VC in 2 part - plain + hidden and something like `b64 plain`+`b64 hidden` is signed over - or any other deterministic structure.",
          "createdAt": "2023-08-11T05:26:50Z",
          "updatedAt": "2023-08-11T05:27:55Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I assume that the fields in the issued SD-JWTs that contain (for example) a portrait image should compress quite well when multiple SD-JWTs are compressed together in one data stream, as the base64 representation will often times be the same. (When the bytes don't align, there may be two or three different representations of the portrait image in the compressed data, but it should not be more than that. Issuers can even optimize for this.) \r\n\r\nSo both for issuance as well as for storing the credentials, compression may be a good option to reduce size.",
          "createdAt": "2023-08-11T07:26:09Z",
          "updatedAt": "2023-08-11T07:26:09Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I have been thinking about this a little, and I think the simplest way to do this with sd-jwt, without any structural changes is to define a string (\u201cdehydrated\u201d for example) that goes instead of a plaintext claim value in a dehydrated credential (it's an ISO term, it's basically a credential that does not contain full plain text value). we could add one paragraph on this in privacy considerations section where we talk about unlinkability....",
          "createdAt": "2023-08-15T04:14:43Z",
          "updatedAt": "2023-08-15T04:15:32Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "This would effectively be a highly specialized compression algorithm that needs to be specified and implemented specifically for this credential format. The readily available alternative is to just use gzip (or whatever your preferred compression algorithm is) which will not only do this for you, but also compress your other data.",
          "createdAt": "2023-08-15T19:44:29Z",
          "updatedAt": "2023-08-15T19:44:29Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> related to this OID4VCI issue in Bitbucket: https://bitbucket.org/openid/connect/issues/2003/de-duplication-of-unsigned-data-when \r\n\r\nwhich is now https://github.com/openid/OpenID4VCI/issues/54 after the migration of some of the OID4VC work to github",
          "createdAt": "2023-09-25T21:09:22Z",
          "updatedAt": "2023-09-25T21:09:22Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "But I agree with @danielfett that spec'ing something here would likely \"effectively be a highly specialized compression algorithm that needs to be specified and implemented specifically for this credential format\" that would also need to define something across SD-JWT instances (where the draft currently defines just a single instance) to refer to the same plain text claim value and account for the integrity of that value and consider the linkability implications of how it's referenced etc. I think this is a potential optimization that SD-JWT should not attempt to tackle. ",
          "createdAt": "2023-09-25T21:49:18Z",
          "updatedAt": "2023-12-22T23:25:34Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "@cobward, is this still important to the issuance of mdocs and/or ISO/IEC 23220-3..?",
          "createdAt": "2024-02-13T16:46:30Z",
          "updatedAt": "2024-02-13T16:46:47Z"
        },
        {
          "author": "cobward",
          "authorAssociation": "NONE",
          "body": "Currently, 23220-3 uses a CBOR representation of the credential data with optionally included plain text claims in the credential response. No specific work is needed here to support that.",
          "createdAt": "2024-02-14T14:36:03Z",
          "updatedAt": "2024-02-14T14:36:03Z"
        }
      ]
    },
    {
      "number": 330,
      "id": "I_kwDOHTmVzM5uL76N",
      "title": "Emoji as tags in JSON",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/330",
      "state": "CLOSED",
      "author": "OR13",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It's difficult to implement tagging of \"object keys\" in JSON because of the requirement that they be strings.\r\n\r\nThe OWF reference implementation in python uses YAML tags to work around this, but that adds additional language and complexity to implementations.\r\n\r\nAn alternative is to embed the \"tag\" as unicode in the JSON key... here is an example:\r\n\r\n```json\r\n{\r\n  \"array_with_recursive_sd\": [\r\n    \"boring\",\r\n    {\r\n      \"foo\": \"bar\",\r\n      \"\ud83d\udd34baz\": {\r\n        \"qux\": \"quux\"\r\n      }\r\n    },\r\n    [\r\n      {\r\n        \"\ud83d\udfe1\": \"foo\"\r\n      },\r\n      {\r\n        \"\ud83d\udfe1\": \"bar\"\r\n      }\r\n    ]\r\n  ],\r\n  \"test2\": [\r\n    {\r\n      \"\ud83d\udfe1\": \"foo\"\r\n    },\r\n    {\r\n      \"\ud83d\udfe1\": \"bar\"\r\n    }\r\n  ]\r\n}\r\n```\r\n",
      "createdAt": "2023-08-13T14:45:48Z",
      "updatedAt": "2023-08-28T14:00:43Z",
      "closedAt": "2023-08-28T14:00:43Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I thought about this, but excluded any \"tag the keys\" solution as it will never be free from conflicts. (But I do admit that using red and orange dots is unusual enough to make conflicts unlikely in practice :-) )\r\n\r\nAlso, I don't think this works well for array elements?",
          "createdAt": "2023-08-14T14:27:48Z",
          "updatedAt": "2023-08-14T14:27:48Z"
        },
        {
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "body": "yes, as you can see the array element format, is also hybridized... still need an object to represent disclosing an array element.\r\n\r\nAll of these tricks to figure out what is disclosable or not when issuing are implementation details. You could use JSON Pointer, YAML, or some specific JSON syntax.\r\n\r\nWhen implementers sit down to attempt conformance, this is a major hurdle to quickly confirming the existing test vectors generated from python.\r\n\r\nI think it would be best to have 0 additional dependencies for this part (a JSON solution would be best)... Comparing YAML vs JSON Pointer, I think JSON Pointer would be better, since it does not bring in a new language.\r\n\r\nWe're currently using the YAML approach, but I wrote an inverter that converts from a sd-jwt to a YAML schema with tags here: https://github.com/transmute-industries/vc-jwt-sd\r\n\r\nHere are a few examples side by side:\r\n\r\n```yaml\r\narray_with_recursive_sd:\r\n  - boring\r\n  - foo: bar\r\n    !sd baz:\r\n      qux: quux\r\n  - - !sd foo\r\n    - !sd bar\r\ntest2:\r\n  - !sd foo\r\n  - !sd bar\r\n```\r\n\r\n```json\r\n{\r\n      \"array_with_recursive_sd\": [\r\n        \"boring\",\r\n        {\r\n          \"foo\": \"bar\",\r\n          \"\ud83d\udd34baz\": {\r\n            \"qux\": \"quux\"\r\n          }\r\n        },\r\n        [\r\n          {\r\n            \"\ud83d\udfe1\": \"foo\"\r\n          },\r\n          {\r\n            \"\ud83d\udfe1\": \"bar\"\r\n          }\r\n        ]\r\n      ],\r\n      \"test2\": [\r\n        {\r\n          \"\ud83d\udfe1\": \"foo\"\r\n        },\r\n        {\r\n          \"\ud83d\udfe1\": \"bar\"\r\n        }\r\n      ]\r\n}\r\n```\r\n\r\n```json\r\n{\r\n  \"/array_with_recursive_sd/0\": \"boring\",\r\n  \"/array_with_recursive_sd/1/foo\": \"bar\",\r\n  \"/array_with_recursive_sd/1/\ud83d\udd34baz/qux\": \"quux\",\r\n  \"/array_with_recursive_sd/2/0/\ud83d\udfe1\": \"foo\",\r\n  \"/array_with_recursive_sd/2/1/\ud83d\udfe1\": \"bar\",\r\n  \"/test2/0/\ud83d\udfe1\": \"foo\",\r\n  \"/test2/1/\ud83d\udfe1\": \"bar\"\r\n}\r\n```\r\n\r\nWith syntax highlighting the yaml example looks very nice... but I still feel that adding YAML as a critical dependency is probably not the best path to increasing implementation / adoption.\r\n",
          "createdAt": "2023-08-14T14:36:12Z",
          "updatedAt": "2023-08-14T14:38:26Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Ah thanks, I didn't realize that the other color has a different meaning.\r\n\r\nI don't consider YAML a critical dependency... but it allows for the (practically only) clean and compact definition of the test cases. \r\n\r\nI propose that anybody who needs a different format implements a translation (that needs to be run only when updating test cases). I thought about pulling the test cases into their own repository, I suppose that translators into other formats could live there as well, automatically providing us with different representations of the same test cases.",
          "createdAt": "2023-08-15T19:53:39Z",
          "updatedAt": "2023-08-15T19:53:39Z"
        },
        {
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Unless you plan on adding language about recognizing disclosable claims, I think this issue should remain closed.",
          "createdAt": "2023-08-28T14:00:43Z",
          "updatedAt": "2023-08-28T14:00:43Z"
        }
      ]
    },
    {
      "number": 331,
      "id": "I_kwDOHTmVzM5uZ9yv",
      "title": "Considerations about the storage of the SD-JWT",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/331",
      "state": "CLOSED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "In the section 10.1 \"Storage of signed user data\" we read `Issuers SHOULD NOT store SD-JWTs after issuance`\r\n\r\nAnd this is concerning because I assume that single parts of the SD-JWT, such as the issuer signed JWT, may not contain any personal data, and then they should be stored without the disclosure documents.\r\n\r\nThis interpretation focuses on the distinction between the issuer signed JWT and its disclosure documents, together (with KB-JWT as well) they forms the SD-JWT and the recommendation would be to not store the Entire the SD-JWT for privacy/data-retention reasons; while the issuer signed JWT, when it does not contain any disclosed user data, it could be stored without any limitation.\r\n\r\nthe implementation consideration about the requirement to store an issuer signed jwt leds to the requirement to store any signed artifacts until their expiration and also manage its revocation list. \r\n\r\n",
      "createdAt": "2023-08-15T23:56:52Z",
      "updatedAt": "2023-10-02T15:48:39Z",
      "closedAt": "2023-10-02T15:48:39Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "PR - please review: https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/336",
          "createdAt": "2023-08-28T11:44:03Z",
          "updatedAt": "2023-08-28T11:44:03Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR merged",
          "createdAt": "2023-10-02T15:48:39Z",
          "updatedAt": "2023-10-02T15:48:39Z"
        }
      ]
    },
    {
      "number": 332,
      "id": "I_kwDOHTmVzM5vGlMT",
      "title": "Introduce Verfiier/Holder checks for claim names in Disclosures",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/332",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "Must not be\r\n\r\n* Empty\r\n* _sd\r\n",
      "createdAt": "2023-08-23T20:52:48Z",
      "updatedAt": "2023-08-29T16:21:43Z",
      "closedAt": "2023-08-29T16:21:43Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "empty seems ok ",
          "createdAt": "2023-08-23T22:40:16Z",
          "updatedAt": "2023-08-23T22:40:16Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/335 was merged so closing ",
          "createdAt": "2023-08-29T16:21:43Z",
          "updatedAt": "2023-08-29T16:21:43Z"
        }
      ]
    },
    {
      "number": 333,
      "id": "I_kwDOHTmVzM5vRfR0",
      "title": "claim validation should happen after processing disclosures",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/333",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": " Validation of JWT claims, especially those controlling the validity such as iss, exp, or nbf, needs to occur after the processing/unpacking of the disclosures. Such claims will likely usually be in plain text of the payload but as written now https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-05.html#section-6.1-4.2.2.4 checks on them could be omitted, if they are in disclosures. [as discussed after OSW in the Uber to LHR]",
      "createdAt": "2023-08-25T11:16:20Z",
      "updatedAt": "2023-08-29T15:51:21Z",
      "closedAt": "2023-08-29T15:51:21Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "PR https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/334 merged ",
          "createdAt": "2023-08-29T15:51:21Z",
          "updatedAt": "2023-08-29T15:51:21Z"
        }
      ]
    },
    {
      "number": 337,
      "id": "I_kwDOHTmVzM5wapq9",
      "title": "Example 4a - address array disclosure",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/337",
      "state": "CLOSED",
      "author": "sschulz-t",
      "authorAssociation": "NONE",
      "assignees": [
        "bc-pi"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "I was wondering if there might be a mistake in the encoding of the address given in example 4:\r\n```\r\n<snip>\r\n\"birthdate\": \"1973-01-01\",\r\n  \"address\": {\r\n    \"postal_code\": \"12345\",\r\n    \"locality\": \"Irgendwo\",\r\n    \"street_address\": \"Sonnenstrasse 23\",\r\n    \"country_code\": \"DE\"\r\n  },\r\n  \"is_over_18\": true,\r\n<snip>\r\n```\r\n\r\nThe documentation says:\r\n```\r\nSHA-256 Hash: Y1urWJV_-HBGnSf9tFOwvH4cICRBCiKwEHfkXFSfjpo\r\nDisclosure:\r\nWyItNmhDZVJFV3JjRWg0Q2JzQ2RjVTVRIiwgImFkZHJlc3MiLCB7Il9zZCI6\r\nIFsiOHo4ejlYOWpVdGI5OWdqZWpDd0ZBR3o0YXFsSGYtc0NxUTZlTV9xbXBV\r\nUSIsICJDeHE0ODcyVVhYbmdHVUxUX2tsOGZkd1ZGa3lLNkFKZlBaTHk3TDVf\r\nMGtJIiwgImxjMk8weER4WXdiZ2M4cjJERXc3eWhfSURXZXhXOENiZ3R6WVBR\r\nRlJpNGMiXSwgInBvc3RhbF9jb2RlIjogIjEyMzQ1IiwgImxvY2FsaXR5Ijog\r\nIklyZ2VuZHdvIiwgInN0cmVldF9hZGRyZXNzIjogIlNvbm5lbnN0cmFzc2Ug\r\nMjMiLCAiY291bnRyeV9jb2RlIjogIkRFIn1d\r\nContents: [\"-6hCeREWrcEh4CbsCdcU5Q\", \"address\", {\"_sd\":\r\n[\"8z8z9X9jUtb99gjejCwFAGz4aqlHf-sCqQ6eM_qmpUQ\",\r\n\"Cxq4872UXXngGULT_kl8fdwVFkyK6AJfPZLy7L5_0kI\",\r\n\"lc2O0xDxYwbgc8r2DEw7yh_IDWexW8CbgtzYPQFRi4c\"],\r\n\"postal_code\": \"12345\", \"locality\": \"Irgendwo\",\r\n\"street_address\": \"Sonnenstrasse 23\", \"country_code\": \"DE\"}]\r\n```\r\n\r\nI assume this should be [SD-JWT with Recursive Disclosures](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-05.html#name-option-3-sd-jwt-with-recurs)?\r\n\r\nIt looks like the claims where added to the list on error and there is a missing hash.\r\nI would expect to see some additional disclosure elements for postal_code, ... (each with a nonce)  similar to [section-5.7.3](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-05.html#section-5.7.3)  instead.",
      "createdAt": "2023-09-07T14:38:29Z",
      "updatedAt": "2023-10-02T15:47:21Z",
      "closedAt": "2023-10-02T15:47:20Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for catching that! There is definitely a mistake in Example 4a. But it looks like the problem has to do with decoy digests in that example. The decoys listed at https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-05.html#appendix-A.3-30 got pulled from the wrong place and so don't match up with the other example content, which includes the address claim Disclosure you've pointed. That all makes parts of that Example 4a problematic and hard to follow. \r\n\r\nI think it'd be best addressed by not including decoys in Example 4a. \r\n\r\nThis is related: https://github.com/danielfett/sd-jwt/issues/13 FWIW ",
          "createdAt": "2023-09-07T21:04:23Z",
          "updatedAt": "2023-09-07T21:04:23Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #338 aims to fix this. A preview from that PR of that example: https://drafts.oauth.net/oauth-selective-disclosure-jwt/bc-fix-ex-4a/draft-ietf-oauth-selective-disclosure-jwt.html#appendix-A.3 \r\n\r\nand specifically the Disclosure for address: https://drafts.oauth.net/oauth-selective-disclosure-jwt/bc-fix-ex-4a/draft-ietf-oauth-selective-disclosure-jwt.html#appendix-A.3-22",
          "createdAt": "2023-09-07T21:22:00Z",
          "updatedAt": "2023-09-07T21:30:58Z"
        },
        {
          "author": "sschulz-t",
          "authorAssociation": "NONE",
          "body": "Thanks for the quick response! That looks much better.\r\nI was expecting the address to be passed in a way that allows the selective disclosure of single items (e.g., only the post code).\r\nMaybe you can add an additional comment which of the three options in 5.7 every example uses (here 5.7.1). \r\n\r\nTo me, having three options in 5.7 makes it unnecessarily complicated. \r\n5.7.1 and 5.7.3 are basically the same when you would allow having non-selectively disclosable items in this as well. If that would be the case, this could probably also handle all cases 5.7.2 would be used for.",
          "createdAt": "2023-09-08T07:16:45Z",
          "updatedAt": "2023-09-08T07:16:45Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Thanks for reporting this and @bc-pi thanks for the quick fix! \r\n\r\n@sschulz-t The options in 5.7 are meant to show what is possible with SD-JWT and are not meant to restrict or define how `address` can be encoded. It is up to the issuer to decide for each claim whether it should be SD or not. Options 1-3 just show some of the possible results. \r\n\r\nI'm not sure I'm following what you mean by \"having non-selectively disclosable items in this as well\". Could you give an example?",
          "createdAt": "2023-09-08T07:29:39Z",
          "updatedAt": "2023-09-08T07:29:39Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I created this PR to ensure that our wording around the options is clear in that the options are non-normative and not exhaustive: https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/340",
          "createdAt": "2023-09-08T07:42:32Z",
          "updatedAt": "2023-09-08T07:42:32Z"
        },
        {
          "author": "sschulz-t",
          "authorAssociation": "NONE",
          "body": "I was wondering, if 5.7.1 would allow to have non-selectively disclosable items in the address claim:\r\n```\r\n[\"Qg_O64zqAxe412a108iroA\",  \"address\", \r\n  {\r\n   \"_sd\": [\"6vh9bq-zS4GKM_7GpggVbYzzu6oOGXrmNVGPHP75Ud0\",\"9gjVuXtdFROCgRrtNcGUXmF65rdezi_6Er_j76kmYyM\",\"KURDPh4ZC19-3tiz-Df39V8eidy1oV3a3H1Da2N0g88\"],\r\n   \"country\": \"DE\"\r\n  }\r\n]\r\n```\r\nThis single definition could then cover all use cases of 5.7.1,5.7.2, and 5.7.3.\r\n\r\nBut i see what you are up to (thanks for #340 \ud83d\udc4d). You do want to leave a maximum flexibility. However, i am a bit concerned of \"creative\" uses of what is technically possible and how to make sure to be able to parse/process all possible combinations in the openid4vp context.",
          "createdAt": "2023-09-08T07:56:30Z",
          "updatedAt": "2023-09-08T07:56:30Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Yes, this mixture is possible within the current specification.\r\n\r\nWith the algorithm defined in Section  6.3 there is no need (for the Holder) to be aware of all possible combinations. (In other words, such assumptions should never be hard coded.) \r\n\r\nIt is just the Issuer that has to make a decision on which pattern to use.",
          "createdAt": "2023-09-08T08:55:15Z",
          "updatedAt": "2023-09-08T08:55:15Z"
        },
        {
          "author": "sschulz-t",
          "authorAssociation": "NONE",
          "body": "Sure, this should never be hard coded. However you need e.g., to come up with a user friendly way of displaying that kind of information in a wallet context. It is a challenge to find an intuitive/understandable way to inform the user which information will or can be disclosed and so on. But this is becoming way to off-topic ;) Thanks for your quick response!",
          "createdAt": "2023-09-08T10:19:23Z",
          "updatedAt": "2023-09-08T10:19:23Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/338 merged ",
          "createdAt": "2023-10-02T15:47:20Z",
          "updatedAt": "2023-10-02T15:47:20Z"
        }
      ]
    },
    {
      "number": 341,
      "id": "I_kwDOHTmVzM5wg-HR",
      "title": "Change how VC formats are described",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/341",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [
        "danielfett"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "In the appendix, we should avoid suggesting that we're describing an SD-JWT VC and refer to the now-adopted SD-JWT VC spec instead.",
      "createdAt": "2023-09-08T13:26:26Z",
      "updatedAt": "2024-02-29T13:08:48Z",
      "closedAt": "2024-02-29T13:08:48Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "The same applies to our W3C VC Example - we should be very explicit that we're not defining anything here and just giving examples.",
          "createdAt": "2023-09-18T15:14:55Z",
          "updatedAt": "2023-09-18T15:14:55Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "these clarifications would be nice.",
          "createdAt": "2023-09-26T04:19:36Z",
          "updatedAt": "2023-09-26T04:19:36Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "~~I'm sure you are aware but the `draft-terbu-sd-jwt-vc` reference needs to be updated to `draft-ietf-oauth-sd-jwt-vc`.~~ ",
          "createdAt": "2023-10-17T18:20:57Z",
          "updatedAt": "2024-02-12T22:06:27Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Actually, the current text reads ok to me? what would you change..?\r\n\r\n> In this example, the artifacts defined in this specification are used to represent SD-JWT-based Verifiable Credentials (SD-JWT VC) as defined in [[I-D.terbu-sd-jwt-vc](https://drafts.oauth.net/oauth-selective-disclosure-jwt/draft-ietf-oauth-selective-disclosure-jwt.html#I-D.terbu-sd-jwt-vc)]. Person Identification Data (PID) defined in [[EUDIW.ARF](https://drafts.oauth.net/oauth-selective-disclosure-jwt/draft-ietf-oauth-selective-disclosure-jwt.html#EUDIW.ARF)] is used.\r\n",
          "createdAt": "2023-12-11T17:40:24Z",
          "updatedAt": "2023-12-11T17:40:24Z"
        }
      ]
    },
    {
      "number": 342,
      "id": "I_kwDOHTmVzM5xzGaq",
      "title": "mention that key binding key can be correlatable in batching ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/342",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "danielfett"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "It might be obvious to some/many but I think it's worth mentioning that the key binding key needs to be unique per SD-JWT when using batch issuance to try and get verifier/verifier unthinkably. I feel like I've seen it come up in a few discussions recently and sometimes stated like it was a new discovery. Having just a mention of it in the draft could be helpful guidance/reminder and also preempt criticism that it was somehow not known. \r\n\r\nMaybe just a few words in https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-05.html#name-unlinkability ",
      "createdAt": "2023-09-22T16:41:35Z",
      "updatedAt": "2024-02-13T16:59:08Z",
      "closedAt": "2024-02-13T16:59:02Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "making it clearer would be nice",
          "createdAt": "2023-09-26T04:20:29Z",
          "updatedAt": "2023-09-26T04:20:29Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "NONE",
          "body": "In batch issued credentials it might make sense to also think about iat/exp dates\r\nEither these should be:\r\n- round up/down to certain timepoints, e.g. 24h UTC times giving a better herd anonymity\r\n- randomize the timepoints within a certain range",
          "createdAt": "2023-11-07T15:51:44Z",
          "updatedAt": "2023-11-07T15:51:44Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR merged",
          "createdAt": "2024-02-13T16:59:02Z",
          "updatedAt": "2024-02-13T16:59:08Z"
        }
      ]
    },
    {
      "number": 345,
      "id": "I_kwDOHTmVzM5yVVFh",
      "title": "Definitively distinguishing SD-JWT",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/345",
      "state": "CLOSED",
      "author": "andrewwhitehead",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "question",
        "pending-close"
      ],
      "body": "Considering an SD-JWT-aware processor that also processes non-SD JWTs, there seem to be multiple ways to determine whether SD processing should be performed and I wonder if this needs clarification.\r\n\r\n- If the `typ` contains an `sd-jwt` component, ie. it is `SD-JWT` or `myapp+sd-jwt+json` or `application/sd-jwt`, then I believe the credential MUST be assumed to be SD-JWT. In the compact serialization, should the absence of a tilde make the input invalid?\r\n\r\n- If the compact serialization contains a tilde and the `typ` is ambiguous/unknown: should SD-JWT be assumed? What if the prover adds a tilde to the end of a traditional JWT? In that case it is unlikely that the JWT contains `_sd`, `_sd_alg`, or `...` claims, but not impossible either.\r\n\r\nApologies if this is covered and I missed it.",
      "createdAt": "2023-09-28T20:05:28Z",
      "updatedAt": "2024-02-20T07:00:01Z",
      "closedAt": "2024-02-20T07:00:01Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "If you are trying to separate normal JWT with SD-JWT, \r\n- look at the factors external to the credential, such as HTTP content-type, or credential format identifiers in the OpenID4VC protocols to distinguish\r\n- if no such factors exist, whether there is a tilde after first three dot-separated strings is a way to distinguish\r\n\r\nwe would not recommend using `typ` JOSE header because by the time you get it, you need to have already done JWT or SD-JWT specific processing",
          "createdAt": "2023-10-02T16:09:51Z",
          "updatedAt": "2023-10-02T16:09:51Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "If you are talking about distinguishing SD-JWT with and without selectively disclosable claims, those do not need to be separated because they can be processed using the same processor. (I wasn't sure what exactly you meant by `non-SD JWTs` so to be sure)",
          "createdAt": "2023-10-02T16:11:07Z",
          "updatedAt": "2023-10-02T16:11:07Z"
        },
        {
          "author": "andrewwhitehead",
          "authorAssociation": "NONE",
          "body": "I spoke to Torsten a bit about this yesterday.\r\n\r\nI think my issue is mainly with a hostile prover, who does not have to send the correct content-type (if there is a place to put one) and can change the token. If the holder strips off any disclosures, the trailing tilde, and optional KB-JWT, the result is still a valid JWT and the signature would verify, although the token might have some strange claims such as `_sd` and `{\"...\": hash}`. Conversely, the holder could take a traditional JWT and add a tilde, potentially triggering SD-JWT processing (although I can't see any concrete risk here).\r\n\r\nFor me, the best way to resolve this ambiguity would be to modify the signing procedure for an SD-JWT such that the signature would NOT match that of a corresponding JWT, likely by adding something to the plaintext, thus requiring the verifier to be informed about which type of token they are processing.\r\n\r\nOtherwise, I believe that adding a standard claim in the SD-JWT protected header could help prevent confusion (`\"_sd\": true` for example).",
          "createdAt": "2023-10-12T16:45:19Z",
          "updatedAt": "2023-10-12T16:45:19Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "hostile prover cannot change the `typ` value in the header of an issuer-signed JWT, so if the issuer issued it with `\"typ\": \"sd+jwt\"`, the verifier will be able to detect it. ",
          "createdAt": "2023-10-31T17:03:09Z",
          "updatedAt": "2023-10-31T17:03:09Z"
        }
      ]
    },
    {
      "number": 346,
      "id": "I_kwDOHTmVzM5ykt1_",
      "title": "Introduce option for hash of SD-JWT and Disclosures in KB-JWT",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/346",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [
        "danielfett"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "as discussed on call",
      "createdAt": "2023-10-02T16:17:05Z",
      "updatedAt": "2023-10-23T16:08:38Z",
      "closedAt": "2023-10-23T16:08:38Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Note that the text added in https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/305/files might need to be adjusted or augmented with this.",
          "createdAt": "2023-10-10T16:41:21Z",
          "updatedAt": "2023-10-10T16:41:21Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "The PR has been merged.",
          "createdAt": "2023-10-23T16:08:38Z",
          "updatedAt": "2023-10-23T16:08:38Z"
        }
      ]
    },
    {
      "number": 352,
      "id": "I_kwDOHTmVzM50Enbj",
      "title": "\"Holder Public Key Claim\" should be \"Key Binding Key Claim\" or similar",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/352",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [
        "Sakurann"
      ],
      "labels": [
        "editorial"
      ],
      "body": "There is a subsection called \"Holder Public Key Claim\" that talks about the holder's public key. However, we usually now call this \"Key Binding\". \r\n\r\nWe should modify that subsection to more generally talk about the key binding (public) key, but it would be fine to mention that this could be used for holder binding.",
      "createdAt": "2023-10-17T12:58:05Z",
      "updatedAt": "2024-02-20T16:47:43Z",
      "closedAt": "2024-02-20T16:47:43Z",
      "comments": [
        {
          "author": "rohan-wire",
          "authorAssociation": "NONE",
          "body": "> There is a subsection called \"Holder Public Key Claim\" that talks about the holder's public key. However, we usually now call this \"Key Binding\".\r\n> \r\n> We should modify that subsection to more generally talk about the key binding (public) key, but it would be fine to mention that this could be used for holder binding.\r\n\r\nA lot of folks are used to primarily using JWTs with symmetric keys, therefore they might be equally likely to expect an issuer binding as a holder binding. I think it is good to spell this out explicitly in section headings and in the first use of Key Binding.",
          "createdAt": "2023-10-31T13:40:55Z",
          "updatedAt": "2023-10-31T13:40:55Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "agreed to rename \"Holder Public Key Claim\" section.",
          "createdAt": "2024-02-13T16:56:35Z",
          "updatedAt": "2024-02-13T16:56:35Z"
        }
      ]
    },
    {
      "number": 355,
      "id": "I_kwDOHTmVzM50fWQW",
      "title": "Clarify clause re duplicate digests",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/355",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [
        "bc-pi"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "From the mailing list\r\n--------\r\n\r\nHi Jacob,\r\n\r\nthe intention was to cover the first case you listed. We should clarify this.\r\n\r\n-Daniel\r\nAm 20.10.23 um 15:02 schrieb Jacob Ward:\r\n> Hello again,\r\n>\r\n> On a similar note to my previous email, could I get some clarity on a step in the SD-JWT verification process?\r\n>\r\n> 4. If any digests were found more than once in the previous step, the SD-JWT MUST be rejected.\r\n>\r\n> Step 4 in Section 6.1 (as shown above) could have multiple meanings in my opinion:\r\n> - The digest was found multiple times (for example in an \"_sd\" array and as an array element).\r\n> - More than one Disclosure have the same digest.\r\n>\r\n> On first reading of this I assumed that this step only covered the first of those two cases, but it has been pointed out to me by a colleague that it could cover both. If it is the case that both cases are covered by this step, then I think it would be helpful to clarify this in the text.\r\n>\r\n> Cheers,\r\n>\r\n> Jacob",
      "createdAt": "2023-10-20T14:10:02Z",
      "updatedAt": "2023-12-11T16:36:06Z",
      "closedAt": "2023-12-11T16:36:06Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "my 2 cents at/from https://mailarchive.ietf.org/arch/msg/oauth/czsBV_b64F07mLEnyUlIvg3nDvM/ \r\n\r\n> Agree that it should be clarified. Being precise with language around this stuff is tricky. But my understanding of the intent was to ensure that no digest value is repeated in the whole of the SD-JWT - either in the payload directly or recursively in any Disclosure. Because of the trickiness of language, I'm not sure if we disagree or not about the intent...  ",
          "createdAt": "2023-10-20T15:54:02Z",
          "updatedAt": "2023-10-20T15:54:02Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Also... um, wouldn't \"More than one Disclosure have[ing] the same digest\" imply a collision in the hash function?  And therefore infeasible to actually happen.  ",
          "createdAt": "2023-12-01T19:15:47Z",
          "updatedAt": "2023-12-01T19:15:47Z"
        }
      ]
    },
    {
      "number": 356,
      "id": "I_kwDOHTmVzM50qXWF",
      "title": "\"Presentation\" is capitalised as if it's a defined term, but I can't find a definition",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/356",
      "state": "CLOSED",
      "author": "jogu",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "has-PR",
        "editorial"
      ],
      "body": "There are various sentences like:\r\n\r\n> When Key Binding is not enforced, any entity in possession of an SD-JWT Presentation can forward the contents to third parties\r\n\r\nwhere presentation has a capital P as if it's a defined term. Probably it should have an actual definition (I can't find one) but if not it should probably be lower cased?",
      "createdAt": "2023-10-23T14:06:47Z",
      "updatedAt": "2024-06-12T12:14:31Z",
      "closedAt": "2024-06-12T12:14:31Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "This is how `Presentation` is defined in OID4VP:\r\n\r\n> Presentation: Data that is presented to a specific Verifier, derived from one or more Verifiable Credentials that can be from the same or different Credential Issuers.\r\n\r\nhttps://openid.github.io/OpenID4VP/openid-4-verifiable-presentations-wg-draft.html#section-2-3.8\r\n\r\nand I think it's better define it than just make it lower-case, as the term is used pretty frequently.",
          "createdAt": "2023-10-23T15:58:18Z",
          "updatedAt": "2023-10-23T15:58:18Z"
        },
        {
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think just removing the capitalization helps.  It's still an undefined term.  In the spirit of #374, it seems like we actually want two concepts here, (1) handing someone an Issuer JWT + disclosures, where they can verify its integrity, drop disclosures and/or hand it to someone else, and (2) handing someone an Issuer JWT + disclosures + KB JWT, where the only thing they can do is verify it.",
          "createdAt": "2023-11-22T16:59:44Z",
          "updatedAt": "2023-11-22T16:59:44Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I think ~~https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/384~~ goes a long way towards addressing this.\r\n\r\nI meant #394, sorry.",
          "createdAt": "2024-03-01T21:59:23Z",
          "updatedAt": "2024-03-04T03:07:43Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "(I think you meant 394, @bc-pi..?)",
          "createdAt": "2024-03-04T02:54:49Z",
          "updatedAt": "2024-03-04T02:54:49Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I believe the merging of https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/394 clears this one up ",
          "createdAt": "2024-06-12T12:14:31Z",
          "updatedAt": "2024-06-12T12:14:31Z"
        }
      ]
    },
    {
      "number": 357,
      "id": "I_kwDOHTmVzM50uBZp",
      "title": "Proposing alternate form to unify disclosure arrays",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/357",
      "state": "CLOSED",
      "author": "rohan-wire",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Hi,\r\nCurrently an array which holds the salt and an unblinded claim has different forms depending on whether is contains array or non-array values. Nested disclosures require potentially different combinations of disclosures.\r\n\r\nInstead, what if there was only exactly one location for the `_sd` claim array (usually at the root of the document), and the disclosure array always had the following always consistent form:\r\n\r\n- salt\r\n- claim path from the location of the parent of the `_sd` claim of the JWT\r\n- value\r\n\r\nFor example:\r\n[\"r0mhd7LctwDCTXF_YfvV0g\", [\"family_name\"], \"M\u00f6bius\"]\r\n[\"uKp1B0jI2Ezmuo8EaNRG2Q\", [\"nationalities\",\"...\"], \"FR\"]\r\n[\"CTCthBCyHMuDlXF9qtY6TA\", [\"address\",\"postcode\"], \"EC1\"]\r\n\r\nWhere `family_name` is a peer to the _sd claim array portion of the JWT,\r\n`nationalities` is to `_sd`, and \"...\" indicates this is one value in the array, and\r\n`postcode` is an element inside `address`, which is a peer to `_sd`.",
      "createdAt": "2023-10-23T23:51:38Z",
      "updatedAt": "2024-02-07T16:50:49Z",
      "closedAt": "2023-11-27T19:48:45Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Thanks for your suggestion, Rohan.\r\n\r\nWe thought a lot about pointer-based approaches like the one you propose in the beginning, but there are some drawbacks:\r\n\r\n- The Verifier can re-assemble the document without checking the hashes. This is dangerous (see the second paragraph of https://drafts.oauth.net/oauth-selective-disclosure-jwt/draft-ietf-oauth-selective-disclosure-jwt.html#name-manipulation-of-disclosures).\r\n- The current design in the draft allows to send smaller presentations if only a few claims are disclosed and recursive disclosures are used.\r\n- There is no need to discuss corner cases, for example, where a child element is disclosed, but not the parent element. From my experience, the design the we currently have is slightly easier to implement (fewer special cases).\r\n\r\nIn your proposal, how would you encode the order of elements in an array? Just by the order of digests in `_sd`?\r\n\r\nHow would you disambiguate the (at least two) potential meanings of encountering the two disclosures `\r\n[\"CTCthBCyHMuDlXF9qtY6TA\", [\"addresses\",\"...\",\"postcode\"], \"EC1\"]` and `[\"uKp1B0jI2Ezmuo8EaNRG2Q\",[\"addresses\",\"...\",\"street_address\"], \"EC1\"]`?",
          "createdAt": "2023-10-24T19:17:00Z",
          "updatedAt": "2023-10-24T19:17:00Z"
        },
        {
          "author": "rohan-wire",
          "authorAssociation": "NONE",
          "body": "Hi Daniel,\r\n\r\nThanks for your quick response.\r\n\r\nIn all the examples I have seen using identity, I didn't see much of a compelling need for either *ordered* arrays or selective disclosure of sub-fields inside an array value. However, if the order inside an array was important you could use an array index after \"...\" for example:\r\n\r\n`[\"CTCthBCyHMuDlXF9qtY6TA\", [\"addresses\",\"...[0]\",\"postcode\"], \"EC1\"]\r\nwhich would be the postcode element in the 1st array value under addresses\r\n\"addresses\": [ {\"postcode\": \"EC1\"}, {}, {}]\r\n\r\nI suspect the \"order is not important\" case is probably more common, so you could still just use \"...\" to mean somewhere in the array.\r\n\r\nRegarding your first three bullet points:\r\n\r\n- I don't think \"the verifier can [construct the claims] without checking hashes\" is very persuasive. If an implementer is going to completely disregard security in a security spec, they would be just as likely to have a finite list of expected claims and if they see one of these tokens assume they know where it goes under the current spec (still ignoring the hashes).\r\n- I also disagree that there are fewer corner cases. (I'll open another issue for the ones that I see for the current design). I think there are several corner cases in both designs and I suspect there are about the same number of them.\r\n- Regarding smaller presentations, I am curious here. If we are optimizing for specific use cases it would be good to understand what those are. Could you share a practical example or two?\r\n\r\nThe other advantage I see is you could have fewer decoy digests if all the values are under a single `_sd`.",
          "createdAt": "2023-10-25T12:56:25Z",
          "updatedAt": "2023-10-25T12:56:25Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Hi Rohan,\r\n\r\nI think the order of elements is important generally and especially in the case shown in my previous comment - omitting it can quickly lead to ambiguous encodings.\r\n\r\nRegarding the hash check: The current design avoids a major footgun! Of course, anybody who writes an SD-JWT implementation for just one use case can skip the hash check. However, it is very hard (or impossible?) to write a generic library supporting the current design while skipping the hash check. This is the beauty of the approach. With the pointer-based approach, nobody needs to check any hash. (I know that is easy to say \"but this is a security spec, everybody should be cautious and whoever doesn't is just careless!\" but that is not how the world works. Mistakes that can be made will be made; it is better to make making mistakes hard.)\r\n\r\nRegarding the size of presentations, an example can be found in the specification in [Section 7.3](https://drafts.oauth.net/oauth-selective-disclosure-jwt/draft-ietf-oauth-selective-disclosure-jwt.html#section-7.3): If `address` is not to be disclosed, only this data needs to be sent:\r\n\r\n```json\r\n{\r\n  \"_sd\": [\r\n    \"HvrKX6fPV0v9K_yCVFBiLFHsMaxcD_114Em6VT8x1lg\"\r\n  ],\r\n  \"iss\": \"https://issuer.example.com\",\r\n  \"iat\": 1683000000,\r\n  \"exp\": 1883000000,\r\n  \"sub\": \"6c5c0a49-b589-431d-bae7-219122a9ec2c\",\r\n  \"_sd_alg\": \"sha-256\"\r\n}\r\n```\r\n\r\nNote that this contains only one disclosure digest. Only if `address` is to be disclosed, the respective disclosure needs to be sent containing digests of further disclosures, as shown in the spec.",
          "createdAt": "2023-10-25T18:05:24Z",
          "updatedAt": "2023-10-26T11:52:03Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "There are undoubtedly at least a few different viable approaches and inevitably each will have its own set of advantages and disadvantages. There will always be some tradeoffs and there are bound to be varying preferences amongst different people. The general approach in the current WG draft has been stable for a while now though. And is being used. So significant changes at this stage would need really compelling reasons and even working group consensus.",
          "createdAt": "2023-10-27T19:11:18Z",
          "updatedAt": "2023-10-27T19:11:18Z"
        },
        {
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree that pointer-based approaches are unnecessary complexity.\r\n\r\nBut the fact that the same object can have two different syntaxes is a pain to implement.  It would be nice if a disclosure could always be a `[salt, key, value]` array, and just have the `key` be equal to JSON `null` for array disclosures.\r\n\r\nBasically, the current structure requires loose parsing with post-hoc validation, whereas with a uniform structure you could be more declarative.  For example, in Rust with `serde_json`, you could just define a disclosure to be `struct Disclosure(String, Option<String>, Value)`, so that the parser would do the work of validation.",
          "createdAt": "2023-11-13T14:48:57Z",
          "updatedAt": "2023-11-13T14:50:39Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "You'll know from context whether its an array element or object at the point of parsing the JSON array in the disclosure so you can certainly be more strict or declarative. ",
          "createdAt": "2023-11-27T19:48:17Z",
          "updatedAt": "2023-11-27T19:48:17Z"
        }
      ]
    },
    {
      "number": 358,
      "id": "I_kwDOHTmVzM50xpNK",
      "title": "Confusing terminology",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/358",
      "state": "CLOSED",
      "author": "rohan-wire",
      "authorAssociation": "NONE",
      "assignees": [
        "bc-pi"
      ],
      "labels": [
        "has-PR",
        "editorial"
      ],
      "body": "Hi,\r\n\r\nDisclosure is used at least two ways in the document.\r\n\r\n- to refer to the array containing the salt, (maybe name), and value.\r\n- to refer to the base64url encoded string \r\n\r\nIt's easy to understand how this could have happened, as both contain logically the same information. I propose explicitly calling these:\r\n\r\n- **disclosure array**, and \r\n- **disclosure presentation**\r\n\r\nI also propose calling the hash/digest of the disclosure the **disclosure digest** in full in every use. The only time we would use \"disclosure\" without one of these modifiers is talking about the process of disclosing in general.\r\n\r\nAs for the plaintext of the claims that can be disclosed, I propose **blinded claim**.\r\n\r\nSo the first paragraph of Section 4.1 would read:\r\n\r\nAn SD-JWT consists of:\r\n\r\n- a signed JSON document, \r\n- a list of _disclosure presentations_ (each of which reveals a _blinded claim_), and \r\n- optionally an _issuer key binding_ (discussed in Section 4.3). \r\n\r\nThe signed JSON document (the JWT body) contains plaintext claims; and _disclosure digests_, each of which either refers to a specific _blinded claim_ or is a _decoy_. The holder can include zero or more disclosure presentations without breaking the signature of the JWT body. The contents of the blinded claims cannot be modified, because the corresponding digest would no longer match any digest in the JWT body. Blinded claims can be individual object properties (key-value pairs) or array elements.",
      "createdAt": "2023-10-24T12:42:33Z",
      "updatedAt": "2024-03-04T16:13:11Z",
      "closedAt": "2024-03-04T16:13:11Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "This is appreciated! I agree that we should be more consistent with our terms. I'm not sure about \"disclosure presentation\" as \"presentation\" suggests a specific meaning. Maybe just \"disclosure\" and \"disclosure contents\" is fine.",
          "createdAt": "2023-10-25T18:07:52Z",
          "updatedAt": "2023-10-25T18:07:52Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "The current document attempts to mostly use \"Disclosure\" to mean the base64url encoded string. I think that works okay. Places where it's referring to the decoded JSON array should be fixed to be more clear. So I think I agree that \"disclosure\" and where needed \"disclosure contents\" would be good. \r\n\r\n",
          "createdAt": "2023-10-25T21:36:36Z",
          "updatedAt": "2023-10-25T21:36:36Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #410 has editorial updates for more consistent treatment of a Disclosure vs the contents of a Disclosure ",
          "createdAt": "2024-02-28T23:54:00Z",
          "updatedAt": "2024-02-28T23:54:00Z"
        }
      ]
    },
    {
      "number": 359,
      "id": "I_kwDOHTmVzM509DKs",
      "title": "matching strength of hash and signature ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/359",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "bc-pi"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "Saying something about matching the strength of hash function and signature algorithm would probably be worthwhile. \r\n\r\nresulting from this thread https://mailarchive.ietf.org/arch/msg/oauth/liu4pJP0_p0O3xJCXkcadl8uNAk/ / https://mailarchive.ietf.org/arch/msg/oauth/UJQVtWdV4Woz0oDDEM9z82zgByE/ etc \r\n\r\n\"... indicates that the security strength of the signature scheme is bounded by the collision resistance of the hash function - e.g. there\u2019s little point using ES512 with SHA-256, for example. Probably the security considerations should suggest matching hash functions to signature algorithms.\" ",
      "createdAt": "2023-10-25T20:16:23Z",
      "updatedAt": "2023-11-27T16:19:40Z",
      "closedAt": "2023-11-27T16:19:40Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "How to actually write this in an appropriate way for a draft RFC feels kinda tricky though. JWE has some text about using [Using Matching Algorithm Strengths](https://datatracker.ietf.org/doc/html/rfc7516#section-11.3) that I was hopping to borrow from but the context is (unsurprisingly) different enough that using text straight from it doesn't quite work. Maybe adding a very general statement in [Choice of a Hash Algorithm](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-06.html#name-choice-of-a-hash-algorithm) would be sufficient. ",
          "createdAt": "2023-10-30T17:43:05Z",
          "updatedAt": "2023-10-30T17:43:05Z"
        },
        {
          "author": "rohan-wire",
          "authorAssociation": "NONE",
          "body": "At IETF 118 Tuesday meeting, Orie proposed locking the hash to the one committed to by the Issuer.",
          "createdAt": "2023-11-07T15:26:19Z",
          "updatedAt": "2023-11-07T15:26:19Z"
        }
      ]
    },
    {
      "number": 360,
      "id": "I_kwDOHTmVzM509Ep5",
      "title": "add RFC reference in considerations on salt entropy   ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/360",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "bc-pi"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "\"The security considerations about salt entropy should probably reference RFC 4086 (BCP 106) or something more up to date (maybe RFC 8937 too).\"\r\n\r\nresulting from this thread https://mailarchive.ietf.org/arch/msg/oauth/liu4pJP0_p0O3xJCXkcadl8uNAk/ / https://mailarchive.ietf.org/arch/msg/oauth/UJQVtWdV4Woz0oDDEM9z82zgByE/",
      "createdAt": "2023-10-25T20:20:52Z",
      "updatedAt": "2023-11-27T14:26:30Z",
      "closedAt": "2023-11-27T14:26:30Z",
      "comments": []
    },
    {
      "number": 363,
      "id": "I_kwDOHTmVzM51c0JS",
      "title": "Ambiguous what to do if same digest appears more than once",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/363",
      "state": "CLOSED",
      "author": "rohan-wire",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The spec currently does not define what to do if the same digest value appears more than once in an SD-JWT. This could be the case if the Issuer or Holder is operating maliciously.\r\n\r\nSome possible approaches:\r\n\r\n- first digest in the document wins (in the order presented in the document)\r\n- first digest in the document wins (all map keys sorted lexically)\r\n- ignore the digest\r\n- the entire document is invalid\r\n\r\nProposal:\r\nHolders and Verifiers receiving an SD-JWT have to scan all digests in all _sd element at any level of the document to check for duplicates. If the same digest appears more than once, the entire document is invalid. This prevents an attack where the Issuer gets the Holder to request an innocuous claim inside in a private claim with the same name as a more valuable claim, and includes this digest where it has a different meaning (perhaps offering an `x5c` or `aud` claim at the root level.",
      "createdAt": "2023-10-31T13:34:19Z",
      "updatedAt": "2023-10-31T13:43:33Z",
      "closedAt": "2023-10-31T13:43:32Z",
      "comments": [
        {
          "author": "rohan-wire",
          "authorAssociation": "NONE",
          "body": "Duplicate issue to #355 . Closing.",
          "createdAt": "2023-10-31T13:43:33Z",
          "updatedAt": "2023-10-31T13:43:33Z"
        }
      ]
    },
    {
      "number": 365,
      "id": "I_kwDOHTmVzM510WE-",
      "title": "typ:example+sd-jwt everywhere?",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/365",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Do we want the header `\"typ\":\"example+sd-jwt\"` in every example? I'm honestly not sure but wanted to ask b/c that looks like it's going to be the result from https://github.com/openwallet-foundation-labs/sd-jwt-python/pull/10 upstream. ",
      "createdAt": "2023-11-03T17:40:08Z",
      "updatedAt": "2024-02-13T17:05:44Z",
      "closedAt": "2024-02-13T17:05:44Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "We should make a conscious decision about this, especially regarding the examples in the appendix.",
          "createdAt": "2023-11-07T16:56:14Z",
          "updatedAt": "2023-11-07T16:56:14Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "for example 4a, it must be `vc+sd-jwt` because it is required by sd-jwt vc spec [here](https://drafts.oauth.net/oauth-sd-jwt-vc/draft-ietf-oauth-sd-jwt-vc.html#name-media-type). \r\nFor example 4b, it should be `vc+ld+json+sd-jwt`, but it can also be kept example+sd-jwt. because [W3C vc-jose-cose spec](https://www.w3.org/TR/vc-jose-cose/#securing-json-ld-verifiable-credentials-with-jose) says `The typ header parameter SHOULD be vc+ld+json+sd-jwt.`.",
          "createdAt": "2023-12-11T17:15:44Z",
          "updatedAt": "2023-12-11T17:18:46Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "good with the state of things currently for typ values",
          "createdAt": "2024-02-13T17:05:44Z",
          "updatedAt": "2024-02-13T17:05:44Z"
        }
      ]
    },
    {
      "number": 366,
      "id": "I_kwDOHTmVzM52AcIQ",
      "title": " rework \"Choice of a Hash Algorithm\" section ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/366",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "bc-pi"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "from this thread https://mailarchive.ietf.org/arch/msg/oauth/5A1kXMNiIm2DBEcXCadCwUpMhgI/ Neil Madden has suggested the following for \"Choice of a Hash Algorithm\" section. I think (with maybe some minor tweaks) the text works and it would also address issue #359. \r\n\r\n> To ensure privacy of claims that are not being selectively disclosed in a given presentation, the hash function MUST ensure that it is infeasible to calculate the salt and claim name and value (or any portion thereof) that results in a particular digest. This implies the hash function MUST be preimage resistant, but should also not allow an observer to infer any partial information about the undisclosed content. In the terminology of cryptographic commitment schemes, the hash function MUST be computationally hiding.\r\n> \r\n> The hash function MUST be second-preimage resistant. For any salt and claim value pair, it is infeasible to find a different salt and claim value pair that result in the same digest.\r\n> \r\n> The hash function SHOULD also be collision resistant. Although not essential to the anticipated uses of SD-JWT, without collision resistance an Issuer may be able to find multiple disclosures that have the same hash value. The signature over the SD-JWT would not then commit the Issuer to the contents of the JWT, which is surprising. Where this is a concern, the collision resistance of the hash function SHOULD match the collision resistance of the hash function used by the signature scheme. For example, use of the ES512 signature algorithm would require a disclosure hash function with at least 256-bit collision resistance, such as SHA-512.\r\n\r\n\r\n\r\n\r\n\r\n",
      "createdAt": "2023-11-06T18:39:58Z",
      "updatedAt": "2023-11-27T16:19:40Z",
      "closedAt": "2023-11-27T16:19:40Z",
      "comments": []
    },
    {
      "number": 367,
      "id": "I_kwDOHTmVzM52ArSv",
      "title": "stronger stance on selectively disclosable validity claims ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/367",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "bc-pi"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "from this thread https://mailarchive.ietf.org/arch/msg/oauth/5A1kXMNiIm2DBEcXCadCwUpMhgI/ Neil Madden has suggested some text (below) for the [Selectively-Disclosable Validity Claims](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-06.html#name-selectively-disclosable-val) section.  I think we can replace and/or augment and/or merge what's there with this suggestion and arrive at something reasonable that's a bit stronger about not making claims that control the validity of the SD-JWT selectively disclosable. \r\n\r\n> \r\n> An Issuer MUST NOT allow any security-critical claim to be selectively disclosable. The exact list of \u201csecurity-critical\u201d claims will depend on the application, and SHOULD be listed by any application-specific profile of SD-JWT. The following is a list of standard claim names that SHOULD be considered as security-critical by any SD-JWT Issuer:\r\n> \r\n>  * \u201ciss\u201d (Issuer)\r\n>  * \u201caud\u201d (Audience), although issuers may want to allow individual entries in the array to be selectively-disclosable\r\n>  * \u201cexp\u201d (Expiration Time)\r\n>  * \u201cnbf\u201d (Not Before)\r\n>  * \u201ciat\u201d (Issued At)\r\n>  * \u201cjti\u201d (JWT ID)\r\n> \r\n> In addition, the \u201ccnf\u201d (Confirmation Key) claim MUST NOT be selectively disclosable.",
      "createdAt": "2023-11-06T19:12:47Z",
      "updatedAt": "2023-12-11T16:25:03Z",
      "closedAt": "2023-12-11T16:25:02Z",
      "comments": []
    },
    {
      "number": 368,
      "id": "I_kwDOHTmVzM52BabV",
      "title": "contextualize verifier policy (or something like that) ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/368",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "In this thread https://mailarchive.ietf.org/arch/msg/oauth/SVXj_3sqcRT5o6S-f6NOATtK-ro/ is a discussion with Neil Madden that ultimately I interpret as being about how static a verifier's acceptance/validation policy has to be (especially with respect to key binding) and that the current draft can be read as prohibiting things like migration to a stricter policy over time. IMHO we don't want to unintentionally prohibit that kind of thing but absolutely need to keep general principle/requirement that a verifier have a validation policy that isn't unduly/unexpectedly influenced by the (sometimes attacker-controllable) content of the token. I'm not sure how to reasonably convey that in the context of the draft as it is. And don't want to make large changes for this. So this issue is a placeholder to look at small refinements to current text that could be perceived as too limiting/strict. And/or maybe adding a short new considerations section about verifier policy that explains that a policy isn't necessarily completely static.  ",
      "createdAt": "2023-11-06T21:22:40Z",
      "updatedAt": "2024-02-13T17:32:25Z",
      "closedAt": "2024-02-13T17:32:24Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "After re-reading the current text, I think that the wording right now (with the previous improvements) sufficiently addresses the problem. We agreed to close this issue.",
          "createdAt": "2024-02-13T17:32:24Z",
          "updatedAt": "2024-02-13T17:32:24Z"
        }
      ]
    },
    {
      "number": 369,
      "id": "I_kwDOHTmVzM52HS8U",
      "title": "Allow HMAC-based Issuer-signed JWTs and KB-JWTs to support different aspects of repudiation",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/369",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Currently the spec says:\r\n> It MUST NOT use none or an identifier for a symmetric algorithm (MAC).\r\n\r\nTo support KB-JWTs using HS256, for example after using DH key agreement, we should allow symmetric algorithms.",
      "createdAt": "2023-11-07T15:25:28Z",
      "updatedAt": "2024-02-20T16:44:00Z",
      "closedAt": "2024-02-20T16:43:59Z",
      "comments": [
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I support this issue. There are scenarios where sd-jwts may be protected with symmetric crypto. I'm wondering why symmetric algorithm (MAC) are ruled out so far. ",
          "createdAt": "2023-11-07T15:28:15Z",
          "updatedAt": "2023-11-07T15:28:15Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "NONE",
          "body": "The section I quoted applies to Issuer-signed JWTs, closing this issue.",
          "createdAt": "2023-11-07T15:32:44Z",
          "updatedAt": "2023-11-07T15:32:44Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "NONE",
          "body": "After some internal discussion, I guess it is worthwhile to confirm with the authors that HMAC for KB-JWT is supported @bc-pi @danielfett ?",
          "createdAt": "2023-11-07T15:34:18Z",
          "updatedAt": "2023-11-07T15:34:18Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "NONE",
          "body": "I quoted the wrong section above. However, in the KB-JWT section there is a similar requirement on `alg` of the KB-JWT:\r\n> alg: REQUIRED. A digital signature algorithm identifier such as per IANA \"JSON Web Signature and Encryption Algorithms\" registry. MUST NOT be none or an identifier for a symmetric algorithm (MAC).\r\n\r\nBy having this requirement it means the SD-JWT spec does not allow HS256 and therefore does not allow approaches where a HS256 is agreed via DH. Note, the asymmetric DH key could still be endorsed by the `cnf` claim",
          "createdAt": "2023-11-07T15:39:32Z",
          "updatedAt": "2023-11-07T15:39:32Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think it should be allowed for both, kb jwt and sd jwt. Or let me put it the other way around. Why is it prohibited now?",
          "createdAt": "2023-11-07T15:41:33Z",
          "updatedAt": "2023-11-07T15:41:33Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "NONE",
          "body": "The text is only about SD-JWT right now. I actually want HMAC for SD-JWT",
          "createdAt": "2023-11-07T15:45:23Z",
          "updatedAt": "2023-11-07T15:45:23Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "NONE",
          "body": "> The text is only about SD-JWT right now. I actually want HMAC for SD-JWT\r\n\r\nCurrently, the spec does not allow HMAC for Issuer-signed JWT and it does not allow HMAC for KB-JWTs. To support repudiation KB-JWTs should allow `alg` values involving symmetric keys such as HS256 (see my comment above).",
          "createdAt": "2023-11-07T15:48:38Z",
          "updatedAt": "2023-11-07T15:48:38Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't support adding an option to HMAC KB JWT. Issuer signs over the key used to HMAC KB JWT. Anyone who knows the nonce of the transaction can generate that HMAC KB JWT. It does not proof anything. It only makes sense if it is issuance during presentation where wallet is asking issuer to issue over wallet's key that wallet generated for that verifier.",
          "createdAt": "2023-11-07T15:49:47Z",
          "updatedAt": "2023-11-07T15:49:47Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "NONE",
          "body": "> I don't support adding an option to HMAC KB JWT. Issuer signs over the key used to HMAC KB JWT. Anyone who knows the nonce of the transaction can generate that HMAC KB JWT. It does not proof anything. It only makes sense if it is issuance during presentation where wallet is asking issuer to issue over wallet's key that wallet generated for that verifier.\r\n\r\nThis is how it works:\r\n- The issuer signs the public key of the holder and puts it into the `cnf` claim.\r\n- Verifier provides their public key (potentially ephemeral) to the holder.\r\n- Holder performs DH to compute a shared secret and then derives a symmetric key, for example using concatKDF\r\n- Holder computes the HMAC and encodes it as a KB-JWT\r\n- Holder provides KB-JWT to the verifier\r\n- Verifier verifies KB-JWT and knows that holder signed it but verifier cannot prove to anybody else that holder signed it because the verifier could have also computed it -> repudiation.",
          "createdAt": "2023-11-07T15:53:47Z",
          "updatedAt": "2023-11-07T15:53:47Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "NONE",
          "body": "> > I don't support adding an option to HMAC KB JWT. Issuer signs over the key used to HMAC KB JWT. Anyone who knows the nonce of the transaction can generate that HMAC KB JWT. It does not proof anything. It only makes sense if it is issuance during presentation where wallet is asking issuer to issue over wallet's key that wallet generated for that verifier.\r\n> \r\n> This is how it works:\r\n> \r\n> * The issuer signs the public key of the holder and puts it into the `cnf` claim.\r\n> * Verifier provides their public key (potentially ephemeral) to the holder.\r\n> * Holder performs DH to compute a shared secret and then derives a symmetric key, for example using concatKDF\r\n> * Holder computes the HMAC and encodes it as a KB-JWT\r\n> * Holder provides KB-JWT to the verifier\r\n> * Verifier verifies KB-JWT and knows that holder signed it but verifier cannot prove to anybody else that holder signed it because the verifier could have also computed it -> repudiation.\r\n\r\nDH is computed using the public key of the verifier and the private key of the holder, so the HMAC proves KB of the private key of the holder.",
          "createdAt": "2023-11-07T15:59:12Z",
          "updatedAt": "2023-11-07T15:59:12Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "NONE",
          "body": "Essentially, there are two things where repudation could be applied:\r\n- KB-JWTs (especially if sd_hash is used)\r\n- Issuer-signed JWTs\r\n\r\nBoth can use an approach using DH with a private holder key and a public verifier key to derive a symmetric key to either issue an SD-JWT or prove KB of the `cnf` claim.",
          "createdAt": "2023-11-07T16:21:58Z",
          "updatedAt": "2023-11-07T16:21:58Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "#328 is related and has some prior discussion ",
          "createdAt": "2023-11-07T16:25:07Z",
          "updatedAt": "2023-11-07T16:25:07Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "The thinking behind the Issuer-signed JWT being only asymmetric was basically that this model implies/assumes that an Issuer issues a token/credential to the holder with no idea of where the holder will use it. Having a shared symmetric key seemed really weird in that situation. Also hard/awkward to explain why or how a shared symmetric key would work in that kind of situation (like ECDH happening through the holder to establish an symmetric key between verifier and issuer is a pretty different model with less obvious need for SD).  But with that said, there\u2019s been some reoccurring talk about loosening the restriction to not prohibit an HMAC on the Issuer-signed JWT. And thinking (mostly from @danielfett) that that change could be made without delving into the how or why details. Personally, I'd be okay with allowing it but do not think the draft should get into describing how it might work. ",
          "createdAt": "2023-11-07T19:24:29Z",
          "updatedAt": "2023-11-07T19:41:47Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "With respect to HMAC for key binding - the current draft does allow for Key Binding to be \"provided by means not defined in this specification\" like [here](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-selective-disclosure-jwt#section-10-7) and [here](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-selective-disclosure-jwt#section-8.3-4.3.2.1) and maybe other places. Is that sufficient to allow for these cases that need repudation of the presentation? \r\n\r\n\r\n\r\n",
          "createdAt": "2023-11-07T19:50:34Z",
          "updatedAt": "2023-11-07T19:50:34Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Allowing for HMAC'd KB-JWT doesn't seem unreasonable but I don't think defining the whole DH & KDF dance is appropriate at the level of this draft. So appropriate scoping and detail might be tricky. But I think it'd have to be similar to the treatment of nonce and aud in the KB-JWT now (which say \"How this value is obtained is up to the protocol used and out of scope of this specification\" and \"How the value is represented is up to the protocol used and out of scope of this specification\" respectively). ",
          "createdAt": "2023-11-07T20:26:14Z",
          "updatedAt": "2023-11-07T21:29:30Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Regarding the question whether we want to allow HMACs for the Issuer-signed part of the KB-JWT: For our use case, only the HMAC for the Issuer-signed part is critical. The KB-JWT can remain as-is with an asymmetric key, as a throwaway asymmetric key can be used for it.\r\n\r\n(There may be other use cases though.)",
          "createdAt": "2024-01-09T17:28:25Z",
          "updatedAt": "2024-01-09T17:28:25Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "NONE",
          "body": "Related: https://paulbastian.github.io/jose-ecdh-mac-algorithms/draft-bastian-jose-alg-ecdh-mac.html\r\nThis mechanism may work for both SD-JWT and KB-JWT",
          "createdAt": "2024-01-17T10:35:14Z",
          "updatedAt": "2024-01-17T10:35:14Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "NONE",
          "body": "SD-JWT currently says:\r\n> It MUST NOT use none or an identifier for a symmetric algorithm (MAC)\r\n\r\n@paulbastian Does this mean your new ecdh algorithm is now allowed by SD-JWT?",
          "createdAt": "2024-01-17T12:13:21Z",
          "updatedAt": "2024-01-17T12:14:31Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "NONE",
          "body": "Actually, now that you say it, a spec change may not be needed as the draft defines a new alg",
          "createdAt": "2024-01-17T12:33:28Z",
          "updatedAt": "2024-01-17T12:33:28Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> https://paulbastian.github.io/jose-ecdh-mac-algorithms/draft-bastian-jose-alg-ecdh-mac.html \r\n\r\ninteresting work @paulbastian! I might humbly suggest that you revisit how the header parameters are used to better align with how they are already defined in JWS. Specifically, I think the standard JWS headers https://www.rfc-editor.org/rfc/rfc7515#section-4.1 like kid/jwk/x5c/x5t/etc should be for indicating the key of the Generating Party, which is really like the signer in this case. And a new header be defined to convey the Verifying Party's key. What's in draft-bastian-jose-alg-ecdh-mac-01 currently feels kinda backwards from what JWS has. And the Generating Party's key is probably not going to be ephemeral in most cases so epk doesn't seem quite right. ",
          "createdAt": "2024-01-19T22:10:08Z",
          "updatedAt": "2024-01-21T14:19:35Z"
        },
        {
          "author": "paulbastian",
          "authorAssociation": "NONE",
          "body": "> > https://paulbastian.github.io/jose-ecdh-mac-algorithms/draft-bastian-jose-alg-ecdh-mac.html \r\n> \r\n> interesting work @paulbastian! I might humbly suggest that you revisit how the header parameters are used to better align with how they are already defined in JWS. Specifically, I think the standard JWS headers https://www.rfc-editor.org/rfc/rfc7515#section-4.1 like kid/jwk/x5c/x5t/etc should be for indicating the key of the Generating Party, which is really like the signer in this case. And a new header be defined to convey the Verifying Party's key. What's in draft-bastian-jose-alg-ecdh-mac-01 currently feels kinda backwards from what JWS has. And the Generating Party's key is probably not going to be ephemeral in most cases so epk doesn't seem quite right. \r\n\r\nThanks for the feedback @bc-pi \r\nThe header names were the part that I was least sure about, I oriented on the ECDH-ES part of JWA. But I don't mind changing them, feel free to open an issue on the repo!",
          "createdAt": "2024-01-20T10:13:38Z",
          "updatedAt": "2024-01-21T14:19:51Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "With the PR, MACs are now no longer prohibited, but we agreed to not touch the other language in the spec (around signatures/signing/private/public keys etc.) as that would needlessly complicate the spec.",
          "createdAt": "2024-02-20T16:43:59Z",
          "updatedAt": "2024-02-20T16:43:59Z"
        }
      ]
    },
    {
      "number": 370,
      "id": "I_kwDOHTmVzM52HVk-",
      "title": "Add 2.1 Abbreviations",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/370",
      "state": "CLOSED",
      "author": "sakimura",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "ready-for-PR"
      ],
      "body": "Abbreviations appear in this document without first being defined, e.g., KB-JWT. \r\nIt would make it easier for the readers if the document has an abbreviation section near the top of the document. \r\nProposal: \r\nCreate a new section 2.1 Abbreviation and collect all the abbreviations.",
      "createdAt": "2023-11-07T15:30:36Z",
      "updatedAt": "2024-06-12T08:35:36Z",
      "closedAt": "2024-06-12T08:35:36Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "need to do after #394 is resolved to do a PR.",
          "createdAt": "2024-02-27T17:40:00Z",
          "updatedAt": "2024-02-27T17:40:00Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "#394 does introduce more abbreviations where the terms are defined so might obsolete the need for a new section. ",
          "createdAt": "2024-03-01T21:53:44Z",
          "updatedAt": "2024-03-01T21:53:44Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm gonna say https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/394 will sufficiently address the suggestion here. ",
          "createdAt": "2024-05-03T18:38:02Z",
          "updatedAt": "2024-05-03T18:38:02Z"
        }
      ]
    },
    {
      "number": 371,
      "id": "I_kwDOHTmVzM52p2do",
      "title": "Remove initial underscore on `_sd_hash`",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/371",
      "state": "CLOSED",
      "author": "bifurcation",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "bc-pi"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "It makes sense for `_sd` to start with an underscore, since it is being inserted into a JSON object supplied by the caller and it needs to be something unlikely to conflict with an existing claim.\r\n\r\nThe `_sd_hash` field appears in the key binding JWT, a format being defined by this document.  So it can safely live without the underscore.",
      "createdAt": "2023-11-13T13:39:00Z",
      "updatedAt": "2023-12-05T17:27:38Z",
      "closedAt": "2023-12-05T17:27:38Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "That's a fair point, I think.",
          "createdAt": "2023-11-13T14:07:11Z",
          "updatedAt": "2023-11-13T14:07:11Z"
        },
        {
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think the same argument also applies to `_sd_alg`.  It's just a normal JWT claim, so it can be deconflicted using the usual registry process.",
          "createdAt": "2023-11-13T14:28:36Z",
          "updatedAt": "2023-11-13T14:28:36Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Really they are all just JWT claims and will be registered. The leading underscore isn't magical and doesn't exempt from registration. But it is a nicety to help avoid conflict, which is particularly relevant with where/how ` _sd` and  `_sd_alg` are used. They both are in the issuer signed JWT where there is some potential for name conflicts with application supplied data (JWT's whole registered, public and private claims guidance is supposed to help here too but conflicts are still possible).\r\n\r\nFor general clarity and consistency, I agree (I think anyway) with removing the initial underscore on `_sd_hash`.  But `_sd_alg` is more similar to `_sd` in usage/context and those two should keep their leading underscore. \r\n \r\n\r\n",
          "createdAt": "2023-11-13T18:30:20Z",
          "updatedAt": "2023-11-13T18:30:20Z"
        },
        {
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "body": "To me the difference between `_sd` and `_sd_alg` seems to be that `_sd_alg` is at the top level of the JWT claims, where we're used to dealing with [registered claims](https://www.iana.org/assignments/jwt/jwt.xhtml).  But `_sd` can be down in the guts of the claims, which the JWT signer might have less control over.  So I would go for `_sd`, but `sd_hash` and `sd_alg`.",
          "createdAt": "2023-11-13T21:21:17Z",
          "updatedAt": "2023-11-13T21:21:17Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Registered claims (I'm a so-called DE on there so I have some familiarity) don't fully address conflicting names even at the top level with the possibility of the use of private claim names. More could be said about that registry and what it does and doesn't provide in practice but that'd be a digression...\r\n\r\nAnyway, that ` _sd` and  `_sd_alg` show up in the content of issuer-signed JWT is my point of vew for keeping the underscore on both. Also for keeping those two similar to each other. \r\n\r\nLastly note that ` _sd` and  `_sd_alg` have been in the draft for many revisions (back to -02 I think) whereas `_sd_hash` was just introduced in -06. Changing `_sd_hash`  at this point likely wouldn't impact implementations much but changing `_sd_alg` would.   \r\n\r\n",
          "createdAt": "2023-11-13T22:44:39Z",
          "updatedAt": "2023-11-13T22:44:39Z"
        },
        {
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'd prefer to not see ANY public claim names that start with `_`.\r\n\r\nIt starts a convention which I would prefer not to see repeated.\r\n\r\n",
          "createdAt": "2023-12-04T16:21:22Z",
          "updatedAt": "2023-12-04T16:22:04Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "In OpenID Connect, we decided that our \"meta-claims\" would start with underscore to visually distinguish them from normal claims.  For instance, see the claims `_claim_names` and `_claim_sources` in the registry at https://www.iana.org/assignments/jwt/jwt.xhtml.\r\n\r\nI support SD-JWT continuing to follow this convention and so would prefer that the leading underscore be kept for its meta-claims.",
          "createdAt": "2023-12-04T17:50:46Z",
          "updatedAt": "2023-12-04T17:50:46Z"
        },
        {
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@selfissued What is the difference between \"normal claims\" and \"meta-claims\" here?  And why did OpenID Connect go that way?",
          "createdAt": "2023-12-04T18:07:26Z",
          "updatedAt": "2023-12-04T18:07:26Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "\"Meta-claims\" are claims about the structure of where actual claim values can be found - claim values that are not simply top-level members in the JWT Claims Set.  They're road-signs saying where to go to get them - not the destinations themselves.",
          "createdAt": "2023-12-04T18:11:18Z",
          "updatedAt": "2023-12-04T18:11:18Z"
        },
        {
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks, that distinction makes sense.  Applying that to SD-JWT, it seems directly applicable to `_sd`, and `_sd_alg` sort of fits as well, since it tells you how to read the road-signs (to continue @selfissued's metaphor).  I'm OK with these keeping `_`.\r\n\r\nBut `_sd_hash` is not a road-sign, it's the main event.  If you ignore `_sd` or `_sd_alg`, you miss out on some claims, but nothing fundamental breaks.  If you ignore `_sd_hash`, you're not enforcing the key security properties of the system.  So I think the original issue here is still valid.  ",
          "createdAt": "2023-12-04T19:06:01Z",
          "updatedAt": "2023-12-04T19:06:01Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "PR https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/387 would remove the leading underscore on `_sd_hash` (and only there).  Which is the original issue here. ",
          "createdAt": "2023-12-04T22:09:40Z",
          "updatedAt": "2023-12-04T22:09:40Z"
        }
      ]
    },
    {
      "number": 372,
      "id": "I_kwDOHTmVzM52p6c6",
      "title": "Clarify algorithms to accommodate recursive redaction",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/372",
      "state": "CLOSED",
      "author": "bifurcation",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "bifurcation"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "Recursive redaction makes it much more complex to validate and handle SD-JWT objects.\r\n\r\nIt requires that disclosure be processed in a particular order, and since this order is known only to the redactor, the disclosures in the SD-JWT must be listed in a specific order to communicate the order.\r\n\r\nIt complicates the matching of disclosure objects to redacted fields, which you need to do in order to validate that the disclosures match the Issuer JWT, or to offer an API of the form \"delete the disclosure for `/address/street_address`\".  Without recursion, you are matching the list of disclosures against the claims in the Issuer JWT.  With recursion, you are matching the list of disclosures against the issuer JWT _and all other disclosures_.\r\n\r\nIt complicates selective disclosure.  Now, if I opt not to disclose a field, I may have rendered some disclosure further down the line meaningless.  So instead of just deleting one disclosure, I also have to search through the disclosed value for further SD hashes, and delete the corresponding disclosures.\r\n\r\nIn principle, we could add specification text that would address these issues.  But it would be a significant amount of text for what seems like a fairly niche feature.  Seems better just to delete the feature and keep things simple. ",
      "createdAt": "2023-11-13T13:48:09Z",
      "updatedAt": "2024-07-08T10:45:30Z",
      "closedAt": "2024-07-08T10:45:29Z",
      "comments": [
        {
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is also not a difficult property to enforce: Simply invalidate any disclosure object that discloses a JSON object containing an SD hash (`_sd` or `...`).",
          "createdAt": "2023-11-13T13:58:22Z",
          "updatedAt": "2023-11-13T13:58:22Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "> It requires that disclosure be processed in a particular order, and since this order is known only to the redactor, the disclosures in the SD-JWT must be listed in a specific order to communicate the order.\r\n\r\nI don't understand this point. The algorithm defined in the spec right now does not care for the order of disclosures (and it works with recursive disclosures).\r\n\r\n> It complicates the matching of disclosure objects to redacted fields, which you need to do in order to validate that the disclosures match the Issuer JWT, or to offer an API of the form \"delete the disclosure for `/address/street_address`\". Without recursion, you are matching the list of disclosures against the claims in the Issuer JWT. With recursion, you are matching the list of disclosures against the issuer JWT _and all other disclosures_.\r\n\r\nAs above - processing is fully specified, and it is not very complicated.\r\n\r\n> It complicates selective disclosure. Now, if I opt not to disclose a field, I may have rendered some disclosure further down the line meaningless. So instead of just deleting one disclosure, I also have to search through the disclosed value for further SD hashes, and delete the corresponding disclosures.\r\n\r\nThis is a valid point.\r\n\r\n> In principle, we could add specification text that would address these issues. But it would be a significant amount of text for what seems like a fairly niche feature. Seems better just to delete the feature and keep things simple.\r\n\r\n> This is also not a difficult property to enforce: Simply invalidate any disclosure object that discloses a JSON object containing an SD hash (_sd or ...).\r\n\r\nWe had this in a previous version of the spec, but opted to enable recursive disclosures since it is clear that it enables useful features while requiring only a little extra effort for implementers.",
          "createdAt": "2023-11-13T14:04:46Z",
          "updatedAt": "2023-11-13T14:04:46Z"
        },
        {
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> > It requires that disclosure be processed in a particular order, and since this order is known only to the redactor, the disclosures in the SD-JWT must be listed in a specific order to communicate the order.\r\n>\r\n> I don't understand this point. The algorithm defined in the spec right now does not care for the order of disclosures (and it works with recursive disclosures).\r\n\r\nI looked again at the algorithm in the document, and I agree that it works as specified.  But now I have a different complaint -- that the algorithm is overly complex because of the need for recursive redaction :)  What I had in mind was an even simpler algorithm, where the verifier takes each disclosure, identifies its location in the JSON object, and fills in the corresponding value.  No need for recursion or recursive searches for hashes.\r\n\r\nIn other words, without recursive redaction, you could replace steps 2 and 3 with something like the following:\r\n\r\n1. For each disclosure object in the SD-JWT:\r\n    1. Compute the hash of the disclosure object using `sd_alg`\r\n    2. Identify where in the object this hash appears, as an `...` entry in an array element or as a value in an `_sd` hash list.\r\n    3. Restore the redacted value from the disclosure object\r\n        * If in an array, replace the `{ \"...\": ... }` with the value\r\n        * If in an object, add a field with the name and value in the disclosure and remove from `_sd`\r\n",
          "createdAt": "2023-11-13T14:27:55Z",
          "updatedAt": "2023-11-13T14:27:55Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "This is almost the same we have now, just with fewer details. The only difference is that you have to walk through the JSON tree instead of iterate on the digests... actually, you could just use your algorithm and repeat it until no further replacements can be made. ",
          "createdAt": "2023-11-13T15:06:09Z",
          "updatedAt": "2023-11-13T15:06:09Z"
        },
        {
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sorry, in case it was unclear, by \"for each disclosure object\", I meant the `~`-separated pieces ([in code](https://github.com/bifurcation/rust-jwt/pull/1/files#diff-4feaccf60ef5e7cab574f2f827a8361bd688b4a1606e69e9297b8b0a00be8412R562)).  You seem to be thinking of iterating through the digests in the JSON object.\r\n\r\nThis seems like a more natural algorithm to me, since you can only disclose what's in the disclosures.  And it seems like you need a simpler API -- you only need to be able to look up where a specific SD hash is, as opposed to enumerating all the hashes in the JSON tree.\r\n",
          "createdAt": "2023-11-13T16:23:47Z",
          "updatedAt": "2023-11-13T16:23:47Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Honestly, I thought recursive redaction was kinda niche too but a nontrivial number of people have wanted/supported it. And the algorithm defined in the spec right now does accommodate it without a lot of extra complexity. Yes that algorithm works by traversing the JSON of the Issuer-singed JWT and pulling in the content of each referenced disclosure (and that content can also recursively reference other disclosures).  That seems like a perfectly natural algorithm to me.  \r\n",
          "createdAt": "2023-11-13T19:47:04Z",
          "updatedAt": "2024-02-25T19:40:05Z"
        },
        {
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think the thing that worries me most here is the [algorithm for the Holder to choose which items to disclose](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-06.html#name-processing-by-the-holder).  As with the validation algorithm discussed in #373, redaction makes it much harder to tell which disclosures go with which claims, and which disclosures can be dropped without invalidating the SD-JWT.\r\n\r\nWithout redaction, each disclosure stands alone, and you can tell what it represents by finding its hash in the Issuer JWT.  With redaction, you have to work your way through all of the other disclosures, and make sure you end up back in the Issuer JWT.\r\n\r\nYou say this is not a lot of extra complexity, but it's not even obvious to me how to write an algorithm for the above whose correctness I would have strong confidence in.  Hand it to the median programmer, and you're going to get bugs -- invalid JWTs/presentations or inadvertent disclosures.\r\n",
          "createdAt": "2023-11-13T20:11:56Z",
          "updatedAt": "2023-11-13T20:11:56Z"
        },
        {
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Basically, the choice here is:\r\n\r\n1. Eliminate recursive redaction, get simple, clear algorithms\r\n2. Keep recursive redaction, make every algorithm recursive\r\n\r\nIt's not impossible, I just question whether it's worth the work.",
          "createdAt": "2023-11-13T20:13:47Z",
          "updatedAt": "2023-11-13T20:13:47Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "The holder selecting which disclosures to include is indeed complicated by the recursive stuff. And I do think/agree that that bit of complication hasn't been considered as much. But I'd argue that's more of an implementation detail of a holder or API exposed to the holder. It could be noted in that [Processing by the Holder](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-06.html#name-processing-by-the-holder) section but I don't think that's changing the algorithm. \r\n\r\nThat is to say that I don't believe much is needed in the way of spec updates to accommodate recursive disclosures.  But yes it adds some complexity to implementations - especially at the holder around choosing which disclosures to include. \r\n\r\nIs it worth it? I honestly don't know. But the very rough consensus thus far has been in favor of allowing recursive disclosures. And I don't think it adds as much complexity as has been suggested here. \r\n",
          "createdAt": "2023-11-13T23:50:30Z",
          "updatedAt": "2023-11-13T23:50:30Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "We discussed this on the editor's call. Consensus is to keep the feature, in particular since there are some data structures that require recursive disclosures for SD-JWT to be useful for them. \r\n\r\nOpen question is whether there is any clarification we need to make in the text.",
          "createdAt": "2023-11-27T16:59:50Z",
          "updatedAt": "2023-11-27T16:59:50Z"
        },
        {
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Updated title to reflect decision.  I can do a review and propose some clarifications.",
          "createdAt": "2023-11-27T17:08:55Z",
          "updatedAt": "2023-11-27T17:08:55Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "@bifurcation Can you please propose a PR for this?",
          "createdAt": "2024-05-15T15:45:05Z",
          "updatedAt": "2024-05-15T15:45:05Z"
        }
      ]
    },
    {
      "number": 373,
      "id": "I_kwDOHTmVzM52p98y",
      "title": "Validate that disclosures match the issuer JWT",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/373",
      "state": "CLOSED",
      "author": "bifurcation",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "bc-pi"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "SD-JWT validation processes should require that the validating party (Holder or Verifier) validate that the hash of each disclosure object appears in the Issuer JWT claims.  If this validation is not performed, then the SD-JWT format is malleable, in the sense that arbitrary additional disclosure objects can be added beyond those that the issuer intended.  This creates the opportunity for mischief, from bugs to covert channels.\r\n\r\nThis is not a difficult property to enforce.  The [validation logic](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-06.html#section-8.1) already has the validating party compute the lists of (1) hashes of disclosure objects and (2) disclosure hashes in the Issuer JWT.  So the only additional step required is to check that (1) is a subset of (2).",
      "createdAt": "2023-11-13T13:56:13Z",
      "updatedAt": "2023-12-11T16:36:06Z",
      "closedAt": "2023-12-11T16:36:06Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "That requirement that the hash of each disclosure must appear in the Issuer-singed JWT is in the current draft text - near the top of [Verification of the SD-JWT](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-06.html#name-verification-of-the-sd-jwt) has \"a Holder or a Verifier MUST ensure that ... all Disclosures are correct, i.e., their digests are referenced in the Issuer-signed JWT\".\r\n\r\nSeems it could be made more explicit or clear? \r\n\r\nBut it is there.  \r\n",
          "createdAt": "2023-11-13T18:53:20Z",
          "updatedAt": "2023-11-13T18:53:20Z"
        },
        {
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ah, thanks, I had missed that.  Even given that though:\r\n\r\n* I would not call this property \"correct\".  The only other place that property appears is in 11.2, so maybe it can just be dropped, and we can just say directly \"All disclosures correspond to a hash value that appears in the Issuer JWT\"\r\n\r\n* Given recursive disclosure, though, even that's not really sufficient.  A recursively disclosed claim does not in fact appear in the Issuer JWT -- you basically need to verify that it hash-chains into the Issuer JWT via a series of disclosures \ud83d\ude31 \r\n\r\nIf we're going to eliminate recursive disclosure, I think the current text probably suffices (modulo \"correct\").  But if we're going to keep it, we need to elaborate the algorithm.  Maybe it can be folded into the existing recursive algorithm as a termination condition.  If you're adding the hashes inside disclosed values as you restore them, then if you get to the point where none of the claim hashes are in the set of disclosure hashes, then if the set of disclosure hashes is non-empty, the object is invalid.",
          "createdAt": "2023-11-13T20:03:19Z",
          "updatedAt": "2023-11-13T20:03:19Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Assuming here in this ticket at least that we are not going to eliminate recursive disclosure. \r\n\r\nThe use of \"correct\" is indeed awkward and that whole bit of text could be improved. There's room for a lot of improvement there. \r\n \r\nI've always understood text like \"referenced in the Issuer-signed JWT\" as intending to mean included directly in that JWT but also included recursively. But being more explicit is probably worthwhile. \r\n\r\nI think it'd be sufficient to say somewhere something like \"all disclosures must correspond to a hash value that appears (either directly or recursively) in the Issuer-signed JWT\". That somewhere could be in place of the \"all Disclosures are correct\" text and/or a step in the validation steps near [the check that digests not be repeated](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-06.html#section-8.1-4.3.2.4). \r\n\r\nTo you earlier point - it's not a difficult property to enforce. Even with the recursion. A validating party needs to compute the lists of (1) hashes of the disclosure objects and has to look at (2) all disclosure hashes in the Issuer JWT (including by recursive inclusion). The only additional step is still just to check that (1) is a subset of (2). Which is basically just checking that there were no unused disclosures at the end of processing. \r\n\r\n\r\n\r\n",
          "createdAt": "2023-11-13T21:07:45Z",
          "updatedAt": "2023-11-13T21:07:45Z"
        },
        {
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Agreed, if we can update the algorithm to reject if any hashes are left over, then that would fix this issue.",
          "createdAt": "2023-11-13T22:08:33Z",
          "updatedAt": "2023-11-13T22:08:33Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> Agreed, if we can update the algorithm to reject if any hashes are left over, then that would fix this issue.\r\n\r\nGreat, I think we can update the the algorithm to reject if any *disclosures* are left over. It'd probably go near the check to ensure that no digest value is repeated in the whole of the SD-JWT - either in the payload directly or recursively in any disclosure (that check about duplicate digests #355 needs a bit of improvement too). \r\n\r\nAlso we should tidy up that text with \"correct\". ",
          "createdAt": "2023-11-13T22:20:08Z",
          "updatedAt": "2023-11-13T22:20:08Z"
        }
      ]
    },
    {
      "number": 374,
      "id": "I_kwDOHTmVzM52qDgf",
      "title": "Separate token and presentation formats",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/374",
      "state": "CLOSED",
      "author": "bifurcation",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "This document actually defines two object formats, with distinct formats and validation processes:\r\n\r\n1. An object that is sent from Issuer to Holder, containing the Issuer JWT and zero or more disclosures\r\n    * Format: `IssuerJWT~disclosure~...~disclosure~`\r\n    * Validation: Validate the Issuer JWT, validate that all disclosures are present in the Issuer JWT claims\r\n2. An object that is sent from Holder to Verifier, containing the Issuer JWT, zero or more disclosures, and a Key Binding JWT\r\n    * Format: `Type1Object+KBJWT = IssuerJWT~disclosure~...~disclosure~KBJWT`\r\n    * Validation: Validate the KB JWT and `cnf`, then validate the type-(1) object\r\n\r\nRight now, the document refers to only one format, SD-JWT, which may or may not have a KB-JWT.  The document should name these two things differently and make the different processes clear.  In my notes, I have called these a \"token\" and a \"presentation\", respectively, but I don't have strong feelings about terminology.",
      "createdAt": "2023-11-13T14:08:32Z",
      "updatedAt": "2024-06-12T08:35:35Z",
      "closedAt": "2024-06-12T08:35:35Z",
      "comments": [
        {
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "body": "To be clear, I don't think we need actual technical changes here (aside from maybe moving a `~` character cf. #375).  I'm more concerned that both of these things are called \"SD-JWT\" right now, so when you have, for example, an API that expects an SD-JWT, that API has to deal with whether it's getting a key binding or not.  The reason for proposing separate names and processes here is to make it clear that implementors should handle them differently, and avoid \"cross-contamination\", in particular someone thinking they got a non-replayable thing when they did not.\r\n\r\n(This is an exact parallel to `\"alg\": \"none\"` in JWS, where the same syntax could encode very different security properties.  The fact that JWS allowed that cross-contamination has led to a significant number of security bugs.)\r\n\r\nSo my proposal here would basically be to change some terminology and rearrange some text:\r\n\r\n* Make separate terms for two data distinct formats: \r\n    * \"IssuerJWT + disclosures\" \r\n    * \"IssuerJWT + disclosures + KB-JWT\"\r\n    * **These can be syntactically as close as they are now, but they need separate names and definitions, not a single optional field, that optionality is like the optionality of the signature in `JWS(alg=none)`**\r\n* For \"IssuerJWT + disclosures\", the available algorithms are:\r\n    * Validate: Validate Issuer JWT, validate that disclosures all appear (transitively) in Issuer JWT\r\n    * \"Forget\": Remove a disclosure and all of its transitively dependent disclosures\r\n    * \"Reveal\": Apply the disclosures to obtain the maximally unredacted claims (may be coalesced with Validate)\r\n    * \"Sign\": Create an \"IssuerJWT + disclosures + KB-JWT\" using the key referenced in `cnf`\r\n* For \"IssuerJWT + disclosures + KB-JWT\", the available algorithms are\r\n    * Validate: Validate KB JWT, then validate the \"IssuerJWT + disclosures\"\r\n    * \"Reveal\": implicitly from the IssuerJWT + disclosures (maybe coalesced)\r\n\r\nI admit that I have not done the work to see how the current text would map to this structure.  If people are on board in principle, I could work up a PR that would make a more concrete proposal.\r\n",
          "createdAt": "2023-11-13T22:22:32Z",
          "updatedAt": "2023-11-13T22:22:32Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "There are indeed similarities to to `\"alg\": \"none\"` but I don't think it's an exact parallel. \r\n\r\nThere's a lot of text about the verifier policy decisions with respect to requiring key binding at https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-06.html#name-key-binding and also some push to loosing (or contextualize) it https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/368\r\n\r\nWe actually worked to consolidate the validation rules for Holder and Verifier [here](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-06.html#name-verification-of-the-sd-jwt) because there's so much commonality. With the key binding check [here](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-06.html#name-verification-by-the-verifie) being the one part that's verifier specific (and yes, whether or not Key Binding is required is a policy decision of the verifier). Consolidation of the format and calling that SD-JWT was also part of that. Not saying that was necessarily the right or best thing to do but it was intentional with some thought behind it. \r\n\r\n \r\n\r\n",
          "createdAt": "2023-11-13T23:23:17Z",
          "updatedAt": "2023-11-14T00:29:04Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> I admit that I have not done the work to see how the current text would map to this structure. If people are on board in principle, I could work up a PR that would make a more concrete proposal.\r\n\r\nOn the general principle at a high level I think we have quite similar end goals of avoiding \"cross-contamination\" type confusion. I might quibble with some of the details and names and stuff. And I suspect the current text doesn't map easily at all. I'm not necessarily opposed to trying something here. But need to be conscientiousness of lots of (sometimes competing) factors including the current content of the whole draft and especially not breaking things. I realize that's not a very concrete statement - sorry! - but it's the best I could articulate. ",
          "createdAt": "2023-11-14T00:10:21Z",
          "updatedAt": "2023-11-14T00:26:56Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I think this is not very comparable to the alg none \"flaw\" at all. The problem with alg none is that it seemingly is a signature, its just a \"bad\" algorithm. When the KB-JWT is missing, a major part of the verification would not work. ",
          "createdAt": "2023-11-21T17:05:58Z",
          "updatedAt": "2023-11-21T17:05:58Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "I think that the current encoding design, which had a lot of thought put into it, does a good job balancing many real engineering tradeoffs.  It would be unnecessarily disruptive to change it at this point.\r\n\r\nWith respect to `\"alg\": \"none\"`, *every* security issue that's arisen from it is a consequence of implementations not following normative requirements in the specification.  Those requirements, from https://www.rfc-editor.org/rfc/rfc7515.html#section-5.2, are:\r\n> Finally, note that it is an application decision which algorithms may be used in a given context.  Even if a JWS can be successfully validated, unless the algorithm(s) used in the JWS are acceptable to the application, it SHOULD consider the JWS to be invalid.\r\n\r\nIt's the JWS library's job to determine if a JWS is syntactically correct.  It's the application's job to determine if it's semantically correct.  Applications that don't do this are abdicating their security responsibilities.",
          "createdAt": "2023-11-21T20:26:52Z",
          "updatedAt": "2023-11-21T20:26:52Z"
        },
        {
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@danielfett The specific text that is freaking me out here is:\r\n\r\n> Determine if Key Binding is to be checked according to the Verifier's policy for the use case at hand. This decision MUST NOT be based on whether a Key Binding JWT is provided by the Holder or not. Refer to [Section 11.6](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-06.html#key_binding_security) for details.\r\n\r\nThis invites people to write code that is insecure unless the operator writes a policy that corrects for the deficiencies of the code.  As @selfissued points out, when things are structured that way, people will fail to write those policies in a safe way, and you get security defects.\r\n\r\nTo frame it in terms of API design:\r\n\r\n```\r\n# What the document has now\r\ndef verify_sd_jwt(sd_jwt, require_kb)\r\n\r\n# What the document ought to have\r\ndef verify_sd_jwt(sd_jwt) # KB MUST NOT be present\r\ndef verify_sd_jwt_with_key_binding(sd_jwt) # KB MUST be present and valid\r\n```\r\n\r\nThe point being that the `require_kb` flag has significant security implications (much like a putative \"accept `alg:none` flag), so we shouldn't express things in those terms.  You would never write a data import method that is like `import_data(data, signed)`, because the first time someone calls it with `signed=false` in the wrong context, you have a security incident.  Instead, you would write a separate `import_data_raw_danger_danger_danger(data)` method, and be very careful about where you use it.  If an application doesn't care about key binding, it should explicitly transform the SD-JWT to strip it.\r\n\r\nNet of all that ranting, though, all I'm saying here is that we should split the current verification algorithm in two, where one algorithm covers validation of the base SD-JWT properties (issuer JWT valid, all disclosures accounted for), and the other first validates the key binding, then calls the first algorithm.",
          "createdAt": "2023-11-22T15:57:41Z",
          "updatedAt": "2023-11-22T15:57:41Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "> we should split the current verification algorithm in two, where one algorithm covers validation of the base SD-JWT properties (issuer JWT valid, all disclosures accounted for), and the other first validates the key binding, then calls the first algorithm.\r\n\r\nI think that makes sense. as it sounds like we agree that \"verifier can have both `def verify_sd_jwt(sd_jwt) # KB MUST NOT be present` and `def verify_sd_jwt_with_key_binding(sd_jwt) # KB MUST be present and valid` and calling one or the other based on the credential/use-case?",
          "createdAt": "2023-11-22T20:19:32Z",
          "updatedAt": "2023-11-22T20:19:32Z"
        },
        {
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yeah, I think I can live with that.  It still makes me a little queasy to have the Verifier accepting documents with two different sets of security properties, but I'll take an antacid :)  We might want to split the Holder->Verifier arrow in [Figure 1](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-06.html#figure-1) into two arrows, one for each type of object.\r\n\r\nI would also still prefer we had separate terms for \"SD-JWT without KB-JWT\" and \"SD-JWT with KB-JWT\", since these have distinct formats and algorithms.",
          "createdAt": "2023-11-22T21:40:44Z",
          "updatedAt": "2023-11-22T21:40:44Z"
        },
        {
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thinking on this more, in light of #356, I'm feeling increasingly confident that Token and Presentation are good terms for \"SD-JWT-without-KB\" and \"SD-JWT-with-KB\", respectively.  Or perhaps to be more streamlined, \"SD-JWT\" for \"without KB\" and \"[SD-JWT] Presentation\" for \"with KB\".\r\n\r\nToken / SD-JWT makes sense for \"without-KB\" because it has basically the same dynamics as a JWT.  It's something the Issuer hands to the Holder, and the Holder passes on to other people.  And importantly, it shares with JWT the property of replayability.  The only difference here is that the Holder can drop some disclosures.\r\n\r\nPresentation makes sense for \"with-KB\" because the Holder needs to take an additional operation, making a new thing using the Token and the `cnf`-bound private key.\r\n\r\nYou can still call the Holder--Verifier interaction \"presentation\", you just say that the Holder presents either a Presentation or a bare Token.  The slightly awkwardness of the latter construction is productive, because it tacitly implies that you really ought to be using a Presentation to get the full security properties.\r\n\r\n```\r\n                   +------------+\r\n                   |            |\r\n                   |   Issuer   |\r\n                   |            |\r\n                   +------------+\r\n                         |\r\n                    Issues SD-JWT\r\n              including all Disclosures\r\n                         |\r\n                         v\r\n                   +------------+\r\n                   |            |\r\n                   |   Holder   |\r\n                   |            |\r\n                   +------------+\r\n                       |    |\r\n   Presents Token with |    | Presents Presentation\r\n  selected disclosures | or | with selected disclosures\r\n                       |    |\r\n                       v    v\r\n                   +-------------+\r\n                   |             |+\r\n                   |  Verifiers  ||+\r\n                   |             |||\r\n                   +-------------+||\r\n                    +-------------+|\r\n                     +-------------+\r\n```",
          "createdAt": "2023-11-27T14:14:52Z",
          "updatedAt": "2023-11-27T14:14:52Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> split the current verification algorithm in two, where one algorithm covers validation of the base SD-JWT properties (issuer JWT valid, all disclosures accounted for), and the other first validates the key binding, then calls the first algorithm.\r\n\r\nIn the common/typical/expected case the key needed to verify the key binding JWT is in the `cnf` of the Issuer-signed JWT so that order of validation steps doesn't work very well.  \r\n\r\n",
          "createdAt": "2023-11-28T15:51:32Z",
          "updatedAt": "2023-11-28T20:53:17Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> feeling increasingly confident that Token and Presentation are good terms for \"SD-JWT-without-KB\" and \"SD-JWT-with-KB\", respectively. \r\n\r\nStrongly disagree with Token and Presentation being good terms in this context. \r\n\r\n> Or perhaps to be more streamlined, \"SD-JWT\" for \"without KB\" and \"[SD-JWT] Presentation\" for \"with KB\".\r\n\r\nMaybe. If we decide to have separate terms. Which we have not. ",
          "createdAt": "2023-11-28T16:19:59Z",
          "updatedAt": "2023-11-28T16:19:59Z"
        },
        {
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> > split the current verification algorithm in two, where one algorithm covers validation of the base SD-JWT properties (issuer JWT valid, all disclosures accounted for), and the other first validates the key binding, then calls the first algorithm.\r\n> \r\n> In the common/typical/expected case the key needed to verify the key binding JWT is in the `cnf` of the Issuer-signed JWT so that order of validation steps doesn't work very well.\r\n\r\nSorry for the ambiguity, I was including \"check that the bound public key matches `cnf`\" within \"validate the key binding\".",
          "createdAt": "2023-11-28T19:28:30Z",
          "updatedAt": "2023-11-28T20:53:25Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> Sorry for the ambiguity, I was including \"check that the bound public key matches cnf\" within \"validate the key binding\".\r\n\r\nThe small point I was trying make there is that typically the \"validation of the base SD-JWT properties\" needs to happen first because the bound public key needed for the \"validate the key binding\" comes out of the former process. So the order of \"first validates the key binding, then calls the first algorithm\" probably needs to be reversed. \r\n\r\nThe meta-point is that such a suggestion to \"split the current verification algorithm\" may not resonate well with those who already question its necessity.",
          "createdAt": "2023-11-28T21:27:01Z",
          "updatedAt": "2023-11-28T21:30:52Z"
        }
      ]
    },
    {
      "number": 375,
      "id": "I_kwDOHTmVzM52qH2w",
      "title": "Make SD-JWT(0) and JWT the same",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/375",
      "state": "CLOSED",
      "author": "bifurcation",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "An SD-JWT with zero disclosures and no key binding is the same as a JWT -- you can't undo any of the selective disclosures, so you have to take the claims as they are.  But with the current document, the two cases are syntactically different: SD-JWT(0) has a `~` character at the end, and a plain JWT doesn't.\r\n\r\nThis mismatch is unfortunate for a couple of reasons.  It means that if you're taking one of these objects between SD-aware and non-SD-aware contexts, you have to have a mapping layer that adds and removes the `~`.  And it makes it impossible to use the key binding feature as-is with a plain JWT, because the key binding feature assumes that the thing being bound ends with the `~` separator.\r\n\r\nI would suggest refactoring as follows:\r\n\r\n1. Define the format of the \"SD-JWT without key binding\" thing to be simply `IssuerJWT~disclosure~...~disclosure` (no final `~`)\r\n2. Define the format of an [SD-]JWT with key binding to be `JWT~KBJWT` (with the intermediate `~`, which is absent today)\r\n\r\nThis aligns well with the distinction proposed in #374.\r\n\r\n\r\n",
      "createdAt": "2023-11-13T14:17:40Z",
      "updatedAt": "2024-02-13T16:43:32Z",
      "closedAt": "2024-02-08T17:50:36Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "We want to allow for https://datatracker.ietf.org/doc/draft-ietf-oauth-sd-jwt-vc/ to consistently convey JWTs both with and without selectively disclosable content. Which is does currently with the trailing tilde. ",
          "createdAt": "2023-11-13T22:59:24Z",
          "updatedAt": "2023-11-13T22:59:24Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I think there are four cases here:\r\n\r\n1. SD-JWT without selective disclosure and without KB JWT: `JWT~` or `JWT`\r\n2. SD-JWT without selective disclosure and with KB JWT (in scope of SD-JWT VC): `JWT~KBJWT`\r\n3. SD-JWT with selective disclosure and without KB JWT (in scope for SD-JWT VC): `IssuerJWT~Disclosure...Disclosure~` or `IssuerJWT~Disclosure...Disclosure`\r\n4. SD-JWT with selective disclosure and with KB JWT (in scope for SD-JWT VC): `IssuerJWT~Disclosure~...~KBJWT`\r\n\r\nFor point 2 in my list above (Richard's point 2), there is [a related issue in sd-jwt vc spec](https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/184) so it should be clarified.\r\n\r\nFor points 1 and 3 in my list above (Richard's point 1), this is where suggestion not to end with ~ diverges from SD-JWT/SD-JWT VC approaches. \r\nwhen there is selective disclosure (point 3), in addition to what Brian said, there are ~s between disclosures anyway, so I do not see the advantage in processing whether there is a ~ in the end or not. \r\nso even if there is no selective disclosure (point 1), for the consistency/interop sake, having `JWT~` does sound better. But I do agree with Richard that when there is no selective disclosure, it is just a JWT, so the i think it is up to the use-case and implementations to do `JWT~` when they think that that JWT may enter verifiable credential ecosystem where JWTs with selective disclosure are also used and not something for the standard to dictate.. ",
          "createdAt": "2023-11-14T06:38:46Z",
          "updatedAt": "2023-11-14T06:38:46Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "For the first case, I think distinguishing an SD-JWT without disclosures and KB-JWT (`JWT~`) from a pure JWT (`JWT`) is an important feature: It allows a receiver to always unambiguously distinguish the two cases and tell which processing is required. (It's a bad idea to put an SD-JWT into a JWT processor as it may contain SD-JWT specific structures that should be removed before further processing.)\r\n\r\nFor case three, having the last `~` enables us to distinguish between a presentation with a KB-JWT and a presentation without a KB-JWT without introspecting the last element.",
          "createdAt": "2023-11-21T16:59:35Z",
          "updatedAt": "2023-11-21T16:59:35Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "It does not make sense to always mandating disclosing something, or always mandating KB JWT, so `SD-JWT without selective disclosure and without KB JWT` is simply a unique case of SD-JWT, so `SD-JWT~` makes more sense and as Daniel argues, what came out of and is intended to be consumed by SD-JWT library, it is better from a developer perspective to have `~` and not be consumable by a vanilla JWT library.",
          "createdAt": "2024-02-08T17:50:36Z",
          "updatedAt": "2024-02-08T17:50:36Z"
        },
        {
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@Sakurann I'm a little puzzled that you think the extra `~` is better for developer experience.  An SD-JWT without disclosures is literally just a JWT where some of the claims have nonsense values.\r\n\r\nBut I guess you could argue that that's a reason that an SD-JWT(0) should still not be processed by a vanilla JWT library -- because an SD-JWT will recognize the SD claim values as nonsense, as opposed to trying to interpret them. \r\n\r\nUnder that theory, I'm OK with closing this.",
          "createdAt": "2024-02-08T20:21:04Z",
          "updatedAt": "2024-02-08T20:21:04Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "> But I guess you could argue that that's a reason that an SD-JWT(0) should still not be processed by a vanilla JWT library -- because an SD-JWT will recognize the SD claim values as nonsense, as opposed to trying to interpret them.\r\n\r\nThat is exactly the point why we decided to keep the current form.\r\n\r\n",
          "createdAt": "2024-02-13T16:43:31Z",
          "updatedAt": "2024-02-13T16:43:31Z"
        }
      ]
    },
    {
      "number": 376,
      "id": "I_kwDOHTmVzM52qPxc",
      "title": "Restructure enveloped SD-JWTs",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/376",
      "state": "CLOSED",
      "author": "paulbastian",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "pending-close"
      ],
      "body": "The current specification gives the example:\r\n```\r\n{\r\n  \"aud\": \"https://verifier.example.org\",\r\n  \"iat\": 2813308004,\r\n  \"nonce\": \"8z8z9X3jUtbthem84swFAzp4aqlHf-sCqQ6eM_qmpUQ\",\r\n  \"_js_sd_jwt\": {\r\n    \"protected\": \"eyJhbGciOiAiRVMyNTYifQ\",\r\n    \"payload\": \"eyJfc2QiOiBbIjRIQm42YUlZM1d0dUdHV1R4LX...1NiJ9\",\r\n    \"signature\": \"y_b8KFVc2GZ1n-...PKsjU3Q\",\r\n  }\r\n  \"disclosures\": [\r\n    \"WyI2SWo3dE0tYTVpVlBHYm9TNXRtdlZBIiwgImZhbWlseV9uYW1...vZSJd\",\r\n    \"WyJBSngtMDk1VlBycFR0TjRRTU9xUk9BIiwgImFkZHJlc3MiLC...iVVMifV0\",\r\n    \"WyJlbHVWNU9nM2dTTklJO...V9BIiwgImdpdmVuX25hbWUiLCAiSm9obiJd\"\r\n ]\r\n}\r\n```\r\nI would propose the structure to be more similar to the structure of compact encoding, and shuffle the order in the example:\r\n```\r\n  \"sd_jwt\": {\r\n    \"protected\": \"eyJhbGciOiAiRVMyNTYifQ\",\r\n    \"payload\": \"eyJfc2QiOiBbIjRIQm42YUlZM1d0dUdHV1R4LX...1NiJ9\",\r\n    \"signature\": \"y_b8KFVc2GZ1n-...PKsjU3Q\",\r\n  }\r\n  \"disclosures\": [\r\n    \"WyI2SWo3dE0tYTVpVlBHYm9TNXRtdlZBIiwgImZhbWlseV9uYW1...vZSJd\",\r\n    \"WyJBSngtMDk1VlBycFR0TjRRTU9xUk9BIiwgImFkZHJlc3MiLC...iVVMifV0\",\r\n    \"WyJlbHVWNU9nM2dTTklJO...V9BIiwgImdpdmVuX25hbWUiLCAiSm9obiJd\"\r\n ],\r\n  \"kb_jwt\": {\r\n    \"aud\": \"https://verifier.example.org\",\r\n    \"iat\": 2813308004,\r\n    \"nonce\": \"8z8z9X3jUtbthem84swFAzp4aqlHf-sCqQ6eM_qmpUQ\"\r\n  }\r\n}\r\n```\r\n\r\nAlso, the `_sd_hash` is missing",
      "createdAt": "2023-11-13T14:34:26Z",
      "updatedAt": "2023-12-05T17:56:36Z",
      "closedAt": "2023-12-05T17:56:36Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "In that example, and generally with enveloping, the key binding is achieved by the signature on the enclosing JWT itself, which is over all the sd-jwt content and disclosures. The outer JWT is providing key binding so there's no separate KB JWT and the _sd_hash isn't needed or relevant because the selected disclosures are covered by the signature of the enclosing JWT (also the KB JWT and _sd_hash aren't defined for the JSON serialization).\r\n\r\nThe text https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-06.html#section-10-5 introducing the example does attempt to describe it.\r\n> This next non-normative example payload shows a JSON serialized SD-JWT enveloped in a JWT. The JSON serialized SD-JWT appears as the value of an _js_sd_jwt claim and the disclosures are included separately as a top-level claim. Key Binding is achieved by the signature on the enclosing JWT.",
          "createdAt": "2023-11-13T16:52:10Z",
          "updatedAt": "2023-11-14T21:12:20Z"
        }
      ]
    },
    {
      "number": 379,
      "id": "I_kwDOHTmVzM5280zZ",
      "title": "quote claim name literals ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/379",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Enclosing claim names (and similar things) in backticks (\\`) in the markdown results in the text being enclosed in `<tt>` in the xml. In the html and pdf outputs of xml2rfc, that text enclosed in `<tt>` is output in a fixed-width font. Which is nice. However, in the txt output and subsequently the [htmlized version](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-selective-disclosure-jwt-06), there is nothing distinguishing such text (xml2rfc did previously surround with quotation marks but is no longer doing so). And even in the [html version](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-06.html) the fixed-width font with short values like claim names isn't always particularly distinguishing.  \r\n\r\nAll this is to say that I think a pass should be made through the whole markdown document to add (where appropriate) quotation marks around claim and header names and any other suitable items.\r\n\r\nI've previously seen questions/comments about this from the RFC Editor as well as IESG and directorate reviews. So it wouldn't be a bad thing to do before getting to that stage. \r\n\r\n",
      "createdAt": "2023-11-15T22:11:37Z",
      "updatedAt": "2023-11-27T16:35:07Z",
      "closedAt": "2023-11-27T16:35:05Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I remember similar discussions from RFC9449 and RFC9207 and AFAIR the outcome was to keep the current form (i.e., optimize for html and PDF output, not txt and htmlized txt).",
          "createdAt": "2023-11-20T08:09:52Z",
          "updatedAt": "2023-11-20T08:09:52Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't have a strong opinion, but keeping as-is seems ok, since backticks (`) are reflected in the html version",
          "createdAt": "2023-11-21T16:45:35Z",
          "updatedAt": "2023-11-21T16:45:35Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree that we should be using backquotes to annotate identifiers in running text.  I oppose switching to doublequotes.\r\n\r\nI asked the authors of XML2RFC v3 about the change in behavior for .txt files when the \"new\" (now a few years old) IETF RFC format was put in place.  They didn't seem concerned about it at the time - I believe being focused on formatted outputs such as HTML and PDF.\r\n\r\nI don't think it would be productive for us to invent different conventions that try to contravene what the tools we're using do.",
          "createdAt": "2023-11-21T17:00:52Z",
          "updatedAt": "2023-11-21T17:00:52Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Agreed in the call to stick to backticks.",
          "createdAt": "2023-11-27T16:35:05Z",
          "updatedAt": "2023-11-27T16:35:05Z"
        }
      ]
    },
    {
      "number": 381,
      "id": "I_kwDOHTmVzM53ScNK",
      "title": "Unable to construct SD-JWT payload from disclosures without using hashing ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/381",
      "state": "CLOSED",
      "author": "TimoGlastra",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "To construct the 'pretty' payload of an SD-JWT, meaning the payload with the actual values rather than the hashes in the `_sd` field, you currently need to use a hashing algorithm to construct this payload. \r\n\r\nOne of the nice things about JWTs is that you can see the payload without having to verify it or use any hashing algorithms. The same is true for W3C credentials, where you can see the payload, and only start hashing/canonicalizing when you want to verify the signature.\r\n\r\nCurrently this makes it harder to separate different parts of processing an SD-JWT (the verification part which requires crypto, and the handling the content part, which often doesn't require crypto), and it either requires storing a copy of the SD-JWT in a way that doesn't require the hashing to construct the payload, or re-constructing the actual payload using hashing each time. \r\n\r\nAs this is more of an implementation detail, I think this may be a fair trade-off for this specification, but something I'm curious about if it has come up in discussions around this specification.",
      "createdAt": "2023-11-20T04:06:30Z",
      "updatedAt": "2023-11-20T08:28:23Z",
      "closedAt": "2023-11-20T08:28:23Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "This was a conscious design decision, as it forces verifiers to actually check the hashes before proceeding with the processing of the payload. A common mistake is to process the unverified payload instead of verifying it first; we can avoid that with this construction.\r\n\r\nThe algorithm for verification defined in the spec is supposed to run before any application logic that needs access to the full payload. So the idea is to verify/process the presented SD-JWT and only then pass the payload on to the application.",
          "createdAt": "2023-11-20T08:07:48Z",
          "updatedAt": "2023-11-20T08:07:48Z"
        },
        {
          "author": "TimoGlastra",
          "authorAssociation": "NONE",
          "body": "Okay that makes sense, thank you!",
          "createdAt": "2023-11-20T08:28:23Z",
          "updatedAt": "2023-11-20T08:28:23Z"
        }
      ]
    },
    {
      "number": 382,
      "id": "I_kwDOHTmVzM53WQf5",
      "title": "Proposal to reorder Holder steps for presentation to a Verifier",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/382",
      "state": "CLOSED",
      "author": "srosenda",
      "authorAssociation": "NONE",
      "assignees": [
        "bc-pi"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "In draft 06 section [8.2. ](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-06.html#section-8.2)[Processing by the Holder](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-06.html#name-processing-by-the-holder) there is a list of steps:\r\n\r\n>For presentation to a Verifier, the Holder MUST perform the following (or equivalent) steps:\r\n>\r\n>1. Decide which Disclosures to release to the Verifier, obtaining proper End-User consent if necessary.\r\n>2. If Key Binding is required, create a Key Binding JWT.\r\n>3. Assemble the SD-JWT for Presentation, including the Issuer-signed JWT, the selected Disclosures and, if applicable, the Key Binding JWT.\r\n>4. Send the Presentation to the Verifier.\r\n\r\nNow that draft 06 also has the requirement to add [Integrity Protection of the Presentation](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-06.html#name-integrity-protection-of-the) (section [5.3.1.](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-06.html#section-5.3.1)) to Key Binding JWTs, a more natural order for the steps would be to create the SD-JWT for Presentation with the selected Disclosures before the Key Binding JWT, as the presentation is needed for calculating the required `_sd_hash` digest for the Key Binding JWT.\r\n\r\nE.g. something like this:\r\n>For presentation to a Verifier, the Holder MUST perform the following (or equivalent) steps:\r\n>\r\n>1. Decide which Disclosures to release to the Verifier, obtaining proper End-User consent if necessary.\r\n>2. Assemble the SD-JWT for Presentation, including the Issuer-signed JWT and the selected Disclosures.\r\n>3. If Key Binding is required, create a Key Binding JWT and add it to the Presentation.\r\n>4. Send the Presentation to the Verifier.\r\n\r\nWith that step 2. constructs the input required for the digest computation in step 3. For extra clarity, the requirement to compute and include the integrity protection digest to the Key Binding JWT could be mentioned also here with a reference to section 5.3.1. for details.",
      "createdAt": "2023-11-20T14:26:12Z",
      "updatedAt": "2023-12-11T16:31:56Z",
      "closedAt": "2023-12-11T16:31:56Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "That makes sense, thank you!",
          "createdAt": "2023-11-21T16:37:27Z",
          "updatedAt": "2023-11-21T16:37:27Z"
        }
      ]
    },
    {
      "number": 383,
      "id": "I_kwDOHTmVzM53mf8k",
      "title": "Remove mention of unspecified key binding methods",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/383",
      "state": "CLOSED",
      "author": "bifurcation",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "bc-pi"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "The algorithm in [Section 8.3](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-06.html#section-8.3) includes the following branch:\r\n\r\n> If Key Binding is provided by means not defined in this specification, verify the Key Binding according to the method used.\r\n\r\nWe should remove that branch.  If an implementation is doing something outside this specification, their behavior can deviate arbitrarily from what the specification says.  It's not the job of this specification to cover everything that a verifier might possibly do.\r\n",
      "createdAt": "2023-11-22T15:24:58Z",
      "updatedAt": "2024-02-27T17:26:57Z",
      "closedAt": "2024-02-27T17:26:57Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Indeed it's not the job of this specification to cover everything that a verifier might possibly do. But verifying key binding is important and the specification elsewhere discusses the possibility that the proof of possession could be accomplished by ways other than the KB JWT. As such, we felt that it deserved treatment in the validation steps. ",
          "createdAt": "2023-11-28T15:24:48Z",
          "updatedAt": "2023-11-28T15:24:48Z"
        },
        {
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On the one hand, KB is important.  On the other hand, KB is optional.  \ud83e\udd14 \r\n\r\nWhat other discussion do you have in mind?  I'm not finding it on a quick search through the document.\r\n\r\n\r\n",
          "createdAt": "2023-11-28T19:33:26Z",
          "updatedAt": "2023-11-28T19:33:26Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "[Alternatives to a Key Binding JWT](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-selective-disclosure-jwt-06#name-alternatives-to-a-key-bindi) for example ",
          "createdAt": "2023-11-28T20:49:12Z",
          "updatedAt": "2023-11-28T20:49:12Z"
        },
        {
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yeah, we should delete that and Section 10 as well.  They don't actually define anything, and they are harmful because they encourage divergent, non-interoperable implementations.  If there are use cases that KB-JWT doesn't cover and needs to, we should accommodate them.  If we don't need to accommodate them, we shouldn't.",
          "createdAt": "2023-12-04T22:53:44Z",
          "updatedAt": "2023-12-04T22:53:44Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "discussed during the editor's call - agreed to remove specific references that allow additional key binding mechanisms, to encourage interoperability using the mechanisms defined in the spec and because even without the text those additional mechanisms are not precluded as spec makes it clear KB JWT is optional.\r\n\r\n@danielfett to open a separate issue on updating section 9 to reflect most recent implementation experience.",
          "createdAt": "2024-02-20T17:40:50Z",
          "updatedAt": "2024-02-20T17:40:50Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #404 removes mention of unspecified key binding methods and the Enveloping SD-JWTs section",
          "createdAt": "2024-02-20T23:51:20Z",
          "updatedAt": "2024-02-20T23:51:20Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> discussed during the editor's call - agreed to remove specific references that allow additional key binding mechanisms, to encourage interoperability using the mechanisms defined in the spec and because even without the text those additional mechanisms are not precluded as spec makes it clear KB JWT is optional.\r\n\r\nPR https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/404 does that\r\n\r\n> @danielfett to open a separate issue on updating section 9 to reflect most recent implementation experience.\r\n\r\nAnd issue #403 is that.\r\n\r\n",
          "createdAt": "2024-02-25T19:53:47Z",
          "updatedAt": "2024-02-25T19:53:47Z"
        }
      ]
    },
    {
      "number": 384,
      "id": "I_kwDOHTmVzM53mk4s",
      "title": "Presentation is used without definition",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/384",
      "state": "CLOSED",
      "author": "bifurcation",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The document uses \"Presentation\" several times, capitalized as if it is an defined term.  AFAICT it is never actually defined. ",
      "createdAt": "2023-11-22T15:36:08Z",
      "updatedAt": "2023-11-22T15:48:04Z",
      "closedAt": "2023-11-22T15:48:03Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Duplicate of #356 ",
          "createdAt": "2023-11-22T15:48:03Z",
          "updatedAt": "2023-11-22T15:48:03Z"
        }
      ]
    },
    {
      "number": 385,
      "id": "I_kwDOHTmVzM538P-S",
      "title": "More figures in Section 3 (Flow Diagram)",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/385",
      "state": "CLOSED",
      "author": "bifurcation",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "pending-close"
      ],
      "body": "It seems like some additional diagrams might be help folks understand some more important properties of this system.  For example, the fact that the Holder can only drop disclosures (not add them; only the Issuer can do that).  I've sketched some figures below, would be happy to make a PR with some ASCII art / [aasvg art](https://github.com/martinthomson/aasvg) if other folks think they would be useful.\r\n\r\n(Note that I have used \"Type 1 Thing\" and \"Type 2 Thing\" as placeholders for \"without KB\" and \"with KB\" cf. #374)\r\n\r\n<img width=\"435\" alt=\"image\" src=\"https://github.com/oauth-wg/oauth-selective-disclosure-jwt/assets/75597/9c4d3f8f-f3c6-47b0-85b9-c3f3b75b2f0a\">\r\n\r\n<img width=\"435\" alt=\"image\" src=\"https://github.com/oauth-wg/oauth-selective-disclosure-jwt/assets/75597/713b3705-692f-4781-9c41-693953a04dfd\">\r\n\r\n<img width=\"435\" alt=\"image\" src=\"https://github.com/oauth-wg/oauth-selective-disclosure-jwt/assets/75597/a4992a59-5c03-4f55-95ec-9ed549f919a5\">\r\n\r\n<img width=\"569\" alt=\"image\" src=\"https://github.com/oauth-wg/oauth-selective-disclosure-jwt/assets/75597/f1584815-c19b-4ea6-8181-facf9b86f5f8\">\r\n\r\n<img width=\"626\" alt=\"image\" src=\"https://github.com/oauth-wg/oauth-selective-disclosure-jwt/assets/75597/0b4fbf20-35c8-41cc-bf4c-c4ff3698e8c4\">\r\n",
      "createdAt": "2023-11-27T13:32:34Z",
      "updatedAt": "2024-05-15T15:43:33Z",
      "closedAt": "2024-05-15T15:43:32Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "This would need to be updated to the new terminology, but to be honest, I think those figures do not help a lot in understanding the spec. It seems that they would make great material for a blog post on SD-JWT though :-)\r\n\r\nIt seems that my co-authors agree, so I'll put \"pending close\" on this.",
          "createdAt": "2024-04-30T15:59:44Z",
          "updatedAt": "2024-04-30T15:59:44Z"
        }
      ]
    },
    {
      "number": 389,
      "id": "I_kwDOHTmVzM54eyZt",
      "title": "Review of verification algorithms",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/389",
      "state": "CLOSED",
      "author": "jyasskin",
      "authorAssociation": "NONE",
      "assignees": [
        "bc-pi"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "While reviewing https://github.com/w3c/vc-jose-cose/pull/190, I had to understand some of the SD-JWT verification algorithms. I noticed some issues, which I've listed here. I haven't filed individual issues yet because I'm not sure how you'll want to group them. Thanks to @OR13 for doing a first pass; any remaining mistakes are probably because I didn't take his advice.\r\n\r\n\r\n## [5.1. ](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-06.html#section-5.1)[Issuer-signed JWT Payload](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-06.html#name-issuer-signed-jwt-payload)\r\n\r\n- [x] This should follow https://www.rfc-editor.org/rfc/rfc7515.html#section-7 by specifying \"what serialization and serialization features are used\". I see that 1.1. Feature Summary mentions the compact serialization, but that doesn't clearly say that this embedded JWT uses it.\r\n\r\n## [5.2.1. ](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-06.html#section-5.2.1)[Disclosures for Object Properties](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-06.html#name-disclosures-for-object-prop)\r\n\r\n- [x] \"The claim name, or key, as it would be used in a regular JWT payload. The value MUST be a string.\" <- I assume the \"value\" is the key, and not the key's value in the JSON object?\r\n- [x] Why is 128 bits only recommended and not required for the salt?\r\n\r\n## [5.3. ](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-06.html#section-5.3)[Key Binding JWT](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-06.html#name-key-binding-jwt)\r\n\r\n- [x] This should follow https://www.rfc-editor.org/rfc/rfc7515.html#section-7 by specifying \"what serialization and serialization features are used\". I see that 1.1. Feature Summary mentions the compact serialization, but that doesn't clearly say that this embedded JWT uses it.\r\n\r\n## [5.3.1. ](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-06.html#section-5.3.1)[Integrity Protection of the Presentation](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-06.html#name-integrity-protection-of-the)\r\n\r\n- [x] This mentions \"bytes preceding the KB-JWT in the Presentation\", but several other places mention \"Key Binding is provided by means not defined in this specification\", in which case the relevant bytes don't precede the KB-JWT. These should be consistent.\r\n\r\n## [8.1. ](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-06.html#section-8.1)[Verification of the SD-JWT](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-06.html#name-verification-of-the-sd-jwt)\r\n\r\n- [x] Are \"Upon receiving an SD-JWT, a Holder or a Verifier MUST ensure that\" and \"The Holder or the Verifier MUST perform the following (or equivalent) steps when receiving an SD-JWT\" accomplishing the same thing?\r\n- [x] \"Separate the SD-JWT\" should cite an algorithm for doing that. I think it's \"5. SD-JWT Data Formats\" which implies it's just \"split on '~'\"?\r\n- [x] \"Ensure that a signing algorithm was used that was deemed secure\" <- This should probably be an input to the algorithm \u2026 although I think there are algorithm confusion attacks that imply that the algorithm should actually be picked based on the key the verifier has cached for the issuer rather than the claim in the JWT. I know this hasn't changed compared to JWS, but we know more about how JWS and other cryptography fails, so it'd be good to incorporate modern best practices in the interfaces here.\r\n- [x] \"Validate the signature over the Issuer-signed JWT\" should cite an algorithm for doing that. Is that https://www.rfc-editor.org/rfc/rfc7515.html#section-5.2?\r\n- [x] How should the application \"Validate the Issuer and that the signing key belongs to this Issuer\"? I see that the details of distribution are out of scope (Section 11.9), but this should say something about the application having a map from (issuer ID, key ID) pairs to public keys, and which fields of the Issuer-signed JWT are used to look up keys in this map.\r\n- [x] How should the application \"Check that the _sd_alg claim value is understood\"? Where should it find the _sd_alg, in the JWT's header or payload? 5.1.1. Hash Function Claim answers this, so you could just reference that, but it would be even better to accept a set of acceptable algorithms as an argument, look up the particular field in the payload object, and save that in a variable if it's in the input set.\r\n- [x] What's a \"claim\"? https://www.rfc-editor.org/rfc/rfc7519#section-4 says the claims are the members of the JWT's payload, but the algorithm here also uses \"claim\" to describe nested object members and array elements.\r\n- [x] I would probably have written the algorithm to build a map of hash->disclosure and then call a recursive element-processing-and-replacing function, but this isn't too bad.\r\n- [x] \"Remove all array elements for which the digest was not found\" probably won't confuse anyone for long, but my first reading said that an array in the payload like [1, 2, 3] would wind up empty since no digests were found for the elements.\r\n- [x] \"Check that the SD-JWT is valid using claims such as nbf, iat, and exp\" should say where those claims are defined and what part of which object they appear on. (https://www.iana.org/assignments/jwt/jwt.xhtml#claims, and the top level of the payload, not the header, right?)\r\n- [x] The \"required validity-controlling claim\"s should probably be an input parameter to this algorithm. Possibly all the IANA-registered JWT claim handling should be passed in, or this algorithm should return all the claims for the caller to deal with.\r\n\r\n## [8.2. ](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-06.html#section-8.2)[Processing by the Holder](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-06.html#name-processing-by-the-holder)\r\n\r\n- [x] \"create a Key Binding JWT\" <- refer to the section that says how to do this.\r\n- [x] \"Assemble the SD-JWT for Presentation\" <- This should at least refer to \"5. SD-JWT Data Formats\" and possibly just write out the algorithm of \"make an array of the Issuer-signed JWT, the selected Disclosures and, if applicable, the Key Binding JWT, and join the array with '~'.\"\r\n\r\n## [8.3. ](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-06.html#section-8.3)[Verification by the Verifier](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-06.html#name-verification-by-the-verifie)\r\n\r\n- [x] This is clearer that \"Verifiers MUST ensure that\" is accomplished by the steps in the following algorithm, but I don't like the redundant MUST. You can just say \"Verifiers need to ensure that\" and then leave the normative requirements to the algorithm.\r\n- [x] \"according to the Verifier's policy\" should be an input parameter to this algorithm, that the verifier provides along with the bytes of the presentation.\r\n- [x] \"verify the Key Binding according to the method used\" <- how? This might be https://www.rfc-editor.org/rfc/rfc9449.html#section-6, but you should cite the details.\r\n- [x] \"Determine the public key for the Holder\" <- how? This might be the 'cnf' claim, but you should say so.\r\n- [x] \"Ensure that a signing algorithm was used that was deemed secure\" <- as above, this should be an input parameter to this algorithm or computed from the public key.\r\n- [x] \"Validate the signature\" <- again, cite how to do this.\r\n- [x] \"the typ of the Key Binding JWT\" <- is that in the header or payload? (cite 5.3. Key Binding JWT and possibly https://www.rfc-editor.org/rfc/rfc8725.html#name-use-explicit-typing)\r\n- [x] \"within an acceptable window.\" <- should be an input parameter\r\n- [x] \"validating nonce and aud claims\" <- The instructions for doing this should be an input parameter to this algorithm.\r\n- [x] \"Check that the Key Binding JWT is valid in all other respects\" should call a particular algorithm from the other specs that it cites.\r\n\r\n## [16. ](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-06.html#section-16)[Informative References](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-06.html#name-informative-references)\r\n\r\n- [x] Many of these should be normative. For example, base64url is used all over the normative parts of this specification, and it comes from [RFC7515] in this section.",
      "createdAt": "2023-12-01T17:50:46Z",
      "updatedAt": "2024-02-08T17:29:20Z",
      "closedAt": "2024-02-08T17:29:20Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for the review Jeffrey! I'm acknowledging it with this comment but also noting that there's a lot here so response/action will take some time. ",
          "createdAt": "2023-12-01T21:42:04Z",
          "updatedAt": "2023-12-01T21:42:04Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> Many of these should be normative.  For example,...\r\n\r\n1c1f165ab821dea5350f62225f103bdceff31532 one was an oversight and one was a tooling issue and oversight. I think that covers them tho. ",
          "createdAt": "2023-12-12T22:50:51Z",
          "updatedAt": "2023-12-18T20:48:01Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> \"Check that the Key Binding JWT is valid in all other respects\" should call a particular algorithm from the other specs that it cites.\r\n\r\nThose other specs don't have algorithms that can be called nor do they have suitable sections to reference directly. ",
          "createdAt": "2023-12-12T23:00:55Z",
          "updatedAt": "2023-12-12T23:07:36Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": ">  Why is 128 bits only recommended and not required for the salt? \r\n\r\nSome contributors want to leave open the option of a more computationally expensive hash with smaller salt values.   ",
          "createdAt": "2023-12-12T23:37:05Z",
          "updatedAt": "2023-12-12T23:37:05Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> \"The claim name, or key, as it would be used in a regular JWT payload. The value MUST be a string.\" <- I assume the \"value\" is the key, and not the key's value in the JSON object?\r\n\r\nYes and I've tried to remove any ambiguity there by just not using the word \"value\" with d015a3de2ae50623b4a294590fb2d0249e7d33b5",
          "createdAt": "2023-12-12T23:46:10Z",
          "updatedAt": "2023-12-12T23:46:45Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": " > 5.1. Issuer-signed JWT  / 5.3. Key Binding JWT \r\n>  ... should follow https://www.rfc-editor.org/rfc/rfc7515.html#section-7 by specifying \"what serialization and serialization features are used\"  ...\r\n\r\nPer [RFC7519](https://www.rfc-editor.org/rfc/rfc7519#section-1), \"JWTs are always represented using the JWS Compact Serialization\" the compact serialization is already specified.",
          "createdAt": "2023-12-15T22:16:33Z",
          "updatedAt": "2023-12-15T22:16:33Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> 5.3.1. Integrity Protection of the Presentation\r\n>\r\n> This mentions \"bytes preceding the KB-JWT in the Presentation\", but several other places mention \"Key Binding is provided by means not defined in this specification\", in which case the relevant bytes don't precede the KB-JWT. These should be consistent.\r\n\r\nThat is for the `sd_hash` claim in Key Binding JWT so isn't relevant elsewhere. ",
          "createdAt": "2023-12-15T22:30:25Z",
          "updatedAt": "2023-12-15T22:30:25Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": ">  Are \"Upon receiving an SD-JWT, a Holder or a Verifier MUST ensure that\" and \"The Holder or the Verifier MUST perform the following (or equivalent) steps when receiving an SD-JWT\" accomplishing the same thing?\r\n\r\n&\r\n\r\n> This is clearer that \"Verifiers MUST ensure that\" is accomplished by the steps in the following algorithm, but I don't like the redundant MUST. You can just say \"Verifiers need to ensure that\" and then leave the normative requirements to the algorithm.\r\n\r\nYeah, with 2a0e270f2e1dbfa9664bb5ce4989a2f6a1765217 I basically applied your suggestion to both places. \r\n\r\n",
          "createdAt": "2023-12-15T22:43:49Z",
          "updatedAt": "2023-12-15T22:48:38Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": " > \"Validate the signature over the Issuer-signed JWT\" should cite an algorithm for doing that. Is that https://www.rfc-editor.org/rfc/rfc7515.html#section-5.2?\r\n\r\nYup 7d68d4ed9b91e49a0aa00254475bf7c116669dd6 ",
          "createdAt": "2023-12-15T23:01:48Z",
          "updatedAt": "2023-12-15T23:01:48Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> \"Separate the SD-JWT\" should cite an algorithm for doing that. I think it's \"5. SD-JWT Data Formats\" which implies it's just \"split on '~'\"? \r\n\r\nYes but I believe it's sufficiently clear in the context of the draft. ",
          "createdAt": "2023-12-15T23:06:21Z",
          "updatedAt": "2023-12-15T23:06:21Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "This draft is not structured such that it has input parameters to algorithms so suggestions to make something an input parameter to an algorithm are not actionable or practical. ",
          "createdAt": "2023-12-15T23:14:11Z",
          "updatedAt": "2023-12-15T23:14:11Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": ">  \"Validate the signature\" <- again, cite how to do this.\r\n\r\ne9acd5ed665b107776b6b41355680470cde89f2c",
          "createdAt": "2023-12-16T00:03:06Z",
          "updatedAt": "2023-12-16T00:03:06Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> \"the typ of the Key Binding JWT\" <- is that in the header or payload? (cite 5.3. Key Binding JWT ... \r\n\r\n`typ` is a JOSE header. Will cite sec 5.3. where that's more explicit  64a4c4519668c7a63f1a0be215176657895fa0c8 ",
          "createdAt": "2023-12-16T00:15:01Z",
          "updatedAt": "2023-12-16T00:15:01Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": ">  \"verify the Key Binding according to the method used\" <- how? This might be https://www.rfc-editor.org/rfc/rfc9449.html#section-6, but you should cite the details.\r\n\r\nThat sentence starts with \"If Key Binding is provided by means not defined in this specification,\" so there are not specific details to cite. [Alternatives to a Key Binding JWT](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-07.html#name-alternatives-to-a-key-bindi) mentions that other ways of proving Key Binding are possible. \r\n\r\nDPoP/rfc9449 is one possibility but not the only one. Nor a particularly likely one. At least not likely enough to warrant mention here. \r\n\r\n\r\n",
          "createdAt": "2023-12-16T00:28:15Z",
          "updatedAt": "2023-12-18T21:00:46Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> \"Check that the SD-JWT is valid using claims such as nbf, iat, and exp\" should say where those claims are defined and what part of which object they appear on. (https://www.iana.org/assignments/jwt/jwt.xhtml#claims, and the top level of the payload, not the header, right?) \r\n\r\nThe very next part of that sentence says \"in the processed payload\" and that's a non-exhaustive list of JWT claims for which a citation/reference isn't really needed.  ",
          "createdAt": "2023-12-16T00:37:22Z",
          "updatedAt": "2023-12-16T00:37:22Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> \"Remove all array elements for which the digest was not found\" probably won't confuse anyone for long, but my first reading said that an array in the payload like [1, 2, 3] would wind up empty since no digests were found for the elements.\r\n\r\nI feel like it's sufficiently clear from context and shouldn't confuse anyone for too long.",
          "createdAt": "2023-12-16T00:41:16Z",
          "updatedAt": "2023-12-16T00:41:16Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": ">  I would probably have written the algorithm to build a map of hash->disclosure and then call a recursive element-processing-and-replacing function, but this isn't too bad.\r\n\r\nNoted. ",
          "createdAt": "2023-12-16T00:44:01Z",
          "updatedAt": "2023-12-16T00:44:01Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": ">  How should the application \"Validate the Issuer and that the signing key belongs to this Issuer\"? I see that the details of distribution are out of scope (Section 11.9), but this should say something about the application having a map from (issuer ID, key ID) pairs to public keys, and which fields of the Issuer-signed JWT are used to look up keys in this map.\r\n\r\nThis draft intentionally doesn't prescribe how keys are distributed, identified, selected, trusted, etc. any more than JWT/JWS do (e.g. https://datatracker.ietf.org/doc/html/rfc7515#section-6, https://datatracker.ietf.org/doc/html/rfc7515#appendix-D, etc). A map from (issuer ID, key ID) pairs to public keys is one application but certainly not the only one. ",
          "createdAt": "2023-12-16T00:55:32Z",
          "updatedAt": "2023-12-16T00:55:32Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> How should the application \"Check that the _sd_alg claim value is understood\"? Where should it find the _sd_alg, in the JWT's header or payload? 5.1.1. Hash Function Claim answers this, so you could just reference that ... \r\n\r\nreferencing that 072a0605bcb62937e343aaa7812aa8ef86d8379f",
          "createdAt": "2023-12-16T01:00:00Z",
          "updatedAt": "2023-12-16T01:00:00Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> What's a \"claim\"? https://www.rfc-editor.org/rfc/rfc7519#section-4 says the claims are the members of the JWT's payload, but the algorithm here also uses \"claim\" to describe nested object members and array elements.\r\n\r\nThat's a somewhat existential and loaded question but common usage of the word doesn't preclude it describing nested items and array elements. And this draft is not alone in that. In the intro it also says, '\"Claims\" here refers to both object properties (name-value pairs) as well as array elements.' ",
          "createdAt": "2023-12-16T01:06:22Z",
          "updatedAt": "2023-12-18T20:50:20Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> [8.2. ](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-06.html#section-8.2)[Processing by the Holder](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-06.html#name-processing-by-the-holder)\r\n>\"create a Key Binding JWT\" <- refer to the section that says how to do this.\r\n> \"Assemble the SD-JWT for Presentation\" <- This should at least refer to \"5. SD-JWT Data Formats\" \r\n\r\ncbee5f8457f447574400377dc6f7c9fe7f1c3c18\r\n\r\n\r\n",
          "createdAt": "2023-12-16T02:44:20Z",
          "updatedAt": "2023-12-16T02:44:20Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": " >  \"Determine the public key for the Holder\" <- how? This might be the 'cnf' claim, but you should say so.\r\n\r\na474e2b0b0ff7635af38c2ac95e70b40b2f82798 makes things a little more a bit more prescriptive about suggesting RFC7800 cnf/jwk be used to convey the Key Binding key and references that section from the \"Verification by the Verifier\" section. ",
          "createdAt": "2023-12-18T22:53:35Z",
          "updatedAt": "2023-12-18T22:53:35Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Thank you so much, Brian! overall, agree with all the responses. I made few comments on the PR, but one thing to note here too: I think recommending `cnf` claim per comment [here](https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/389#issuecomment-1861818753) is inconsistent with a comment [here](https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/389#issuecomment-1858648845) that says that \"this draft intentionally doesn't prescribe how keys are distributed, identified, selected, trusted, etc. any more than JWT/JWS do. so I think recommending is redundant and using `cnf` in examples is sufficient.",
          "createdAt": "2023-12-22T00:42:19Z",
          "updatedAt": "2023-12-22T00:42:19Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "That latter comment was about (and in reply to a suggestion about) validating the signature on the Issuer-signed JWT and checking that the signing key belongs to this Issuer. While the former comment is about the holder's public key inside the Issuer-signed JWT itself. Different things so I don't believe there's really an inconsistency in my statements. Nor do I think that being a little more a bit more prescriptive and more clear about using RFC7800 cnf/jwk to convey the Key Binding key is redundant. Rather this review of a review seemed like a good opportunity to provide a little more clarity and guidance in an area the draft that could benefit from such. ",
          "createdAt": "2023-12-22T14:06:30Z",
          "updatedAt": "2023-12-22T14:06:30Z"
        }
      ]
    },
    {
      "number": 391,
      "id": "I_kwDOHTmVzM54sVwJ",
      "title": "Example section headings",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/391",
      "state": "CLOSED",
      "author": "bifurcation",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "bc-pi"
      ],
      "labels": [
        "has-PR",
        "editorial"
      ],
      "body": "The layout of these section delineations seems off.  There's an \"Example 1\" section header, but no other numbers.  Some examples are top-level, some are subordinate.  Is this intended?\r\n\r\n<img width=\"301\" alt=\"image\" src=\"https://github.com/oauth-wg/oauth-selective-disclosure-jwt/assets/75597/601c9cb4-ce7a-48d6-a31b-85a566d5f884\">\r\n",
      "createdAt": "2023-12-04T22:33:05Z",
      "updatedAt": "2024-05-09T11:58:44Z",
      "closedAt": "2024-05-09T11:58:44Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": " > Is this intended?\r\n\r\nKinda.\r\n\r\n[Appendix A](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-06.html#appendix-A) has additional examples with some of those other numbers.\r\n![Screenshot 2023-12-04 at 3 44 32 PM](https://github.com/oauth-wg/oauth-selective-disclosure-jwt/assets/71398439/65ea440c-2518-43f7-a7fa-3eba88f57751)\r\n\r\nAnd a few places refer back to \"Example 1\" by name. \r\n\r\nThis all could probably be tidied up though. \r\n\r\n\r\n",
          "createdAt": "2023-12-04T22:53:27Z",
          "updatedAt": "2023-12-04T22:53:27Z"
        }
      ]
    },
    {
      "number": 392,
      "id": "I_kwDOHTmVzM54scd3",
      "title": "JSON serialization doesn't cover key binding",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/392",
      "state": "CLOSED",
      "author": "bifurcation",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "As in #383, [9. JWS JSON Serialization](https://drafts.oauth.net/oauth-selective-disclosure-jwt/draft-ietf-oauth-selective-disclosure-jwt.html#name-jws-json-serialization) invokes specification by magic:\r\n\r\n> Key Binding (if applicable) will be provided by means not specifically defined in this specification\r\n\r\nIf we are defining a format for SD-JWT, that format needs to include all of the parts of the SD-JWT.  Unless #374 gets fixed, that means the format needs an optional key binding field.\r\n\r\nBut I think that this issue is actually a symptom #374.  The document doesn't define a format for \"SD-JWT with KB\" because it is actually substantively different thing from \"SD-JWT without KB\".  Putting it in JSON just highlights the difference more clearly than `~`-delimited text.\r\n\r\nThe current syntax seems fine to me for \"SD-JWT without KB\".  For \"SD-JWT with KB\", I would think you would want something like:\r\n\r\n```\r\n{\r\n  \"sd_jwt\": { /* format currently specified, or compact */ },\r\n  \"key_binding: { /* JSON-formatted JWS of KB-JWT */ }\r\n}\r\n```\r\n\r\nHere the `sd_jwt` field MUST hash to `sd_hash`, after serialization to the `~` compact form.\r\n",
      "createdAt": "2023-12-04T22:45:00Z",
      "updatedAt": "2024-05-15T15:35:37Z",
      "closedAt": "2024-05-15T15:35:37Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Such a field was removed in -06,`kb_jwt` in PR https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/344, when it became more evident that that the folks wanting to use JSON serialization were intending to do key binding by other means - some kind of enveloping rather than a separate KB JWT.  That along with the introduction of the _sd_hash to the KB JWT (which is much trickier than you've suggested esp wrt to the General JWS JSON Serialization) motivated the removal of the field.",
          "createdAt": "2023-12-05T13:19:32Z",
          "updatedAt": "2023-12-05T13:19:32Z"
        },
        {
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That just further emphasizes that we need to address #374  and separate \"SD-JWT without KB\" and \"SD-JWT with KB\", since the JSON serialization folks want to use the former and not the latter.  If we have that separation, this section can just have a JSON format for \"SD-JWT without KB\" and there's no mismatch.",
          "createdAt": "2023-12-05T15:56:23Z",
          "updatedAt": "2023-12-05T15:56:23Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "@danielfett will open a separate ticket with specific mechanisms to address this based on the implementation experience",
          "createdAt": "2024-02-20T17:45:07Z",
          "updatedAt": "2024-02-20T17:45:07Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "The discussion about KB JWT in JSON-serialized JWS came up in the EUDI Wallet context as well, so we plan to fix it: https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/403",
          "createdAt": "2024-02-20T17:59:12Z",
          "updatedAt": "2024-02-20T17:59:12Z"
        }
      ]
    },
    {
      "number": 393,
      "id": "I_kwDOHTmVzM541cfH",
      "title": "Provide ABNF",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/393",
      "state": "CLOSED",
      "author": "bifurcation",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "bc-pi"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "It seems like it could be helpful to implementors, allowing them to quickly validate whether what they have is syntactically an SD-JWT or an SD-JWT with key binding.  Something like:\r\n\r\n```\r\nbase64url ::= ALPHA / DIGIT / \"-\" / \"_\"\r\nJWT ::= base64url \".\" base64url \".\" base64url\r\nSD-JWT ::= JWT \"~\" [base64url \"~\"]*\r\nFnord ::= SD-JWT JWT\r\n```",
      "createdAt": "2023-12-05T22:57:48Z",
      "updatedAt": "2024-06-13T07:03:36Z",
      "closedAt": "2024-06-13T07:03:36Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> It seems like it could be helpful to implementors, allowing them to quickly validate whether what they have is syntactically an SD-JWT or an SD-JWT with key binding. Something like:\r\n> \r\n> ```\r\n> base64url ::= ALPHA / DIGIT / \"-\" / \"_\"\r\n> JWT ::= base64url \".\" base64url \".\" base64url\r\n> SD-JWT ::= JWT \"~\" [base64url \"~\"]*\r\n> Fnord ::= SD-JWT JWT\r\n> ```\r\n\r\nThe actual helpfulness of ABNF IMHO really depends on the readers familiarity with ABNF. I don't know that such familiarity is particularity prevalent. But, as long as it's correct, it doesn't hurt to include either.  And while I'm not overly familiar with ABNF myself, I know enough to know that that isn't valid ABNF and doesn't quite correctly convey the SD-JWT constructs. I've endeavored* to fix it up but am not 100% sure this is correct either:\r\n\r\n```\r\nALPHA = %x41-5A / %x61-7A ; A-Z / a-z\r\nDIGIT = %x30-39 ; 0-9\r\nbase64url = 1*(ALPHA / DIGIT / \"-\" / \"_\")\r\nJWT = base64url \".\" base64url \".\" base64url\r\nSD-JWT = JWT \"~\" *[base64url \"~\"]\r\nSD-JWT-KB = SD-JWT JWT\r\n```\r\n\r\n\\* with a bit of help from https://author-tools.ietf.org/abnf ",
          "createdAt": "2024-02-12T21:49:49Z",
          "updatedAt": "2024-02-12T21:51:04Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Looks good to me, thank you! \r\n\r\nMaybe a small improvement would be to introduce a name for disclosure?\r\n```\r\nALPHA = %x41-5A / %x61-7A ; A-Z / a-z\r\nDIGIT = %x30-39 ; 0-9\r\nbase64url = 1*(ALPHA / DIGIT / \"-\" / \"_\")\r\nJWT = base64url \".\" base64url \".\" base64url\r\nDISCLOSURE = base64url\r\nSD-JWT = JWT \"~\" *[DISCLOSURE \"~\"]\r\nSD-JWT-KB = SD-JWT JWT\r\n```",
          "createdAt": "2024-02-13T17:22:59Z",
          "updatedAt": "2024-02-13T17:22:59Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "That's a good improvement, thanks!",
          "createdAt": "2024-02-13T19:52:35Z",
          "updatedAt": "2024-02-13T19:52:35Z"
        },
        {
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Looks good to me, and appears valid according to the [IETF ABNF parser](https://author-tools.ietf.org/abnf).",
          "createdAt": "2024-02-14T14:12:53Z",
          "updatedAt": "2024-02-14T14:12:53Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "(SD-JWT-KB part of the ABNF depends on another PR)",
          "createdAt": "2024-02-20T17:44:14Z",
          "updatedAt": "2024-02-20T17:44:14Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "need to wait after #394 is resolved to do a PR.",
          "createdAt": "2024-02-27T17:40:25Z",
          "updatedAt": "2024-02-27T17:40:25Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "maybe add a KB-JWT line to be even more better? a la:\r\n\r\n```\r\nALPHA = %x41-5A / %x61-7A ; A-Z / a-z\r\nDIGIT = %x30-39 ; 0-9\r\nbase64url = 1*(ALPHA / DIGIT / \"-\" / \"_\")\r\nJWT = base64url \".\" base64url \".\" base64url\r\nDISCLOSURE = base64url\r\nSD-JWT = JWT \"~\" *[DISCLOSURE \"~\"]\r\nKB-JWT = JWT\r\nSD-JWT-KB = SD-JWT KB-JWT\r\n```",
          "createdAt": "2024-06-10T22:28:11Z",
          "updatedAt": "2024-06-10T22:28:11Z"
        }
      ]
    },
    {
      "number": 395,
      "id": "I_kwDOHTmVzM55ExJI",
      "title": "Audacious Presentations",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/395",
      "state": "CLOSED",
      "author": "OR13",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "pending-close"
      ],
      "body": "Consider a hypothetical API for verifying an SD-JWT with Key Binding.\r\n\r\nThese examples are inspired by https://github.com/panva/jose/blob/main/docs/functions/jwt_verify.jwtVerify.md\r\n\r\n```\r\nverified = verify<TokenType>(token: string, publicKey, { aud, nonce })\r\n```\r\n\r\nwhen token contains KBT, there are 2 payloads that could have the `aud` and `nonce` claims.\r\n\r\nAn API that addressed this possible confusion would look like:\r\n\r\n```\r\nverified = verify<TokenType>(token: string, issuerPublicKey, { \r\n  issuerSignedJwt: { aud, nonce },  // assume cnf: { jwk }\r\n  keyBindingToken: { aud, nonce }   // assume uses cnf\r\n)\r\n```\r\n\r\nThe problem is SD-JWT has 2 tokens, so the `aud` and `nonce` claims have 2 places to check.\r\n\r\nIf the idea of matching an expected nonce is confusing, focus only on the audience bit.\r\n\r\nThe issuer commits a credential to a specific audience, and the holder commits their key binding token to a specific audience.\r\n\r\nA verifier would want to check that both values are \"acceptable\", and \"acceptable\" could mean the same or different.\r\n\r\nThis is compounded by `aud` being allowed to be an array or string.\r\n\r\nIf an API was exposed that looked like this:\r\n\r\n```\r\nverified = verify<TokenType>(fnard: string, issuerPublicKey, { aud, nonce })\r\n)\r\n```\r\n\r\nI think it would be clear that the `aud` and `nonce` were checks on the key binding token, not on the issuer token.",
      "createdAt": "2023-12-07T18:16:02Z",
      "updatedAt": "2024-02-27T17:32:02Z",
      "closedAt": "2024-02-27T17:32:02Z",
      "comments": [
        {
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Here is a longer form description of this challenge, with some additional background on who we encountered it, and recommendations for specifications that build on SD-JWT.\r\n\r\nhttps://github.com/transmute-industries/audacious-presentations",
          "createdAt": "2023-12-08T16:40:25Z",
          "updatedAt": "2023-12-08T16:40:25Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Can you please shed some light on what you would use the 'aud' and 'nonce' in the sd-jwt for and why the verifier should consider them during validation of the presentation? In my opinion, it should look onto `aud` and `nonce` in the kb jwt only as those bind the presentation to it (aud) and the respective presentation transaction (nonce). ",
          "createdAt": "2023-12-08T17:10:52Z",
          "updatedAt": "2023-12-08T17:10:52Z"
        },
        {
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Can you please shed some light on what you would use the 'aud' and 'nonce' in the sd-jwt for and why the verifier should consider them during validation of the presentation?\r\n\r\n- https://learn.microsoft.com/en-us/azure/active-directory-b2c/tokens-overview#validate-claims\r\n\r\nI would expect `aud` and `nonce` in an SD-JWT (the issuer signed JWT) to have the same semantics as a JWT.\r\n\r\nOr I would expect new claims to be introduced to avoid confusion.\r\n\r\nIn the case of `aud` being present in the issuer signed JWT, I would expect the verifier to throw an error when the KBT contained A DIFFERENT `aud`.\r\n\r\nUn the case of `nonce` being present in the issuer signed JWT,  I would expect the verifier to throw an error when the KBT contained the SAME `nonce`.\r\n\r\nThis would be just forwarding the traditional binding from the 2 party model to the 3 party model.\r\n\r\nHaving established these basics, I would then specify some example cases for where audience might be different.\r\n\r\nFor example, when talking to a verifier front end, with a separate relying backend, similar to the RATS architecture:\r\n\r\nhttps://datatracker.ietf.org/doc/html/rfc9334#section-3",
          "createdAt": "2023-12-11T15:18:42Z",
          "updatedAt": "2023-12-11T15:23:03Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "> > Can you please shed some light on what you would use the 'aud' and 'nonce' in the sd-jwt for and why the verifier should consider them during validation of the presentation?\r\n> \r\n>     * https://learn.microsoft.com/en-us/azure/active-directory-b2c/tokens-overview#validate-claims\r\n> \r\n> \r\n> I would expect `aud` and `nonce` in an SD-JWT (the issuer signed JWT) to have the same semantics as a JWT.\r\n\r\nWhy would these be useful in a multi-use JWT like the issuer-signed part?",
          "createdAt": "2023-12-11T15:31:24Z",
          "updatedAt": "2023-12-11T15:31:24Z"
        },
        {
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "body": "`issuer` -> `sd token bound to verifier backend`  (issuer signed JWT....  aud: verifier-backend)\r\n\r\n-> \r\n\r\n`holder` -> `sd token with key binding bound to verifier front end` (key binding token.... aud: verifier-frontend)",
          "createdAt": "2023-12-11T15:33:59Z",
          "updatedAt": "2023-12-11T15:37:35Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "> `issuer` -> `sd token bound to verifier backend`\r\n\r\nMy confusion comes from the assumption that in most cases, the issuer wouldn't even know the verifier, let alone a nonce. So I wouldn't expect `aud` and `nonce` in the issuer-signed part at all.",
          "createdAt": "2023-12-11T15:38:50Z",
          "updatedAt": "2023-12-11T15:38:50Z"
        },
        {
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> So I wouldn't expect `aud` and `nonce` in the issuer-signed part at all.\r\n\r\nA verifier MUST NOT error, when issuer signed JWT contains `aud` and `nonce` claims?\r\n\r\nI think this is the default behavior.\r\n\r\nIn specs that build on SD-JWT, they could say this, if they wanted to further avoid confusion.\r\n\r\nWould you recommend `application/vc+ld+json` and `application/vp+ld+json` should never have `aud` and `nonce` present, and we could add a SHOULD NOT or MUST NOT to the W3C spec.",
          "createdAt": "2023-12-11T15:42:11Z",
          "updatedAt": "2023-12-11T15:42:44Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "> A verifier MUST NOT error, when issuer signed JWT contains aud and nonce claims?\r\n\r\nIt might, if that's the security posture in that ecosystem/application. but this is not a general rule applicable to all sd-jwts. For example, if access token is an sd-jwt, it is very likely `aud` will be required (ex. https://datatracker.ietf.org/doc/html/rfc9068#section-2.2).\r\n\r\n> In specs that build on SD-JWT, they could say this, if they wanted to further avoid confusion.\r\n\r\nAs you say, this topic probably belongs more in specs such as sd-jwt vc, but for the reasons above, I am not sure there is a one-fits-all-verifiers/use-cases kind of guidance here that should go into an sd-jwt spec. https://drafts.oauth.net/oauth-selective-disclosure-jwt/draft-ietf-oauth-selective-disclosure-jwt.html#section-11.8 is what sd-jwt spec gives as a guidance.",
          "createdAt": "2023-12-11T16:37:40Z",
          "updatedAt": "2023-12-11T16:37:40Z"
        },
        {
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This PR is also relevant: https://github.com/w3c/vc-data-model/pull/1379/files#r1422822545",
          "createdAt": "2023-12-11T17:10:29Z",
          "updatedAt": "2023-12-11T17:10:29Z"
        },
        {
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Related to the `IdentityCredential`... https://github.com/WICG/identity-credential/issues/7\r\n\r\nI assume the nonce / aud for this API is binding to KBT and not the Issuer signed JWT.\r\n\r\nPerhaps the best way to close the issue in this repo is to just add some text saying:\r\n\r\n\"nonce and aud\" can be present in the Issuer Signed JWT, and they can be the same or different from the KBT.... its up to the verifier to decide if they tamper protected claims supplied are acceptable and valid per their own policies.\r\n\r\nIt is recommended that specifications that build on SD-JWT comment on `aud` and `nonce` and give guidance related to the usage of SD-JWT.",
          "createdAt": "2023-12-11T21:50:45Z",
          "updatedAt": "2023-12-11T21:50:45Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm not entirely convinced anything is needed in the SD-JWT draft itself. The Issuer-signed JWT is ultimately just a JWT and can have whatever claims a JWT might have and is subject to the normal JWT validation. https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-07.html#section-5.1-3.6 and https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-07.html#section-8.1-4.6 attempt to convey content and validation respectively.  But it's also kind of implicit in the whole thing. \r\n\r\nI do think it'd be relatively unusual for the Issuer-signed JWT to have an `aud` or `nonce` but, if present, they'd need to be validated per RFC7519 and whatever application profile respectively. \r\n",
          "createdAt": "2023-12-12T19:38:08Z",
          "updatedAt": "2023-12-12T19:38:08Z"
        }
      ]
    },
    {
      "number": 403,
      "id": "I_kwDOHTmVzM5_2X4l",
      "title": "Redesign JWS JSON Serialization",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/403",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "Through discussions in the EUDI context, we found that the current JSON Serialization design is not well-suited for existing implementations. We now also better understand the original use cases that lead us to include this section into the spec in the first place and we agreed that we should update it as follows:\r\n\r\n* The disclosures should go into the unprotected header (to be defined: What happens when there are multiple signatures and therefore multiple unprotected headers with disclosures?)\r\n* There should be a way to put the key binding JWT into the unprotected header (to be defined: What happens when there are multiple signatures and therefore multiple places where a KB JWT could go?). The way the hash is built could remain unchanged, but the order of disclosures needs to be clearly defined if they can show up in multiple headers. This would also solve #392.\r\n\r\nThe new flattened format could be:\r\n```json\r\n{\r\n  \"payload\":\"eyJfc2QiOiBbIjR...Aic2hhLTI1NiJ9\",\r\n  \"protected\":\"eyJhbGciOiAiRVMyNTYiLCAidHlwIjogImV4YW1wbGUrc2Qtand0In0\",\r\n  \"signature\":\"oL5lornrs6CFBMu...4HQby6OaaLqAw\",\r\n  \"header\":{\r\n    \"disclosures\":[\r\n      \"WyI2SWo3dE0tYTVpVlBH...W1lIiwgIkRvZSJd\",\r\n      \"WyJBSngtMDk1VlBycFR...ImFkZHJlc3MiLCB7InN0cmVldF9\",\r\n      \"WyJlbHVWNU9nM2dTT...VuX25hbWUiLCAiSm9obiJd\"\r\n    ],\r\n    \"kb_jwt\":\"eyJhbGciOiAiRVMyNTYiLCAidHlwIjogI...bGUrc2Qtand0In0\"\r\n  }\r\n}\r\n```\r\n\r\nAnd the new general format could be:\r\n```json\r\n{\r\n  \"payload\":\"eyJfc2QiOiBbIjR...Aic2hhLTI1NiJ9\",\r\n  \"signatures\":[\r\n    {\r\n      \"protected\":\"eyJhbGciOiAiRVMyNTYiLCAidHlwIjogImV4YW1wbGUrc2Qtand0In0\",\r\n      \"signature\":\"oL5lornrs6CFBMu...4HQby6OaaLqAw\",\r\n      \"header\":{\r\n        \"disclosures\":[\r\n          \"WyI2SWo3dE0tYTVpVlBH...W1lIiwgIkRvZSJd\",\r\n          \"WyJBSngtMDk1VlBycFR...ImFkZHJlc3MiLCB7InN0cmVldF9\",\r\n          \"WyJlbHVWNU9nM2dTT...VuX25hbWUiLCAiSm9obiJd\"\r\n        ],\r\n        \"kb_jwt\":\"eyJhbGciOiAiRVMyNTYiLCAidHlwIjogI...bGUrc2Qtand0In0\"\r\n      }\r\n    },\r\n    {\r\n      \"protected\":\"eyJhbGciOiAiRVMyNTYiLCAidHlwIjogImV4YW1wbGUrc2Qtand0In0\",\r\n      \"signature\":\"oL5lornrs6CFBMu...4HQby6OaaLqAw\"\r\n    }\r\n  ]\r\n}\r\n```\r\n",
      "createdAt": "2024-02-20T17:58:14Z",
      "updatedAt": "2024-05-15T15:35:46Z",
      "closedAt": "2024-05-15T15:35:46Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Here is a first draft, it would be great to get some feedback: https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/414/files\r\n\r\nI'll update the code for the Python library later on.",
          "createdAt": "2024-03-08T10:10:38Z",
          "updatedAt": "2024-03-08T10:10:38Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #414 has been merged and this can be closed, no? ",
          "createdAt": "2024-05-15T15:15:50Z",
          "updatedAt": "2024-05-15T15:15:50Z"
        }
      ]
    },
    {
      "number": 409,
      "id": "I_kwDOHTmVzM6AnKPO",
      "title": "disclosing age_equal_or_over not working",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/409",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "> We should probably chase this down sometime sooner rather than later \r\n> (some issue with the yaml or a bug in the library maybe?).\r\n\r\n_Originally posted by @bc-pi in https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/408#discussion_r1505105674_\r\n            ",
      "createdAt": "2024-02-27T22:52:28Z",
      "updatedAt": "2024-03-04T15:19:04Z",
      "closedAt": "2024-03-04T15:19:04Z",
      "comments": []
    },
    {
      "number": 416,
      "id": "I_kwDOHTmVzM6Cw3Gv",
      "title": "Add Test suite for SD-JWT",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/416",
      "state": "CLOSED",
      "author": "lukasjhan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "HI! I and @yunseorim1116 made a Test suite project for checking SD-JWT implementation.\r\nYou can check it here: https://github.com/lukasjhan/sd-jwt-test-api\r\nIt was written in TypeScript. It is in API server format and is distributed using docker.\r\n\r\nI'm curious about your opinions on this project. \r\nIf this is okay, How about write it in a standard document or put it in README?\r\n\r\nThank you",
      "createdAt": "2024-03-19T01:59:10Z",
      "updatedAt": "2024-05-16T19:25:20Z",
      "closedAt": "2024-05-16T19:25:19Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @lukasjhan, it's great to see this kind of work developing. It's not the kind of thing that would be appropriate in an IETF document, however. And it doesn't really fit very well with the \"SD-JWT Implementations\" of this README but maybe a line there with a name that qualifies it as a test server rather than actual implementation. Something like:\r\n\r\n * TypeScript: [SD-JWT Testing API server](https://github.com/lukasjhan/sd-jwt-test-api)\r\n\r\nassuming @danielfett and @Sakurann are okay with that though...",
          "createdAt": "2024-04-04T22:29:07Z",
          "updatedAt": "2024-04-04T22:29:07Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Go ahead with a PR as such, @lukasjhan. ",
          "createdAt": "2024-04-15T15:38:32Z",
          "updatedAt": "2024-04-15T15:38:32Z"
        },
        {
          "author": "lukasjhan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thank you I'll open a PR :)",
          "createdAt": "2024-04-18T12:34:47Z",
          "updatedAt": "2024-04-18T12:34:47Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> Thank you I'll open a PR :)\r\n\r\n@lukasjhan can you do this please? ",
          "createdAt": "2024-05-15T15:49:14Z",
          "updatedAt": "2024-05-15T15:49:14Z"
        },
        {
          "author": "lukasjhan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@bc-pi sorry for late response :) I created a PR",
          "createdAt": "2024-05-16T09:00:03Z",
          "updatedAt": "2024-05-16T09:00:03Z"
        }
      ]
    },
    {
      "number": 417,
      "id": "I_kwDOHTmVzM6DC16y",
      "title": "state what salt does",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/417",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "question from an email, \r\n\r\n>  ... rookie question on your draft for SD-JWT. What is the use case of the salt, and how does it help to hide the claim values? \r\n\r\nmy response:\r\n\r\n> I was going to point you to some text in the draft that explains it but unfortunately couldn't find such text. That's maybe something that should be fixed. Sections [10.3](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-08.html#section-10.3) - 10.5  kinda say something about it but the reason is mostly just implied. Basically the salt makes it computationally infeasible to enumerate a potential value space for a claim name/value into the hash function to try and find the matching hash value. Thereby making impossible brute force style attempts to 'reverse' a hash value by hashing all reasonable input values to try and find a match to the hash value. If that makes any sense? To put it another way (which may or may not be helpful), the salt makes it computationally infeasible to guess the preimage of the digest. \r\n\r\nThe exchange makes me think a brief mention/explanation what salt does/provides in the SD-JWT context would be a worthwhile addition. Maybe just add or modify a sentence or two in sec 10.3. And/or something in https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-08.html#section-5.2.1-2.1.2.1 where the salt value in the Disclosure is introduced/described.  ",
      "createdAt": "2024-03-20T21:01:00Z",
      "updatedAt": "2024-04-02T21:25:06Z",
      "closedAt": "2024-04-02T21:25:06Z",
      "comments": [
        {
          "author": "larryzhu2018",
          "authorAssociation": "NONE",
          "body": "Hi Brian, just check for understanding: does the issuer send the clear text values of the disclosed claims to the holder and verifier or does the issuer only send the salted hashes?\r\n\r\n           +------------+\r\n           |            |\r\n           |   Issuer   |\r\n           |            |\r\n           +------------+\r\n                 |\r\n            Issues SD-JWT\r\n      including all Disclosures\r\n                 |\r\n                 v\r\n           +------------+\r\n           |            |\r\n           |   Holder   |\r\n           |            |\r\n           +------------+\r\n                 |\r\n           Presents SD-JWT\r\n    including selected Disclosures\r\n                 |\r\n                 v\r\n           +-------------+\r\n           |             |+\r\n           |  Verifiers  ||+\r\n           |             |||\r\n           +-------------+||\r\n            +-------------+|\r\n             +-------------+",
          "createdAt": "2024-03-20T21:07:01Z",
          "updatedAt": "2024-03-20T21:07:31Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm sorry but I don't quite understand the question or how it relates to the small change I'm suggesting in this issue. ",
          "createdAt": "2024-03-20T21:17:00Z",
          "updatedAt": "2024-03-20T21:17:00Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "FYI, I was asked what the salt does by an IETF attendee yesterday.  I support explaining this in the draft.",
          "createdAt": "2024-03-21T00:20:47Z",
          "updatedAt": "2024-03-21T00:20:47Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #421 has some proposed text ",
          "createdAt": "2024-03-24T15:34:13Z",
          "updatedAt": "2024-03-24T15:34:13Z"
        }
      ]
    },
    {
      "number": 418,
      "id": "I_kwDOHTmVzM6DC4qT",
      "title": "Explicit clarification over correct formatting of objects with no disclosed elements",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/418",
      "state": "CLOSED",
      "author": "MichaelFraser99",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "If we take the following example of an SD-JWT:\r\n\r\n`eyJhbGciOiJSUzI1NiIsInR5cCI6ImFwcGxpY2F0aW9uL2pzb24rc2Qtand0In0.eyJfc2QiOlsienctOU1SQXdtcUJXeTFUOEVua0JvZ2lyVEpfU2NTbnZfSGlCenhOWXFUNCJdLCJjbmYiOnsiZSI6IkFRQUIiLCJrdHkiOiJSU0EiLCJuIjoidlpEc29UMW5HVjR4X1gzck9HTGUzOF8tQmpibVUtUWxlSjRIZU1Fbl9GRUZLaEhTc1ZIR1dsR28xZ2pBckR5a2d5d0VTQVg0dEhqdURMUFZiODlkNzQ2eVJIRVF3aXRIbU5sTE40c1NGQUd1MWNJSU1iUDNuM3RrSWtYQlh5U25pMXNCanV4b3lnMFU1UmJQd1lMN2J0NklqWS04OWljd2ZjTVV1N2p3aV80dFk2SUUyQXpTbm9sQi1RN21tS2o1ZXNWeEJ3RTIzTkdlamp2NmNvLWNtTFVZMEhuZFE2QXo1RldKbjlGRTA3RlFOeHQwVXNLaGZDTi05eGVnVXR1c1lDX3IyZlg2SnRsYy1UYWlwQWV5WEZ2RFVIVHVUSEdWSHNseGN5NFhPVS15WnE2OFhGaHJUQnZRTVNKV1dxRDR0MjYyXzlIR2k2QlEzVmlpbE51ZDd3In0sImZhbWlseV9uYW1lIjoiTcO8bGxlciIsImdpdmVuX25hbWUiOiJNYXgifQ.xj0X10080FANgzrdpfWrbF0DO0Y3KwiJzoO8-C-pj_DU6xjrG9kX9Nbh6rFhD1iuX_aGL-tXQwXaiGrgWLC72ws_mleRkQ6cvibl-ej9mr45iqZ2vd9rQavBh_q5v9AoKI3vu763ZEp49b_Z02acOWbIK9LlmSf3_hivHvV8mV5tpUCaSxD8JQ8tWbD5q5WhPofeAprm0_ygj4JmF0EuC_ARPmAZEK8of9kIKTgRKsLQuAPreQId8Sg7tTZaSLL4D47DZlWY0ioO2wn6QyYXIbHFnx01EKbsk_I3F0ha4P0h0UPif3KcIRh_tGkrjazejAv7mXd0jJLjF9CEGJzNYw~WyI1eWZHRjVxZnhKN2ViOXN0anBIR3dRIiwiYWRkcmVzcyIseyJfc2QiOlsiaFRiS1NZdVBaaW5qMVBja1N1Z0pfdnRhc3dFVEYxR0xPSVRpRnM1Wnl1dyIsIk0xU3FsVWNyZ1Ewc1FuRE1Vek5nVVFXVXBWM19XWEN0YzN3QWNNMUx4Y2siLCJ1OTdHb1cwRnZiVkl3dElBdWJGZEFIbTVjaG5wc0VFVm1jTzVGNUJxeG5JIl19XQ~`\r\n\r\nWhere there is a single provided disclosure that decodes to:\r\n\r\n`[\r\n   [\"5yfGF5qfxJ7eb9stjpHGwQ\",\"address\",{\"_sd\":[\"hTbKSYuPZinj1PckSugJ_vtaswETF1GLOITiFs5Zyuw\",\"M1SqlUcrgQ0sQnDMUzNgUQWUpV3_WXCtc3wAcM1Lxck\",\"u97GoW0FvbVIwtIAubFdAHm5chnpsEEVmcO5F5BqxnI\"]}]\r\n]`\r\n\r\nThe disclosure value is an address claim which has all of it's values as disclosable. In the given scenario where the presence of the address claim has been disclosed yet none of the contents disclosed, I believe it would be good to be explicit over the desired result here\r\n\r\nReading through the steps in 8.1. I think the implicit correct result would be to have the above boil down to\r\n`{\r\n  \"cnf\": {\r\n    \"e\": \"AQAB\",\r\n    \"kty\": \"RSA\",\r\n    \"n\": \"vZDsoT1nGV4x_X3rOGLe38_-BjbmU-QleJ4HeMEn_FEFKhHSsVHGWlGo1gjArDykgywESAX4tHjuDLPVb89d746yRHEQwitHmNlLN4sSFAGu1cIIMbP3n3tkIkXBXySni1sBjuxoyg0U5RbPwYL7bt6IjY-89icwfcMUu7jwi_4tY6IE2AzSnolB-Q7mmKj5esVxBwE23NGejjv6co-cmLUY0HndQ6Az5FWJn9FE07FQNxt0UsKhfCN-9xegUtusYC_r2fX6Jtlc-TaipAeyXFvDUHTuTHGVHslxcy4XOU-yZq68XFhrTBvQMSJWWqD4t262_9HGi6BQ3ViilNud7w\"\r\n  },\r\n  \"family_name\": \"M\u00fcller\",\r\n  \"given_name\": \"Max\",\r\n  \"address\": {}\r\n}`\r\n\r\nwhere `address` is an empty object. I think explicitly specifying this in the spec would be valuable\r\n\r\nPossibly something worded akin to:\r\n`In the scenario where an object claim's presence is disclosed yet the entire contents of the object has not been, the result should be an empty object`",
      "createdAt": "2024-03-20T21:08:02Z",
      "updatedAt": "2024-04-02T15:45:01Z",
      "closedAt": "2024-04-02T15:45:01Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I do think it's implied as you described but an explicit clarification would be worthwhile. Something like the wording would work but I'm not sure where to fit it in easily with the current text. Probably a note in https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-08.html#section-8.1 somewhere. https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-08.html#section-8.1-4.3.2.5 is the the step that would leave the empty object - so maybe a note on that step (worded slightly differently to fit there)? Or just a note near the end of 8.1 somewhere? ",
          "createdAt": "2024-03-20T22:11:33Z",
          "updatedAt": "2024-03-20T22:41:31Z"
        }
      ]
    },
    {
      "number": 419,
      "id": "I_kwDOHTmVzM6DDHrv",
      "title": "why isn't cnf the only way to bind to a holder public key?",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/419",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "bc-pi"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "Right after the IETF 119 OAuth session yesterday in a talk with @selfissued and @ve7jtb that started with discussion of PR #394, the question again came up (with some surprise on their part) as to why the `cnf` claim isn't the one and only way specified to put the holder's public key in the issuer-signed JWT. I honestly had a hard time giving a good rational for SD-JWT not being more prescriptive with it's requirements here.\r\n\r\nIt seems that using the `cnf` claim exclusively would be more straightforward and much better for interop. \r\n\r\n@bifurcation has previously made similar comments, \"it seems like there's an unnecessary level of ambiguity around how the Issuer-signed JWT binds to a holder public key.  Can we not just say `cnf`?  Why do we need more?  This point actually worries me more than [others] -- without clarity on this, there is no hope of writing stacks that interop.\"\r\n\r\nUsing the `cnf` claim exclusively could also help with some clarity in the [security considerations](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-08.html#section-10.6) where there currently has to be wording like \"[if there's] no recognized Key Binding data is present in the SD-JWT...\" and \" ... the Issuer might have added the key to the SD-JWT in a format/claim that is not recognized by the Verifier.\".\r\n\r\nNote this is related to but separate from the question of if the presence of a `cnf` claim in the issuer-signed JWT means that the verifier should have to require a KB-JWT. The `cnf` claim can be made _the way_ to do holder binding while still leaving that up to verifier policy.\r\n\r\n",
      "createdAt": "2024-03-20T21:49:13Z",
      "updatedAt": "2024-06-13T16:34:14Z",
      "closedAt": "2024-06-13T16:34:14Z",
      "comments": [
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "I support defining `cnf` as the way to do holder binding.\r\n\r\nI'll note that `cnf` is extensible via a registry, so should the existing `cnf` parameters not work for a use case, a new one can be defined and used.",
          "createdAt": "2024-03-21T00:24:04Z",
          "updatedAt": "2024-03-21T00:24:04Z"
        },
        {
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yep, this sounds good to me. ",
          "createdAt": "2024-03-21T04:38:20Z",
          "updatedAt": "2024-03-21T04:38:20Z"
        },
        {
          "author": "babisRoutis",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> It seems that using the `cnf` claim exclusively would be more straightforward and much better for interop.\r\n\r\n:+1: \r\n",
          "createdAt": "2024-04-08T08:16:26Z",
          "updatedAt": "2024-04-08T08:16:26Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "maybe leaving the door open to something like `cnfs` ",
          "createdAt": "2024-05-15T15:54:41Z",
          "updatedAt": "2024-05-15T15:54:41Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I'd be fine with having `cnf` as the only defined mechanism but leaving the door open for `cnfs` or similar.",
          "createdAt": "2024-06-04T15:23:23Z",
          "updatedAt": "2024-06-04T15:23:23Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "PR https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/435 aims to make cnf the one true way to bind to a holder public key while leaving room (same as RFC7800) for other as yet to be defined ways to deal with more than one key \r\n ",
          "createdAt": "2024-06-12T15:59:49Z",
          "updatedAt": "2024-06-12T15:59:49Z"
        }
      ]
    },
    {
      "number": 426,
      "id": "I_kwDOHTmVzM6JmYnC",
      "title": "Adapt JWS JSON Serialization wording to new terms SD-JWT/SD-JWT+KB",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/426",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "PR #394 does not touch the JWS JSON Serialization section, where we will need to make some minor changes to adapt the usage of the terms to the one established in the PR.",
      "createdAt": "2024-05-21T15:14:07Z",
      "updatedAt": "2024-06-13T07:02:42Z",
      "closedAt": "2024-06-13T07:02:42Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "See PR #427 ",
          "createdAt": "2024-06-04T15:15:55Z",
          "updatedAt": "2024-06-04T15:15:55Z"
        }
      ]
    },
    {
      "number": 428,
      "id": "I_kwDOHTmVzM6JvM93",
      "title": "fix up permutations figure/example",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/428",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "bc-pi"
      ],
      "labels": [
        "has-PR",
        "editorial"
      ],
      "body": "> FWIW that whole thing is currently enclosed in a figure (see https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-08.html#section-5-11) and in the interest of moving along this PR from last year, maybe that change could be addressed in a separate PR or issue?\r\n\r\n_Originally posted by @bc-pi in https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/394#discussion_r1608758034_\r\n            ",
      "createdAt": "2024-05-22T15:33:33Z",
      "updatedAt": "2024-06-13T07:04:01Z",
      "closedAt": "2024-06-13T07:04:01Z",
      "comments": []
    },
    {
      "number": 429,
      "id": "I_kwDOHTmVzM6J6rp9",
      "title": "more affliations, more problems",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/429",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is a reminder to remind @Sakurann that she should probably update her affiliation and email in the draft itself. At least email to one that won't bounce. And add the new email address to her datatracker account too.",
      "createdAt": "2024-05-23T21:18:40Z",
      "updatedAt": "2024-06-03T09:15:51Z",
      "closedAt": "2024-06-03T09:15:51Z",
      "comments": []
    },
    {
      "number": 439,
      "id": "I_kwDOHTmVzM6M23dT",
      "title": "burn the burning of private keys  ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/439",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "bc-pi"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "As far as I know, the idea of burning private keys to facilitate repudiation or reduced data value didn't resonate with any of the audiences for whom it was intended.\r\n\r\nI think the document would be better off without the paragraph copied below from https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-09.html#section-11.1-7 \r\n\r\nAnd we might avoid some potentially difficult/confusing/painful/etc conversations in various latter stage IETF process steps. \r\n\r\n> If reliable and secure key rotation and revocation is ensured according to [Section 10.8](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-09.html#issuer_signature_key_distribution), Issuers may opt to publish expired or revoked private signing keys (after a grace period that ensures that the keys are not cached any longer at any Verifier). This reduces the value of any leaked credentials as the signatures on them can no longer be trusted to originate from the Issuer.",
      "createdAt": "2024-06-19T22:14:18Z",
      "updatedAt": "2024-09-03T12:01:48Z",
      "closedAt": "2024-09-03T12:01:48Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm told that my statement that it \"didn't resonate with any of the audiences for whom it was intended\" might be premature. ",
          "createdAt": "2024-06-20T18:43:18Z",
          "updatedAt": "2024-06-20T18:43:18Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree with deleting the text about publishing private keys.  Yes, it's a technique that could be used with SD-JWTs but it's in no way specific to SD-JWTs.  It could be used with normal JWTs, CWTs, SAML tokens, X.509 certs, etc.  It doesn't add to the specification to describe this here.",
          "createdAt": "2024-08-04T04:04:28Z",
          "updatedAt": "2024-08-04T04:04:28Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "leaving this open with no action for the time being because, as Dr. @danielfett says, \"it's complicated\". ",
          "createdAt": "2024-08-05T18:11:45Z",
          "updatedAt": "2024-08-05T18:11:45Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "agreed to remove. ",
          "createdAt": "2024-08-29T16:14:01Z",
          "updatedAt": "2024-08-29T16:14:01Z"
        }
      ]
    },
    {
      "number": 440,
      "id": "I_kwDOHTmVzM6Nvi8A",
      "title": "Mentions of KB-JWT that could be removed",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/440",
      "state": "CLOSED",
      "author": "srosenda",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "The distinguishing of SD-JWT from SD-JWT+KB is a good clarifying change in -09. Some extra mentions of KB-JWT still remain that could probably removed:\r\n\r\nIn [5. ](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-09.html#section-5)[SD-JWT and SD-JWT+KB Data Formats](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-09.html#name-sd-jwt-and-sd-jwtkb-data-fo):\r\n\r\n>An SD-JWT without Disclosures and without a KB-JWT\r\n\r\nand\r\n\r\n>An SD-JWT with Disclosures and without a KB-JWT\r\n\r\nThe \"and without a KB-JWT\" could be removed as there are separate examples for SD-JWT+KB and SD-JWT is now defined not to include KB-JWT.",
      "createdAt": "2024-06-27T12:40:39Z",
      "updatedAt": "2024-07-02T15:40:43Z",
      "closedAt": "2024-07-02T15:40:42Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @srosenda, PR #441 does exactly what you've suggested. ",
          "createdAt": "2024-06-27T22:14:57Z",
          "updatedAt": "2024-06-28T19:57:17Z"
        },
        {
          "author": "srosenda",
          "authorAssociation": "NONE",
          "body": "\ud83d\udc4d approved the PR (#441) too.",
          "createdAt": "2024-06-28T07:31:07Z",
          "updatedAt": "2024-06-28T07:31:07Z"
        }
      ]
    },
    {
      "number": 442,
      "id": "I_kwDOHTmVzM6OIwnY",
      "title": "Give \" a name",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/442",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-07-01T20:18:00Z",
      "updatedAt": "2024-07-01T20:34:15Z",
      "closedAt": "2024-07-01T20:27:29Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "By `Give \" a name` here what @awoie means is that it'd be useful to have a name to refer to what we call the \"processed SD-JWT payload\" that's \"passed to the application\" [here](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-09.html#section-8.3-6) and is really the JSON after verification and processing and replacing `_sd` and `...` occurrences with the real values. ",
          "createdAt": "2024-07-01T20:31:02Z",
          "updatedAt": "2024-07-01T20:31:02Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "NONE",
          "body": "I created a issue here https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/443. I don't know what happened with this issue. My apologies.",
          "createdAt": "2024-07-01T20:32:22Z",
          "updatedAt": "2024-07-01T20:32:22Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> I created a issue here #443. I don't know what happened with this issue. My apologies.\r\n\r\nno apologies needed ",
          "createdAt": "2024-07-01T20:34:14Z",
          "updatedAt": "2024-07-01T20:34:14Z"
        }
      ]
    },
    {
      "number": 443,
      "id": "I_kwDOHTmVzM6OIzr_",
      "title": "Give \"JSON document of the SD-JWT processing and verification algorithm\" a name",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/443",
      "state": "CLOSED",
      "author": "awoie",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "We had the discussion in SD-JWT VC how to refer to the dehydrated (or maybe hydrated) result (Issuer-signed JWT payload) of the [processing and verification algorithm](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-09.html#name-verification-and-processing). It would help if we could give it a name to allow us to be more precise in other specs that are building on top of SD-JWT.\r\n\r\nThe discussion occurred when adding the Schema for SD-JWT VCs that uses that result of the SD-JWT processing section to match the JSON schema against:\r\nhttps://github.com/oauth-wg/oauth-sd-jwt-vc/pull/231/files#diff-e750c0958ca10e395b4d3b77bb5aafccc668b4a1a50675dda79a8d90b39a2468R714-R715\r\n\r\nWe also have another issue that asks for an example of the result as well which would benefit from giving it a defined name:\r\nhttps://github.com/oauth-wg/oauth-sd-jwt-vc/issues/194\r\n\r\n",
      "createdAt": "2024-07-01T20:26:16Z",
      "updatedAt": "2024-08-29T16:09:30Z",
      "closedAt": "2024-08-29T16:09:30Z",
      "comments": [
        {
          "author": "awoie",
          "authorAssociation": "NONE",
          "body": "Perhaps you can also confirm that this result in fact contains things like `iss`, `cnf`, `exp` etc., and would only remove `_sd`, `_sd_alg`, `...`.",
          "createdAt": "2024-07-01T20:30:26Z",
          "updatedAt": "2024-07-01T20:30:26Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I was typing the following over in #442 when it closed out from under me in favor of this issue. \r\n\r\n> By Give \" a name here what @awoie means is that it'd be useful to have a name to refer to what we call the \"processed SD-JWT payload\" that's \"passed to the application\" [here](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-09.html#section-8.3-6) and is really the JSON after verification and processing and replacing _sd and ... occurrences with the real values.",
          "createdAt": "2024-07-01T20:33:49Z",
          "updatedAt": "2024-07-01T20:33:49Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "why `the processed SD-JWT payload` is not good enough?\r\n\r\n(in any case, would really like to avoid using hydrated/dehydrated since that term is kind of confusing and i used for something related but different in ISO I think)",
          "createdAt": "2024-07-15T15:35:45Z",
          "updatedAt": "2024-07-15T15:35:45Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "NONE",
          "body": "> why `the processed SD-JWT payload` is not good enough?\r\n> \r\n> (in any case, would really like to avoid using hydrated/dehydrated since that term is kind of confusing and i used for something related but different in ISO I think)\r\n\r\nI don't think that helps when referencing from another spec such as SD-JWT VC. The text you are referring to is from 8.3 Verification by the Verifier which is not general enough.\r\n\r\nI'd suggest to add one sentence to https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-09.html#section-8.1, e.g., \r\n\r\n\"7. Let xzy be the processed result of the asdf algorithm ...\" \r\n\r\n... and make xzy a defined term, so it can be referenced. I don't think we can use `processed SD-JWT payload` from SD-JWT VC since it is not really defined in SD-JWT. If you don't define it in SD-JWT, we will define it in SD-JWT VC which I prefer not to.",
          "createdAt": "2024-07-15T15:43:35Z",
          "updatedAt": "2024-07-15T15:44:13Z"
        },
        {
          "author": "awoie",
          "authorAssociation": "NONE",
          "body": "> > why `the processed SD-JWT payload` is not good enough?\r\n> > (in any case, would really like to avoid using hydrated/dehydrated since that term is kind of confusing and i used for something related but different in ISO I think)\r\n> \r\n> I don't think that helps when referencing from another spec such as SD-JWT VC. The text you are referring to is from 8.3 Verification by the Verifier which is not general enough.\r\n> \r\n> I'd suggest to add one sentence to https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-09.html#section-8.1, e.g.,\r\n> \r\n> \"7. Let xzy be the processed result of the asdf algorithm ...\"\r\n> \r\n> ... and make xzy a defined term, so it can be referenced. I don't think we can use `processed SD-JWT payload` from SD-JWT VC since it is not really defined in SD-JWT. If you don't define it in SD-JWT, we will define it in SD-JWT VC which I prefer not to.\r\n\r\nBtw. if you call it processed payload, that is fine by me but it should be added to 8.1.",
          "createdAt": "2024-07-15T15:45:17Z",
          "updatedAt": "2024-07-15T15:45:17Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> (in any case, would really like to avoid using hydrated/dehydrated since that term is kind of confusing and i used for something related but different in ISO I think)\r\n\r\n\\+ 1000000000% ! ",
          "createdAt": "2024-07-15T15:46:30Z",
          "updatedAt": "2024-08-04T11:27:35Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "Defining terms is good.  Dehydrated/hydrated would be bad. ;-)",
          "createdAt": "2024-08-04T04:11:03Z",
          "updatedAt": "2024-08-04T04:11:03Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "PR https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/456 has a small addition to sec 8.1 for this ",
          "createdAt": "2024-08-23T20:50:05Z",
          "updatedAt": "2024-08-23T20:50:05Z"
        }
      ]
    },
    {
      "number": 444,
      "id": "I_kwDOHTmVzM6Qca5P",
      "title": "(maybe) clarify example(s) ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/444",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "some of https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/246 likely applies here too ",
      "createdAt": "2024-07-22T17:16:30Z",
      "updatedAt": "2024-08-28T20:19:52Z",
      "closedAt": "2024-08-28T20:19:52Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Notes on section 6:\r\n\r\nhttps://drafts.oauth.net/oauth-selective-disclosure-jwt/processed-sd-jwt-payload/draft-ietf-oauth-selective-disclosure-jwt.html#section-6.1-1 say more about the input JWT Claims Set\r\n\r\nhttps://drafts.oauth.net/oauth-selective-disclosure-jwt/processed-sd-jwt-payload/draft-ietf-oauth-selective-disclosure-jwt.html#name-presentation show the processed SD-JWT payload somewhere in this section \r\n\r\n",
          "createdAt": "2024-08-23T21:04:44Z",
          "updatedAt": "2024-08-23T21:04:44Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "notes on appendix: \r\n\r\nhttps://drafts.oauth.net/oauth-selective-disclosure-jwt/processed-sd-jwt-payload/draft-ietf-oauth-selective-disclosure-jwt.html#appendix-A.1-2 say more about the input JWT Claims Set\r\n\r\nhttps://drafts.oauth.net/oauth-selective-disclosure-jwt/processed-sd-jwt-payload/draft-ietf-oauth-selective-disclosure-jwt.html#appendix-A.1-31 show the processed SD-JWT payload somewhere after\r\n\r\nhttps://drafts.oauth.net/oauth-selective-disclosure-jwt/processed-sd-jwt-payload/draft-ietf-oauth-selective-disclosure-jwt.html#appendix-A.2-2  say more about the input JWT Claims Set\r\n\r\nhttps://drafts.oauth.net/oauth-selective-disclosure-jwt/processed-sd-jwt-payload/draft-ietf-oauth-selective-disclosure-jwt.html#appendix-A.2-41 use the processed SD-JWT payload name\r\n\r\nhttps://drafts.oauth.net/oauth-selective-disclosure-jwt/processed-sd-jwt-payload/draft-ietf-oauth-selective-disclosure-jwt.html#appendix-A.3-3 say more about the input JWT Claims Set\r\n\r\nhttps://drafts.oauth.net/oauth-selective-disclosure-jwt/processed-sd-jwt-payload/draft-ietf-oauth-selective-disclosure-jwt.html#appendix-A.3-56 names\r\n\r\nhttps://drafts.oauth.net/oauth-selective-disclosure-jwt/processed-sd-jwt-payload/draft-ietf-oauth-selective-disclosure-jwt.html#appendix-A.4-3 input\r\n\r\nhttps://drafts.oauth.net/oauth-selective-disclosure-jwt/processed-sd-jwt-payload/draft-ietf-oauth-selective-disclosure-jwt.html#appendix-A.4-40 name",
          "createdAt": "2024-08-23T21:09:23Z",
          "updatedAt": "2024-08-23T21:09:23Z"
        }
      ]
    },
    {
      "number": 461,
      "id": "I_kwDOHTmVzM6VHmuO",
      "title": "reword \"for those who celebrate\" referring to ABNF",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/461",
      "state": "CLOSED",
      "author": "rohanmahy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "discuss-first",
        "editorial",
        "pending-close"
      ],
      "body": "Now in draft -12\r\n\"As an alternative illustration of the SD-JWT format, for those who celebrate, ABNF [[RFC5234](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-11.html#RFC5234)] for the SD-JWT, SD-JWT+KB, and various constituent parts is provided here:\"\r\n\r\nSuggested:\r\n\"For those who already have tooling using Augmented Backus Naur Form (ABNF) {{!RFC5234}}, an optional ABNF formal grammar representaton of SD-JWT, SD-JWT+KB, and various constituent parts is provided here:\"",
      "createdAt": "2024-09-03T02:20:06Z",
      "updatedAt": "2024-09-23T16:51:50Z",
      "closedAt": "2024-09-23T16:51:50Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Will discuss with the editor team but the cited text from -12 is intentional and, in the humble opinion of its author, conveys the intent as intended. Meanwhile the suggested text changes the stated audience (some folks find ABNF useful even without tooling), uses a different reference syntax than tooling the draft source uses, and loses the satire in the original text that attempts to poke fun at the occasional absurdity of these endeavors. ",
          "createdAt": "2024-09-04T12:18:10Z",
          "updatedAt": "2024-09-04T12:18:10Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "+1",
          "createdAt": "2024-09-04T12:50:58Z",
          "updatedAt": "2024-09-04T12:50:58Z"
        },
        {
          "author": "rohanmahy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Grammatically, the statement as written is a non-sequitur. For those who celebrate what?  You seem not to care for ABNF, which is fine, but do you celebrate your partner's birthday? Halloween? The beginning of summer? So this ABNF is for you because you celebrate! Happy World Samosa Day, here is your free ASN.1 encoding!\r\n\r\nA specification is for its readers. Including an in-joke is only appropriate to the extent it does not confuse or distract the reader. Take 2: \"An optional Augmented Backus Naur Form (ABNF) {{!RFC5234}} formal grammar representaton of SD-JWT, SD-JWT+KB, and various constituent parts is provided here:\"\r\n\r\nOn a more constructive note, I can write a PR to put the ABNF in an appendix.\r\n\r\n(This is an Issue, not a PR; you clearly understand the reference format which an editor can either adjust during incorporation or ask me to write a PR, which would have the same reference convention as the draft.)",
          "createdAt": "2024-09-04T14:33:05Z",
          "updatedAt": "2024-09-04T14:43:29Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I think the current wording is fine as an easteregg. We can move the \"for those who celebrate\" part to the end of the sentence to make it easier to read.",
          "createdAt": "2024-09-05T07:12:07Z",
          "updatedAt": "2024-09-05T07:12:07Z"
        }
      ]
    },
    {
      "number": 463,
      "id": "I_kwDOHTmVzM6WUMan",
      "title": "holder key as DID",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/463",
      "state": "CLOSED",
      "author": "ThierryThevenet",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "pending-close"
      ],
      "body": "There is no reference about the possibility to use DIDs instead of cnf for the holder identifier\r\nIs there any reason/recommendation not to use DIDs for the holder ?",
      "createdAt": "2024-09-12T09:36:50Z",
      "updatedAt": "2024-09-23T18:03:15Z",
      "closedAt": "2024-09-23T18:03:14Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "that is out of scope for sd-jwt, since sd-jwt does not talk anything about the value of holder identifier. this is in scope for sd-jwt vc.",
          "createdAt": "2024-09-19T16:18:39Z",
          "updatedAt": "2024-09-19T16:18:39Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "closing as out of scope ",
          "createdAt": "2024-09-23T18:03:15Z",
          "updatedAt": "2024-09-23T18:03:15Z"
        }
      ]
    },
    {
      "number": 464,
      "id": "I_kwDOHTmVzM6Wh_KF",
      "title": "WGLC updates",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/464",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Placeholder issue to not forget to do appropriate updates resulting from WGLC \r\n\r\nhttps://mailarchive.ietf.org/arch/browse/oauth/?q=%22WGLC%20for%20SD-JWT%22 \r\n\r\n",
      "createdAt": "2024-09-13T19:08:41Z",
      "updatedAt": "2024-10-18T12:39:33Z",
      "closedAt": "2024-10-18T12:39:09Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "#472, #473, and #474 have some of this \r\n\r\nI think something for https://mailarchive.ietf.org/arch/msg/oauth/MN1d1ihchmOTcHVMsZ_RlOcZxRE/ would be good too\r\n\r\nand of course #467 is there too \r\n\r\n",
          "createdAt": "2024-10-04T22:48:04Z",
          "updatedAt": "2024-10-04T22:48:04Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "all merged and addressed",
          "createdAt": "2024-10-18T12:39:09Z",
          "updatedAt": "2024-10-18T12:39:18Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "COMPLETELY REASONABLE changes made ",
          "createdAt": "2024-10-18T12:39:32Z",
          "updatedAt": "2024-10-18T12:39:32Z"
        }
      ]
    },
    {
      "number": 465,
      "id": "I_kwDOHTmVzM6Ws9lR",
      "title": "JWT and unprotected header - generalisation?",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/465",
      "state": "CLOSED",
      "author": "alenhorvat",
      "authorAssociation": "NONE",
      "assignees": [
        "bc-pi"
      ],
      "labels": [],
      "body": "Dear,\r\n\r\nIssue type: Discussion\r\nBlocking: No\r\nImpact (if considered): Breaking\r\n\r\nJWT as a compact serialised JWT doesn't have support for an unprotected header.\r\n\r\n`~disclosures~KB`\r\n\r\nrepresent information that in JSON serialisation one puts in the unprotected header, as defined in the document.\r\n\r\nShould this specification consider a generalisation of the approach, where an arbitrary \"unprotected header\" can be encoded, in a sense:\r\n`protected.payload.signature.header~<type-specific content>` or\r\n`protected.payload.signature.header.<type-specific content>`\r\nwhere header has a claim 'cty' defining the content type of what follows\r\n\r\nin case of sd-jwt, type specific content is `~disclosures~KB` (and the combination of);\r\n\r\nNote: if such construct should be considered, IMO an annex to https://datatracker.ietf.org/doc/html/rfc7519 would be more appropriate.",
      "createdAt": "2024-09-16T12:43:59Z",
      "updatedAt": "2024-09-24T11:28:59Z",
      "closedAt": "2024-09-23T18:02:22Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "While a generalization of the approach is certainly an interesting idea, it's well outside the scope of this work to do so. \r\n\r\nFor consideration of such a construct, I would encourage you bring it to the attention of an appropriate WG or perhaps DISPATCH group. \r\n\r\n",
          "createdAt": "2024-09-23T18:02:22Z",
          "updatedAt": "2024-09-23T18:02:22Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "Thank you for your answer.\r\n\r\nWould you kindly suggest which would be the appropriate WG? Where can I find more information about the DISPATCH group?\r\n\r\nThank you in advance!",
          "createdAt": "2024-09-23T18:39:18Z",
          "updatedAt": "2024-09-23T18:39:18Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "JWS/JWE came out of JOSE so arbitrary \"unprotected header\" on the compact serializations would perhaps be most appropriate there. \r\nhttps://datatracker.ietf.org/wg/jose/\r\n\r\nJWT, which relies on those the compact serializations, hails from OAUTH so that's not an unreasonable place either.  \r\nhttps://datatracker.ietf.org/wg/oauth \r\n\r\nDISPATCH and/or SECDISPATCH are intended to help consider proposals for new work and, if the work is appropriate and there's sufficient interest, help find or create appropriate venue for such work. \r\nhttps://datatracker.ietf.org/wg/dispatch/about/  \r\nhttps://datatracker.ietf.org/wg/secdispatch/about/\r\n\r\n \r\n\r\n  ",
          "createdAt": "2024-09-24T10:54:28Z",
          "updatedAt": "2024-09-24T10:54:28Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "Thank you @bc-pi.",
          "createdAt": "2024-09-24T11:28:58Z",
          "updatedAt": "2024-09-24T11:28:58Z"
        }
      ]
    },
    {
      "number": 468,
      "id": "I_kwDOHTmVzM6Xa-9l",
      "title": "sd_alg, _sd_alg - Option for claims reuse?",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/468",
      "state": "CLOSED",
      "author": "alenhorvat",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "ready-to-close",
        "pending-close"
      ],
      "body": "Dear,\r\n\r\nFirst, I would like to express my gratitude for your excellent work on this project.\r\n\r\nI have a question regarding the definitions of the following claims:\r\n\r\nClaim Name: _sd\r\nClaim Description: Digests of Disclosures for object properties\r\n\r\nClaim Name: _sd_alg\r\nClaim Description: Hash algorithm used to generate Disclosure digests and digest over presentation\r\n\r\nCurrently, the _sd claim is limited to digests of disclosures. However, there are other mechanisms available for blinding claims, such as Zero-Knowledge Proofs (ZKPs), signatures, and similar techniques. Since the design of _sd is quite robust and generic, would the authors consider broadening its definition to encompass these additional mechanisms?\r\n\r\nProposal:\r\n\r\nClaim Name: _sd\r\nClaim Description: Blinded (or hidden) claims as defined by the Selective Disclosure Algorithm\r\nAdditionally, similar to _sd_alg, it could be constructed from {sd-name}:{properties}.\r\n\r\nProposal:\r\n\r\nClaim Name: _sd_alg\r\nClaim Description: Selective disclosure algorithm name\r\nFor example, the algorithm name could be registered as something like: sd-jwt:sha-256.\r\n\r\nThank you very much for your time and consideration of this suggestion. I look forward to your feedback.",
      "createdAt": "2024-09-21T17:38:57Z",
      "updatedAt": "2024-10-18T13:03:16Z",
      "closedAt": "2024-10-18T13:03:16Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Hi Alen! Thank you for the suggestion. It feels a little immature to make a generalization for ZKP when those are not yet stably used with SD-JWT VCs and also feels like a violation of best/common practices by using the same claim for multiple purposes - for both pure sd-jwt mechanisms and zkp-based mechanisms.\r\n\r\nIt might be better and less breaking changes to later define a separate specification how to do sd-jwt with zkp",
          "createdAt": "2024-09-23T22:14:04Z",
          "updatedAt": "2024-09-23T22:14:04Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "Dear, Kristina.\r\n\r\nI fully agree that other selective disclosure algorithms should be defined in separate specifications and in no way I'm asking to broaden the scope of this great work.\r\n\r\nMy question is simpler. Since the designs of _sd and _sd_alg are reusable with other (e.g., ZKP?) specifications, my question is if the definitions can be broadened.\r\n\r\nIf this results in a positive resolution, impact on the existing implementations is parsing of the _sd_alg claim that would define the full name of the sd algorithm, in this case something like sd-jwt:sha256 (or similar).\r\n\r\nThank you for your time and answers!",
          "createdAt": "2024-09-24T06:05:18Z",
          "updatedAt": "2024-09-24T06:05:18Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Hi Alen,\r\n\r\nWe discussed this among the editors and came to the conclusion that introducing this kind of namespacing right now probably doesn't add value. We don't know yet how a future spec may or may not extend the _sd and _sd_alg claims (or the values therein). It may or may not work, but it certainly looks awkward in the meantime as SD-JWT is the only spec using/defining _sd and _sd_alg.",
          "createdAt": "2024-10-18T12:46:37Z",
          "updatedAt": "2024-10-18T12:46:37Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "Dear,\r\n\r\nthank you for your time and considerations.\r\n\r\nThe issue can be closed.",
          "createdAt": "2024-10-18T12:49:15Z",
          "updatedAt": "2024-10-18T12:49:15Z"
        }
      ]
    },
    {
      "number": 469,
      "id": "I_kwDOHTmVzM6XglDp",
      "title": "Mixed-type arrays",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/469",
      "state": "CLOSED",
      "author": "alenhorvat",
      "authorAssociation": "NONE",
      "assignees": [
        "danielfett"
      ],
      "labels": [
        "pending-close"
      ],
      "body": "Dear,\r\n\r\nthank you for the great work!\r\n\r\nI have a question about the design-rational behind the \"Disclosures for array elements\" (https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-12.html#name-disclosures-for-array-eleme)\r\n\r\nThe current design transforms arrays into mixed-type arrays (which is compatible with JSON format), but it is causing parsing inconveniences in some languages; Example: a credential has a claim which is a single-type array, e.g., array of strings. If SD-JWT is applied, the claim type must be changed into an interface and when parsed, type checking is performed to detect hidden claims.\r\n\r\nAn alternative might be\r\n[\"claim-name.3\", \"value\"]  (and put into _sd as key-value claims)\r\nor by introducing explicit types\r\n[\"array-element\", \"array-claim-name\", \"position\", \"value\"]  (and put into _sd as key-value claims)\r\n\r\nthere would be 2 types:\r\n- 0: key-value\r\n- 1: array-element\r\nand enum can be used to minimise the size\r\n\r\nThank you for your time and answers!",
      "createdAt": "2024-09-23T08:14:57Z",
      "updatedAt": "2024-09-24T19:56:55Z",
      "closedAt": "2024-09-24T19:56:55Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Hi Alen,\r\n\r\nI agree that the current form is not ideal for parsing, especially in strongly typed languages. However, we did consider the approaches similar to the ones you propose when designing the array feature, but we decided against it in the end. If I remember correctly, the reasons were:\r\n\r\n- It is not clear how that would work with nested arrays. Admittedly, that might be a super-rare use case. But with the current option, we can confidently say that we can selectively disclose any element in a JWT payload, independent of its type or where it is nested.\r\n- Related, the mental model behind the current approach aligns with what we have for the key/value disclosures: You find the digest where the original element would be; not a level higher. I found this much easier to implement, as it works nicely with a simple recursion; when processing the array, I don't need any \"outside\" information. \r\n- I found it slightly harder to describe all potential pitfalls and problems when parsing the structure you propose, e.g.: What if a claim name already exists as an object? What if a number is given twice?\r\n\r\nNone of these are a really \"hard\" reason to do it they way we do today; but neither is the typing problem a reason not to do it.",
          "createdAt": "2024-09-24T15:03:43Z",
          "updatedAt": "2024-09-24T15:03:43Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "Dear Daniel,\r\n\r\nThank you for your answer.\r\n\r\nYes, with nested array the syntax basically boils down to JSON pointers which were already discussed. I missed the nested arrays.\r\n\r\n> None of these are a really \"hard\" reason to do it they way we do today; but neither is the typing problem a reason not to do it.\r\n\r\nI agree and it's your design decision. Due to nested arrays is either as is or pointers.\r\n\r\nThe issue can be closed.\r\n\r\nThank you for your answers and time.",
          "createdAt": "2024-09-24T17:42:08Z",
          "updatedAt": "2024-09-24T17:42:08Z"
        }
      ]
    },
    {
      "number": 470,
      "id": "I_kwDOHTmVzM6Xhaz7",
      "title": "Decoy Digest Implications",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/470",
      "state": "CLOSED",
      "author": "AlexHodder",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "We (Guido Schmitz and Alex Hodder-Williams) have been working on producing a formal analysis of the current specification. We will share more details about this analysis soon, but wanted to point out some observations.\r\n\r\nDuring the issuance phase, it is unclear to us how the holder gets guarantees regarding the entire set of disclosures that verify under the received issuer-signed JWT.\r\nAs specified: the holder should accept an issuance if the signature verifies, and the received set of disclosures all verify according to this SD-JWT presentation. However, the holder doesn't have guarantees that the digests in the issuer-signed JWT that they didn't receive a corresponding disclosure for are in fact decoy digests. These digests could contain other disclosures, which the holder would be unaware of. This would allow colluding issuers and verifiers to create a non-interactive covert channel, where the verifiers are looking for a specific digest. This seems to relate to 11.1 in the specification, but may be worth additional discussion in the document.\r\n\r\nOne possible technical solution could look as follows:\r\n- The holder provides the issuer with a set of nonces that can be used as decoy digests.\r\n- The issuer must then hash these nonces (this prevents the holder from inserting their own non-issued claims)\r\n- The holder can then check if the digests they don't receive disclosures for match their original nonces.\r\nClearly this adds overhead and slightly complicates the standard, however, it is our view that the holder of a credential that has been issued to (and potentially about) them, should have full knowledge of what could be contained in that credential.\r\n\r\nAnother issue stemming from decoy digests, with a different consequence, is that if disclosures get dropped off the end of an SD-JWT presentation in the issuance phase, yet the presentation still verifies, the holder won't ever have the full set of disclosures, but will be unaware that they are missing information.\r\nThis may be mitigated at a different level. Any kind of authenticated channel between the issuer and holder prevents tampering of the initial set of disclosures. This may be out of scope of the SD-JWT document as it is likely to be protocol specific; but again, this might be worth including a remark about.\r\n",
      "createdAt": "2024-09-23T09:50:32Z",
      "updatedAt": "2024-10-18T12:38:35Z",
      "closedAt": "2024-10-18T12:38:35Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Regarding the first problem \u2014 I think we had a discussion on this during the design phase. While what you describe is a potential way an Issuer could hide information, the Issuer could do the same in the salt values used in the disclosures. Alternatively, if the Issuer can send an additional Disclosure to the Verifier, the Issuer could also just send a signed JWT referring to the SD-JWT and containing the 'new' claims. So I don't think that it would be worth designing a solution to avoid this kind of side channel.\r\n\r\nRegarding the second point, I agree that this could be remarked somewhere. Probably a sentence in the right place would suffice. Feel free to create a PR if you find the time.",
          "createdAt": "2024-09-24T15:12:04Z",
          "updatedAt": "2024-09-24T15:12:04Z"
        },
        {
          "author": "AlexHodder",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Re 1. Fair enough, I think in an ideal world I'd still like the credential I am presenting to not contain anything I don't know about but the effort to get this (such as further information from the holder regarding nonces etc.) probably doesn't align with the aims and assumptions of the specification.\r\n\r\nRe 2. Yes, I don't think it's a huge point but probably worth explicit inclusion. I'll try to find a good spot and make a PR. ",
          "createdAt": "2024-09-25T15:06:59Z",
          "updatedAt": "2024-09-25T15:06:59Z"
        }
      ]
    },
    {
      "number": 482,
      "id": "I_kwDOHTmVzM6dNpp4",
      "title": "Make a difference between the Holder which is an *application* and the individual (i.e. End-User)",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/482",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The second sentence of the second paragraph mentions:\r\n\r\n> In this model, a JWT containing many claims is issued to an intermediate party, who holds the JWT (the Holder).\r\n\r\nIn the introduction, it is important, to make the difference between the Holder, which is an *application*, and the individual (i.e. End-User) who is assumed to have the control of that application. The use of the word \"entity\" is to broad and does not capture this difference. \r\nAn individual may consent to an operation that the Holder can perform. A Holder does not \"consent\".\r\n\r\nReplace by:\r\n\r\n> In this model, a JWT can contain both regular claims and selectively disclosable claims that are issued to an End-User who is assumed to have the control of a Holder.\r\n",
      "createdAt": "2024-11-06T10:05:01Z",
      "updatedAt": "2024-11-11T16:06:29Z",
      "closedAt": "2024-11-11T16:06:29Z",
      "comments": []
    },
    {
      "number": 483,
      "id": "I_kwDOHTmVzM6dNrQf",
      "title": "Indicate that \"claims\" refers either to object properties (name/value pairs) and to array elements",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/483",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "In the introduction, it is also important to mention that \"claims\" refers both to object properties (name/value pairs) and to array elements. The current text does not mention it.\r\n\r\nReplace by:\r\n> When requesting a digital credential to an Issuer, the End-User using his Holder CAN ask the Issuer to include a set of claims while obfuscating other claims. \"Claims\" here refers both to object properties (name/value pairs) and to array elements.  The Issuer then produces two elements:\r\n\r\n>   - a SD-JWT that contains both regular claims and digests of  selectively-disclosable claims,\r\n\r\n>   - a set of regular claims for the selectively-disclosable claims.\r\n\r\nThe resulting structure is called: SD-JWT + All. Claims\r\n",
      "createdAt": "2024-11-06T10:07:59Z",
      "updatedAt": "2024-11-11T16:06:29Z",
      "closedAt": "2024-11-11T16:06:29Z",
      "comments": []
    },
    {
      "number": 484,
      "id": "I_kwDOHTmVzM6dNso2",
      "title": "A Holder does not present a \"JWT\" to a Verifier but \"SD-JWT + Sel.Claims\"",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/484",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The third sentence of the second paragraph mentions:\r\n\r\n>   The Holder can then present the JWT to different verifying parties\r\n   (Verifiers), that each may only require a subset of the claims in the\r\n   JWT. \r\n\r\nReplace by:\r\n\r\n> When talking to a Verifier, the Holder CAN choose to selectively disclose some obfuscated claims \r\nby sending a subset of the disclosed claims.\r\nThe resulting structure is called: SD-JWT + Sel.Claims\r\n",
      "createdAt": "2024-11-06T10:10:34Z",
      "updatedAt": "2024-11-11T16:06:30Z",
      "closedAt": "2024-11-11T16:06:30Z",
      "comments": []
    },
    {
      "number": 485,
      "id": "I_kwDOHTmVzM6dOE0n",
      "title": "Key binding will be ineffective unless the SD-JWT includes an additional claim that indicates the Holder characteristics: \"hcahr\"",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/485",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The fifth paragraph mentions:\r\n\r\n>   To prevent attacks in which an SD-JWT is presented to a Verifier\r\n   without the Holder's consent, this specification additionally defines\r\n   a mechanism for binding the SD-JWT to a key under the control of the\r\n   Holder (Key Binding).  When Key Binding is enforced, a Holder has to\r\n   prove possession of a private key belonging to a public key contained\r\n   in the SD-JWT itself.  It usually does so by signing over a data\r\n   structure containing transaction-specific data, herein defined as the\r\n   Key Binding JWT.  An SD-JWT with a Key Binding JWT is called SD-\r\n   JWT+KB in this specification.\r\n\r\nKey Binding is not performed to prevent attacks without the \"Holder's consent\". \r\n\r\nKey binding will be ineffective if the End-User consents to perform a collaborative attack against a Verifier \r\nfor the profit of another individual by performing all the cryptographic operations that the other individual needs \r\n... unless the Holder supports specific characteristics that are able to prevent such collaborative attacks. \r\n\r\nOnce again, a Holder is an *application*, i.e., it is not a human being. \r\n\r\nKey Binding only demonstrates the **use** of a private key corresponding to a public key contained in a SD-JWT. \r\nIt does not demonstrate the *possession* of a key. \r\n\r\nA key binding is performed (a) when requesting a SD-JWT to an Issuer, while (b) the demonstration of that key binding \r\nis performed to a Verifier at the presentation time.\r\n\r\nReplace by:\r\n   \r\n\r\n>    When requesting a digital credential to an Issuer, the Holder CAN \r\n>    demonstrate to the Issuer that the request originates from an \r\n>    application that supports specific characteristics. In that case, \r\n>    the Holder CAN include in his request a public key and demonstrate \r\n>    to the Issuer the use of the corresponding private key.\r\n\r\n>   The Issuer CAN include in the SD-JWT a claim that indicates \r\n>   the Holder characteristics: \"hcahr\" (for **_h_**older **_char_**acteristics).\r\n\r\n>    When presenting a SD-JWT + Sel.Claims to a verifier, the Holder CAN \r\n>    then add a key-binding JWT, called KB-JWT, that allows to integrity \r\n>    protect the \"SD-JWT + Sel.Claims\" structure. In this way, the \r\n>    Verifier will be able to verify that the \"SD-JWT + Sel.Claims\" \r\n>    structure and the KB-JWT \" originate from a Holder that supports \r\n>    specific characteristics.\r\n>    \r\n>    The strength of the key binding is dependent upon the characteristics \r\n>    of the Holder.  Such characteristics include the generation of \r\n>    key pairs, their protection as well as additional characteristics in \r\n>    particular to demonstrate its ability to counter collaborative or \r\n>    collusions attacks between End-Users\r\n\r\nUnless the Verifier is able to know the characteristics of the Holder by using *information present in the SD-JWT*, \r\nthe key binding mechanism can be easily defeated. The claim that shall be placed into the SD-JWT is currently missing \r\nand should be added. This new claim could be called \"hcahr\".\r\n",
      "createdAt": "2024-11-06T10:43:12Z",
      "updatedAt": "2024-11-11T16:06:30Z",
      "closedAt": "2024-11-11T16:06:30Z",
      "comments": []
    },
    {
      "number": 486,
      "id": "I_kwDOHTmVzM6dOGnE",
      "title": "The structure called \"SD-JWT+KB\" should be renamed \"SD-JWT+KB-JWT\"",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/486",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Last sentence from the fifth paragraph on page 5:\r\n\r\n> An SD-JWT with a Key Binding JWT is called SD-JWT+KB in this specification.\r\n\r\nSince the end result is the concatenation of two JWTs, it would be more appropriate to call the structure SD-JWT+KB-JWT. \r\nThis change should be done everywhere in the document.\r\n\r\nChange into:\r\n\r\n> An SD-JWT with a Key Binding JWT is called SD-JWT + KB-JWT in this specification.`\r\n",
      "createdAt": "2024-11-06T10:45:19Z",
      "updatedAt": "2024-11-11T16:06:31Z",
      "closedAt": "2024-11-11T16:06:31Z",
      "comments": []
    },
    {
      "number": 487,
      "id": "I_kwDOHTmVzM6dOILd",
      "title": "Difference between \"a format extending the JWS Compact Serialization\" and \"an alternate format extending the JWS JSON Serialization\" ?",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/487",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Item 1 from Section 1.1. (Feature Summary) states:\r\n\r\n> 1.1.  Feature Summary\r\n> \r\n>    This specification defines two primary data formats:\r\n> \r\n>    1.  SD-JWT is a composite structure enabling selective disclosure of\r\n>        its contents.  It comprises the following:\r\n> \r\n>        *  (...) \r\n>        *  (...) \r\n>        *  A format extending the JWS Compact Serialization, allowing for\r\n>           the combined transport of the Issuer-signed JSON data\r\n>           structure and the disclosable data items\r\n>        *  An alternate format extending the JWS JSON Serialization, also\r\n>           allowing for transport of the Issuer-signed JSON data\r\n>           structure and disclosure data\r\n> \r\n\r\nAt the time of reading these two sentences, they are not understandable. \r\nThese sentences should be rephrased so that that the motivations behind them can become understandable \r\n",
      "createdAt": "2024-11-06T10:47:15Z",
      "updatedAt": "2024-11-11T16:06:31Z",
      "closedAt": "2024-11-11T16:06:31Z",
      "comments": []
    },
    {
      "number": 488,
      "id": "I_kwDOHTmVzM6dOJBO",
      "title": "What is a \"facility for associating an SD-JWT with a key pair\" ?",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/488",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Item 2 from Section 1.1. (Feature Summary) states:\r\n\r\n>    2.  SD-JWT+KB is a composite structure enabling cryptographic key\r\n>        binding when presented to the Verifier.  It comprises the\r\n>        following:\r\n> \r\n>        *  A facility for associating an SD-JWT with a key pair\r\n\r\nThis item is not understandable. What is this \"facility\" ? Please rephrase.\r\n\r\n",
      "createdAt": "2024-11-06T10:48:25Z",
      "updatedAt": "2024-11-11T16:06:31Z",
      "closedAt": "2024-11-11T16:06:31Z",
      "comments": []
    },
    {
      "number": 489,
      "id": "I_kwDOHTmVzM6dOMIW",
      "title": "A (KB-JWT) does not demonstrate a \"proof of possession\" of private key",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/489",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Item 2 from Section 1.1. (Feature Summary) states:\r\n\r\n>    2.  SD-JWT+KB is a composite structure enabling cryptographic key\r\n>        binding when presented to the Verifier.  It comprises the\r\n>        following:\r\n> \r\n>        *  (...)\r\n>        *  A format for a Key Binding JWT (KB-JWT) that proves possession\r\n>           of the private key of the associated key pair\r\n\r\nThere is no \"proof of possession\".\r\n\r\nChange the last bullet into:\r\n\r\n>        *  A format for a Key Binding JWT (KB-JWT) that allows to \r\n>           demonstrate to a Verifier that a cryptographic result \r\n>           computed using a private key corresponding to a public key \r\n>           contained in a SD-JWT is correct.\r\n",
      "createdAt": "2024-11-06T10:53:18Z",
      "updatedAt": "2024-11-11T16:06:32Z",
      "closedAt": "2024-11-11T16:06:32Z",
      "comments": [
        {
          "author": "paulbastian",
          "authorAssociation": "NONE",
          "body": "There is a whole specification called DPoP by this working group which clearly indicates that there is such thing as a proof of possession",
          "createdAt": "2024-11-06T23:36:34Z",
          "updatedAt": "2024-11-06T23:36:34Z"
        },
        {
          "author": "Denisthemalice",
          "authorAssociation": "NONE",
          "body": "The abstract from RFC 9449 OAuth 2.0 Demonstrating Proof of Possession (DPoP) states:\r\n\r\n> This document describes a mechanism for sender-constraining OAuth 2.0 tokens via a proof-of-possession mechanism \r\n> on the application level. This mechanism allows for the detection of replay attacks with access and refresh tokens.\r\n\r\nSection 11 (Security Considerations) from RFC 9449 only considers replay attacks by an \"adversary\".\r\nSection 11.1 (DPoP Proof Pre-generation) from RFC 9449 only considers \"an attacker in control of the client\".\r\n\r\nRFC 9449 applies to the OAuth 2.0 framework but not to the Holder, Issuer, Verifier model.\r\nRFC 9449 does not consider collusion attacks between End-Users. \r\n\r\nThe current draft does not consider either collusion attacks between End-Users.\r\nThe threats that apply to the OAuth 2.0 model and to the Holder, Issuer, Verifier are different. \r\n\r\nThe term \"Key Binding\" that used in the draft is the right wording. \r\nWhen key binding is used, it demonstrates the ability of an entity :\r\n\r\n- to correctly use a private key that corresponds to a public placed in the SD-JWT or \r\n- to use the cryptographic result of computation made using that private key,\r\n if there was a collusion between End-Users.\r\n\r\nIn the context of the Holder, Issuer, Verifier model, \"Key binding\" does not demonstrate a \"Proof of Possession\" of any kind.\r\n\r\n\r\n",
          "createdAt": "2024-11-07T08:12:23Z",
          "updatedAt": "2024-11-07T08:12:23Z"
        }
      ]
    },
    {
      "number": 490,
      "id": "I_kwDOHTmVzM6dORjl",
      "title": "The definition of the SD-JWT+KB structure needs to be reworded",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/490",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Item 2 from Section 1.1. (Feature Summary) states:  \r\n\r\n>  2.  SD-JWT+KB is a composite structure enabling cryptographic key\r\n>        binding when presented to the Verifier.  It comprises the\r\n>        following:\r\n> \r\n>        *  (...)\r\n>        *  (...) \r\n>        *  A format extending the SD-JWT format for the combined\r\n>           transport of the SD-JWT and the KB-JWT\r\n\r\nThis description is not understandable.\r\n\r\nChange the last bullet into:\r\n\r\n>        *  A format for the combined transport of a SD-JWT + Sel.Claims \r\n>           and a KB-JWT that includes a hash value computed over the two previous fields\r\n\r\n",
      "createdAt": "2024-11-06T11:03:06Z",
      "updatedAt": "2024-11-11T16:06:32Z",
      "closedAt": "2024-11-11T16:06:32Z",
      "comments": []
    },
    {
      "number": 491,
      "id": "I_kwDOHTmVzM6dOSop",
      "title": "The definition of the Selectively Disclosable JWT (SD-JWT) would need to be reworded",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/491",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The current definition of Selectively Disclosable JWT (SD-JWT) is:\r\n\r\n>    Selectively Disclosable JWT (SD-JWT):  A composite structure,\r\n>       consisting of an Issuer-signed JWT (JWS, [RFC7515]) and zero or\r\n>       more Disclosures, which supports selective disclosure as defined\r\n>       in this document.  It can contain both regular claims and digests\r\n>       of selectively-disclosable claims.\r\n\r\nWhen looking at the new Figure 1 (SD-JWT Issuance and Presentation Flow), \r\nit can be seen that there is a difference between :\r\n\r\n-\ta SD-JWT including all Disclosures and \r\n-\ta SD-JWT+KB including selected Disclosures\r\n\r\nThe \"all Disclosures\" are not part of the SD-JWT. \r\nIt they were, they would be signed and removing one of them would break the signature of the Issuer.\r\n\r\nChange into:\r\n\r\n>    Selectively Disclosable JWT (SD-JWT):  A composite structure,\r\n>       consisting of an Issuer-signed JWT (JWS, [RFC7515]) that contains \r\n>       both regular claims and one or more digests of selectively-\r\n>       disclosable claims.  When a SD-JWT is sent back to a Holder, all \r\n>       the disclosures corresponding to the selectively-disclosable \r\n>       claims are also returned. When a SD-JWT is presented to a \r\n>       Verifier, all or only a subset of the disclosures previously \r\n>       obtained by the Holder are presented to the Verifier.\r\n",
      "createdAt": "2024-11-06T11:05:15Z",
      "updatedAt": "2024-11-11T16:06:33Z",
      "closedAt": "2024-11-11T16:06:32Z",
      "comments": []
    },
    {
      "number": 492,
      "id": "I_kwDOHTmVzM6dOTt2",
      "title": "The definition of \"key binding\" would need to be reworded",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/492",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The current definition of key Binding is:\r\n\r\n>    Key Binding:  Ability of the Holder to prove legitimate possession of\r\n>       an SD-JWT by proving control over a private key during the\r\n>       presentation.  When utilizing Key Binding, an SD-JWT contains the\r\n>       public key corresponding to the private key controlled by the\r\n>       Holder (or a reference to this public key).\r\n\r\nTalking of a \"legitimate possession\" is an abuse of language. Who possesses the private key is unknown. \r\nEven when the key is controlled by a Holder, the End-User can decide to perform cryptographic computations \r\nwith the private key for the benefit of one or more End-Users. If the set of claims does not allow to uniquely \r\nidentify the End-User, the End-User cannot be caught. In that case, the End-User can even monetize his services \r\nfor the benefit of hundred of users.\r\n\r\nReplace this definition by:\r\n\r\n>    Key Binding:  Ability to demonstrate to a Verifier that a \r\n>       cryptographic result computed over a data structure using \r\n>       a private key corresponding to a public key contained in a SD-JWT \r\n>       is correct.\r\n\r\n\r\n",
      "createdAt": "2024-11-06T11:07:28Z",
      "updatedAt": "2024-11-11T16:06:33Z",
      "closedAt": "2024-11-11T16:06:33Z",
      "comments": []
    },
    {
      "number": 493,
      "id": "I_kwDOHTmVzM6dOW1A",
      "title": "The definition of a \"key binding JWT\" would need to be reworded",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/493",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The current definition of Key Binding JWT is:\r\n\r\n>    Key Binding JWT (KB-JWT):  A JWT for proving Key Binding as defined\r\n>       in Section 4.3.  A Key Binding JWT is said to \"be tied to\" a\r\n>       particular SD-JWT when its payload includes a hash of the SD-JWT\r\n>       in its sd_hash claim.\r\n\r\nReferring to a subsequent Section is not adequate for a definition. \r\nThe definition should be understandable without the need to look at another section. \r\nThe KB-JWT does much more than the current description.\r\n\r\nReplace this definition by:\r\n\r\n>    Key Binding JWT (KB-JWT):  A JWT that allows a Holder to disclose a \r\n>       set of claims that were obfuscated in a SD-JWT, to restrict the \r\n>       use of a SD-JWT to one designated Verifier,  to limit the use of \r\n>       the SD-JWT to a single exchange and  that allows the Verifier \r\n>       to make sure that these limitations are enforced by an entity \r\n>       that used a private key corresponding to a public key contained\r\n>       in the SD-JWT.\r\n",
      "createdAt": "2024-11-06T11:14:00Z",
      "updatedAt": "2024-11-11T16:06:33Z",
      "closedAt": "2024-11-11T16:06:33Z",
      "comments": []
    },
    {
      "number": 494,
      "id": "I_kwDOHTmVzM6dOXh3",
      "title": "The definition of an Issuer would need to be reworded",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/494",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The current definition of Issuer is:\r\n\r\n>    Issuer:  An entity that creates SD-JWTs.\r\n\r\nReplace this definition by:\r\n\r\n>   Issuer:  An entity that creates SD-JWTs and All.Disclosures.\r\n",
      "createdAt": "2024-11-06T11:15:23Z",
      "updatedAt": "2024-11-11T16:06:34Z",
      "closedAt": "2024-11-11T16:06:34Z",
      "comments": []
    },
    {
      "number": 495,
      "id": "I_kwDOHTmVzM6dOYd8",
      "title": "The definition of an Holder would need to be reworded ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/495",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The current definition of Holder is.\r\n\r\n>    Holder:  An entity that received SD-JWTs from the Issuer and has\r\n>       control over them.  In the context of this document, the term may\r\n>       refer to the actual user, the supporting hardware and software in\r\n>       their possession, or both.\r\n\r\nIt is important to make the difference between the (Holder) \r\napplication supported by some hardware and the End-User that has the \r\ncontrol of that (Holder) application. \r\n\r\nReplace this definition by:\r\n\r\n>    Holder:  An application supported by hardware that obtains SD-JWTs \r\n>       and Disclosures from an Issuer and is able to selectively \r\n>       disclose to a Verifier claims contained those SD-JWTs.  In the \r\n>       context of this document, a Holder is placed under the control \r\n>       of an End-User.\r\n> ",
      "createdAt": "2024-11-06T11:17:20Z",
      "updatedAt": "2024-11-11T16:06:34Z",
      "closedAt": "2024-11-11T16:06:34Z",
      "comments": []
    },
    {
      "number": 496,
      "id": "I_kwDOHTmVzM6dOZTm",
      "title": "The definition of a Verifier would need to be reworded",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/496",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The current definition of Verifier is.\r\n\r\n>    Verifier:  An entity that requests, checks, and extracts the claims\r\n>               from an SD-JWT with its respective Disclosures.\r\n\r\nReplace this definition by:\r\n\r\n>    Verifier:  An entity that requests, receives a SD-JWT that contains \r\n>      selectively disclosable claims and uses Selective Disclosures to \r\n>      obtain one or more obfuscated claims.\r\n",
      "createdAt": "2024-11-06T11:18:42Z",
      "updatedAt": "2024-11-11T16:06:34Z",
      "closedAt": "2024-11-11T16:06:34Z",
      "comments": []
    },
    {
      "number": 497,
      "id": "I_kwDOHTmVzM6dOZvJ",
      "title": "The term End-User should be added to the definitions",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/497",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Add a definition for the term End-User:\r\n\r\n>    End-User: an individual assumed to have the control of a Holder.\r\n",
      "createdAt": "2024-11-06T11:19:33Z",
      "updatedAt": "2024-11-11T16:06:35Z",
      "closedAt": "2024-11-11T16:06:35Z",
      "comments": []
    },
    {
      "number": 498,
      "id": "I_kwDOHTmVzM6dOcnr",
      "title": "Figure 1 should be corrected to take into account the existence of an End-user and to consider KB-JWT instead of KB",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/498",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Correct Figure 1 to include the End-User and a KB-JWT instead of a KB.\r\n\r\n```\r\n3.  Flow Diagram\r\n\r\n              +------------+\r\n              |            |\r\n              |   Issuer   |\r\n              |            |\r\n              +------------+\r\n                    | \r\n      Issues SD-JWT + All Disclosures\r\n                    |\r\n                    v\r\n              +------------+\r\n              |            |\r\n              |   Holder   |   <--->  End-User\r\n              |            |\r\n              +------------+\r\n                    |   \r\n    Presents SD-JWT + Selected Disclosures + KB-JWT\r\n                    |\r\n                    v\r\n              +-------------+\r\n              |             |+\r\n              |  Verifiers  ||+\r\n              |             |||\r\n              +-------------+||\r\n               +-------------+|\r\n                +-------------+\r\n\r\n              Figure 1: SD-JWT Issuance and Presentation Flow\r\n\r\n```",
      "createdAt": "2024-11-06T11:24:26Z",
      "updatedAt": "2024-11-11T16:06:35Z",
      "closedAt": "2024-11-11T16:06:35Z",
      "comments": []
    },
    {
      "number": 499,
      "id": "I_kwDOHTmVzM6dOfEj",
      "title": "The format used to carry both the SD-JWT and the Disclosures is unclear",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/499",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The third sentence of the second paragraph in Section 3.1.  SD-JWT and Disclosures states:\r\n\r\n>    The Disclosures are sent to the Holder as part of the SD-JWT in the \r\n>    format defined in Section 4.\r\n\r\nThe first sentence states:\r\n\r\n>    An SD-JWT, at its core, is a digitally signed JSON document\r\n>    containing digests over the selectively disclosable claims with the\r\n>    Disclosures outside the document.  \r\n\r\nHence, the Disclosures are NOT included in the Issuer-signed SD-JWT.\r\nChange the third sentence of the second paragraph into:\r\n\r\n>    The Disclosures are sent to the Holder in addition to the SD-JWT.\r\n",
      "createdAt": "2024-11-06T11:26:26Z",
      "updatedAt": "2024-11-11T16:06:05Z",
      "closedAt": "2024-11-11T16:06:05Z",
      "comments": []
    },
    {
      "number": 500,
      "id": "I_kwDOHTmVzM6dOioZ",
      "title": "The data elements sent to the Verifier are not correctly defined",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/500",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Section 3.2\r\n\r\n> 3.2.  Disclosing to a Verifier\r\n> \r\n>    To disclose to a Verifier a subset of the SD-JWT claim values, a\r\n>    Holder sends only the Disclosures of those selectively released\r\n>    claims to the Verifier as part of the SD-JWT.\r\n\r\nChange the third sentence of the second paragraph into:\r\n\r\n>    To disclose to a Verifier only a subset of the SD-JWT claim values, \r\n>    in addition to the SD-JWT, a Holder sends to the Verifier only \r\n>    the Disclosures that the End-User has agreed to release to the Verifier \r\n> ",
      "createdAt": "2024-11-06T11:32:22Z",
      "updatedAt": "2024-11-11T16:06:05Z",
      "closedAt": "2024-11-11T16:06:05Z",
      "comments": []
    },
    {
      "number": 501,
      "id": "I_kwDOHTmVzM6dOkbJ",
      "title": "The benefits of the nonce and of the audience value can be made more accurate",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/501",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Section 3.3 states:\r\n\r\n>    When a Verifier requires Key Binding, the Holder presents an SD-\r\n>    JWT+KB, consisting of an SD-JWT as well as a Key Binding JWT tied to\r\n>    that SD-JWT.  The Key Binding JWT encodes a signature by the Holder's\r\n>    private key over\r\n> \r\n>    *  a hash of the SD-JWT,\r\n>    *  a nonce to ensure the freshness of the signature, and\r\n>    *  an audience value to indicate the intended audience for the\r\n>       document.\r\n\r\nChange \r\n\r\n>    *  a nonce to ensure the freshness of the signature, and\r\n>    *  an audience value to indicate the intended audience for the\r\n>       document.\r\n\r\ninto:\r\n\r\n>    *  a nonce previously received from the Verifier to ensure the \r\n>        freshness of the signature, and\r\n>    *  an audience value to indicate the intended Verifier for the\r\n>       document.\r\n",
      "createdAt": "2024-11-06T11:36:03Z",
      "updatedAt": "2024-11-11T16:06:06Z",
      "closedAt": "2024-11-11T16:06:06Z",
      "comments": []
    },
    {
      "number": 502,
      "id": "I_kwDOHTmVzM6dOlW0",
      "title": "The description of the SD-JWT can be improved",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/502",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "> 4.  SD-JWT and SD-JWT+KB Data Formats\r\n>    An SD-JWT is composed of\r\n> \r\n>    *  an Issuer-signed JWT, and\r\n>    *  zero or more Disclosures.\r\n\r\nThe Disclosures, which are unsigned, are located outside the SD-JWT.\r\n\r\nChange into:\r\n\r\n>   A data structure for a SD-JWT with Disclosures is composed of:\r\n> \r\n>    *  an Issuer-signed JWT, and\r\n>    *  one or more Disclosures.\r\n",
      "createdAt": "2024-11-06T11:37:41Z",
      "updatedAt": "2024-11-11T16:06:06Z",
      "closedAt": "2024-11-11T16:06:06Z",
      "comments": []
    },
    {
      "number": 503,
      "id": "I_kwDOHTmVzM6dOnZi",
      "title": "The description of the SD-JWT+KB is confusing ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/503",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Section 4:\r\n\r\n>    An SD-JWT+KB is composed of\r\n> \r\n>    *  an SD-JWT (i.e., an Issuer-signed JWT and zero or more\r\n>       Disclosures), and\r\n>    *  a Key Binding JWT.\r\n\r\n Change into:\r\n\r\n>     A data structure for a SD-JWT with Disclosures and with key binding \r\n>     is composed of:\r\n> \r\n>        *  an SD-JWT,\r\n>        *  one or more Disclosures, and\r\n>        *  a Key Binding JWT.\r\n ",
      "createdAt": "2024-11-06T11:40:47Z",
      "updatedAt": "2024-11-11T16:06:06Z",
      "closedAt": "2024-11-11T16:06:06Z",
      "comments": [
        {
          "author": "AlexHodder",
          "authorAssociation": "CONTRIBUTOR",
          "body": "An SD-JWT already includes Disclosures (zero or more). It is possible for an SD-JWT presentation to NOT include any Disclosures and still be valid.",
          "createdAt": "2024-11-11T15:22:37Z",
          "updatedAt": "2024-11-11T15:22:37Z"
        }
      ]
    },
    {
      "number": 504,
      "id": "I_kwDOHTmVzM6dOn6k",
      "title": "It would be worth to mention that the Issuer decides which claims are always disclosed",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/504",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Section 4.1:\r\n\r\n>    It is the Issuer who decides which claims are selectively disclosable\r\n>    and which are not.\r\n\r\nChange into:\r\n\r\n> \r\n>    It is the Issuer which decides which claims can be selectively \r\n>    disclosed by the Holder and which claims are always disclosed\r\n\r\n.\r\n\r\n",
      "createdAt": "2024-11-06T11:41:47Z",
      "updatedAt": "2024-11-11T16:06:07Z",
      "closedAt": "2024-11-11T16:06:07Z",
      "comments": []
    },
    {
      "number": 505,
      "id": "I_kwDOHTmVzM6dOs-g",
      "title": "Add an example of using arrays for \"age_over\" and \"age_under\" claims",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/505",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Section 4.2.2.  Disclosures for Array Elements contains an interesting example for the use case \r\nwhen an End-User has several nationalities. It is proposed to add another interesting example \r\nfor the use case where an individual is willing to demonstrate that he is above or/and under an age threshold limit. \r\n\r\nNote: This topic has already been advertised to the OAuth mailing list on 20 September 2024 \r\nunder the title: \" Re: WGLC for SD-JWT\" and the sub-title: \r\n*About disclosures for Array Elements versus disclosures of name/value pair*.\r\n\r\nSee: https://mailarchive.ietf.org/arch/msg/oauth/EYlDtN8gg1--tsZ-AWolMjw4jAk/\r\n\r\nDraft of Annex - Ares(2024)5786783 \"laying down rules for the application of Regulation (EU) No 910/2014 \r\nof the European Parliament and of the Council as regards person identification data and electronic attestations \r\nof attributes issued to European Digital Identity Wallets\" identifies the following two optional attributes: \r\n\"age_over_18\" and \"age_over_13\" on page 3 in Table 2: Optional attributes.\r\n\r\nThe threshold values depends upon the use case and vary country by country. \r\nSome examples are: over 13, over 15, over 18, over 21, over 60, over 65 but also under 25 (for social networks).\r\n\r\nRather than defining more optional attributes, like \"age_over_15\", \"age_over_21\", \"age_over_60\", \r\n\"age_over_65\" or \"age_under_25\", each time there will be a new need, it is more adequate \r\nto define two array elements that will allow to support any age threshold value. \r\n\r\nThis leads to define two arrays:\r\n\r\n```\r\n- \"age_over\", and\r\n- \"age_under\".\r\n```\r\n\r\nThe Issuer may wish to make the whole \"age_over\" and/or \"age_under\" field selectively disclosable \r\nand allow the Holder to make the entries within the \"age_over\" and/or \"age_under\" array selectively disclosable. \r\n\r\nAdd the following text:\r\n\r\n> The disclosure of age threshold values is another example.  Rather than defining attributes, like \"age_over_15\", \"age_over_21\", \"age_over_60\", \"age_over_65\" or \"age_under_25\", two array elements allow to support any age threshold value. \r\n> \r\n> Two examples are mentioned below:\r\n\r\n\r\n```\r\n   {\r\n     \"age_over\": [\"21\", \"13\", \"60\", \"18\", \"15\"]\r\n   }\r\n```\r\n\r\n> A Disclosure for the second element of the \"age_over\" array in the following JWT Claims Set can be created.\r\n```\r\n   {\r\n     \"age_under\": [\"25\", \"18\"]\r\n   }\r\n```\r\n\r\n> A Disclosure for the first element of the \"age_under\" array in the following JWT Claims Set can be created.\r\n\r\nIf more information should be added, I let the co-editors of the document to complete this example.\r\n",
      "createdAt": "2024-11-06T11:51:10Z",
      "updatedAt": "2024-11-11T16:06:07Z",
      "closedAt": "2024-11-11T16:06:07Z",
      "comments": []
    },
    {
      "number": 506,
      "id": "I_kwDOHTmVzM6dOwpK",
      "title": "How the Holder key pair is established cannot be placed \"out of the scope of this document\"",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/506",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Section 5.1.2 states:\r\n\r\n>    It is out of the scope of this document to describe how the Holder\r\n>    key pair is established.  For example, the Holder MAY create a key\r\n>    pair and provide a public key to the Issuer, the Issuer MAY create\r\n>    the key pair for the Holder, or Holder and Issuer MAY use pre-\r\n>    established key material.\r\n\r\nThe strength of the key binding mechanism is dependent about the key generation process. \r\nFor example, if the key pair can be freely exported or shared, then the strength of the key binding\r\n mechanism becomes close to zero. \r\n\r\nA first condition (which is not the single one), shall be to use secure cryptographic application \r\nwhich is part of the Holder application to generate the key pairs. In order to appreciate the strength \r\nkey binding mechanism, the Verifier shall be made aware of the characteristics of the Holder. \r\n\r\nIn order to avoid the use of a specific protocol between the Holder and the Verifier that would leak \r\ninformation that would be usable to link different accesses, a transitive trust model is preferred.\r\n \r\nAt the moment where he Holder requests a SD-JWT to the Issuer, a specific protocol between \r\nthe Holder and the Issuer is used that allows the Issuer to know some of the characteristics of the Holder. \r\nThese characteristics can then be included in a specific claim of the SD-JWT (i.e., a \"hchar\" claim).\r\n\r\nRemove this paragraph and replace it with:\r\n\r\n> The key pair SHOULD be generated by a trusted part of the Holder where the characteristics \r\n> of that application CAN be included by the Issuer in SD-JWT using a specific claim (i.e., a \"hchar\" claim). \r\n",
      "createdAt": "2024-11-06T11:56:56Z",
      "updatedAt": "2024-11-11T16:06:08Z",
      "closedAt": "2024-11-11T16:06:08Z",
      "comments": []
    },
    {
      "number": 507,
      "id": "I_kwDOHTmVzM6dOxY7",
      "title": "It is important to mention the use of decoy digests and of the shuffling of the digests included in the SD-JWT payload",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/507",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Section 4.2.2 (Disclosures for Array Elements) contains a consideration \r\nthat should also be applied to section 4.2.1 (Disclosures for Object Properties).\r\n\r\nAdd the following text below the header of this section:\r\n\r\n>    The Issuer SHOULD hide the order of the obfuscated claims in the SD-JWT. \r\n>    To ensure this, it is RECOMMENDED to add decoy digests and to shuffle \r\n>    the digests included in the SD-JWT payload. See section 4.2.5 about \r\n>    Decoy Digests.  It is also RECOMMENDED to use a fixed number of \r\n>    digests, so that the Verifier cannot deduce the value of an obfuscated\r\n>    claim name that won't be revealed.\r\n",
      "createdAt": "2024-11-06T11:58:20Z",
      "updatedAt": "2024-11-11T16:06:08Z",
      "closedAt": "2024-11-11T16:06:08Z",
      "comments": []
    },
    {
      "number": 508,
      "id": "I_kwDOHTmVzM6dOyLY",
      "title": "The iat time at which the Key Binding JWT was issued should not be REQUIRED",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/508",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Section 4.3 states:\r\n\r\n> 4.3.  Key Binding JWT\r\n> \r\n> (...)\r\n> \r\n>    The Key Binding JWT MUST be a JWT according to [RFC7519] and its\r\n>    payload MUST contain the following elements:\r\n> \r\n>    *  in the JOSE header,\r\n>       (...)\r\n> \r\n>    *  in the JWT payload,\r\n>       -  iat: REQUIRED.  The value of this claim MUST be the time at\r\n>          which the Key Binding JWT was issued using the syntax defined\r\n>          in [RFC7519].\r\n>       -  aud: REQUIRED.  The intended receiver of the Key Binding JWT.\r\n>          How the value is represented is up to the protocol used and out\r\n>          of scope of this specification.\r\n>       -  nonce: REQUIRED.  Ensures the freshness of the signature.  The\r\n>          value type of this claim MUST be a string.  How this value is\r\n>          obtained is up to the protocol used and out of scope of this\r\n>          specification.\r\n>       -  sd_hash: REQUIRED.  The base64url-encoded hash value over the\r\n>          Issuer-signed JWT and the selected Disclosures as defined\r\n>          below.\r\n\r\nThe time at which the Key Binding JWT was issued should not be REQUIRED. \r\nThe use of the nonce is sufficient to prevent replay.\r\n\r\nRemove:\r\n\r\n>       -  iat: REQUIRED.  The value of this claim MUST be the time at\r\n>          which the Key Binding JWT was issued using the syntax defined\r\n>          in [RFC7519].\r\n",
      "createdAt": "2024-11-06T11:59:53Z",
      "updatedAt": "2024-11-11T16:06:08Z",
      "closedAt": "2024-11-11T16:06:08Z",
      "comments": []
    },
    {
      "number": 509,
      "id": "I_kwDOHTmVzM6dO1r9",
      "title": "Validation steps for the KB-JWT are missing",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/509",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Some validation steps are missing. They should correspond in particular to the REQUIRED claims from clause 4.3:\r\n\r\n>       -  aud: REQUIRED\r\n>       -  nonce: REQUIRED\r\n>       -  sd_hash: REQUIRED\r\n\r\nThe presence of an additional claim which is currently not yet defined should be done. \r\nThe claim allows to know characteristics of the Holder. \r\n\r\nIt is proposed to name this claim \"hchar\" for \"holder characteristics\".\r\n\r\nAdd the following text:\r\n\r\n>    The Verifier MUST verify that the Key Binding JWT is a JWT \r\n>    according to [RFC7519] and that its payload contains the following \r\n>    claims:\r\n>       -  aud: REQUIRED.  It MUST correspond to an identifier or a name \r\n>                  of the intended Verifier.\r\n>       -  nonce: REQUIRED.  It MUST correspond to value of the nonce that \r\n>                     was sent by the Verifier and received by the Holder when the \r\n>                     Holder made an access request to the verifier. The value type \r\n>                     of this claim MUST be a string. \r\n>       -  sd_hash: REQUIRED.  The base64url-encoded hash value over the\r\n>                      Issuer-signed JWT and the selected Disclosures.\r\n> If the Verifier is willing to know the strength of the key binding mechanism, \r\n> the Verifier MUST verify that the payload of the Key Binding JWT contains \r\n> the following claim and that it understands its meaning:\r\n>       -  hchar: REQUIRED.  This claim allows the Verifier to know \r\n>                     the characteristics of the Holder (holder characteristics).\r\n",
      "createdAt": "2024-11-06T12:06:57Z",
      "updatedAt": "2024-11-11T16:06:09Z",
      "closedAt": "2024-11-11T16:06:09Z",
      "comments": []
    },
    {
      "number": 510,
      "id": "I_kwDOHTmVzM6dO3ew",
      "title": "Verification steps for the KB-JWT are missing in section 7.1",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/510",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "In Section 7.1 (Verification of the SD-JWT), the text states:\r\n\r\n>    Upon receiving an SD-JWT, either directly or as a component of an SD-\r\n>    JWT+KB, a Holder or a Verifier needs to ensure that:\r\n> \r\n>    *  the Issuer-signed JWT is valid, i.e., it is signed by the Issuer\r\n>       and the signature is valid, and\r\n\r\nChange into:\r\n\r\n>    Upon receiving an SD-JWT, a Holder or a Verifier needs to ensure that:\r\n> \r\n>    *  the Issuer belongs to a set of Trusted Issuers using \r\n>       a certification path up to a trusted root,\r\n> \r\n>    *  the Issuer-signed JWT is valid, i.e., it is signed by a Trusted \r\n>       Issuer and the signature is valid, and\r\n\r\nSection 4.1 in step 6 mentions:\r\n\r\n \r\n\r\n>   6.  The payload MAY contain further claims such as iss, iat, etc. as\r\n>        defined or required by the application using SD-JWTs.\r\n\r\nCorresponding verification steps should be added in section 7.1.\r\nAfter the following item:\r\n\r\n>        3.  Validate the Issuer and that the signing key belongs to this\r\n>            Issuer.\r\n\r\nAdd the following item:\r\n\r\n>        4.  If required by the application using SD-JWTs, check that \r\n>            further claims such as iss, iat, nbf, exp, etc. are present \r\n>            and contain appropriate values.\r\n\r\nSome other steps are missing. Add:\r\n\r\n>        5.  If required by the application using SD-JWTs and if the \r\n>            SD-JWT contains claims such as nbf or exp, verify that the \r\n>            current time lies between these two values.\r\n>        6.  If required by the application using SD-JWTs and if the \r\n>            previous verification succeeds, verify that the SD-JWT is \r\n>            not currently suspended, nor revoked.\r\n> Note : The means to verify that the SD-JWT is not currently suspended, nor revoked, are not defined in this document.\r\n",
      "createdAt": "2024-11-06T12:10:35Z",
      "updatedAt": "2024-11-11T16:06:09Z",
      "closedAt": "2024-11-11T16:06:09Z",
      "comments": []
    },
    {
      "number": 511,
      "id": "I_kwDOHTmVzM6dO4Tm",
      "title": "The requirement for an Issuer of not providing a SD-JWT+KB-JWT should be removed",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/511",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Section 7.2 states\r\n\r\n> 7.2.  Processing by the Holder\r\n> \r\n>    The Issuer MUST provide the Holder an SD-JWT, not an SD-JWT+KB.  If\r\n>    the Holder receives an SD-JWT+KB, it MUST be rejected.\r\n\r\nThese sentences would mean that the Issuer would be in possession of the private key able to sign the KB-JWT. \r\nIt is much better to construct an architecture where the Issuer CANNOT be in possession of the private key \r\nable to sign the KB-JWT.\r\n\r\nRemove these two sentences.\r\n",
      "createdAt": "2024-11-06T12:12:16Z",
      "updatedAt": "2024-11-11T16:06:10Z",
      "closedAt": "2024-11-11T16:06:10Z",
      "comments": []
    },
    {
      "number": 512,
      "id": "I_kwDOHTmVzM6dO5FC",
      "title": "Section 7.3 needs to be revised to describe which data structures can be transmitted",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/512",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Section 7.3 (Verification by the Verifier) states\r\n\r\n>    Upon receiving a presentation from a Holder, in the form of either an\r\n>    SD-JWT or an SD-JWT+KB, in addition to the checks outlined in\r\n>    Section 8.1, Verifiers need to ensure that (...)\r\n\r\nThe vocabulary should be aligned with the acronyms from Figure 1: \r\nSD-JWT Issuance and Presentation Flow.\r\n\r\nChange into:\r\n\r\n>    Upon receiving a presentation from a Holder, in the form of either an\r\n>    SD-JWT + sel.disclosures or an SD-JWT + sel.disclosures + SD-JKT, in \r\n>    addition to the checks outlined in Section 8.1, Verifiers need to \r\n>    ensure that (...)\r\n> ",
      "createdAt": "2024-11-06T12:13:40Z",
      "updatedAt": "2024-11-11T16:06:10Z",
      "closedAt": "2024-11-11T16:06:10Z",
      "comments": []
    },
    {
      "number": 513,
      "id": "I_kwDOHTmVzM6dPCU4",
      "title": "Section 9.5 (Key Binding) needs to be revised to consider the case of a collusion between End-Users",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/513",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Section 9.5 (Key Binding) states:\r\n\r\n>    Key Binding aims to ensure that the presenter of an SD-JWT credential\r\n>    is actually the legitimate Holder of the credential.  An SD-JWT\r\n>    compatible with Key Binding contains a public key, or a reference to\r\n>    a public key, that corresponds to a private key possessed by the\r\n>    Holder.  The Verifier requires that the Holder prove possession of\r\n>    that private key when presenting the SD-JWT credential.\r\n> \r\n>    Without Key Binding, a Verifier only gets the proof that the\r\n>    credential was issued by a particular Issuer, but the credential\r\n>    itself can be replayed by anyone who gets access to it.  This means\r\n>    that, for example, after a credential was leaked to an attacker, the\r\n>    attacker can present the credential to any verifier that does not\r\n>    require a binding.  But also a malicious Verifier to which the Holder\r\n>    presented the credential can present the credential to another\r\n>    Verifier if that other Verifier does not require Key Binding.\r\n\r\nThese two paragraphs are incorrect. \r\n\r\nLet us suppose that an End-User B connects to a Verifier in order to \r\nperform an operation. The Verifier then returns a selection of issuer \r\nnames, claim names and a nonce. Let us now assume that an End-User A \r\naccepts to collaborate with an End-User B.  The End-User B transmits the \r\nnonce to the End-User A. The End-User A then provides  \r\na \"SD-JWT + Selected Disclosures + KB-JWT \" structure to the End-User B. \r\nIn this way, the End-User B can take benefits of claims that belong to the End-User A. \r\n\r\nThe Verifier is not in a position to know who is \"the legitimate Holder of the credential\" \r\n... unless the set of disclosed claims allows to unambiguously identify the End-User.\r\n\r\nThe collusion attack has been described on the OAuth mailing list on 07 November 2016. \r\nThe ABC attack (the Alice and Bob Collusion attack). \r\nSee: https://mailarchive.ietf.org/arch/msg/oauth/UIsbsVtINPifrCjG7GDZM7FOi2g/.\r\n\r\nA few extracts:\r\n\r\n    Whatever kind of cryptographic is being used, when two users\r\n    collaborate, a software-only solution will be unable to prevent \r\n    the transfer of an attribute of a user that possess it to another \r\n    user that does not possess it .\r\n\r\nThe use of a secure element or of a Trusted Application (TA) running in a TEE \r\nonly protecting the confidentiality and the integrity of some secret key or private key \r\nwill be ineffective to counter the Alice and Bob collusion attack. \r\n\r\nAdditional properties will be required.\r\n\r\nChange into:\r\n\r\n>    An SD-JWT compatible with Key Binding contains a public key, or a reference to a public key, \r\n>    that corresponds to a private key that can be used by  some entity.\r\n>    The Verifier requires that a Holder proves that it is able to use that private key when presenting \r\n>    an SD-JWT +  Selected Disclosures + KB-JWT structure to a Verifier.\r\n>    Key Binding aims to ensure that the presenter of a SD-JWT +  Selected Disclosures + KB-JWT\r\n>    structure to a Verifier has either the ability to use a private key corresponding to a public key \r\n>    contained in a SD-JWT or has had the ability to obtain a cryptographic result performed \r\n>    using that private key.\r\n> \r\n>    Without Key Binding, a Verifier only gets the proof that the redential was issued by a particular Issuer, \r\n>    but the credential itself can be replayed by anyone who gets access to it. A malicious Verifier to which \r\n>    the Holder presented the credential can also present the credential to another Verifier if that other Verifier \r\n>    does  not require Key Binding.\r\n> \r\n>    With Key Binding, if two End-Users accept to collaborate, unless specific characteristics are supported \r\n>    by the Holder, the SD-JWT +  Selected Disclosures + KB-JWT structure can voluntarily be computed \r\n>    and then transmitted to another Holder by the legitimate Holder of a private key with \r\n>    the consent of the End-User. Using the \"hchar\" claim, the Verifier may be able to know whether \r\n>    some of these characteristics are able to counter Holder collaborative attacks  against a Verifier.\r\n> ",
      "createdAt": "2024-11-06T12:31:41Z",
      "updatedAt": "2024-11-11T16:06:10Z",
      "closedAt": "2024-11-11T16:06:10Z",
      "comments": []
    },
    {
      "number": 514,
      "id": "I_kwDOHTmVzM6dRcaX",
      "title": "A section should be added to consider the case of a presentation of claims to Verifier that have been issued by different Issuers",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/514",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The text proposal below reuses text sent on 23 September 2024 to the OAUth mailing list under the topic:\r\n[OAUTH-WG] How to get the benefits of BBS+, without its drawbacks while using conventional cryptography ? \r\n(Was SD-JWT and Unlinkability)\r\nSee: https://mailarchive.ietf.org/arch/msg/oauth/X4fZ-RMAfcC_5vAxl_qAnSBu8T0/\r\n\r\nAdd the following text:\r\n\r\n> 9.12. Presentation of claims issued by different Issuers\r\n> \r\n>    There exist use cases where claims issued by different Issuers need \r\n>    to be presented to one Verifier.  For example, an End-User would like \r\n>    to demonstrate to a Verifier that that he lives in California using \r\n>    a SD-JWT issued by a governmental organization and that he got a \r\n>    specific diploma using a SD-JWT issued by a University.\r\n> \r\n>    When using the regular SD-JWT mechanism, the Holder can generate \r\n>     one key pair for each Issuer. In this way, a SD-JWT issued by an Issuer A \r\n>    cannot be linked between collaborative Verifiers to a SD-JWT issued \r\n>    by an Issuer B. \r\n> \r\n>    When there is a need to demonstrate to a Verifier that two SD-JWTs \r\n>    have been issued to the same End-User,  the Holder can generate a one-time \r\n>    key pair and use the same private key to request a SD-JWT from each\r\n>    Issuer.\r\n> \r\n>    The two issued SD-JWTs will contain the same public key and, using \r\n>    the corresponding private key, the Holder will be able to demonstrate\r\n>    to one Verifier that the two presentations of the SD-JWT originate \r\n>    from the same Holder.\r\n> \r\n>    Verifiers MUST be able to obtain the characteristics of the Holder \r\n>       to be confident that Holder indeed supports this scheme in a secure way.\r\n\r\n>   Since that key pair will only be used once towards a single Verifier, \r\n>   a linkage between different collaborative Verifiers using the framing \r\n>   of the SD-JWT will not be possible.\r\n",
      "createdAt": "2024-11-06T16:21:59Z",
      "updatedAt": "2024-11-11T16:06:11Z",
      "closedAt": "2024-11-11T16:06:11Z",
      "comments": []
    },
    {
      "number": 515,
      "id": "I_kwDOHTmVzM6dRmh8",
      "title": "The term \"unlinkability\" is overloaded. For more clarity, the wording \"End-user intrackability\" should be used in addition",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/515",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "In Section 10.1. (Unlinkability) the word \"unlinkability\" is used with four different meanings or flavours. \r\nThe last two properties are called:\r\n\r\n-\tIssuer/Verifier Unlinkability (Honest Verifier), and\r\n-\tIssuer/Verifier Unlinkability (Colluding/Compromised Verifier)\r\n\r\nBy reading these two long wordings, it is rather difficult to understand their meaning. \r\nThe current text is using twice the word \"track\".\r\n\r\n>   *  Cooperating Verifiers might want to \"track\" users across services to\r\n>       build advertising profiles.\r\n> \r\n>    *  Issuers might want to \"track\"where users present their credentials\r\n>       to enable surveillance.\r\n\r\nRoughly speaking:\r\n\r\n-\tVerifiers may attempt to *link* accesses performed by End-Users (whether they atre identified or not).\r\n-\tIssuers may either be required by a national authority or be willing to *track* accesses performed by a given End-User.\r\n\r\nThis leads to consider one section dedicated to \"unlinkability\" with variants that apply to Verifiers \r\nand another section dedicated to \"End-user intrackability\" which applies to Issuers. \r\nA text proposal for this other section is placed in another issue.\r\n\r\nText change proposal:\r\n\r\n> 10.1.  Unlinkability\r\n> \r\n>    Unlinkability is a property whereby one or more Verifiers are \r\n>    prevented from correlating SD-JWT presentations from the same Holder.\r\n>    Without unlinkability, a Verifier might be able to learn more about \r\n>    the End-User intended to disclose, for example:\r\n> \r\n>    *  A single Verifier might want to count the number of accesses made \r\n>       by one Holder.\r\n> \r\n>    *  Collaborative Verifiers might want to learn that the same End-User \r\n>       made an access to their services.\r\n> \r\n>    In all cases, unlinkability is limited to cases where the disclosed\r\n>    claims do not contain information that directly or indirectly\r\n>    identifies the End-User.  For example, when a taxpayer identification\r\n>    number is contained in the disclosed claims, the Issuer and Verifier\r\n>    can easily link the user's transactions.  However, when the End-User\r\n>    only discloses a birth date to one Verifier and a postal code to \r\n>    another Verifier, the two Verifiers should not be able to determine \r\n>    that they were interacting with the same End-User.\r\n> \r\n>    The following types of unlinkability are considered here:\r\n>    *  Single Verifier Unlinkability: incapability of one Verifier to \r\n>       learn that it got two or more accesses using different sessions \r\n>       from the same End-User or the same Holder.\r\n> \r\n>    *  Verifier/Verifier Unlinkability: incapability of two or more \r\n>       collaborative Verifiers to learn that they got accesses from \r\n>       the same End-User or from the same Holder.\r\n>       These collaborative Verifiers may wish to know whether they got an \r\n>       access from the same End-User, without necessarily being able to \r\n>       identify him. \r\n>       Independently from the set of disclosed claims, one or more fields \r\n>       from the SD-JWT or of the KB-JWT may reveal that they relate either \r\n>       to the same the End-User or to the same Holder, and hence to the \r\n>       same End-User.  In that case, if a first Verifier is able to \r\n>       identify the End-User and collaborates with a second Verifier \r\n>       which was unable to identifier the End-User, then the second \r\n>       Verifier will be able to identify the End-User.\r\n> \r\n>    Single Verifier Unlinkability and Verifier/Verifier unlinkability \r\n>    can be implemented using batch issuance:  a batch of SD-JWTs based on the\r\n>    same set of claims is issued to the Holder instead of just a single\r\n>    SD-JWT.  The Holder can then use a different SD-JWT for each\r\n>    Verifier or for each different session with a Verifier.  \r\n>    New key binding keys and salts MUST be used for each SD-JWT in \r\n>    the batch to ensure that the Verifiers cannot link the SD-JWTs\r\n>    using these values.  Likewise, claims carrying time information, \r\n>    like iat, exp, and nbf, MUST either be randomized within a time period \r\n>    considered appropriate (e.g., randomize iat within the last 24 hours \r\n>    and calculate exp accordingly) or rounded (e.g., rounded down to the\r\n>    beginning of the day).\r\n",
      "createdAt": "2024-11-06T16:38:15Z",
      "updatedAt": "2024-11-11T16:06:11Z",
      "closedAt": "2024-11-11T16:06:11Z",
      "comments": []
    },
    {
      "number": 516,
      "id": "I_kwDOHTmVzM6dRtA4",
      "title": "A new section about \"End-User intrackability\" should be added",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/516",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "This text addition proposal results from the split of section 10.1:\r\n\r\n> 10.2.  End-User intrackability\r\n> \r\n> Intrackability is a property whereby one or more Issuers are prevented to learn\r\n>  by which Verifier(s) a SD-JWT that they have issued has been consumed (or will be consumed).\r\n> \r\n>    The following types of intrackability are considered here:\r\n> \r\n>    * End-User intrackability by one Issuer: incapability of an Issuer \r\n>       alone to learn to which Verifiers a SD-JWT that it has issued \r\n>       will be presented by a Holder.\r\n> \r\n>    *  End-User intrackability by both Issuers and Verifiers: \r\n>       incapability of one Issuer, with the help of one Verifier, to \r\n>       learn by which Verifier a SD-JWT that it has issued has been \r\n>       consumed.\r\n> \r\n>    End-User intrackability by one Issuer is natively supported when using\r\n>    SD-JWTs since a SD-JWT does not contain an \"aud\" claim.\r\n> \r\n>    End-User intrackability by both Issuers and Verifiers cannot be supported \r\n>    using SD-JWTs, as soon as a Verifier communicates the SD-JWT either to \r\n>    an authority upon its request that will then communicate it to the \r\n>    Issuer or deliberately communicates the SD-JWT to the Issuer. \r\n> \r\n>    However, some mechanisms using zero-knowledge proofs (ZKP) may be able\r\n>    to support this property.\r\n> \r\n>    Ii is important to notice, for example, that a national authority can \r\n>    require to get an access to the audit logs from both a Verifier and \r\n>    an Issuer to know whether a same SD-JWT has been logged in both files. \r\n> \r\n>    Since the Issuer \"needs to know its customer\" (KYC), national \r\n>    authorities may be able to identify an End-User who made an access \r\n>    to a Verifier.\r\n> \r\n>    Section 10.X (Storage of User Data) RECOMMENDS that after \r\n>    verification, Verifiers SHOULD NOT store the SD-JWT.  Depending upon \r\n>    the context of use, this recommendation should or should not be \r\n>    followed since there exist cases where such property will be non-\r\n>    desirable in particular to fight against crime or money laundering.\r\n> ",
      "createdAt": "2024-11-06T16:45:52Z",
      "updatedAt": "2024-11-11T16:06:12Z",
      "closedAt": "2024-11-11T16:06:12Z",
      "comments": [
        {
          "author": "paulbastian",
          "authorAssociation": "NONE",
          "body": "The term unlinkability is established in literature and standards for this.",
          "createdAt": "2024-11-06T23:50:06Z",
          "updatedAt": "2024-11-06T23:50:06Z"
        }
      ]
    },
    {
      "number": 517,
      "id": "I_kwDOHTmVzM6dRur9",
      "title": "Section 10.2 should be made more general to consider both the storage of signed and un-signed data",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/517",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Section 10.2 is called \"Storage of Signed User Data\".\r\n It should not  only consider the storage of *signed* user data, but also the storage of user data that is *unsigned*.\r\n\r\nChange into:\r\n\r\n> 10.2.  Storage of User Data\r\n",
      "createdAt": "2024-11-06T16:48:38Z",
      "updatedAt": "2024-11-11T16:06:12Z",
      "closedAt": "2024-11-11T16:06:12Z",
      "comments": []
    },
    {
      "number": 518,
      "id": "I_kwDOHTmVzM6dRw8_",
      "title": "Holders SHOULD NOT be required to store SD-JWTs \"only in encrypted form\"",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/518",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Section 10.2 states:\r\n\r\n>    Holders SHOULD store SD-JWTs only in encrypted form, and, wherever\r\n>    possible, use hardware-backed encryption in particular for the\r\n>    private Key Binding key. \r\n\r\nWhen a smartphone is used, a TEE can be used and the SD-JWTs can be stored in it in clear text \r\nsince the TEE storage is protected from the RichOS. \"Encrypted forms\" are not needed since \r\nthe whole storage of the TEE is encrypted.\r\n\r\nChange into:\r\n\r\n>    Holders SHOULD store SD-JWTs and key pairs used for key binding only \r\n>    in a protected area, such as the storage area of a Trusted Execution Environment (TEE) .\r\n",
      "createdAt": "2024-11-06T16:52:43Z",
      "updatedAt": "2024-11-11T16:06:13Z",
      "closedAt": "2024-11-11T16:06:13Z",
      "comments": []
    },
    {
      "number": 519,
      "id": "I_kwDOHTmVzM6dR42K",
      "title": "Since claims always contain privacy-sensitive data section 10.2 would need to be reworded",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/519",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Section 10.2 states:\r\n\r\n>    After Verification, Verifiers SHOULD NOT store the Issuer-signed JWT\r\n>    or the respective Disclosures if they contain privacy-sensitive data.\r\n>    It may be sufficient to store the result of the verification and any\r\n>    End-User data that is needed for the application.\r\n\r\nIn practice, a SD-JWT contains regular claims and hash-values of selectively disclosable claims \r\nwhile Disclosures are sent separately. In practice, any received data can be considered to be \r\n\"privacy-sensitive\". After verification, a Verifier may need to store any End-User data that is needed \r\nfor the application.\r\n\r\nChange into:\r\n\r\n>     After Verification, Verifiers SHOULD NOT store the SD-JWT, nor the\r\n>     KB-JWT. However, it may be necessary to store End-User data or\r\n>     other claims contained in the SD-JWT, including regular claims and \r\n>     Disclosures as needed for the application. However, there exist cases\r\n>     where such requirement SHOULD NOT be followed, in particular\r\n>     to allow national authorities to fight against crime or money \r\n>     laundering.\r\n\r\n\r\n",
      "createdAt": "2024-11-06T17:07:04Z",
      "updatedAt": "2024-11-11T16:06:13Z",
      "closedAt": "2024-11-11T16:06:13Z",
      "comments": []
    },
    {
      "number": 520,
      "id": "I_kwDOHTmVzM6dR5ys",
      "title": "Section 10.3 (Confidentiality during Transport) should also mention integrity",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/520",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The header of Section 10.3 is : Confidentiality during Transport\r\n\r\nBoth confidentiality and integrity are important. Add integrity.\r\n\r\nChange into:\r\n\r\n> 11.3.  Confidentiality and integrity during Transport\r\n\r\nIn the following text, change \"confidentiality\" into \"confidentiality and integrity\".\r\n",
      "createdAt": "2024-11-06T17:09:01Z",
      "updatedAt": "2024-11-11T16:06:13Z",
      "closedAt": "2024-11-11T16:06:13Z",
      "comments": []
    },
    {
      "number": 521,
      "id": "I_kwDOHTmVzM6dR7Yn",
      "title": "A new section about \"Issuer anonymity\" should be added",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/521",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "A new section 10.X  about  \"Issuer anonymity\" should be placed before section 10.5 (Issuer Identifier)\r\n\r\nAdd a new section.\r\n\r\n> 10.X.  Issuer anonymity\r\n> \r\n>    Issuer anonymity: incapability of a Verifier, to learn from which \r\n>    Issuer a SD-JWT that has been presented by a Holder has been issued.\r\n> \r\n>    Issuer anonymity cannot be supported using SD-JWTs, since a SD-JWT \r\n>    is signed by its Issuer using an asymmetric algorithm. However, some \r\n>    mechanisms using group signatures or ring signatures are able to \r\n>    support this property.\r\n",
      "createdAt": "2024-11-06T17:12:02Z",
      "updatedAt": "2024-11-11T16:06:14Z",
      "closedAt": "2024-11-11T16:06:14Z",
      "comments": []
    },
    {
      "number": 522,
      "id": "I_kwDOHTmVzM6dR8Vy",
      "title": "The last paragraph of section 10.5 (Issuer Identifier) can be removed",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/522",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The last paragraph of section 10.5 (Issuer Identifier) states:\r\n\r\n>    To mitigate this issue, a group of issuers may elect to use a common\r\n>    Issuer identifier.  A group signature scheme outside the scope of\r\n>    this specification may also be used, instead of an individual\r\n>    signature.\r\n\r\nGiven the proposal to add a new section dedicated to \"Issuer anonymity\", this paragraph can be removed.\r\n",
      "createdAt": "2024-11-06T17:13:59Z",
      "updatedAt": "2024-11-11T16:06:14Z",
      "closedAt": "2024-11-11T16:06:14Z",
      "comments": []
    },
    {
      "number": 523,
      "id": "I_kwDOHTmVzM6djRMG",
      "title": "Hash Function Claim value case-sensitivity",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/523",
      "state": "CLOSED",
      "author": "spheroid",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "In Section 4.1.1 Hash Function Claim it's stated that:\r\n\r\n> The hash algorithm identifier MUST be a hash algorithm value from the \"Hash Name String\" column in the IANA \"Named Information Hash Algorithm\" registry [[IANA.Hash.Algorithms](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-13.html#IANA.Hash.Algorithms)] or a value defined in another specification and/or profile of this specification.\r\n\r\nI've seen this reference and similar phrasing in other recent specifications and it's never indicated whether these values are case-sensitive or not. Perhaps this is fault of RFC 6920 not being explicit on the matter, but being vague here creates interop issues; I've already witnessed one regarding this very claim.\r\n\r\nShould these values be considered case-sensitive or not?",
      "createdAt": "2024-11-08T08:22:15Z",
      "updatedAt": "2024-11-15T18:05:12Z",
      "closedAt": "2024-11-15T18:05:12Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I guess it doesn't say so explicitly but the intent is absolutely that the values be considered case-sensitive. \r\n\r\nWe can maybe add a brief statement to that effect. ",
          "createdAt": "2024-11-11T17:21:37Z",
          "updatedAt": "2024-11-11T17:21:37Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": " #525 adds one sentence indicating case-sensitivity. ",
          "createdAt": "2024-11-11T18:24:03Z",
          "updatedAt": "2024-11-11T18:24:03Z"
        },
        {
          "author": "spheroid",
          "authorAssociation": "NONE",
          "body": "Excellent, thank you!",
          "createdAt": "2024-11-11T21:49:00Z",
          "updatedAt": "2024-11-11T21:49:00Z"
        },
        {
          "author": "lukasjhan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Just for clarification, are sha-256 and SHA-256 different claim?",
          "createdAt": "2024-11-11T23:18:49Z",
          "updatedAt": "2024-11-11T23:18:49Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "yes, sha-256 and SHA-256 are different ",
          "createdAt": "2024-11-11T23:26:59Z",
          "updatedAt": "2024-11-11T23:26:59Z"
        },
        {
          "author": "lukasjhan",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> yes, sha-256 and SHA-256 are different\r\n\r\nGood Thank you :)",
          "createdAt": "2024-11-11T23:28:28Z",
          "updatedAt": "2024-11-11T23:28:28Z"
        }
      ]
    },
    {
      "number": 528,
      "id": "I_kwDOHTmVzM6e12Le",
      "title": "Comments and issues raised during the 1rst and the 2nd WGLC have not been addressed in -14",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/528",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Appendix C. Document History from draft-ietf-oauth-selective-disclosure-jwt-14 states:\r\n\r\n> \r\n* Address WGLC (part 2) comments\r\n\r\nI raised forty-one issues during the second WGLC. \r\nAll these issues have been closed by one of the editors without being discussed.\r\nHence, the WGLC (part 2) comments have not been addressed.\r\n\r\nPlease, re-open these forty-one issues so that they can be discussed. The list is below.\r\n    \r\n\r\n1. https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/482\r\n\r\n2. https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/483\r\n\r\n3. https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/484\r\n\r\n4. https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/485\r\n\r\n5. https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/486\r\n\r\n6. https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/487\r\n\r\n7. https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/488\r\n\r\n8. https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/489\r\n\r\n9. https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/490\r\n\r\n10. https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/491\r\n\r\n11. https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/492\r\n\r\n12. https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/493\r\n\r\n13. https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/495\r\n\r\n14. https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/494\r\n\r\n15. https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/496\r\n\r\n16. https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/497\r\n\r\n17. https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/498\r\n\r\n18. https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/499\r\n\r\n19. https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/500\r\n\r\n20. https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/501\r\n\r\n21. https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/502\r\n\r\n22. https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/503\r\n\r\n23. https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/504\r\n\r\n24. https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/505\r\n\r\n25. https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/506\r\n\r\n26. https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/507\r\n\r\n27. https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/508\r\n\r\n28. https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/509\r\n\r\n29. https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/510\r\n\r\n30. https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/511\r\n\r\n31. https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/512\r\n\r\n32. https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/513\r\n\r\n33. https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/514\r\n\r\n34. https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/515\r\n\r\n35. https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/516\r\n\r\n36. https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/517\r\n\r\n37. https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/518\r\n\r\n38. https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/519\r\n\r\n39. https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/520\r\n\r\n40. https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/521\r\n\r\n41. https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/522\r\n\r\n\r\n\r\n",
      "createdAt": "2024-11-16T20:41:19Z",
      "updatedAt": "2025-01-09T17:12:44Z",
      "closedAt": "2025-01-09T17:12:44Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "For transparency and auditing purposes the following is from https://mailarchive.ietf.org/arch/msg/oauth/yJvG93VtP25OcpsoM21ibIy7IrY/ and a pdf version you can take a look at it in an off-line mode is here:\r\n[[OAUTH-WG] Re_ Fwd_ New Version Notification for draft-ietf-oauth-selective-disclosure-jwt-14.txt.pdf](https://github.com/user-attachments/files/18113437/OAUTH-WG.Re_.Fwd_.New.Version.Notification.for.draft-ietf-oauth-selective-disclosure-jwt-14.txt.pdf)\r\n\r\n\r\n```\r\n[OAUTH-WG] Re: Fwd: New Version Notification for draft-ietf-oauth-selective-disclosure-jwt-14.txt\r\n\r\nDeb Cooley <...@gmail.com> Thu, 12 December 2024 13:57 UTC\r\n[Show header](https://mailarchive.ietf.org/arch/msg/oauth/yJvG93VtP25OcpsoM21ibIy7IrY/#)\r\n\r\n+oauth working group and Paul:\r\n\r\nDenis,\r\n\r\nI have gone through every issue request you have made on this draft.  I\r\nwould like to know what your motivation is for these drafts (I see you have\r\ndone the same on the SD-JWT-VC draft).  It sort of looks like comment spam.\r\nI realize that you are a long-time participant in the IETF, and you\r\nobviously have your \u2018style\u2019.   Once I understand your motivation, then we\r\ncan work towards that goal.\r\n\r\nI will also say that if a particular draft doesn\u2019t suit your needs, then it\r\nis always possible for you to author a draft and support it through the\r\nprocess.\r\n\r\nBelow are both my general comments, and then blow by blow responses to your\r\n42 issues.\r\n\r\nDeb Cooley\r\n\r\n-------------------------------------------\r\n\r\nMy general comments on the issues:\r\n\r\n1.      End-User comments: These are implementation choices.  Holder is\r\nbasically the front for all sorts of different implementation options. Any\r\nimplementation can be constructed to be secure, or insecure.  The format\r\n(this draft) doesn\u2019t control that.  There are many comments that are\r\nfocused on the End-User vs Holder discussion.  See Daniel\u2019s explanation\r\nhere:\r\nhttps://mailarchive.ietf.org/arch/msg/oauth/o_GsCqflyoA-Kd4ZCg5QlYy_tdQ/ .\r\n\r\n\r\n\r\n2.      Comments on Introductory material: In my opinion, the introduction\r\nneeds to be clear, concise, and straightforward.  Adding complexity doesn\u2019t\r\nhelp \u2018set the stage\u2019 for the detail part of the draft.  There are many\r\ncomments on the Intro text.\r\n\r\n\r\n\r\n3.      Organization of the draft: Choices are made by authors about where\r\nto put the detail.  If that detail does in fact exist already in the draft,\r\ncomments asking for it to be repeated or moved MUST have good rationale.  There\r\nare several comments like this.\r\n\r\n\r\n\r\n4.      Editorial comments: I agree these should be easy to fix, but if one\r\ninsists on burying the lead, i.e. putting the editorial comments in the\r\nmidst of other comments, then they are easy to miss.  I have put \u2018*\u2019 by the\r\neditorial comments I want the authors to fix.\r\n\r\n\r\n\r\n5.      Age examples: This points to ongoing work in this area.  Martin\r\nThomson has a blog:\r\nhttps://lowentropy.net/posts/selective-disclosure/ .  Salted\r\nhash-based selective disclosure might not be the perfect answer for this\r\nparticular use case.  But it is fine for other use cases.  My comment here\r\nis to not let perfect be the enemy of good.\r\n\r\n\r\n\r\n6.      Security Considerations: I am going to ask for some additions here.\r\nNot that the draft needs to address these items, just to make clear that\r\nthey must be done correctly and are out of scope for this particular draft.\r\n\r\n\r\n\r\n7.      PQ algorithms: This draft does not address algorithms at all, they\r\npoint to JOSE where the algorithms will be specified.  There could be a\r\nnote in the Security Considerations section, if the authors so desire.\r\n\r\n -------------------------------------\r\n\r\nLine numbers that I reference are from idnits.  The list of issues is below\r\nwith my comments:\r\n\r\n   - #498 Figure 1 should be corrected to take into account the existence\r\n   of an End-user and to consider KB-JWT instead of KB\r\n   <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/498>\r\n\r\n*Lines 268-297: The addition of the End-User implies implementation.  WRT\r\nthe holder to Verifiers text, I would suggest \u2018Presents SD-JWT or SD-JWT+KB\r\nincluding selected Disclosures\u2019 to account for the KB-JWT.\r\n\r\n   - #497 The term End-User should be added to the definitions\r\n   <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/497>\r\n\r\nLines 220-266: Given the term \u2018end-user\u2019 does not occur within the draft, I\r\ndisagree.\r\n\r\n   - #496 The definition of a Verifier would need to be reworded\r\n   <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/496>\r\n\r\nLines 265-266: I thought providing all disclosures was an option?  The\r\ncurrent definition is clearer and more complete.\r\n\r\n   - #495 The definition of an Holder would need to be reworded\r\n   <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/495>\r\n\r\nLines 261-264: The suggestion is pertinent for one possible implementation\r\nof the format.  Keeping the format language clear and concise is important.\r\n\r\n\r\n   - #494 The definition of an Issuer would need to be reworded\r\n   <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/494>\r\n\r\nLine 260: This seems superfluous, again language needs to be clear and\r\nconcise.\r\n\r\n   - #493 The definition of a \"key binding JWT\" would need to be reworded\r\n   <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/493>\r\n\r\n*Lines 253-256: I would reorder the sentences in the definition where the\r\nlast sentence is \u2018The details of how a JWT for proving Key Binding is\r\ndefined in Section 4.3.\u2019  (putting the second sentence first).  Certainly,\r\ndetails and requirements of how this is done is not suitable for a\r\nterminology section.\r\n\r\n   - #492 The definition of \"key binding\" would need to be reworded\r\n   <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/492>\r\n\r\n*Lines 248-252: I agree that \u2018legitimate possession\u2019 isn\u2019t quite right (nor\r\nprovable).  I suggest removing the word \u2018legitimate\u2019.  As for implications\r\nthat the construction of the system w/ one or more end-users that utilize a\r\nsingle holder is out of scope.  This draft is merely the format, not the\r\nimplementation.\r\n\r\n   - #491 The definition of the Selectively Disclosable JWT (SD-JWT) would\r\n   need to be reworded\r\n   <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/491>\r\n\r\nLines 237-241: \u2018zero or more\u2019 includes \u2018all\u2019.  It makes it very difficult\r\nto implement if requirements are buried in terminology sections.  No\r\nchanges required.\r\n\r\n   - #490 The definition of the SD-JWT+KB structure needs to be reworded\r\n   <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/490>\r\n\r\nLine 217-218: Still Introduction.  The details of how the format works is\r\nin Section 4.3.\r\n\r\n   - #489 A (KB-JWT) does not demonstrate a \"proof of possession\" of\r\n   private key\r\n   <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/489>\r\n\r\n*Line 215: Still Introduction, the authors could add the word \u2018allow\u2019,\r\nsince a format itself does not prove possession of the private key.\r\n\r\n   - #485 Key binding will be ineffective unless the SD-JWT includes an\r\n   additional claim that indicates the Holder characteristics: \"hcahr\"\r\n   <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/485>\r\n\r\nLines 182-190: Introduction text needs to be clear and concise.  Details of\r\nhow the format/mechanism is designed are in Section 4.3.  In addition, this\r\nfeature appears to me to be very much like a certificate validate used in\r\nTLS to prove the server (or client) is in possession of the private key.\r\n\r\nI would disagree with your first statement (that is exactly what key\r\nbinding is for).\r\n\r\nOne can quibble about whether use of a private key equates to possession,\r\nbut that is not useful in an introduction.\r\n\r\nThe holder must prove it possesses the private key to the issuer, and then\r\nto the verifier when the claim is presented.\r\n\r\nNone of this text belongs in an introduction.\r\n\r\n   - #488 What is a \"facility for associating an SD-JWT with a key pair\" ?\r\n   <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/488>\r\n\r\n*Line 214: I don\u2019t think \u2018facility\u2019 here means \u2018a physical place\u2019.  I do\r\nthink the Authors could pick a better word.  Maybe \u2018ability\u2019?\r\n\r\n   - #487 Difference between \"a format extending the JWS Compact\r\n   Serialization\" and \"an alternate format extending the JWS JSON\r\n   Serialization\" ?\r\n   <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/487>\r\n\r\nLines 203-208: It is unclear to me what is unclear here.  Section 8\r\ndescribes the alternate format.  The rest of the draft describes the\r\nprimary format.  Section 1.1 is still Introduction.\r\n\r\n   - #486 The structure called \"SD-JWT+KB\" should be renamed \"SD-JWT+KB-JWT\"\r\n   <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/486>\r\n\r\nAssuming lines 189-190: There is no loss of clarity as it is currently\r\nstated.\r\n\r\n   - #484 A Holder does not present a \"JWT\" to a Verifier but \"SD-JWT +\r\n   Sel.Claims\"\r\n   <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/484>\r\n\r\nAssuming lines 159-161: Again, this is still the Introduction.  Using\r\nconsistent wording is going to be easier for a developer to\r\nunderstand.  Introducing\r\nterms like \u2018talking to\u2019 is confusing.  If the Holder is the End-User does\r\nthat actually speak to the verifier?\r\n\r\n   - #483 Indicate that \"claims\" refers either to object properties\r\n   (name/value pairs) and to array elements\r\n   <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/483>\r\n\r\nIt is unclear to me which part of the Introduction this comment is\r\nreferencing, but the supplied text makes the Introduction more complex.  The\r\ndetails of what a claim can consist of should be in the body of the draft,\r\nnot the Introduction.\r\n\r\n   - #482 Make a difference between the Holder which is an *application*\r\n   and the individual (i.e. End-User)\r\n   <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/482>\r\n\r\nAssuming you are referring to lines 156-158, this is made clear in the\r\nterminology section definition of Holder.\r\n\r\n   - #522 The last paragraph of section 10.5 (Issuer Identifier) can be\r\n   removed\r\n   <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/522>\r\n\r\nGiven my comment on the previous issue (#521), this one is OBE.\r\n\r\n   - #521 A new section about \"Issuer anonymity\" should be added\r\n   <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/521>\r\n\r\nThe current Section 10.5 gives a mitigation.  Some entity has to be\r\naccountable.  It is extremely difficult to hold an anonymous entity\r\naccountable.\r\n\r\n   - #520 Section 10.3 (Confidentiality during Transport) should also\r\n   mention integrity\r\n   <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/520>\r\n\r\nThe SD-JWT itself is signed, which handles the integrity requirement.  In\r\naddition, modern TLS implementations provide Confidentiality and Integrity\r\nby default.\r\n\r\n   - #519 Since claims always contain privacy-sensitive data section 10.2\r\n   would need to be reworded\r\n   <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/519>\r\n\r\nSince this is a \u2018SHOULD NOT\u2019, it leaves the option for other actions.\r\n\r\n   - #518 Holders SHOULD NOT be required to store SD-JWTs \"only in\r\n   encrypted form\"\r\n   <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/518>\r\n\r\nThe statement is a SHOULD, it leaves the option for other protection as an\r\noption.\r\n\r\n   - #517 Section 10.2 should be made more general to consider both the\r\n   storage of signed and un-signed data\r\n   <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/517>\r\n\r\nIt is appropriate for this draft to handle SD-JWT data.  It is completely\r\nobvious that unsigned sensitive data should be protected.  No need for that\r\nto be specified here.\r\n\r\n   - #515 The term \"unlinkability\" is overloaded. For more clarity, the\r\n   wording \"End-user intrackability\" should be used in addition\r\n   <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/515>\r\n\r\nNo action.  Making up new terms here isn\u2019t terribly useful.\r\n\r\n   - #516 A new section about \"End-User intrackability\" should be added\r\n   <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/516>\r\n\r\nHow end-users interact with Holders (and every other part of this) is an\r\nimplementation detail.  SD-JWT is merely the format.\r\n\r\n   - #514 A section should be added to consider the case of a presentation\r\n   of claims to Verifier that have been issued by different Issuers\r\n   <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/514>\r\n\r\nThis looks like an implementation decision to me.  The SD-JWT draft\r\nspecifies the format, how it is used is determined by the implementation.\r\n\r\n   - #513 Section 9.5 (Key Binding) needs to be revised to consider the\r\n   case of a collusion between End-Users\r\n   <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/513>\r\n\r\n*This is an implementation issue.  Only one point do I agree with \u2013\r\n\u2018legitimate\u2019 is not provable.  It should merely be removed from the section.\r\n\r\n   - #512 Section 7.3 needs to be revised to describe which data structures\r\n   can be transmitted\r\n   <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/512>\r\n\r\nSection 7.3: As this section stands, the terminology is correct.\r\n\r\n   - #507 It is important to mention the use of decoy digests and of the\r\n   shuffling of the digests included in the SD-JWT payload\r\n   <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/507>\r\n\r\nSection 4.2.1 and 4.2.2: It is unclear why one would include this text\r\nbefore Section 4.2.5, where decoy digests are discussed.  In addition, this\r\nguidance appears to be better applied to a specific implementation.\r\n\r\n   - #511 The requirement for an Issuer of not providing a SD-JWT+KB-JWT\r\n   should be removed\r\n   <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/511>\r\n\r\nLines 1521-1522: It is up to an implementation to determine where the key\r\nbinding key pair is generated.  In the case that the Issuer issues it, then\r\nit is wise for the Holder to verify that it has received just the SD-JWT\r\n(in this case, the private/public key pair has to be transmitted to the\r\nholder, but that is out of scope for this draft).  In the case that the\r\nHolder, or other entity generates the key pair, then it is less likely that\r\nthe Issuer could construct the KB-JWT.  It is still a trivial check and\r\nworth doing for completeness.\r\n\r\n   - #510 Verification steps for the KB-JWT are missing in section 7.1\r\n   <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/510>\r\n\r\nSection 7.1: Right, they are in Section 7.3 (as stated in Section 4.3).\r\n\r\n   - #509 Validation steps for the KB-JWT are missing\r\n   <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/509>\r\n\r\nLines 880-893: As stated in the section, the verification steps and details\r\nare located in Section 7.3.\r\n\r\n   - #508 The iat time at which the Key Binding JWT was issued should not\r\n   be REQUIRED\r\n   <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/508>\r\n\r\nLines 850-852: I disagree.  Depending on how long a nonce is kept by the\r\nsystem that generates it, the time that the KB JWT was issued allows\r\nanother option to prevent replay.\r\n\r\n   - #506 How the Holder key pair is established cannot be placed \"out of\r\n   the scope of this document\"\r\n   <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/506>\r\n\r\n*Lines 534-538: I believe this is Section 4.1.2: Better to list this as\r\n\u2018out of scope\u2019 than to do a half way job of laying out the requirements.\r\nNote:  the replacement text has nothing close to the list of requirements\r\nthat would need to be levied to ensure secure key pair generation, let\r\nalone how those key pairs are handled, stored, and maintained from birth to\r\ndeath.  Again, this is a format, not an implementation.  This should be\r\nadded to security considerations (if it is not already there).\r\n\r\n   - #505 Add an example of using arrays for \"age_over\" and \"age_under\"\r\n   claims\r\n   <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/505>\r\n\r\nSection 4.2.2: The appendices are a better place for these.  I believe\r\nthere are some examples there already.\r\n\r\n   - #504 It would be worth to mention that the Issuer decides which claims\r\n   are always disclosed\r\n   <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/504>\r\n\r\nLines 489-490: This comment makes the text repetitive (either by the\r\nnumbered list above this or that para after.\r\n\r\n   - #503 The description of the SD-JWT+KB is confusing\r\n   <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/503>\r\n\r\nLines 380-382: Note: this comment was addressed in Github\r\n\r\n   - #502 The description of the SD-JWT can be improved\r\n   <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/502>\r\n\r\nLines 375-376: Is the issue whether zero Disclosures is appropriate?  If\r\nso, why?  The comment doesn\u2019t state a reason.\r\n\r\n   - #501 The benefits of the nonce and of the audience value can be made\r\n   more accurate\r\n   <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/501>\r\n\r\nLines 348-350: Where the nonce comes from is an implementation detail (it\r\nis listed as out of scope in Section 4.3).   Draft 14 has \u2018verifier\u2019 in\r\nplace of \u2018audience\u2019 already.\r\n\r\n   - #500 The data elements sent to the Verifier are not correctly defined\r\n   <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/500>\r\n\r\nLines 327-331: Note there is only one para, and one sentence.  It is\r\nunclear where the commenter wants the change made.   [The addition of\r\nend-user implies implementation.]\r\n\r\n   - #499 The format used to carry both the SD-JWT and the Disclosures is\r\n   unclear\r\n   <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/499>\r\n\r\n*Lines 318-320:  This can be easily clarified by changing \u2018Holder as part\r\nof the SD-JWT\u2019 to \u2018Holder with the SD-JWT\u2019\r\n\r\n\u00b7         #529  43. Update of Issue #514 (new section 9.12) for the support\r\nof Post Quantum cryptography #529\r\n        https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/529\r\n\r\nThis draft does not specify the selection of the algorithm used for signing\r\neither SD-JWT or SD-JWT-KB.  It does point to \u201cdigital signature algorithm\r\nidentifier\u201d such as per IANA JSON Web Signature and Encryption Algorithms\r\nregistry, and it does specify that it MUST NOT be \u2018NONE\u2019.  When the JOSE\r\nworking group specifies post quantum signature algorithms, then they will\r\nbe available to be used to sign SD-JWT.\r\n\r\n\r\n\r\nOn Wed, Nov 27, 2024 at 1:56\u202fPM Denis [<denis.ietf@free.fr>](mailto:&lt;denis.ietf@free.fr&gt;) wrote:\r\n\r\n> Dear Security Area Director,\r\n>\r\n> Please consider this email as a Formal appeal acc. Section 6.5 of IETF\r\n> Directives on Internet Standards Process (RFC 2026).\r\n>    A person who disagrees with a Working Group recommendation shall always\r\n> first discuss the matter with the Working Group\u2019s chair(s),\r\n>    who may involve other members of the Working Group (or the Working\r\n> Group as a whole) in the discussion.\r\n>\r\n> I discussed the matter with the Working Group\u2019s chair(s) and since my\r\n> concerns have not been addressed to my satisfaction\r\n> by the co-chairs, I am making a Formal appeal to you in your quality of\r\n> IETF SEC Area Director.\r\n>\r\n> As you will see below, I have reviewed in detail\r\n> draft-ietf-oauth-selective-disclosure-jwt-14.\r\n>\r\n> During the first WGLC, my comments have been ignored and ignored, once\r\n> again, during the second WGLC.\r\n>\r\n> During the second WGLC, I raised 41 issues on github and they have been\r\n> promptly closed by one of the co-editors\r\n> to prevent discussions.\r\n>\r\n> I don't believe that it is a fair process. I am a former co-editor of\r\n> several RFCs (my first one was RFC 3161)\r\n> and when I was in this position I used to address and respond to all the\r\n> comments made by the WG participants.\r\n>\r\n> I am involved in ISO JTC 1 SC 27 (Information security, cybersecurity and\r\n> privacy protection) and I do know that the process is different,\r\n> In ISO JTC 1, when a comment is made after a call for comments, a proposed\r\n> Doc (Disposition of Comments) is prepared and then\r\n> discussed during a meeting. All the comments need to be answered and, for\r\n> each comment that is not accepted, a rational must be given.\r\n>\r\n> Some of the issues I raised are editorials. They have not even been\r\n> considered. Many other issues are major.\r\n> My most important concerns are indicated at the very end of this email\r\n> and, for your convenience, are copied below:\r\n>\r\n>     1) The format of the SD-JWT that is currently described in -14 is INSECURE\r\n> as it is unable to counter End-Users collaborative attacks.\r\n>         This type of attack is ignored in the \"Security Considerations\"\r\n> section and thus is not considered / addressed within the document.\r\n>         Collusion attacks exist both for Verifiers and End-Users. This\r\n> topic relates to issue #485.\r\n>\r\n>     2) The key management protocol that is currently described in -14 DOES\r\n> NOT support the \"Verifier-Verifier unlinkability\" property.\r\n>\r\n>     3) The cryptographic algorithm which is currently used by the Holder\r\n> and is described in -14 is NOT Post-Quantum resistant,\r\n>          whereas it can be made Post-Quantum resistant. This is important\r\n> in the context of algorithm agility.\r\n>\r\n> Since this draft is already mentioned in the ARF (version 1.4.1) of the\r\n> EUDI wallet, its content will be rather important.\r\n>\r\n> If draft-ietf-oauth-selective-disclosure-jwt were adopted \"as it is\", this\r\n> would be a protocol that would allow Verifiers\r\n> to link their user accounts (which is a privacy concern) and would not\r\n> allow Verifiers to detect users collaborative attacks\r\n> (which is a security concern).\r\n>\r\n> FYI, none of the OAuth virtual meetings scheduled by the co-chairs in the\r\n> next months will be dedicated to draft-ietf-oauth-selective-disclosure-jwt.\r\n> Best regards,\r\n>\r\n> Denis PINKAS\r\n>\r\n> President of DP Security Consulting SAS (France)\r\n>\r\n> PS. Please, would you acknowledge the receipt of this email ?\r\n>\r\n\r\nsnip....\r\n```",
          "createdAt": "2024-12-12T15:00:51Z",
          "updatedAt": "2024-12-12T15:01:36Z"
        }
      ]
    },
    {
      "number": 529,
      "id": "I_kwDOHTmVzM6e14y-",
      "title": "Update of Issue #514 (new section 9.12) for the support of Post Quantum cryptography",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/529",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "pending-close"
      ],
      "body": "A section should be added to consider the case of a presentation of claims to Verifier that have been issued by different Issuers #514\r\n\r\n```\r\n9.12. Presentation of claims issued by different Issuers\r\n\r\n9.12.1 Using conventional cryptography\r\n\r\n    There exist use cases where claims issued by different Issuers need\r\n    to be presented to one Verifier. For example, an End-User would like\r\n    to demonstrate to a Verifier that that he lives in California using\r\n    a SD-JWT issued by a governmental organization and that he got a\r\n    specific diploma using a SD-JWT issued by a University.\r\n\r\n    When there is a need to demonstrate to a Verifier that two SD-JWTs\r\n    have been issued to the same End-User, the Holder can generate a one-time\r\n    key pair and use the same private key to request a SD-JWT from each\r\n    Issuer.\r\n\r\n    The two issued SD-JWTs will contain the same public key and, using\r\n    the corresponding private key, the Holder will be able to demonstrate\r\n    to one Verifier that the two presentations of the two SD-JWTs originate\r\n    from the same Holder.\r\n\r\n    Verifiers MUST be able to obtain the characteristics of the Holder\r\n    to be confident that Holder indeed supports this scheme in a secure way.\r\n\r\n    Since that key pair will only be used once towards a single Verifier,\r\n    a linkage between different collaborative Verifiers using the framing\r\n    of the SD-JWT will not be possible.\r\n\r\n    This scheme mandates to the generation of batches of one-time use SD-JWTs.\r\n\r\n9.12.1 Using Post-Quantum resistant cryptography\r\n\r\n    The technique previously described uses conventional cryptography which is not \r\n    Post-Quantum resistant. Hash-Based signature schemes are believed to be \r\n    Post-Quantum resistant. \r\n\r\n    Their security depends on the infeasibility of finding a preimage or a second preimage. \r\n\r\n    In 1979, Leslie Lamport invented the first One-Time Signatures (OTS) scheme \r\n    that was named the \"Lamport Signature\". Since then, many variations appeared. \r\n\r\n    Among them, the Winternitz OTS (W-OTS) scheme that allows small verification key sizes \r\n    and a trade-of between the signature size and the signature generation time.\r\n\r\n    OTS schemes have a major constrain ... which is not a constrain in the context of a Holder: \r\n    the private key of a key pair shall only be used once. If used twice, 50 % of the private key \r\n    would be revealed.  When an OTS scheme is used, this means that, the private key\r\n    corresponding to the public key placed into a SD-JWT shall only be used once.\r\n \r\n    When presenting a single SD-JWT to a Verifier, the following structure is used.\r\n````\r\nSD-JWT + Selected Disclosures + KB-JWT\r\n\r\n```\r\n    When presenting a two SD-JWTs to a Verifier, the following structure SHALL not be used.\r\n\r\n```\r\nSD-JWT1 + Selected Disclosures1 + KB-JWT1\r\nSD-JWT2 + Selected Disclosures2 + KB-JWT2\r\n\r\n```\r\n    since two digital signatures would be required.  Instead the following structure SHALL be used:\r\n\r\n```\r\nSD-JWT1 + Selected Disclosures1 + SD-JWT2 + Selected Disclosures2  + KB-JWT\r\n\r\n```\r\n\r\n    When using ordinary hash-functions, it can be observed that it is already possible to implement, \r\n    in a Holder, a key binding technique that can be Post-Quantum resistant and which supports \r\n    the \"Verifier-Verifier unlinkability\" property. \r\n\r\n\r\n\r\n\r\n",
      "createdAt": "2024-11-16T20:57:41Z",
      "updatedAt": "2025-01-09T19:05:14Z",
      "closedAt": "2025-01-09T19:05:14Z",
      "comments": [
        {
          "author": "Denisthemalice",
          "authorAssociation": "NONE",
          "body": "This issue contains two different topics that should be clearly separated\r\n.\r\nFor the first topic, the following text is proposed:\r\n\r\n> **_9.12. Presentation of claims issued by different Issuers_**\r\n> \r\n>     There exist use cases where claims issued by different Issuers need\r\n>     to be presented to one Verifier. For example, an End-User would like\r\n>     to demonstrate to a Verifier that that he lives in California using\r\n>     a SD-JWT issued by a governmental organization and that he got a\r\n>     specific diploma using a SD-JWT issued by a University.\r\n> \r\n>     When there is a need temonstrate to a Verifier that two SD-JWTs\r\n>     have been issued to the same End-User, the Holder can generate a \r\n>     key pair and use the same private key to request a SD-JWT from each\r\n>     Issuer.\r\n> \r\n>     The two issued SD-JWTs will contain the same public key and, using\r\n>     the corresponding private key, the Holder will be able to demonstrate\r\n>     to one Verifier that the two presentations of the two SD-JWTs originate\r\n>     from the same Holder.\r\n> \r\n>     Since the key pair will only be used once towards a single Verifier,\r\n>     a linkage between different collaborative Verifiers using the framing\r\n>     of the SD-JWT will not be possible. \r\n>     \r\n>     Verifiers SHOULD be able to obtain the characteristics of the Holder\r\n>     to be confident that the Holder indeed supports this scheme in a secure way.\r\n> \r\n> \r\nFor the second topic, the following text is proposed:\r\n\r\n> **_9.13 Post-Quantum resistance of the key binding algorithm_**\r\n>  \r\n> This document does not mandate the use of any cryptographic algorithm and only forbids the use of the NONE algorithm.\r\n>  \r\n> If the issuance of batches of SD-JWTs is supported and if each issued SD-JWT is used only once, then it is possible to use \r\n> One-Time Signature (OTS) algorithms. When such algorithm is built using hash functions, then the algorithm can be \r\n> considered to be Post-Quantum resistant.\r\n>  \r\n> As an example, the \"Lamport Signature\" described by in 1979 by Leslie Lamport can be used.\r\n> \r\n> Nowadays, this algorithm is no more used and the state of the art is to use the Winternitz OTS (W-OTS) scheme that allows\r\n> small verification key sizes and to choose a trade-of between the signature size and the signature generation time.\r\n\r\n ",
          "createdAt": "2024-12-18T16:50:16Z",
          "updatedAt": "2024-12-18T16:50:16Z"
        }
      ]
    },
    {
      "number": 530,
      "id": "I_kwDOHTmVzM6fi3Ip",
      "title": "Missing procedures for Holder to validate disclosures received from Issuer",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/530",
      "state": "CLOSED",
      "author": "rohanmahy",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "In Section 7.2 \"Processing by the Holder\" there is no mention of the validation that a Holder needs to do to validate an Issued SD-JWT. The holder needs to a) look at all the disclosures and validate that the claims are acceptable to the Holder (the Issuer isn't claiming something incorrect), and b) make sure that there is a disclosure for each claim object after recursively replacing any `_sd` object or in any object with the reserved object key with its disclosed claim.",
      "createdAt": "2024-11-20T17:55:23Z",
      "updatedAt": "2025-01-16T17:42:57Z",
      "closedAt": "2025-01-16T17:42:57Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "7.2 is in addition to the checks in 7.1, just like 7.3.\r\n7.3 says\r\n> Upon receiving a presentation from a Holder, in the form of either an SD-JWT or an SD-JWT+KB, in addition to the checks outlined in [Section 7.1](https://drafts.oauth.net/oauth-selective-disclosure-jwt/draft-ietf-oauth-selective-disclosure-jwt.html#sd_jwt_verification), Verifiers need to ensure that\r\n\r\nbut 7.2 can be clearer on this. will clarify this.",
          "createdAt": "2024-11-28T17:15:47Z",
          "updatedAt": "2024-11-28T17:15:54Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-14.html#section-7.1-4.5 in 7.1 covers (I think) \"b)\". And \"a)\" would be an implementation choice/detail that could maybe be mentioned but wouldn't be a normative requirement. ",
          "createdAt": "2024-12-12T23:27:01Z",
          "updatedAt": "2024-12-12T23:29:00Z"
        },
        {
          "author": "rohanmahy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-14.html#section-7.1-4.5 in 7.1 covers (I think) \"b)\". And \"a)\" would be an implementation choice/detail that could maybe be mentioned but wouldn't be a normative requirement.\r\n\r\nRegarding steps 4 and 5, I think these are just plain wrong in the Holder verification case. These steps should be moved from 7.1 to 7.3. If the Holder does not have all the disclosures, they shouldn't use the SD-JWT. It is meaningless to say the Holder *removes* array elements and `_sd` keys from the payload, (because they can't send a payload to the Verifier without these elements). The Holder also cannot check for kleptographic attacks where the  Issuer and Verifier collude.\r\n\r\nI don't see why we would argue about a). It is probably a single sentence in 7.2, something like: \"The Holder verifies that the disclosures it receives from the Issuer are acceptable to the Holder.\" If the policy of the Holder is that any disclosure asserted by the Issuer is ok, then it is still complying with the sentence. However it is an important reminder that there is something important to check here. The idea that the Holder may not always and completely trust the Issuer will be new to many readers.",
          "createdAt": "2024-12-13T17:42:46Z",
          "updatedAt": "2024-12-13T17:42:46Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I generally agree, but I also think you're contradicting yourself: The holder needs to perform all the steps including removing clutter from the payload in order to verify the claims. \r\n\r\nI filed PR #541 in an attempt to address this issue. I clarified that the holder runs these steps to extract the payload and I added a sentence saying that the holder must verify the payload, although that is really hard to make actionable.",
          "createdAt": "2025-01-13T11:20:38Z",
          "updatedAt": "2025-01-13T11:20:38Z"
        }
      ]
    },
    {
      "number": 531,
      "id": "I_kwDOHTmVzM6fl0o-",
      "title": "Small (and optional) editorial SD-JWT+KB's spec suggestion: remove whitespace from examples of JSON serialization ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/531",
      "state": "CLOSED",
      "author": "samuelgoto",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "pending-close"
      ],
      "body": "> I couldn't find where to file issues for the SD-JWT+KB, so sending this here -- feel free to ignore this or ask me to move it to a more appropriate please\r\n\r\n> I initially filed this here https://github.com/openid/OpenID4VP/issues/325 and moved it here.\r\n\r\nJust a small note, as I was reading along the SD-JWT+KB and ran into a problem implementing this section:\r\n\r\nhttps://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-13.html#section-4.2.1-2.2\r\n\r\nThe problem is that in this section, my JSON serializer (and I think, most people's web-based JSON.stringy()-based serializer) removes white space between\u00a0array elements.\u00a0\r\n\r\nSo, I was getting `[\"_26bc4LT-ac6q2KI6cBW5es\",\"family_name\",\"M\u00f6bius\"]` rather than `[\"_26bc4LT-ac6q2KI6cBW5es\", \"family_name\", \"M\u00f6bius\"]`, which base64url encodes to `WyJfMjZiYzRMVC1hYzZxMktJNmNCVzVlcyIsImZhbWlseV9uYW1lIiwiTcO2Yml1cyJd` rather than `WyJfMjZiYzRMVC1hYzZxMktJNmNCVzVlcyIsICJmYW1pbHlfbmFtZSIsICJNw7ZiaXVzIl0` as is in the example. \r\n\r\nSince it wasn't matching what was in the spec, I had to debug for a while before I convinced myself that my implementation was valid, so figured other people would too.",
      "createdAt": "2024-11-20T23:22:44Z",
      "updatedAt": "2024-12-23T22:11:10Z",
      "closedAt": "2024-12-23T22:11:10Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "As mentioned over on https://github.com/openid/OpenID4VP/issues/325 there are a ton of other arrays in that draft that also have space between elements. And that's unlikely to change. One of the main reasons for the base64url encoded stuff as the input to integrity calculations is the tolerance for (or really just not having to deal with at all) different JSON representations that are semantically equivalent. Whatever JSON serializer the [SD-JWT Reference Implementation](https://github.com/openwallet-foundation-labs/sd-jwt-python) that generates nearly all the examples in the aspiring RFC uses seems to like spaces between array elements. And that's okay. ",
          "createdAt": "2024-12-18T21:33:34Z",
          "updatedAt": "2024-12-18T21:33:34Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "\"thanks! feel free to close as WAI if that's useful.\" - @samuelgoto in a conversation on slack ",
          "createdAt": "2024-12-23T22:11:10Z",
          "updatedAt": "2024-12-23T22:11:10Z"
        }
      ]
    },
    {
      "number": 532,
      "id": "I_kwDOHTmVzM6fmDj8",
      "title": "SD-JWT Parser requires saving the base64 encoded values?",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/532",
      "state": "CLOSED",
      "author": "samuelgoto",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "I ran into this problem while writing a parser for SD-JWT and a presenter that does the -KB parts. I'm not sure if this is a real problem,  but figured I should ask here.\r\n\r\nI'm not sure if I did this correctly, but I think I couldn't find a way to avoid saving the base64 encoded values to reconstruct the SD-JWT and present it, because the JSON serialization isn't normalized (somewhat related to #531, except I don't think this is just a small and editorial problem, but an ergonomic one).\r\n\r\nHere are some steps on how to reproduce the problem I'm facing preparing a sd-jwt for presentation:\r\n\r\n1) Get an `sd-jwt`\r\n2) Parse the the `sd-jwt` into a `jwt` + `disclosures`\r\n3) Check that the holder's `key` is inside of the `jwt.cnf`\r\n4) Select `some` of the `disclosures` for disclosure\r\n5) Puts together the `jwt` + `some`\r\n6) Constructs a `kb` jwt with the holder's `key`\r\n\r\nIn step (5), you can't serialize back the `jwt` from a parsed structure (e.g. JSON), because the parsing is non-invertible: you can't parse and serialize and go back to necessarily the same value, because of #531. So, that means, that, in step (2), you have to parse the `sd-jwt` but *also* keep the original base64url encoded value of the jwt, because you can't reconstruct it from a parsed structure.\r\n\r\nBeing opinionated about how JSON serialization is done (e.g. requiring the removal of whitespace) would make (i think) the parsing invertible and solve this problem.\r\n\r\nApologies for not being able to articulate this more clearly, but wanted to send this out in case someone is able to spot something wrong I might be doing while implementing a parser.\r\n\r\nThe environment in which I'm doing this is likely way more convoluted than an average holder , so it is also possible that even if this is a problem it could be marked as \"not important enough because there are very few holders would run into this being a problem\".",
      "createdAt": "2024-11-20T23:36:35Z",
      "updatedAt": "2024-12-23T22:10:56Z",
      "closedAt": "2024-12-23T22:10:56Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "The requirement to save the various base64url parts (really the issuer-signed JWT and each of the disclosures) in order to [re]construct the SD-JWT[+KB] and present it is absolutely just a fundamental part of how this stuff works. It builds on and reuses constructs from JWS and JWE that recognize JSON's nondeterminism and avoids the complexities, interoperability problems, and security pitfalls of canonicalization by just base64url encoding and calculating integrity (signature, mac, hash) over that. \r\n\r\nThere is undoubtedly some historical context and understanding here that isn't necessarily conveyed in this draft. But we've tried. https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-14.html#name-disclosure-format-considera for example has some treatment of these concepts. And statements like the one https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-14.html#section-4.2.3-2 try too. \r\n\r\nI'd be open to ideas about how to better convey these ideas. Within reason, of course. And also with consideration that the document in question has past last call (twice!).\r\n\r\n\r\n\r\n",
          "createdAt": "2024-12-18T23:46:54Z",
          "updatedAt": "2024-12-18T23:46:54Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "\"thanks! feel free to close as WAI if that's useful.\" - @samuelgoto in a conversation on slack ",
          "createdAt": "2024-12-23T22:10:56Z",
          "updatedAt": "2024-12-23T22:10:56Z"
        }
      ]
    },
    {
      "number": 534,
      "id": "I_kwDOHTmVzM6kkLRA",
      "title": "text for privacy considerations",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/534",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "\"[What exactly am I supposed to do with that](https://mailarchive.ietf.org/arch/msg/oauth/iUvTckt1s7aIU-mH-7mQBWoJgQQ/)\" is a question I have asked myself too. [This thread](https://mailarchive.ietf.org/arch/msg/oauth/v6tb-7l_9lT5ZJd4wecwWcE7h-Q/) is trying to move in a direction that folks can maybe live with.   ",
      "createdAt": "2024-12-27T14:25:07Z",
      "updatedAt": "2025-01-16T18:09:36Z",
      "closedAt": "2025-01-16T18:09:36Z",
      "comments": []
    },
    {
      "number": 536,
      "id": "I_kwDOHTmVzM6luMHm",
      "title": "It is outside of the scope of this document to appraise the effectiveness of the Key Binding mechanism",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/536",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "This issue is only intended to provide explanations for further text change proposals made in subsequent issues related to Key Binding. \r\n\r\nSection 4.1.2 (Key binding) states:\r\n\r\n> It is out of the scope of this document to describe how the Holder key pair is established. For example, the Holder MAY create a key pair and provide a public key to the Issuer, the Issuer MAY create the key pair for the Holder, or Holder and Issuer MAY use pre-established key material.\r\n\r\nLet us keep these sentences unchanged.\r\n\r\nNow, let us pull on the thread from the right end. \r\n\r\nSection 4 (Security Considerations) from [RFC7800] mentions that \"possessing a key is only valuable if it is kept secret.  Appropriate means must be used to ensure that unintended parties do not learn private key\".\r\n\r\nIt is important to recall a definition for a private key from ISO/IEC 9798-1:\r\n\r\n> private key\r\n> key of an entity's asymmetric key pair that is kept secret and that should only be *used* by that entity\r\n> \r\n> [SOURCE: ISO/IEC 9798-1:2010, 3.22]\r\n\r\nThe key sentences from RFC 7800 are true, but are restricted. They concentrate of the *protection* and the *knowledge* of the private key but they do not consider the *use* of the private key.\r\n\r\nA smart card user can *use* of private present in his smart card but will never be able to know its value.\r\n\r\nA difference should be made between :\r\n1) the description of the cryptographic mechanism and\r\n2) what can be achieved using this mechanism which is conditional on \"appropriate means that MUST be used to ensure that unintended parties do not learn private key\".\r\n\r\nThe proposed rewordings of this draft have been carefully thought to refer first to the description of the data elements that are needed and exchanged, while the 'proof of possession' concept has been separately addressed and expanded.\r\n\r\nWhen considering threats that can reduce to nothing the effectiveness of this cryptographic (\"binding\") mechanism, there is the need to consider the presence of End-Users, that come in addition to Holders which are applications running using some hardware (and usually also using an OS). \r\n\r\nAn Holder cannot \"give its consent\", but an End-user (i.e. a human being) can. Attacks can be performed either without or with the End-user consent. Hence there is the need to : \r\n(1) use the term \"End-User\" and \r\n(2) make a difference between the term \"Holder\" (application) and the term \"End-User\".\r\n\r\nThe way to address the problem of the appraisal of the effectiveness of the Key Binding mechanism is to recognize that it is outside the scope of this document to specify how Verifiers can know whether appropriate means are effectively used to ensure that unintended parties do not learn the value of the private keys or whether the private keys that are supposed to be under the control of the Holder cannot be used for the benefit of other End-Users (with or without the End-User consent).\r\n\r\nWhen proposing revised text, terms like 'ensure', 'legitimate Holder' or 'prove possession' that were present in this draft have been avoided. Hence, the following two sentences have not been retained:\r\n\r\n> Key Binding aims to ensure that the presenter of an SD-JWT credential is actually the legitimate Holder of the credential. \r\n> The Verifier requires that the Holder prove possession of that private key when presenting the SD-JWT credential.\r\n",
      "createdAt": "2025-01-10T14:43:06Z",
      "updatedAt": "2025-01-31T16:09:32Z",
      "closedAt": "2025-01-31T16:09:32Z",
      "comments": []
    },
    {
      "number": 537,
      "id": "I_kwDOHTmVzM6luO_A",
      "title": "Proposed rewording in Section 1 about Key Binding",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/537",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "In clause 1, the following sentences are present:\r\n\r\n> To prevent attacks in which an SD-JWT is presented to a Verifier without the Holder's consent, this specification additionally defines a mechanism for binding the SD-JWT to a key under the control of the Holder (Key Binding). When Key Binding is enforced, a Holder has to prove possession of a private key belonging to a public key contained in the SD-JWT itself.\r\n\r\n\r\nReplace with:\r\n\r\n> This specification defines a mechanism for binding the SD-JWT to a key that is assumed to be under the control of the Holder (Key Binding). When Key Binding is enforced, the Verifier can verify that a private key corresponding to a public key that has been included by the Issuer into the SD-JWT has correctly been used to compute a cryptographic checksum that is placed into a KB-JWT.\r\n\r\nTerms like 'Holder's consent' or 'prove possession of a private key' that were present in this draft have been avoided.\r\n\r\n",
      "createdAt": "2025-01-10T14:48:04Z",
      "updatedAt": "2025-01-31T16:09:33Z",
      "closedAt": "2025-01-31T16:09:33Z",
      "comments": []
    },
    {
      "number": 538,
      "id": "I_kwDOHTmVzM6luPi9",
      "title": "Proposed rewording in Section 1.2 about Key Binding",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/538",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Clause 1.2 states:\r\n\r\n> Key Binding:\r\n> Ability of the Holder to prove legitimate possession of an SD-JWT by proving control over a private key during the presentation. When utilizing Key Binding, an SD-JWT contains the public key corresponding to the private key controlled by the Holder (or a reference to this public key).\r\n\r\nChange into:\r\n\r\n> Key Binding:\r\n> When utilizing Key Binding, an SD-JWT contains the public key corresponding to the private key controlled by the Holder (or a reference to this public key). In that case, the Verifier can verify that a private key corresponding to a public key that has been included by the Issuer into the SD-JWT has correctly been used to compute a cryptographic checksum.\r\n",
      "createdAt": "2025-01-10T14:49:12Z",
      "updatedAt": "2025-01-31T16:09:33Z",
      "closedAt": "2025-01-31T16:09:33Z",
      "comments": []
    },
    {
      "number": 539,
      "id": "I_kwDOHTmVzM6luWNQ",
      "title": "Proposed rewording for Section 9.5 about Key Binding",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/539",
      "state": "CLOSED",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The first sentence which uses the word \"legitimate\" is inappropriate:\r\n\r\n> Key Binding aims to ensure that the presenter of an SD-JWT credential is actually the legitimate Holder of the credential.\r\n\r\nThe third sentence uses the wording \"prove possession\" which should be avoided:\r\n\r\n> The Verifier requires that the Holder prove possession of that private key when presenting the SD-JWT credential.\r\n\r\nAs said earlier, it is important to make the difference between :\r\n(1) the description of the cryptographic mechanism and \r\n(2) what can really be achieved using this mechanism which is conditional to other characteristics which are out of the scope of this document.\r\n\r\nBefore proposing a rewriting for Section 9.5 on Key Binding, the following text has been reviewed and after analysis, it is proposed to remove it.\r\n\r\n> It is important that a Verifier does not make its security policy decisions based on data that can be influenced by an attacker. For this reason, when deciding whether Key Binding is required or not, Verifiers MUST NOT take into account whether the Holder has provided an SD-JWT+KB or a bare SD-JWT, since otherwise an attacker could strip the KB-JWT from an SD-JWT+KB and present the resulting SD-JWT. Furthermore, Verifiers should be aware that Key Binding information may have been added to an SD-JWT in a format that they do not recognize and therefore may not be able to tell whether the SD-JWT supports Key Binding or not. If a Verifier determines that Key Binding is required for a particular use case and the Holder presents either a bare SD-JWT or an SD-JWT+KB with an invalid Key Binding JWT, then the Verifier will reject the presentation when following the verification steps described in Section 7.3.\r\n> \r\n> If a SD-JWT contains a public key, then this means that a KB-JWT must also be present. If the KB-JWT has been stripped, then the Verifier must refuse it.\r\n\r\nTherefore, the following rewording is proposed:\r\n\r\n> An SD-JWT compatible with Key Binding contains a public key, or a reference to a public key, that corresponds to a private key from a key pair. \r\n> \r\n> Without Key Binding, a Verifier only gets the proof that the credential was issued by a particular Issuer, but the credential itself can be replayed by anyone who gets access to it. This means that, for example, after a credential was leaked to an attacker, the attacker can present the credential to any verifier that does not require a binding. But also a malicious Verifier to which the Holder presented the credential can present the credential to another Verifier if that other Verifier does not require Key Binding. \r\n> \r\n> With Key Binding, a Verifier gets the proof that the private key which corresponds to the public key placed in the SD-JWT has been correctly used.\r\n> \r\n> Verifiers MUST decide whether Key Binding is required for a particular use case before verifying a credential. This decision can be informed by various factors including, but not limited to the following: business requirements, the use case, the type of binding between a Holder and its credential that is required for a use case, the sensitivity of the use case, the expected properties of a credential, the type and contents of other credentials expected to be presented at the same time, etc.\r\n> \r\n> If Key Binding is required, then the Verifier must verify that the SD-JWT that is presented contains a public key and that a KB-JWT is also present.\r\n\r\n> Section 4 (Security Considerations) from [RFC7800] indicates that possessing a key is only valuable if it is kept secret.  Appropriate means must be used to ensure that unintended parties do not learn private key.\r\n> \r\n> The key sentences from RFC 7800 are true, but are restricted. They concentrate of the *protection* and the *knowledge* of the private key but they do not consider the *use* of the private key.\r\n> \r\n> It is important to recall a definition for a private key from ISO/IEC 9798-1:\r\n> \r\n> private key\r\n> key of an entity's asymmetric key pair that is kept secret and that should only be *used* by that entity\r\n> \r\n> [SOURCE: ISO/IEC 9798-1:2010, 3.22] \r\n\r\n> Using the current content of a SD-JWT, Verifiers are unable to appraise the effectiveness of the Key Binding mechanism.  It is outside the scope of this document to specify how Verifiers can know whether appropriate means are effectively used to ensure that unintended parties do not learn the value of the private keys or whether the private keys that are supposed to be under the control of the Holder cannot be used for the benefit of other End-Users, with or without the End-User consent.\r\n> \r\n> 9.5.1 Attacks performed with the End-user consent\r\n> \r\n> If two End-Users accept to collaborate, one End-User can perform cryptographic computations for the benefit of another End-User. An example scenario is as follows: one End-user connects to a Verifier and receives back a challenge and a list of claim types that need to be presented to get an access. That End-User forwards to another End-User the challenge received from the Verifier, the name of the Verifier and the set of claim types and values that it wishes to present to the Verifier. It receives back from the other End-User the data structure that he needs to get an access to that Verifier and so the End-User can present it to the Verifier and gets the access.\r\n> \r\n> For example, an application specifically downloaded by the End-User can perform cryptographic computations for the benefit of another End-User, if it is able to use the private keys. As another example, impersonation of the End-User can be achieved if private keys can be exported with the End-user consent and used by another End-User.\r\n> \r\n> 9.5.2 Attacks performed without the End-user consent\r\n> \r\n> A malicious application would be able to use the private keys intended to be used by the Holder or be able to trick the key pair generation process used by the Holder. \r\n> \r\n> As an example, if the private key is only protected by software, a virus would be able use the private key without the End-User being aware of it. Alternatively, the key pair generation process could be modified, so that the generated key pair can be known by malicious application and then exported.\r\n> ",
      "createdAt": "2025-01-10T15:02:34Z",
      "updatedAt": "2025-01-31T16:09:14Z",
      "closedAt": "2025-01-31T16:09:14Z",
      "comments": []
    },
    {
      "number": 545,
      "id": "I_kwDOHTmVzM6oJLih",
      "title": "[KB-JWT] exp recommended?",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/545",
      "state": "OPEN",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "pending-close"
      ],
      "body": "In section 4.3 of the OAuth Selective Disclosure JWT draft, we have a proper definition of all the required claims.\n\nConsidering that the kb-jwt is signed, what do you think about including `exp` as a required or recommended claim?\n\nI have found some implementations using `exp` due to the sensitivity of some implementers who treat signed JWS as artifacts that always require an expiration.\n\nIf `exp` must not be considered in the set of claims documented as recommended or required in this specification, this issue would offer guidance to those developers.",
      "createdAt": "2025-01-30T14:25:35Z",
      "updatedAt": "2025-02-06T08:11:32Z",
      "closedAt": null,
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Ciao Giuseppe,\n\nThe acceptable lifetime of a KB-JWT is constrained by the iat claim https://datatracker.ietf.org/doc/html/draft-ietf-oauth-selective-disclosure-jwt-15#section-4.3-3.2.2.1 and the verifier's policy on how much time they'd be okay with https://datatracker.ietf.org/doc/html/draft-ietf-oauth-selective-disclosure-jwt-15#section-7.3-4.5.2.5\n\nAnd of course the other requirements on nonce and aud ",
          "createdAt": "2025-01-30T19:22:30Z",
          "updatedAt": "2025-01-30T19:22:30Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "If we dont want to use exp, we may evaluate to include your indications in the security section.\n\nFrom my perspective exp is very explicit and I admit to prefer it explicit",
          "createdAt": "2025-01-30T20:25:32Z",
          "updatedAt": "2025-01-30T20:25:32Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "`exp` is more explicit and I can certainly appreciate a preference for explicitness. In this context there was a preference for using `iat` which is less explicit but gives some more control to the receiver. And seems sufficient for the purpose. Restare ognuno della propria opinione. ",
          "createdAt": "2025-01-31T19:00:51Z",
          "updatedAt": "2025-01-31T19:00:51Z"
        },
        {
          "author": "thomaschiozzi-tndigit",
          "authorAssociation": "NONE",
          "body": "> The acceptable lifetime of a KB-JWT is constrained by the iat claim [...] and the verifier's policy on how much time they'd be okay with\n\nSo, what would be the correct behaviour if the Verifier, *for any reason*, receives a KB-JWT with an `exp` claim in the payload? Does it validate `exp` on top on the check quoted above? I would say so because of this \"fallback\" verification step https://datatracker.ietf.org/doc/html/draft-ietf-oauth-selective-disclosure-jwt-15#section-7.3-4.5.2.8 and RFC7519 states that `exp` must be validated if present.\n\nThe question naturally extends to other standard claims such as `nbf` that are not required in a KB-JWT but the Holder could include anyway (for any reason). Should the Verifier process and validate them?\nMaybe the spec could use a stronger language or include a small editorial change that guides implementers on what to do with unexpected claim(s). \n\n",
          "createdAt": "2025-02-03T11:04:00Z",
          "updatedAt": "2025-02-03T15:18:25Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, per https://datatracker.ietf.org/doc/html/draft-ietf-oauth-selective-disclosure-jwt-15#section-7.3-4.5.2.8 ",
          "createdAt": "2025-02-03T14:15:30Z",
          "updatedAt": "2025-02-03T14:15:30Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> this issue would offer guidance\n\nI would humbly offer my guidance here, however, that content in the KB-JWT other than that explicitly mentioned in [its definition](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-selective-disclosure-jwt-15#name-key-binding-jwt) is probably not necessary and shouldn't be used without an identified and compelling reason.  ",
          "createdAt": "2025-02-06T08:11:30Z",
          "updatedAt": "2025-02-06T08:11:30Z"
        }
      ]
    },
    {
      "number": 546,
      "id": "I_kwDOHTmVzM6pBr4A",
      "title": "Checking SD-JWT suspension or revocation is missing in section 7.1 (Verification of the SD-JWT)",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/546",
      "state": "OPEN",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Steps 6 is currently described as follows:\n\n>    6.  Check that the SD-JWT is valid using claims such as nbf, iat, and\n>        exp in the processed payload.  If a required validity-controlling\n>        claim is missing (see Section 9.7), the SD-JWT MUST be rejected.\n\nNone of the checks that are described is about the checking the status of the SD-JWT, \ne.g., whether it has been suspended or revoked.\n\nAdd the following step:\n\n>    7.  Check that the status of the SD-JWT is valid, e.g., whether it has \n>        been suspended or revoked.  The way this can be accomplished is out \n>        of the scope of this document.\n> ",
      "createdAt": "2025-02-06T15:06:03Z",
      "updatedAt": "2025-02-06T15:06:03Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 547,
      "id": "I_kwDOHTmVzM6pBu-E",
      "title": "About KB-JWT replay detection in section 4.3",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/547",
      "state": "OPEN",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "There are two mechanisms able to detect replay: the use of a challenge sent by the Verifier or the use of a nonce generated by the Holder. \n\nWhen the challenge mechanism is used by the Holder, the Holder copies the challenge received from the Holder and pastes it into the KB-JWT. \n\nThe Verifier MUST memorize both the challenge and the time or the time-window at which or during which the challenge has been sent.\n\nWhen a nonce is used by the Holder, the Holder needs to generate a random number (rnd) that is sufficiently large so that the risk of a collision \nwith another random number generated at the same time by another Holder will be extremely low. The Verifier will use the time indicated \nin the SD-JWT to verify first whether it fits into a time window, and then whether the random number has already been received during the time window.\n\nIn this draft, both cases are supported by a single claim: the 'nonce' claim. This is confusing.\n\nThe text has been modified to make it clearer. It defines another claim name called 'chal', when a challenge is generated by the Verifier; \nand it uses two claims ('iat' & 'rnd'), when a nonce mechanism is used by the Holder.\n\nTo summarize:\n- in the first case, only a 'chal' claim is REQUIRED,\n- in the second case, both a 'iat' claim and a 'rnd' claim are REQUIRED.\n\nSince the upper sentence states:\n\n> The Key Binding JWT MUST be a JWT according to [RFC7519] and its payload MUST contain the following elements:\n\nthis sentence and the statements placed below should be reconsidered.\n\nProposed change:\n```\n\n4.3.  Key Binding JWT\n\nThis section defines the Key Binding JWT, which encodes a signature over an SD-JWT by the Holder's private key.\n\nThe Verifier MUST verify that the Key Binding JWT is not a replay from a previously received and accepted KB-JWT.\n\nThere exist two mechanisms able to detect a replay: \n\n    (1) to place into the KB-JWT a challenge that has been generated and sent to the Holder by the Verifier or \n    (2) to place into the KB-JWT a number that will be used only once, called a nonce, that is generated by the Holder. \n\nFor using the challenge mechanism, a challenge MUST be sent by the Verifier.  The Verifier MUST memorize both the challenge \nand a time-window during which the challenge has been sent. When the Holder receives the challenge, if it accepts to use his mechanism, \nit MUST copy the challenge into the KB-JWT.\n\nFor using the nonce mechanism, the Holder MUST generate a nonce so that the risk of a collision with another nonce generated \nexactly at the same time by another Holder will be very low. The nonce includes two elements: the time at which the KB-JWT has been issued \nand a random number.\n\nThe Key Binding JWT MUST be a JWT according to [RFC7519] and its payload contains the following elements:\n\n   *  in the JOSE header,\n\n      -  typ: REQUIRED.  MUST be kb+jwt, which explicitly types the Key\n         Binding JWT as recommended in Section 3.11 of [RFC8725].\n\n      -  alg: REQUIRED.  A digital signature algorithm identifier such\n         as per IANA \"JSON Web Signature and Encryption Algorithms\"\n         registry.  It MUST NOT be none.\n\n   *  in the JWT payload,\n\n      -  aud: REQUIRED.  The intended receiver of the Key Binding JWT.\n         How the value is represented is up to the protocol used and out\n         of scope of this specification.\n\n      -  sd_hash: REQUIRED.  The base64url-encoded hash value over the\n         Issuer-signed JWT and the selected Disclosures as defined\n         below.\n\n      -  iat: CONDITIONAL.  This claim MUST present when replay detection \n         is achieved using a nonce mechanism.  The value of this claim MUST \n         be the time at which the Key Binding JWT was issued using the \n         syntax defined in [RFC7519]. When this claim is present, the 'rdn' \n         claim MUST also be present. \n\n      -  rnd: CONDITIONAL.  This claim MUST present when replay detection \n         is achieved using a nonce mechanism.  The value of this claim MUST \n         be a random number generated by the Holder. The value type of this \n         claim MUST be a string.  When this claim is present, the 'iat' \n         claim MUST also be present, while the 'chal' claim MUST NOT be \n         present.\n\n      -  chal: CONDITIONAL.  This claim MUST be present when replay \n         detection is achieved using a challenge sent to the Holder by \n         the Verifier.  The value type of this claim MUST be a string.  \n         When this claim is present, the 'rnd' claim MUST NOT be present.\n\n```\n",
      "createdAt": "2025-02-06T15:11:07Z",
      "updatedAt": "2025-02-06T15:11:07Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 548,
      "id": "I_kwDOHTmVzM6pBvd7",
      "title": "About KB-JWT replay detection in section 7.3 (Verification by the Verifier)",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/548",
      "state": "OPEN",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The current description in section 7.3 is as follows:\n\n```\n>    5.  If Key Binding is required:\n> \n>        (...)\n> \n>        5.  Check that the creation time of the Key Binding JWT, as\n>            determined by the iat claim, is within an acceptable window.\n> \n>        6.  Determine that the Key Binding JWT is bound to the current\n>            transaction and was created for this Verifier (replay\n>            protection) by validating nonce and aud claims.\n> \n>        7.  Calculate the digest over the Issuer-signed JWT and\n>            Disclosures as defined in Section 4.3.1 and verify that it\n>            matches the value of the sd_hash claim in the Key Binding\n>            JWT.\n> \n>        8.  Check that the Key Binding JWT is a valid JWT in all other\n>            respects, per [RFC7519] and [RFC8725].\n> \n>    If any step fails, the presentation is not valid and processing MUST\n>    be aborted.\n> \n```\n\nIt is proposed to modify step 5 to consider the processing of the \"chal' and the 'rdn' claims that have been introduced section 4.3.\nSee: https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/547\n\n\nText change proposal:\n\n```\n   5.  If Key Binding is required:\n\n       (...)\n\n       5.  Check whether a 'chal' claim or a 'rnd' claim is present. \n           If none or both are present, the processing MUST be aborted.\n\n       6.  If the 'chal' claim is present, the Verifier MUST verify whether \n           the string contained in the 'chal' claim has indeed been \n           generated and is present in an acceptable time-window left \n           at the discretion of the Verifier. If it is not the case, the \n           processing MUST be aborted.\n\n           If it is the case, the Verifier MUST verify whether the string \n           contained in the 'chal' claim has already been successfully used \n           during the acceptable time-window. If it is the case, the \n           processing MUST be aborted.\n\n           If it is not the case, the Verifier MUST continue to verify the \n           other elements of the KB-JWT. If the verification is successful, \n           the Verifier MUST memorize the fact that the string contained in \n           the 'chal' claim has been successfully used.  \n\n       7.  If the 'rnd' claim is present, the Verifier MUST first verify \n           whether the value contained into the 'iat' claim fits within \n           an acceptable time-window left at the discretion of the \n           Verifier. If it is not the case, the processing MUST be aborted.\n\n           Otherwise, the Verifier MUST verify whether the random number \n           contained in the 'rnd' claim has already been received and \n           successfully used to verify a KB-JWT during the time-window.\n           If it is the case, processing MUST be aborted.\n\n           Otherwise, the Verifier MUST continue to verify the other \n           elements of the KB-JWT. If the verification is successful, \n           the Verifier MUST memorize both the 'iat' claim and the 'rnd' \n           claim during a time-window left at the discretion of the \n           Verifier.\n\n       8.  Determine that the Key Binding JWT was created for this Verifier\n           by validating the 'aud' claim.\n\n       9.  Calculate the digest over the Issuer-signed JWT and\n           Disclosures as defined in Section 4.3.1 and verify that it\n           matches the value of the sd_hash claim in the Key Binding\n           JWT.\n\n      10.  Check that the Key Binding JWT is a valid JWT in all other\n           respects, per [RFC7519] and [RFC8725].\n\n   If any step fails, the presentation is not valid and processing MUST\n   be aborted.\n\n```\n",
      "createdAt": "2025-02-06T15:11:58Z",
      "updatedAt": "2025-02-06T15:11:58Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 549,
      "id": "I_kwDOHTmVzM6pBvtt",
      "title": "Editorial: About the none algorithm in section 4.1",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/549",
      "state": "OPEN",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Section 4.1 (Issuer-signed JWT) states:\n\n> An SD-JWT has a JWT component that MUST be signed using the Issuer's private key. \n> It MUST NOT use the none algorithm.\n> \n\nChange the second and last sentence into:\n\n> The algorithm being used MUST NOT be the none algorithm, nor a symmetric key algorithm.\n",
      "createdAt": "2025-02-06T15:12:22Z",
      "updatedAt": "2025-02-06T15:12:22Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 550,
      "id": "I_kwDOHTmVzM6pBwZJ",
      "title": "Editorial.  In draft -14, ISO 29100 was mentioned in section 10 but has been removed in draft -15",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/550",
      "state": "OPEN",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "\nThe sentence was the following:\n\n> The privacy principles of [ISO.29100] should be adhered to.\n\nThe rational for removing it was that sentence was not implementable ... which is true.\n\nIt is proposed to enhance this sentence so that implementers can get a better understanding of what should /can be done \nby enumerating some privacy principles from ISO 29100.\n\nAdd the following sentence under section 10 (Privacy Considerations):\n\n> The privacy principles of [ISO.29100] should be adhered to, in particular: consent and choice by the End-User; purpose legitimacy \nand specification; collection limitation, data minimization; and \"use, retention and disclosure limitation\".\n\n[ISO.29100] should be added into section 13.2 (Informative References):\n\n> [ISO.29100]\n> ISO, \"ISO/IEC 29100:2024 Information technology \u2014 Security techniques \u2014 Privacy framework\", \n<https://standards.iso.org/ittf/PubliclyAvailableStandards/index.html>.\n> \n\nNote that ISO 29100 has been re-issued in 2024.",
      "createdAt": "2025-02-06T15:13:26Z",
      "updatedAt": "2025-02-06T15:13:26Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 551,
      "id": "I_kwDOHTmVzM6pBww1",
      "title": "Editorial change. In section 10.3, both confidentiality and integrity during Transport are essential",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/551",
      "state": "OPEN",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "In section 10.3, the text states:\n\n> Usually, transport protocols for issuance and presentation of credentials are designed to protect the confidentiality of the transmitted data, for example, by requiring the use of TLS.\n> \n> This specification therefore considers the confidentiality of the data to be provided by the transport protocol and does not specify any encryption mechanism.\n\nConfidentiality alone would be insufficient. It is necessary to consider both confidentiality and integrity. \nEverybody is using TLS today which supports both confidentiality and integrity.\n\nChange into:\n\n> 10.3. Confidentiality and integrity during Transport\n> \n> Usually, transport protocols for issuance and presentation of credentials are designed to protect the confidentiality and the integrity of the transmitted data, for example, by requiring the use of TLS.\n> \n> This specification therefore considers the confidentiality and the integrity of the data to be provided by the transport protocol and does not specify any specific cryptographic mechanism.\n \n This text is sufficient and the remaining of this section which is copied below can be deleted:\n \n> Implementers MUST ensure that the transport protocol provides confidentiality if the privacy of user data or correlation attacks by passive observers are a concern. To encrypt the SD-JWT when transmitted over an insecure channel, implementers MAY use JSON Web Encryption (JWE) [[RFC7516](https://drafts.oauth.net/oauth-selective-disclosure-jwt/draft-ietf-oauth-selective-disclosure-jwt.html#RFC7516)] by nesting the SD-JWT as the plaintext payload of a JWE. Especially, when an SD-JWT is transmitted via a URL and information may be stored/cached in the browser or end up in web server logs, the SD-JWT SHOULD be encrypted using JWE.",
      "createdAt": "2025-02-06T15:14:04Z",
      "updatedAt": "2025-02-06T15:14:04Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 557,
      "id": "I_kwDOHTmVzM6sMcd_",
      "title": "In Section 1.2, the term End-User should be defined as it is a fundamental entity in ISO 29100",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/557",
      "state": "OPEN",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "This comment is a consequence of the issue #550 \n\nAdd the following definition:\n\n> End-User\n> An individual that has the control of a Holder. When requested by the Holder, the individual is able to take decisions, \nin particular, to indicate which selectable claims he consents to be disclosed to a Verifier.\n",
      "createdAt": "2025-03-01T14:35:12Z",
      "updatedAt": "2025-03-01T14:35:12Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 558,
      "id": "I_kwDOHTmVzM6sMclW",
      "title": "Proposed rewording in Section 1.2 for the term Holder",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/558",
      "state": "OPEN",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "This comment is a consequence of the issue #550 \n\nIt is important to make the difference between an application and an End-User. \n\nClause 1.2 states:\n\n> Holder:\n> An entity that received SD-JWTs from the Issuer and has control over them. \nIn the context of this document, the term may refer to the actual user, the supporting hardware and software in their possession, or both.\n> \n\nChange into:\n\n> Holder:\n> An application supported by a hardware that received SD-JWTs + all Disclosures from the Issuer and presents SD-JWT + selected Disclosures \nto a Verifier. In the context of this document, the request to an Issuer of SD-JWTs + all Disclosures by a Holder is not described. That application is assumed to be under the control of an End-User.\n",
      "createdAt": "2025-03-01T14:36:10Z",
      "updatedAt": "2025-03-01T14:36:10Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 559,
      "id": "I_kwDOHTmVzM6sMcoq",
      "title": "Figure 1 should illustrate the involvement of an End-User and be closer to the data structures that are exchanged",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/559",
      "state": "OPEN",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "This comment is a consequence of the issue #550.\n\nThe End-User should be represented on Figure 1 to indicate that an End-User provides his consent to some operations. \n\nThis would be an important guidance for implementations.\n\nBetween the Issuer and the Holder the text states:\n\n>             Issues SD-JWT\n>       including all Disclosures\n\nThis means that the SD-JWT INCLUDES all Diclosures which is wrong. The SD-JWT DOES NOT INCLUDE \"all Diclosures\".\n\nThe text should be corrected in the following way:\n\n>       Issues SD-JWT + all Disclosures\n\nBetween the Holder and the Verifier the text states:\n\n>          Presents SD-JWT+KB\n>     including selected Disclosures\n\nThe SD-JWT+KB is an acronym that does not correspond to the data elements that are identified in this draft.\n\nThe text should be corrected in the following way:\n\n>     Presents SD-JWT + selected Disclosures\n>            + KB-JWT (Optional)\n> \n\nThis would lead to the modified following Figure 1:\n\n```\n           +------------+\n           |            |\n           |   Issuer   |\n           |            |\n           +------------+\n                 |\n                 |\n      Issues SD-JWT + all Disclosures\n                 |\n                 v\n           +------------+\n           |            |   Consent\n           |   Holder   |<---------- End-User\n           |            |\n           +------------+\n                 |\n                 |\n    Presents SD-JWT + selected Disclosures\n           + KB-JWT (Optional)\n                 |\n                 v\n           +-------------+\n           |             |+\n           |  Verifiers  ||+\n           |             |||\n           +-------------+||\n            +-------------+|\n             +-------------+\n\n\n```\nIn the remaining of the text, the same kind of changes should be done.\n",
      "createdAt": "2025-03-01T14:36:34Z",
      "updatedAt": "2025-03-01T14:36:34Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 560,
      "id": "I_kwDOHTmVzM6sMc6x",
      "title": "The definition of an Issuer would need to be polished",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/560",
      "state": "OPEN",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "This comment is a consequence of the issue #559\n\nThe current definition of Issuer is:\n\n> Issuer: An entity that creates SD-JWTs.\n\nReplace this definition by:\n\n> Issuer: An entity that issues SD-JWTs and all Disclosures.\n\nThis would match with the proposed revised Figure 1.\n",
      "createdAt": "2025-03-01T14:38:36Z",
      "updatedAt": "2025-03-01T14:38:36Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 561,
      "id": "I_kwDOHTmVzM6sMdP3",
      "title": "Proposed rewording in Section 1.1 about SD-JWT+KB",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/561",
      "state": "OPEN",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Clause 1.1 states:\n \n\n> SD-JWT+KB is a composite structure enabling cryptographic key binding when presented to the Verifier. It comprises the following:\n>        *  A facility for associating an SD-JWT with a key pair\n>        *  A format for a Key Binding JWT (KB-JWT) that proves possession\n>           of the private key of the associated key pair\n>        *  A format extending the SD-JWT format for the combined\n>           transport of the SD-JWT and the KB-JWT\n\nSD-JWT+KB is more a concept than a structure. A description that matches with the structure should be used instead.\n\nChange into:\n\n> SD-JWT + selected Disclosures + KB-JWT is a composite structure enabling cryptographic key binding when presented to the Verifier. \nIt comprises the following:\n> \n>    *  A SD-JWT that includes a claim that contains a public key,\n>    *  Selected Disclosures,\n>    *  A KB-JWT that contains a cryptographic checksum computed over \n>       the two previous parameters using a private key that corresponds\n>       to the public key that is included into a claim of the SD-JWT.\n",
      "createdAt": "2025-03-01T14:41:08Z",
      "updatedAt": "2025-03-01T14:41:08Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 562,
      "id": "I_kwDOHTmVzM6sMdTz",
      "title": "Add the wording \"one-time use digital credentials\" in the context of \"batches of credentials\".",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/562",
      "state": "OPEN",
      "author": "Denisthemalice",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "\nIn section 10.1, the text states:\n\n> Verifier/Verifier unlinkability and presentation unlinkability can be achieved using batch issuance: A batch of credentials based on the same claims is issued to the Holder instead of just a single credential. The Holder can then use a different credential for each Verifier or even for each session with a Verifier.\n\nWhat is important is not the issuance of batches of digital credentials, but the fact that each digital credential shall only be used once by the Holder. \n\nThe key wording is \"one-time use digital credential\" and this wording is not present in the text.\n\nChange into:\n\n> Verifier/Verifier unlinkability and presentation unlinkability can be achieved using one-time use digital credentials. This can be accomplished if the Holder is able to obtain a set of digital credentials that does not permit a Verifier to establish links between them. When Key Binding is supported, the SD-JWT shall contain a different public key. Since multiple credentials need to be issued, this mechanism is also named \"batch issuance of digital credentials\". The Holder shall then use a different credential for each Verifier (i.e. for the Verifier/Verifier unlinkability case) or even for each session with a Verifier (i.e. for the presentation unlinkability case).\n",
      "createdAt": "2025-03-01T14:41:36Z",
      "updatedAt": "2025-03-01T14:41:36Z",
      "closedAt": null,
      "comments": []
    }
  ],
  "pulls": [
    {
      "number": 1,
      "id": "PR_kwDOHTmVzM43pGiL",
      "title": "editing introduction",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/1",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "first pass, will cover other sections later",
      "createdAt": "2022-05-11T11:18:30Z",
      "updatedAt": "2022-05-31T19:29:01Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "608a1880f1969d1226bc42ac55129ebfa225f053",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "ky-first",
      "headRefOid": "529d411024cb1b010d86ee0a6de1fcd3b2d03e77",
      "closedAt": "2022-05-31T19:29:01Z",
      "mergedAt": "2022-05-31T19:29:01Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "80d31d9771b77188f392ec064aee6380de4e4b58"
      },
      "comments": [
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "I approve of the content in this PR.  (I would use the GitHub \"Approve\" function, but it appears that I may need write or contributor access to the repository to be able to do so.  Could that be added for me?)",
          "createdAt": "2022-05-26T15:22:30Z",
          "updatedAt": "2022-05-26T15:22:30Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM46VXMj",
          "commit": {
            "abbreviatedOid": "4a35c81"
          },
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-19T14:21:36Z",
          "updatedAt": "2022-05-19T14:45:15Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "As discussed, should we extend it to any JSON?",
              "createdAt": "2022-05-19T14:21:37Z",
              "updatedAt": "2022-05-19T14:45:15Z"
            },
            {
              "originalPosition": 45,
              "body": "The same mechanism can be used for\r\n- JWS\r\n- LD-proofs\r\n- JAdES\r\nsignatures.\r\n\r\nMaybe something in a sense:\r\nHowever, in use cases involving verifiable credentials that are long-lived, shared with multiple Clients over a period of time, and are signed so that the validation requires the whole verifiable credential, the user's ability to choose which claims are revealed to a certain Client becomes critical.\r\n\r\nRemark: we should describe that we have (at least) two types of signatures\r\n- conventional signatures that ensure integrity and non-repudiation of an electronic document\r\n- group signatures, multi-message signing protocols, zero-knowledge-proofs that allow proving that a certain claim is an element of the credential (and ensuring the integrity and non-repudiation of the credential)",
              "createdAt": "2022-05-19T14:33:59Z",
              "updatedAt": "2022-05-19T14:45:15Z"
            },
            {
              "originalPosition": 61,
              "body": "I agree to keep the holder binding and SD separate and not go into details here.",
              "createdAt": "2022-05-19T14:37:50Z",
              "updatedAt": "2022-05-19T14:45:15Z"
            },
            {
              "originalPosition": 103,
              "body": "Should the information about the hash function be in the metadata?",
              "createdAt": "2022-05-19T14:39:45Z",
              "updatedAt": "2022-05-19T14:45:15Z"
            },
            {
              "originalPosition": 185,
              "body": "No, if the randomness is of good quality.\r\nWe usually suggest using uuidv4 (and truncating it if it is too big for the use case) -- this way we know people won't think of using function random with seed=0 or seed=timestamp ;)\r\n\r\nIn the security considerations sections we could suggest to use: uuidv4 or something that's standardised",
              "createdAt": "2022-05-19T14:45:01Z",
              "updatedAt": "2022-05-19T14:45:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM46zIA7",
          "commit": {
            "abbreviatedOid": "4a35c81"
          },
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "These changes are all worthwhile improvements.",
          "createdAt": "2022-05-26T16:26:18Z",
          "updatedAt": "2022-05-26T16:26:18Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM468wDY",
          "commit": {
            "abbreviatedOid": "4a35c81"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-30T08:47:44Z",
          "updatedAt": "2022-05-30T08:47:44Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Do you mean not limiting claim values to those registered in JWT claims registry? if so, yes, it should not be limited.",
              "createdAt": "2022-05-30T08:47:44Z",
              "updatedAt": "2022-05-30T08:47:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM468ydU",
          "commit": {
            "abbreviatedOid": "4a35c81"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-30T08:54:31Z",
          "updatedAt": "2022-05-30T08:54:32Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "I opened an issue on this, but my 2 cents are...\r\nfrom my understanding, JAdES is close enough to JWS, it should be included. \r\nI do not see the benefit of including LD-Proofs and group signatures, since the whole point of this work was to enable selective disclosure without using those signature formats...",
              "createdAt": "2022-05-30T08:54:31Z",
              "updatedAt": "2022-05-30T08:54:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM468yms",
          "commit": {
            "abbreviatedOid": "4a35c81"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-30T08:54:55Z",
          "updatedAt": "2022-05-30T08:54:55Z",
          "comments": [
            {
              "originalPosition": 103,
              "body": "good point! opened an issue",
              "createdAt": "2022-05-30T08:54:55Z",
              "updatedAt": "2022-05-30T08:56:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM468z5x",
          "commit": {
            "abbreviatedOid": "4a35c81"
          },
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-30T08:58:39Z",
          "updatedAt": "2022-05-30T08:58:40Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Yes. Even more, allowing to use of the approach for any JSON.\r\nWe can add a comment: The approach can be used for any JSON and is not limited to JWT.\r\n\r\nI was even thinking to rename the specs to \"Selective disclosure JSON\"\r\nAs you can use it also with JSON-LD.",
              "createdAt": "2022-05-30T08:58:39Z",
              "updatedAt": "2022-05-30T08:58:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM4680WD",
          "commit": {
            "abbreviatedOid": "4a35c81"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-30T08:59:56Z",
          "updatedAt": "2022-05-30T08:59:56Z",
          "comments": [
            {
              "originalPosition": 185,
              "body": "great point, opened an issue",
              "createdAt": "2022-05-30T08:59:56Z",
              "updatedAt": "2022-05-30T08:59:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM4680oC",
          "commit": {
            "abbreviatedOid": "b6a8cf4"
          },
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-30T09:00:44Z",
          "updatedAt": "2022-05-30T09:00:44Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM46-f8R",
          "commit": {
            "abbreviatedOid": "4a35c81"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-30T14:53:33Z",
          "updatedAt": "2022-05-30T14:53:33Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "I agree with @Sakurann. ",
              "createdAt": "2022-05-30T14:53:33Z",
              "updatedAt": "2022-05-30T14:53:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM46-izS",
          "commit": {
            "abbreviatedOid": "4a35c81"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-30T15:03:45Z",
          "updatedAt": "2022-05-30T15:03:45Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "@Sakurann Can you please move this into an issue?",
              "createdAt": "2022-05-30T15:03:45Z",
              "updatedAt": "2022-05-30T15:03:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM46-lon",
          "commit": {
            "abbreviatedOid": "4a35c81"
          },
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-30T15:14:19Z",
          "updatedAt": "2022-05-30T15:14:19Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "You're right. See comment: https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/12\r\n\r\nWe can continue using only JWS.",
              "createdAt": "2022-05-30T15:14:19Z",
              "updatedAt": "2022-05-30T15:14:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM47CeeJ",
          "commit": {
            "abbreviatedOid": "b6a8cf4"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-31T13:57:17Z",
          "updatedAt": "2022-05-31T13:57:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 6,
      "id": "PR_kwDOHTmVzM44h9oE",
      "title": "Fix JWS versus JWT confusions and introduction wording",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/6",
      "state": "MERGED",
      "author": "selfissued",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #5",
      "createdAt": "2022-05-26T15:58:49Z",
      "updatedAt": "2022-05-30T14:52:04Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "7ec824c6c19ec5ba40d1b05f7d19453837f5a1b0",
      "headRepository": "selfissued/draft-selective-disclosure-jwt",
      "headRefName": "mbj-fix-jws-vs-jwt-and-intro",
      "headRefOid": "dc0cadbc03d652ec873fc763c9ccb333430c179e",
      "closedAt": "2022-05-30T14:52:03Z",
      "mergedAt": "2022-05-30T14:52:03Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "aa9ea1e7c6cd7189b93e6a8d7bf9bab342aa685b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM461T2e",
          "commit": {
            "abbreviatedOid": "dc0cadb"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-27T05:26:07Z",
          "updatedAt": "2022-05-27T05:26:07Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "SD-JWT itself does not have to be signed. That\u2019s why we changed SD-JWS to SD-JWT, right?",
              "createdAt": "2022-05-27T05:26:07Z",
              "updatedAt": "2022-05-27T05:26:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM461T39",
          "commit": {
            "abbreviatedOid": "dc0cadb"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-27T05:26:20Z",
          "updatedAt": "2022-05-27T05:26:20Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM467zDr",
          "commit": {
            "abbreviatedOid": "dc0cadb"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-30T03:55:05Z",
          "updatedAt": "2022-05-30T03:55:06Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "```suggestion\r\n * A **SD-JWT** is a JWT [@!RFC7519], which can be signed as a JWS [@!RFC7515], that contains claims\r\n```",
              "createdAt": "2022-05-30T03:55:06Z",
              "updatedAt": "2022-05-30T03:55:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM4682F6",
          "commit": {
            "abbreviatedOid": "dc0cadb"
          },
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-30T09:04:52Z",
          "updatedAt": "2022-05-30T09:04:53Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "As mentioned in another PR:\r\nShould we add a generic SD-JSON? This way the approach can be also used for JSON-LD or any other JSON object (signed or unsigned).\r\n\r\nThis is a non-blocking comment :)",
              "createdAt": "2022-05-30T09:04:53Z",
              "updatedAt": "2022-05-30T09:05:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM4682Qk",
          "commit": {
            "abbreviatedOid": "dc0cadb"
          },
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-30T09:05:22Z",
          "updatedAt": "2022-05-30T09:05:22Z",
          "comments": []
        }
      ]
    },
    {
      "number": 7,
      "id": "PR_kwDOHTmVzM44iGMZ",
      "title": "Change uses of base64url to be consistent with JWS",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/7",
      "state": "MERGED",
      "author": "selfissued",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-05-26T16:36:58Z",
      "updatedAt": "2022-05-31T14:01:22Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "7ec824c6c19ec5ba40d1b05f7d19453837f5a1b0",
      "headRepository": "selfissued/draft-selective-disclosure-jwt",
      "headRefName": "mbj-base64url-consistency",
      "headRefOid": "b1013ca5929ffd7fadc2fc60775e36eb12239851",
      "closedAt": "2022-05-31T14:01:21Z",
      "mergedAt": "2022-05-31T14:01:21Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "e2915f7bf0b252e77a3ce1ae3a32fe74e7cdde1b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM461Jpf",
          "commit": {
            "abbreviatedOid": "b1013ca"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-27T04:00:42Z",
          "updatedAt": "2022-05-27T04:00:43Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "Why did you put \u2018-\u2018 only here? \u201cbase64url-encoded\u201d vs \u201cbase64url encoded\u201d",
              "createdAt": "2022-05-27T04:00:43Z",
              "updatedAt": "2022-05-27T04:00:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM461Jsb",
          "commit": {
            "abbreviatedOid": "b1013ca"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Will merge once the \u201c-\u201c comment is resolved ",
          "createdAt": "2022-05-27T04:01:08Z",
          "updatedAt": "2022-05-27T04:01:08Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM47CgHB",
          "commit": {
            "abbreviatedOid": "b1013ca"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-31T14:01:11Z",
          "updatedAt": "2022-05-31T14:01:12Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "This hyphen seems to be correct, actually. https://www.grammarly.com/blog/hyphen/\r\nI'll go ahead with the merge.",
              "createdAt": "2022-05-31T14:01:11Z",
              "updatedAt": "2022-05-31T14:01:12Z"
            }
          ]
        }
      ]
    },
    {
      "number": 15,
      "id": "PR_kwDOHTmVzM44vJMV",
      "title": "not concealing claim names",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/15",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "reflecting conversation in Issuer #3 why we are not hiding claim names",
      "createdAt": "2022-05-31T12:05:25Z",
      "updatedAt": "2022-06-01T11:05:42Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "80d31d9771b77188f392ec064aee6380de4e4b58",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "claim-names",
      "headRefOid": "ea12ed45ebd5f8119418bd21ff0c641e58354eb6",
      "closedAt": "2022-06-01T11:05:41Z",
      "mergedAt": "2022-06-01T11:05:41Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "5f81e4b0fca93e301a47578ec46a46fb626ea8e5"
      },
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I propose to move this to the privacy considerations.",
          "createdAt": "2022-06-01T07:24:22Z",
          "updatedAt": "2022-06-01T07:24:22Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "makes sense.",
          "createdAt": "2022-06-01T10:52:03Z",
          "updatedAt": "2022-06-01T10:52:03Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 16,
      "id": "PR_kwDOHTmVzM4410FO",
      "title": "change to SD-JWT-R",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/16",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "addresses issue #10",
      "createdAt": "2022-06-01T11:12:31Z",
      "updatedAt": "2022-06-01T11:54:38Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "5f81e4b0fca93e301a47578ec46a46fb626ea8e5",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "nat-issues",
      "headRefOid": "910692843d96f867763533e41a13faff0f06c15a",
      "closedAt": "2022-06-01T11:54:38Z",
      "mergedAt": "2022-06-01T11:54:38Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "a26474f48d1ea3197c402b878eac28835ef672ea"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 18,
      "id": "PR_kwDOHTmVzM442oOD",
      "title": "Update main.md to fix issue #17",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/18",
      "state": "MERGED",
      "author": "sakimura",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixing the \"release\" in the sense of a defined term as \"SD-JWT Release\"",
      "createdAt": "2022-06-01T12:57:29Z",
      "updatedAt": "2022-06-01T13:56:19Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "52291dcf97b4c4b84a818d5c0aea16b490b9138e",
      "headRepository": "sakimura/draft-selective-disclosure-jwt",
      "headRefName": "patch-1",
      "headRefOid": "8a8a6db7fce4087cddce9642bcd5d41e26efd694",
      "closedAt": "2022-06-01T13:56:19Z",
      "mergedAt": "2022-06-01T13:56:19Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "68044da35970e5cefe2131a342c46cd7a6c869b1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM47H_DR",
          "commit": {
            "abbreviatedOid": "8a8a6db"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-01T13:13:23Z",
          "updatedAt": "2022-06-01T13:13:23Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "```suggestion\r\nIn the following section, the concepts of SD-JWTs and SD-JWT-Rs are described at a\r\n```",
              "createdAt": "2022-06-01T13:13:23Z",
              "updatedAt": "2022-06-01T13:13:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM47H_K1",
          "commit": {
            "abbreviatedOid": "8a8a6db"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-01T13:13:41Z",
          "updatedAt": "2022-06-01T13:13:41Z",
          "comments": []
        }
      ]
    },
    {
      "number": 19,
      "id": "PR_kwDOHTmVzM445E-B",
      "title": "Some minor edits.",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/19",
      "state": "MERGED",
      "author": "christianpaquin",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Some minor edits:\r\n- consistency of hyphenation in base64url-encode(d)\r\n- use transaction instead of use case in one place because selective might be needed or not within one use case, depending on the interaction with RP\r\n- explicitly called out period character to avoid misinterpreting as missing word\r\n- some typos",
      "createdAt": "2022-06-01T17:42:24Z",
      "updatedAt": "2022-06-09T00:01:19Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "619b426fe981f5ae82273e99ad1bd12a03edd219",
      "headRepository": "christianpaquin/draft-selective-disclosure-jwt",
      "headRefName": "cp-editorial-changes",
      "headRefOid": "f5f3556a10db504887d7dd6faa0fc9d88654fcaa",
      "closedAt": "2022-06-09T00:01:19Z",
      "mergedAt": "2022-06-09T00:01:19Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "70266cf12481638cae0816d3ea62e344c18a2e4e"
      },
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "changed six . separated to four per Christian's separate comment",
          "createdAt": "2022-06-02T04:38:43Z",
          "updatedAt": "2022-06-02T04:38:43Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "> changed six . separated to four per Christian's separate comment\r\n\r\nWhat did I miss? The presentation should be six dot separated elements. Three for the SD-JWT, three for the SD-JWT-R.",
          "createdAt": "2022-06-02T08:14:31Z",
          "updatedAt": "2022-06-02T08:14:31Z"
        },
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "> What did I miss? The presentation should be six dot separated elements. Three for the SD-JWT, three for the SD-JWT-R.\r\n\r\nWhy would you need to merge both? I don't understand the proposed flow between issuer, holder, and verifier; perhaps a data flow section would help. I would think the holder gets a 3+1 part JWS with SVC (which can be `.`-concatenated). Then all you need to present to a verifier is the same data, along with some user proof key signature if the JWT is bound to a user key (for which a property is added in the SD-JWT-R, if I understood correctly; more details would be helpful here).\r\n",
          "createdAt": "2022-06-02T12:15:07Z",
          "updatedAt": "2022-06-02T12:15:07Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "creating a separate issue on six vs four period separated elements to merge this editorial PR",
          "createdAt": "2022-06-09T00:01:15Z",
          "updatedAt": "2022-06-09T00:01:15Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM47LtOh",
          "commit": {
            "abbreviatedOid": "9b97e44"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-02T03:02:48Z",
          "updatedAt": "2022-06-02T03:02:48Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM47L7fe",
          "commit": {
            "abbreviatedOid": "9b97e44"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-02T04:38:01Z",
          "updatedAt": "2022-06-02T04:38:02Z",
          "comments": [
            {
              "originalPosition": 77,
              "body": "```suggestion\r\n 2. Check that the presentation consists of four period-separated (`.`) elements; if holder binding is not required, the last element can be empty.\r\n```",
              "createdAt": "2022-06-02T04:38:02Z",
              "updatedAt": "2022-06-02T04:38:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM47hiLr",
          "commit": {
            "abbreviatedOid": "4b012ce"
          },
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2022-06-07T18:19:06Z",
          "updatedAt": "2022-06-07T18:19:06Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM47o5b-",
          "commit": {
            "abbreviatedOid": "4b012ce"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-08T23:58:52Z",
          "updatedAt": "2022-06-08T23:58:52Z",
          "comments": [
            {
              "originalPosition": 77,
              "body": "```suggestion\r\n 2. Check that the presentation consists of six period-separated (`.`) elements; if holder binding is not required, the last element can be empty.\r\n```",
              "createdAt": "2022-06-08T23:58:52Z",
              "updatedAt": "2022-06-08T23:58:52Z"
            }
          ]
        }
      ]
    },
    {
      "number": 22,
      "id": "PR_kwDOHTmVzM45Hw4K",
      "title": "clarify SD-JWT-R in the intro",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/22",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Based on the feedback from @b---c\r\n\r\n> https://www.ietf.org/archive/id/draft-fett-oauth-selective-disclosure-jwt-00.html#section-1-2  -> \"This document also defines a format for so-called SD-JWT Releases (SD-JWT-R).\"  - that sentence feels abrupt and doesn't really tell the reader anything. Consider just a bit more about what a SD-JWT-R is/does. Borrowing from https://www.ietf.org/archive/id/draft-fett-oauth-selective-disclosure-jwt-00.html#name-sd-jwt-release-sd-jwt-r maybe \"This document also defines a format for so-called SD-JWT Releases (SD-JWT-R), which conveys a subset of the claim values of an SD-JWT in a verifiable way\" or something along those lines.  Honestly, after reading the doc a few times, I'm unsure whether a SD-JWT-R is the encoded SVC or SD-JWT and SVC Combined Format. Or both. Or something else. And is it for releasing to the holder or the verifier or both? I think there's room for the various terms to be tightened up and clarified. And also in how they are used.",
      "createdAt": "2022-06-05T03:17:11Z",
      "updatedAt": "2022-06-10T18:05:17Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "70266cf12481638cae0816d3ea62e344c18a2e4e",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "clarifying-terms",
      "headRefOid": "78f26ee55b85fee1723169d0aefab88492fd814e",
      "closedAt": "2022-06-10T18:05:16Z",
      "mergedAt": "2022-06-10T18:05:16Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "067ca84759a9d754e60d36c9b7f85c0bb8b72250"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM47hi7w",
          "commit": {
            "abbreviatedOid": "6123a79"
          },
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "This review identifies three minor syntax issues.  Once they are addressed, I'll approve.",
          "createdAt": "2022-06-07T18:21:44Z",
          "updatedAt": "2022-06-07T18:25:15Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "convey -> conveys",
              "createdAt": "2022-06-07T18:21:44Z",
              "updatedAt": "2022-06-07T18:25:15Z"
            },
            {
              "originalPosition": 5,
              "body": "SD-JWT -> an SD-JWT (twice)",
              "createdAt": "2022-06-07T18:23:33Z",
              "updatedAt": "2022-06-07T18:25:15Z"
            },
            {
              "originalPosition": 6,
              "body": "mapping -> the mapping",
              "createdAt": "2022-06-07T18:24:02Z",
              "updatedAt": "2022-06-07T18:25:15Z"
            }
          ]
        }
      ]
    },
    {
      "number": 34,
      "id": "PR_kwDOHTmVzM45Wvmn",
      "title": "Binding svc to sd-jwt (Issue #31)",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/34",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Issue #31. putting SVC has in SD-JWT to enable holder to match between SD-JWT and SVC",
      "createdAt": "2022-06-08T23:46:43Z",
      "updatedAt": "2022-06-29T00:56:22Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "92d636b7ce337fd5af9714d54d8938f27966d39b",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "binding-svc",
      "headRefOid": "08835dcbf1f09231c9e4514d62b203d9cafb8213",
      "closedAt": "2022-06-29T00:56:22Z",
      "mergedAt": "2022-06-29T00:56:22Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "20a3e05e8e466b6bb8c7cd7b4250a2e1725d145e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM472MrQ",
          "commit": {
            "abbreviatedOid": "6f03ca7"
          },
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "\"the ASCII representation of the SVC value\" needs to be more clearly specified.",
          "createdAt": "2022-06-13T09:44:44Z",
          "updatedAt": "2022-06-13T09:45:21Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "I have questions about \"the ASCII representation of the SVC value\".  Is this representation the entire SVC, such as in the example at https://www.ietf.org/archive/id/draft-fett-oauth-selective-disclosure-jwt-00.html#section-4.2.2 ?  If so, ASCII should almost certainly be replaced by UTF-8, since JSON can contain non-ASCII characters.  If it's something else, then we also likely need to be more descriptive about what it is.",
              "createdAt": "2022-06-13T09:44:45Z",
              "updatedAt": "2022-06-13T09:45:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48SQIf",
          "commit": {
            "abbreviatedOid": "6f03ca7"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-18T12:56:35Z",
          "updatedAt": "2022-06-18T12:56:36Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "UTF-8 contains ASCII, this latter is a subset of the first.\r\nThe hashes are hexadecimal values in ascii format.\r\n\r\nWe may say that the text is good as it is if I'm not missing something @selfissued :)",
              "createdAt": "2022-06-18T12:56:35Z",
              "updatedAt": "2022-06-18T12:56:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48xi4F",
          "commit": {
            "abbreviatedOid": "7acfe61"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-27T05:19:33Z",
          "updatedAt": "2022-06-27T05:19:34Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "```suggestion\r\nThe SVC and SD-JWT are implicitly linked through the hash values of the claims\r\nin the SVC that is included in the SD-JWT. To ensure that the correct SVC and \r\nSD-JWT pairings are being used, the holder should verify the binding between\r\nSVC and SD-JWT, as defined in the Verification Section of this document.\r\n```",
              "createdAt": "2022-06-27T05:19:33Z",
              "updatedAt": "2022-06-27T05:19:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM483rFj",
          "commit": {
            "abbreviatedOid": "cf4efaa"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-28T07:15:53Z",
          "updatedAt": "2022-06-28T07:18:03Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "```suggestion\r\nSD-JWT pairings are being used, the holder SHOULD verify the binding between\r\n```",
              "createdAt": "2022-06-28T07:15:53Z",
              "updatedAt": "2022-06-28T07:18:03Z"
            },
            {
              "originalPosition": 18,
              "body": "I think this sentence works with and without the comma, but without the comma is probably closer to what we want to say.\r\n\r\n```suggestion\r\nSVC and SD-JWT as defined in the Verification Section of this document.\r\n```",
              "createdAt": "2022-06-28T07:17:57Z",
              "updatedAt": "2022-06-28T07:18:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM487Bhw",
          "commit": {
            "abbreviatedOid": "af30f4e"
          },
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Requesting two editorial changes in the Verification section (see comments).",
          "createdAt": "2022-06-28T16:57:44Z",
          "updatedAt": "2022-06-28T17:06:05Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "Replace the first \"following\" with \"perfroming\"\r\n\r\nThe holder SHOULD verify the binding between SD-JWT and SVC by performing the following steps:",
              "createdAt": "2022-06-28T16:57:44Z",
              "updatedAt": "2022-06-28T17:06:05Z"
            },
            {
              "originalPosition": 32,
              "body": "Editorial 0 delete \"and\"\r\n\r\nCheck and that the hashes of the claims in the SVC match those in the SD-JWT",
              "createdAt": "2022-06-28T17:05:18Z",
              "updatedAt": "2022-06-28T17:06:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM488-6R",
          "commit": {
            "abbreviatedOid": "af30f4e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-29T00:55:11Z",
          "updatedAt": "2022-06-29T00:55:11Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "```suggestion\r\nThe holder SHOULD verify the binding between SD-JWT and SVC by performing the following steps:\r\n```",
              "createdAt": "2022-06-29T00:55:11Z",
              "updatedAt": "2022-06-29T00:55:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM488-9u",
          "commit": {
            "abbreviatedOid": "af30f4e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-29T00:55:42Z",
          "updatedAt": "2022-06-29T00:55:43Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "```suggestion\r\n 2. Check that the hashes of the claims in the SVC match those in the SD-JWT\r\n```",
              "createdAt": "2022-06-29T00:55:42Z",
              "updatedAt": "2022-06-29T00:55:43Z"
            }
          ]
        }
      ]
    },
    {
      "number": 35,
      "id": "PR_kwDOHTmVzM45WwtN",
      "title": "adding flow diagram",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/35",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Per [conversation](https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/19#issuecomment-1144794055) in PR #19.\r\nwhat to return to the verifier.",
      "createdAt": "2022-06-08T23:57:36Z",
      "updatedAt": "2022-06-16T10:23:09Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "b9dd05e4c5a5525305a63e10b0661fdbce7c039b",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "flow-diagram",
      "headRefOid": "370ddd991185b6ea9d0358a6d1145b4540444703",
      "closedAt": "2022-06-16T10:23:09Z",
      "mergedAt": "2022-06-16T10:23:09Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "1b3ce71812d78c6da93f29f8cf0967c0d41cb6aa"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM472NNW",
          "commit": {
            "abbreviatedOid": "ec1bb27"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-13T09:46:33Z",
          "updatedAt": "2022-06-13T09:46:33Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM472NO7",
          "commit": {
            "abbreviatedOid": "ec1bb27"
          },
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-13T09:46:37Z",
          "updatedAt": "2022-06-13T09:46:37Z",
          "comments": []
        }
      ]
    },
    {
      "number": 38,
      "id": "PR_kwDOHTmVzM45hbpG",
      "title": "security consideration for salt entropy (issue #14)",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/38",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Clarifying the requirements for the salt generation and the hash function.",
      "createdAt": "2022-06-12T18:47:00Z",
      "updatedAt": "2022-06-13T15:05:31Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "067ca84759a9d754e60d36c9b7f85c0bb8b72250",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "salt-entropy",
      "headRefOid": "7c85cc440308c794c07e61260782ed46e0e217c6",
      "closedAt": "2022-06-13T15:05:31Z",
      "mergedAt": "2022-06-13T15:05:31Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "dc8212d27010a785fe33b8a300588198f71f4b36"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM472NGQ",
          "commit": {
            "abbreviatedOid": "7c85cc4"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-13T09:46:09Z",
          "updatedAt": "2022-06-13T09:46:09Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM472N3f",
          "commit": {
            "abbreviatedOid": "7c85cc4"
          },
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2022-06-13T09:48:46Z",
          "updatedAt": "2022-06-13T09:48:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 39,
      "id": "PR_kwDOHTmVzM45hcho",
      "title": "add hash_alg claim to address issue #13",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/39",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "adding `hash_alg` SD-JWT claim \r\n\r\nNote: need to update the examples to include it once we agree this claim is needed (cc @danielfett )",
      "createdAt": "2022-06-12T19:08:31Z",
      "updatedAt": "2022-06-13T16:31:23Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "067ca84759a9d754e60d36c9b7f85c0bb8b72250",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "hash-func",
      "headRefOid": "ac5c4e262c0eac5140d738eaabc82e70c2b95bac",
      "closedAt": "2022-06-13T16:31:23Z",
      "mergedAt": "2022-06-13T16:31:23Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "71ce35be3d7bc0e180951dd64767562fda21c31d"
      },
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "We need to say in the checking algorithm that verifiers MUST check the alg and MUST only accept hash_algs they understand and deem secure.",
          "createdAt": "2022-06-13T09:45:21Z",
          "updatedAt": "2022-06-13T09:45:21Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM472Om2",
          "commit": {
            "abbreviatedOid": "c1a0824"
          },
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Assuming we're not going to use the trick that OpenID Connect uses to determine the hash algorithm implicitly, then I approve of this approach.",
          "createdAt": "2022-06-13T09:51:12Z",
          "updatedAt": "2022-06-13T09:51:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 40,
      "id": "PR_kwDOHTmVzM45hczt",
      "title": "edit example 1 (Issue #20)",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/40",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "removes SVC from the example 1 because it is introduced in the following section (Issue #20)",
      "createdAt": "2022-06-12T19:14:08Z",
      "updatedAt": "2022-06-13T09:41:57Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "067ca84759a9d754e60d36c9b7f85c0bb8b72250",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "example-1",
      "headRefOid": "2dac6b23e0ba0630288b95fe1d2421a4bdb0509d",
      "closedAt": "2022-06-13T09:41:56Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "This should not be merged. The examples are generated from the python code, and here the problem was that this particular example was not properly updated by the python code. I created a fix in PR #46.",
          "createdAt": "2022-06-13T09:41:56Z",
          "updatedAt": "2022-06-13T09:41:56Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 41,
      "id": "PR_kwDOHTmVzM45hnfS",
      "title": "clarify sd-jwt-r format",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/41",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Clarifies text defining SD-JWT-R based on issue #21.",
      "createdAt": "2022-06-12T23:27:37Z",
      "updatedAt": "2022-06-17T05:20:49Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "f6d5dc80182979a8417f626718973671e0492790",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "sd-jwt-r",
      "headRefOid": "6f4d445db6f8756666c8b78593addc78e312d298",
      "closedAt": "2022-06-17T05:20:49Z",
      "mergedAt": "2022-06-17T05:20:49Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "82e196b75337bdaa8aace42cc0a7e8884ca5dd68"
      },
      "comments": [
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "I approve of @danielfett 's suggested changes.",
          "createdAt": "2022-06-13T10:01:27Z",
          "updatedAt": "2022-06-13T10:01:27Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM472H-U",
          "commit": {
            "abbreviatedOid": "11c13ba"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-06-13T09:29:12Z",
          "updatedAt": "2022-06-13T09:31:47Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "```suggestion\r\nAn SD-JWT-R contains claim values and salts for the claims that the holder \r\nhas consented to release to the Verifier. This enables the Verifier to verify \r\nthe claims received from the holder by computing the hashes of the claim\r\nvalues and the salts revealed in the SD-JWT-R using the hashing algorithm \r\nspecified in the SD-JWT and comparing them to the hash values included in the SD-JWT.\r\n```",
              "createdAt": "2022-06-13T09:29:12Z",
              "updatedAt": "2022-06-13T09:31:47Z"
            },
            {
              "originalPosition": 84,
              "body": "```suggestion\r\nThe following is a non-normative example of an SD-JWT-R for the SD-JWT in Example 2\r\nthat discloses only `region` and `country` of the `address` property:\r\n```",
              "createdAt": "2022-06-13T09:30:03Z",
              "updatedAt": "2022-06-13T09:31:47Z"
            },
            {
              "originalPosition": 96,
              "body": "```suggestion\r\nWhen the holder sends SD-JWT-R to the Verifier, the SD-JWT-R MUST be a base64url-encoded \r\nJWS as described in Section 5.1 of [@!RFC7515]. JWS Compact Serialization and \r\nJWS JSON Serialization can be used.\r\n```",
              "createdAt": "2022-06-13T09:31:05Z",
              "updatedAt": "2022-06-13T09:31:47Z"
            },
            {
              "originalPosition": 104,
              "body": "```suggestion\r\nBelow is a non-normative example of a representation of the SD-JWT-R for the SD-JWT\r\ngiven in Example 1 using JWS Compact Serialization:\r\n```",
              "createdAt": "2022-06-13T09:31:37Z",
              "updatedAt": "2022-06-13T09:31:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM472TBP",
          "commit": {
            "abbreviatedOid": "11c13ba"
          },
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "The wording \"base64url-encoded JWS\" needs to be corrected, as described in the PR comments.  Also, the JWS serializations supported need to be explicitly discussed if we're going to support both serializations.",
          "createdAt": "2022-06-13T10:05:42Z",
          "updatedAt": "2022-06-13T10:15:44Z",
          "comments": [
            {
              "originalPosition": 94,
              "body": "\"base64url-encode JWS\" is a confusing description.  If the JWS uses the Compact Serialization, its parts are already base64url-encoded, therefore, one wouldn't re-encoded the JWS (which the current wording seems to imply).  Whereas, if it uses the JSON Serialization, then yes, one would need to base64url-encode it.  This should be clarified in the description.",
              "createdAt": "2022-06-13T10:05:42Z",
              "updatedAt": "2022-06-13T10:15:44Z"
            },
            {
              "originalPosition": 95,
              "body": "[5.1](https://datatracker.ietf.org/doc/html/rfc7515#section-5.1).  Message Signature or MAC Computation doesn't seem like the section that you meant to reference.",
              "createdAt": "2022-06-13T10:08:15Z",
              "updatedAt": "2022-06-13T10:15:44Z"
            },
            {
              "originalPosition": 96,
              "body": "Again, \"base64url-encoded JWS\" needs to be corrected, as described in a previous comment.",
              "createdAt": "2022-06-13T10:10:00Z",
              "updatedAt": "2022-06-13T10:15:44Z"
            },
            {
              "originalPosition": 96,
              "body": "Are we saying somewhere why are allowing the use of the JWS JSON Serialization?  On the surface of it, this will surprise people, as JWTs only permit the use of the Compact Serialization - so as to improve interoperability.  Many JWS implementations only support the Compact Serialization.\r\n\r\nThis should be discussed in its own section possibly called \"JWS Serializations Supported\", rather than introduced in passing, as it is in the current PR.",
              "createdAt": "2022-06-13T10:14:02Z",
              "updatedAt": "2022-06-13T10:15:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM4721eS",
          "commit": {
            "abbreviatedOid": "11c13ba"
          },
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-13T12:14:29Z",
          "updatedAt": "2022-06-13T12:14:30Z",
          "comments": [
            {
              "originalPosition": 96,
              "body": "Also, see my comment https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/12#issuecomment-1153834228 .  I really don't think we should support signing formats other than the JWS Compact Serialization in the core SD-JWT spec.  If we want to define SD-JWT-like data structures using other signing formats, that should happen in different specification(s).",
              "createdAt": "2022-06-13T12:14:29Z",
              "updatedAt": "2022-06-13T12:14:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48IUH-",
          "commit": {
            "abbreviatedOid": "11c13ba"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-16T10:08:19Z",
          "updatedAt": "2022-06-16T10:08:19Z",
          "comments": [
            {
              "originalPosition": 95,
              "body": "thank you, it was 7.1",
              "createdAt": "2022-06-16T10:08:19Z",
              "updatedAt": "2022-06-16T10:08:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48IUTL",
          "commit": {
            "abbreviatedOid": "11c13ba"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-16T10:08:54Z",
          "updatedAt": "2022-06-16T10:08:55Z",
          "comments": [
            {
              "originalPosition": 96,
              "body": "agreed not to allow JWS JSON Serialization in this main profile",
              "createdAt": "2022-06-16T10:08:54Z",
              "updatedAt": "2022-06-16T10:08:55Z"
            }
          ]
        }
      ]
    },
    {
      "number": 42,
      "id": "PR_kwDOHTmVzM45hn1Y",
      "title": "clarify confusion around `_sd`",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/42",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "As pointed out in the issuer #25, it is very confusing to have three separate objects that are all called `_sd`:\r\nRenaming them as follows\r\n`_sd` in SD-JWT -> `sd_hashes`\r\n`_sd` in SVC -> `sd_container`\r\n`_sd` in SD-JWT-R -> `_sd_container` ",
      "createdAt": "2022-06-12T23:38:07Z",
      "updatedAt": "2022-06-23T12:51:46Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "c6ef2461089d7787f22e390d1ccec0d22479eec4",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "claims-container",
      "headRefOid": "eabfbdb5bb454f200e40a6ef2eab03e762fb7c1b",
      "closedAt": "2022-06-23T12:51:46Z",
      "mergedAt": "2022-06-23T12:51:46Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "acd6034de1c06c3804cb5bee22dff0c6bfce5eff"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "What's the reasoning for `_sd_container` and `sd_container`? They are the same thing. Just in different contexts. ",
          "createdAt": "2022-06-13T11:12:01Z",
          "updatedAt": "2022-06-13T11:12:01Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "+1 for the underscore.\r\n\r\n'container' is not very descriptive here, what about `_sd_releases`?",
          "createdAt": "2022-06-13T12:15:28Z",
          "updatedAt": "2022-06-13T12:15:28Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Also, the changes to the examples will not stick, we need to modify the python code.",
          "createdAt": "2022-06-13T12:15:46Z",
          "updatedAt": "2022-06-13T12:15:46Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Aggregated and Distributed Claims are a rarely used corner of OIDC so calling that convention is a bit of an overstatement. Using an underscore as a halfhearted qualifier isn't really in the spirit of RFC7519's treatment of claim names either. \r\nUse an underscore if you want. But explain what it is supposed to mean. And register the claim. Don't assume it has special powers. ",
          "createdAt": "2022-06-13T14:41:20Z",
          "updatedAt": "2022-06-13T14:41:20Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "agreed to have two containers only: sd_digests and sd_release.\r\nKristina to investigate wrt the usage of `_` but leaning towards not using it as a starting point.",
          "createdAt": "2022-06-14T07:12:37Z",
          "updatedAt": "2022-06-14T07:12:37Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM472YAC",
          "commit": {
            "abbreviatedOid": "5b070b6"
          },
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I agree that we should differentiate between these different claims.  However, per issue #4 , we should follow the convention of using the \"_\" prefix in the names of all meta-claims.  Please apply the prefix, then I will approve.  (That, or convince me that some of them are not meta-claims, and I'll also approve after that discussion.)",
          "createdAt": "2022-06-13T10:23:43Z",
          "updatedAt": "2022-06-13T10:23:43Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM48NRXH",
          "commit": {
            "abbreviatedOid": "66490a9"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-17T07:32:33Z",
          "updatedAt": "2022-06-17T07:32:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 43,
      "id": "PR_kwDOHTmVzM45hrLC",
      "title": "clarify how a term `payload` is used",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/43",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "As pointed out in Issuer #26, a term payload has been used to characterize an object with a set of claims that the Issuer is trying to disclose using SD-JWT. Also clarifies when it is an example of an entire SD-JWT payload or just an `_sd` object.\r\n\r\nNote: I would suggest using only Example 1 of 'flat' SD-JWT in the main text and move Example 2 to the Annex.",
      "createdAt": "2022-06-13T00:38:31Z",
      "updatedAt": "2022-06-16T10:31:58Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "1b3ce71812d78c6da93f29f8cf0967c0d41cb6aa",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "sd-jwt-payload",
      "headRefOid": "b015372a894548d4c22a0af919fab75ebc018bd4",
      "closedAt": "2022-06-16T10:31:58Z",
      "mergedAt": "2022-06-16T10:31:58Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "f6d5dc80182979a8417f626718973671e0492790"
      },
      "comments": [
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree with @danielfett 's suggested changes.",
          "createdAt": "2022-06-13T10:55:34Z",
          "updatedAt": "2022-06-13T10:55:34Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM472GLn",
          "commit": {
            "abbreviatedOid": "f9126e0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-06-13T09:23:26Z",
          "updatedAt": "2022-06-13T09:26:02Z",
          "comments": [
            {
              "originalPosition": 115,
              "body": "```suggestion\r\nIn this example, the Issuer is using the following object as a set of claims to issue to the Holder:\r\n```",
              "createdAt": "2022-06-13T09:23:26Z",
              "updatedAt": "2022-06-13T09:26:02Z"
            },
            {
              "originalPosition": 96,
              "body": "```suggestion\r\nAn SVC can consist of the following claims:\r\n```",
              "createdAt": "2022-06-13T09:23:47Z",
              "updatedAt": "2022-06-13T09:26:02Z"
            },
            {
              "originalPosition": 76,
              "body": "```suggestion\r\nis using a flat structure, i.e., all of the values in the `address` claim can only be disclosed in full.\r\n```",
              "createdAt": "2022-06-13T09:24:34Z",
              "updatedAt": "2022-06-13T09:26:02Z"
            },
            {
              "originalPosition": 58,
              "body": "```suggestion\r\nand Example 2 is a non-normative example of an SD-JWT using a 'structured' `_sd` object.\r\n```",
              "createdAt": "2022-06-13T09:25:17Z",
              "updatedAt": "2022-06-13T09:26:02Z"
            },
            {
              "originalPosition": 59,
              "body": "```suggestion\r\nThe difference between the examples is how the `address` claim is disclosed.\r\n```",
              "createdAt": "2022-06-13T09:25:29Z",
              "updatedAt": "2022-06-13T09:26:02Z"
            },
            {
              "originalPosition": 61,
              "body": "```suggestion\r\nBoth examples use the following object as the set of claims that the Issuer is issuing:\r\n```",
              "createdAt": "2022-06-13T09:25:54Z",
              "updatedAt": "2022-06-13T09:26:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM472heE",
          "commit": {
            "abbreviatedOid": "f9126e0"
          },
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I'm good to go with this once @danielfett 's suggestions have been incorporated.",
          "createdAt": "2022-06-13T10:59:15Z",
          "updatedAt": "2022-06-13T10:59:15Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM4720ne",
          "commit": {
            "abbreviatedOid": "f9126e0"
          },
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Please see the content of my previous approval.  I clicked the wrong part of the page and cleared my \"reviewed\" status.",
          "createdAt": "2022-06-13T12:11:28Z",
          "updatedAt": "2022-06-13T12:11:28Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM47-NE6",
          "commit": {
            "abbreviatedOid": "cd6d387"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-14T16:16:59Z",
          "updatedAt": "2022-06-14T16:16:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 45,
      "id": "PR_kwDOHTmVzM45h0C8",
      "title": "adding an example of a SD-JWT-R as a W3C VP in example 3",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/45",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "per issue #2 ",
      "createdAt": "2022-06-13T01:53:21Z",
      "updatedAt": "2022-09-19T07:17:33Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "71ce35be3d7bc0e180951dd64767562fda21c31d",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "jwt-vp-example",
      "headRefOid": "e3526dca4bac5ebf0e2ddd4785e56acaa044a267",
      "closedAt": "2022-06-14T05:52:12Z",
      "mergedAt": "2022-06-14T05:52:12Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "b9dd05e4c5a5525305a63e10b0661fdbce7c039b"
      },
      "comments": [
        {
          "author": "Muthurajj",
          "authorAssociation": "NONE",
          "body": "Where this file i could find it?\r\n",
          "createdAt": "2022-09-19T07:17:33Z",
          "updatedAt": "2022-09-19T07:17:33Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM472JqH",
          "commit": {
            "abbreviatedOid": "240b735"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "This seems to be based not on master, but to include some changes from other pull requests. I'll review again after the other pull requests are in master.",
          "createdAt": "2022-06-13T09:34:39Z",
          "updatedAt": "2022-06-13T09:34:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 46,
      "id": "PR_kwDOHTmVzM45jFpG",
      "title": "Fix example (Issue #20)",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/46",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "This replaces PR #40 ",
      "createdAt": "2022-06-13T09:40:55Z",
      "updatedAt": "2022-06-13T15:24:02Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "067ca84759a9d754e60d36c9b7f85c0bb8b72250",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/fix-example",
      "headRefOid": "efe60f50f27b93f88a44c6e5b5cc0c7d5a58cdde",
      "closedAt": "2022-06-13T15:24:02Z",
      "mergedAt": "2022-06-13T15:24:02Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "510e25139ed3fa8dbf6021f2822833234874c2f4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM473_cN",
          "commit": {
            "abbreviatedOid": "efe60f5"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-13T15:23:56Z",
          "updatedAt": "2022-06-13T15:23:56Z",
          "comments": []
        }
      ]
    },
    {
      "number": 52,
      "id": "PR_kwDOHTmVzM45xIZl",
      "title": "clarify that signing SD-JWT is mandatory",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/52",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Per Issue #48 and #49\r\n(first draft, needs some elaboration why sign/not sign)",
      "createdAt": "2022-06-16T10:54:43Z",
      "updatedAt": "2022-06-17T07:14:46Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "f6d5dc80182979a8417f626718973671e0492790",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "sign-sd-jwt",
      "headRefOid": "9296150c8964e0d3b26507b88d247b659b28ace8",
      "closedAt": "2022-06-17T07:14:45Z",
      "mergedAt": "2022-06-17T07:14:45Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "6e35f2134d87a030ee8913d6bf8499c6e4d85eac"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 54,
      "id": "PR_kwDOHTmVzM45xgQJ",
      "title": "Fixes #53 verifies HOLDER_PUBLIC_KEY from sub_jwk",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/54",
      "state": "MERGED",
      "author": "kushaldas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We now verify that the HOLDER_PUBLIC_KEY is the same from `sub_jwk` of the *SD-JWT* payload.\r\n\r\nFixes #53. ",
      "createdAt": "2022-06-16T12:39:18Z",
      "updatedAt": "2022-06-17T07:12:27Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "f6d5dc80182979a8417f626718973671e0492790",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "update_holder_claim",
      "headRefOid": "57fa8f9212150f78a9020233a3211f4a4c8c11df",
      "closedAt": "2022-06-17T07:12:26Z",
      "mergedAt": "2022-06-17T07:12:26Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "090d31ebd67f857e6368b8c1e7f062c5f670a9ae"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 55,
      "id": "PR_kwDOHTmVzM451Hng",
      "title": "minimum reference to the holder binding.",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/55",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Issue #24 and #23.\r\n\r\nDescribing the concept of holder binding and giving minimum directions on:\r\n- find pubKey in SD-JWT\r\n- Sign SD-JWT-R using privKey bound to a pubKey in SD-JWT\r\n\r\nbut leaving details to the profiles and implementations.",
      "createdAt": "2022-06-17T05:15:08Z",
      "updatedAt": "2022-06-18T04:16:52Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "f6d5dc80182979a8417f626718973671e0492790",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "holder-binding",
      "headRefOid": "b7e9124be3ac7761ae31dceb719367d5a96f3f9f",
      "closedAt": "2022-06-18T04:16:51Z",
      "mergedAt": "2022-06-18T04:16:51Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "8958924a2d14f359ccee79110f95832d09d8d2bf"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM48O8mc",
          "commit": {
            "abbreviatedOid": "b7e9124"
          },
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-17T14:04:37Z",
          "updatedAt": "2022-06-17T14:04:37Z",
          "comments": []
        }
      ]
    },
    {
      "number": 56,
      "id": "PR_kwDOHTmVzM451chm",
      "title": "This adds the hash_alg key as introduced in PR #39",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/56",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-06-17T07:31:53Z",
      "updatedAt": "2022-06-23T08:25:08Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "0806868914604aa4e3ab2132ff1a35c8c5a69313",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/fix-examples-pr39",
      "headRefOid": "10d480fa633ba09f14e624235c07cc560deac13b",
      "closedAt": "2022-06-23T08:25:08Z",
      "mergedAt": "2022-06-23T08:25:08Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "c6ef2461089d7787f22e390d1ccec0d22479eec4"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 58,
      "id": "PR_kwDOHTmVzM4518Af",
      "title": "chore: [README] demo text and .gitignore",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/58",
      "state": "MERGED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- fix: README typos\r\n- feat: .gitignore\r\n- chore: examples update",
      "createdAt": "2022-06-17T09:55:53Z",
      "updatedAt": "2022-06-17T14:11:31Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "6e35f2134d87a030ee8913d6bf8499c6e4d85eac",
      "headRepository": "peppelinux/draft-selective-disclosure-jwt",
      "headRefName": "demo-readme",
      "headRefOid": "f6b567bae0bef5dc2aa22da69c13a0119ff62f3d",
      "closedAt": "2022-06-17T14:11:31Z",
      "mergedAt": "2022-06-17T14:11:31Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "4c922dea83b10e95916ddb1545feedb297ceab7d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM48O-aE",
          "commit": {
            "abbreviatedOid": "f6b567b"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-17T14:10:31Z",
          "updatedAt": "2022-06-17T14:10:31Z",
          "comments": []
        }
      ]
    },
    {
      "number": 61,
      "id": "PR_kwDOHTmVzM452UPv",
      "title": "chore: [demo] python code refactor",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/61",
      "state": "MERGED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Some code linting and cleanup I made reading the code and getting stuffs from it",
      "createdAt": "2022-06-17T11:55:32Z",
      "updatedAt": "2022-07-06T18:03:55Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "3de8e4113e59a95e92e5a9c03d2d266cb0e33e4d",
      "headRepository": "peppelinux/draft-selective-disclosure-jwt",
      "headRefName": "pyrefactor",
      "headRefOid": "93b33f923c4845a06b8950f13ececa8c92e2d660",
      "closedAt": "2022-07-06T18:03:55Z",
      "mergedAt": "2022-07-06T18:03:55Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "0166cde0c195a70aa1241ef25ce0de44e6fce4d4"
      },
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "I'd like to continue working on this to facilitate the migration in the future of this code to a real pypi python package\r\n\r\nwe may consider setup.py/poetry and also the adoption of argparse (py stdlib) to handle the inline command arguments\r\n\r\nthe simple and the structured SD-JWT may be handled with a proper argument, like `-type set(simple, structured)` where structured may be the default one ",
          "createdAt": "2022-06-18T10:03:51Z",
          "updatedAt": "2022-06-18T10:04:12Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Thanks for working on this! Very much needed and welcome clean-up of the code!",
          "createdAt": "2022-06-22T07:02:48Z",
          "updatedAt": "2022-06-22T07:02:48Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "Thank you @danielfett \r\n\r\nI think that this PR can be improved but first of all we may decide if merge as it is and right now and implement asap the hash_alg claim and all the other improvements that we can actually have. Probably aklso the encryption, I'd move your code to another PR aligned to this, or you or together, the same for me.\r\n\r\nI'd prevent to leave this code as PR and moving ahead the legacy code in the meantime, this would cause to me to spend more effort to aling the code. But that's not for hurry but just to get your point of view in a milestone",
          "createdAt": "2022-06-22T09:39:35Z",
          "updatedAt": "2022-06-22T09:39:35Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Looking forward to merging this once it is ready, finally clean python code :-) ",
          "createdAt": "2022-06-30T08:50:27Z",
          "updatedAt": "2022-06-30T08:50:27Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "Before merging this, do we have to revert this commit?\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/4a4575f36906c61471179b8b530f47d980853ba1\r\n\r\nit seems that's linked to an ingoing discussion here\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/60\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/83",
          "createdAt": "2022-07-04T09:37:03Z",
          "updatedAt": "2022-07-04T09:39:21Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Yes, please remove.",
          "createdAt": "2022-07-04T09:56:06Z",
          "updatedAt": "2022-07-04T09:56:06Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "> Yes, please remove.\r\n\r\nDone here\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/18a45e742ddcf285eb7c982fc6104365928b52ed",
          "createdAt": "2022-07-04T09:58:59Z",
          "updatedAt": "2022-07-04T09:58:59Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM48Vdnl",
          "commit": {
            "abbreviatedOid": "6136437"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-06-20T13:18:44Z",
          "updatedAt": "2022-06-20T13:20:31Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "Can you please change this so it observes the \"no randomness\" mode (which would better be called \"reduced randomness\")? This way, we get less changes lines in git when the examples are recreated.",
              "createdAt": "2022-06-20T13:18:44Z",
              "updatedAt": "2022-06-20T13:20:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48VjMP",
          "commit": {
            "abbreviatedOid": "6136437"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-20T13:34:10Z",
          "updatedAt": "2022-06-20T13:34:11Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "Ok, so this code has also the scope to put examples in the specs\r\n\r\nI'll put an argparse CLI with parameters to get static values or random one. Do you approve this approach?",
              "createdAt": "2022-06-20T13:34:10Z",
              "updatedAt": "2022-06-20T13:34:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48V10d",
          "commit": {
            "abbreviatedOid": "6136437"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-20T14:11:37Z",
          "updatedAt": "2022-06-20T14:11:37Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "Yes! The code is rough around the edges and argparse should be in there anyway :-)",
              "createdAt": "2022-06-20T14:11:37Z",
              "updatedAt": "2022-06-20T14:11:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48WVs9",
          "commit": {
            "abbreviatedOid": "6136437"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-20T15:49:59Z",
          "updatedAt": "2022-06-20T15:50:00Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "consider it done",
              "createdAt": "2022-06-20T15:50:00Z",
              "updatedAt": "2022-06-20T15:50:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48fX6f",
          "commit": {
            "abbreviatedOid": "8fc20d7"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-22T09:40:30Z",
          "updatedAt": "2022-06-22T09:40:30Z",
          "comments": [
            {
              "originalPosition": 78,
              "body": "@danielfett probably in the update example we may use the same salt to prevent useless changes in the draft",
              "createdAt": "2022-06-22T09:40:30Z",
              "updatedAt": "2022-06-22T09:40:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48fYHi",
          "commit": {
            "abbreviatedOid": "8fc20d7"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-22T09:41:06Z",
          "updatedAt": "2022-06-22T09:41:07Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "I'd move these two functions in a `utils.py` file",
              "createdAt": "2022-06-22T09:41:07Z",
              "updatedAt": "2022-06-22T09:41:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48fYbN",
          "commit": {
            "abbreviatedOid": "8fc20d7"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-22T09:42:03Z",
          "updatedAt": "2022-06-22T09:42:04Z",
          "comments": [
            {
              "originalPosition": 64,
              "body": "this is actually not used :)\r\n\r\nyes, I can bind it and also we may add some relevant loggin call in the `operations.py` and `walk.py` files\r\n",
              "createdAt": "2022-06-22T09:42:04Z",
              "updatedAt": "2022-06-22T09:42:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48fY1v",
          "commit": {
            "abbreviatedOid": "8fc20d7"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-22T09:43:22Z",
          "updatedAt": "2022-06-22T09:43:22Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "we may use the `--no-randomness` to obtain a constant salt value from the demo_settings file",
              "createdAt": "2022-06-22T09:43:22Z",
              "updatedAt": "2022-06-22T09:43:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48oFQO",
          "commit": {
            "abbreviatedOid": "8fc20d7"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-23T14:43:09Z",
          "updatedAt": "2022-06-23T14:43:09Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "Done here\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/0b17a2be43a62af6a02ebd9df220a77543d32748",
              "createdAt": "2022-06-23T14:43:09Z",
              "updatedAt": "2022-06-23T14:43:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48oHo0",
          "commit": {
            "abbreviatedOid": "8fc20d7"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-23T14:46:40Z",
          "updatedAt": "2022-06-23T14:46:41Z",
          "comments": [
            {
              "originalPosition": 64,
              "body": "Done here\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/4bf338d46731e5be6d3b71c5440df83be746f986",
              "createdAt": "2022-06-23T14:46:40Z",
              "updatedAt": "2022-06-23T14:46:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48pGm6",
          "commit": {
            "abbreviatedOid": "0274d85"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-23T17:36:05Z",
          "updatedAt": "2022-06-23T17:36:05Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "This is the only pending thing to do asap, because if we submit a custom settings, well, the paramenter MUST be taken by this latter\r\n\r\nanyway it would be better to start a revision and merge in the main branch to prevent other misalignment with the ingoing changes, I'll do this refactor asap",
              "createdAt": "2022-06-23T17:36:05Z",
              "updatedAt": "2022-06-23T17:36:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48qEU6",
          "commit": {
            "abbreviatedOid": "0274d85"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-23T21:19:38Z",
          "updatedAt": "2022-06-23T21:19:39Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "then I did in this way\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/71fdac35404c0127c21fcce9fbd3b386b932a434",
              "createdAt": "2022-06-23T21:19:39Z",
              "updatedAt": "2022-06-23T21:19:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48xU2G",
          "commit": {
            "abbreviatedOid": "4a4575f"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-27T03:26:27Z",
          "updatedAt": "2022-06-27T03:26:28Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "\"instead of\" what? - needs clarification ",
              "createdAt": "2022-06-27T03:26:28Z",
              "updatedAt": "2022-06-27T03:26:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48xd-a",
          "commit": {
            "abbreviatedOid": "4a4575f"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-27T04:46:33Z",
          "updatedAt": "2022-06-27T04:46:33Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "It's the text that's actually Is in the rradme, moving in another Place needs ti be rephrased. Thelat instead point to the alternative pip installation, i'll fix this, thanks",
              "createdAt": "2022-06-27T04:46:33Z",
              "updatedAt": "2022-06-27T04:46:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48eeOz",
          "commit": {
            "abbreviatedOid": "4a4575f"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-06-22T06:56:31Z",
          "updatedAt": "2022-06-27T11:27:08Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "The help text does not match the argument.",
              "createdAt": "2022-06-22T06:56:31Z",
              "updatedAt": "2022-06-27T11:27:08Z"
            },
            {
              "originalPosition": 145,
              "body": "```suggestion\r\n# They may came from a custom python settings file :-)\r\n```",
              "createdAt": "2022-06-22T06:57:02Z",
              "updatedAt": "2022-06-27T11:27:08Z"
            },
            {
              "originalPosition": 260,
              "body": "I didn't find to do the following so far, but if you have time, it would be good for clean up:\r\n\r\n- Generalize the function `replace_all_in_main` - e.g., `example-simple` could be an argument - so that we only need to define this once.\r\n- Throw out all 'print' statements above\r\n- Instead produce the CLI output from the `replacements` dict that is created below (e.g., print `replacements['structured-sd-jwt-claims']` instead of the `print_repr` in Line 172.",
              "createdAt": "2022-06-22T07:02:01Z",
              "updatedAt": "2022-06-27T11:27:08Z"
            },
            {
              "originalPosition": 2,
              "body": "Any objections against using black instead?",
              "createdAt": "2022-06-27T11:21:44Z",
              "updatedAt": "2022-06-27T11:27:08Z"
            },
            {
              "originalPosition": 3,
              "body": "```suggestion\r\nDEFAULT_SIGNING_ALG = \"RS256\"\r\n```",
              "createdAt": "2022-06-27T11:22:02Z",
              "updatedAt": "2022-06-27T11:27:08Z"
            },
            {
              "originalPosition": 16,
              "body": "```suggestion\r\n    DEFAULT_SIGNING_ALG, \r\n```",
              "createdAt": "2022-06-27T11:22:22Z",
              "updatedAt": "2022-06-27T11:27:08Z"
            },
            {
              "originalPosition": 84,
              "body": "```suggestion\r\n    _alg = sign_alg or DEFAULT_SIGNING_ALG\r\n```",
              "createdAt": "2022-06-27T11:22:33Z",
              "updatedAt": "2022-06-27T11:27:08Z"
            },
            {
              "originalPosition": 135,
              "body": "```suggestion\r\n    _alg = sign_alg or DEFAULT_SIGNING_ALG\r\n```",
              "createdAt": "2022-06-27T11:22:42Z",
              "updatedAt": "2022-06-27T11:27:08Z"
            },
            {
              "originalPosition": 198,
              "body": "```suggestion\r\n    _alg = sign_alg or DEFAULT_SIGNING_ALG\r\n```",
              "createdAt": "2022-06-27T11:22:53Z",
              "updatedAt": "2022-06-27T11:27:08Z"
            },
            {
              "originalPosition": 37,
              "body": "The help text does not match the switch that is defined here.",
              "createdAt": "2022-06-27T11:25:27Z",
              "updatedAt": "2022-06-27T11:27:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48807f",
          "commit": {
            "abbreviatedOid": "4a4575f"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-28T23:26:42Z",
          "updatedAt": "2022-06-28T23:26:42Z",
          "comments": [
            {
              "originalPosition": 2,
              "body": "black is ok",
              "createdAt": "2022-06-28T23:26:42Z",
              "updatedAt": "2022-06-28T23:26:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM4881C_",
          "commit": {
            "abbreviatedOid": "8fc20d7"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-28T23:27:40Z",
          "updatedAt": "2022-06-28T23:27:40Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "my bad, I'll do it, I'll take a week because I'm out of office right now",
              "createdAt": "2022-06-28T23:27:40Z",
              "updatedAt": "2022-06-28T23:27:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM4881Qk",
          "commit": {
            "abbreviatedOid": "8fc20d7"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-28T23:29:31Z",
          "updatedAt": "2022-06-28T23:29:31Z",
          "comments": [
            {
              "originalPosition": 260,
              "body": "consider it done, we may also add real unit tests and it's something I will",
              "createdAt": "2022-06-28T23:29:31Z",
              "updatedAt": "2022-06-28T23:29:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM4881Yl",
          "commit": {
            "abbreviatedOid": "4a4575f"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-28T23:30:36Z",
          "updatedAt": "2022-06-28T23:30:36Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "My bad, this will need a more accurate refactor, I'll do it, due to this I cant merge your suggestion right now.\r\nthank you, nice shot",
              "createdAt": "2022-06-28T23:30:36Z",
              "updatedAt": "2022-06-28T23:30:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM4881cq",
          "commit": {
            "abbreviatedOid": "4a4575f"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-28T23:31:08Z",
          "updatedAt": "2022-06-28T23:31:08Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "My bad, consider it done",
              "createdAt": "2022-06-28T23:31:08Z",
              "updatedAt": "2022-06-28T23:31:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49M6Ns",
          "commit": {
            "abbreviatedOid": "4a4575f"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-02T23:24:02Z",
          "updatedAt": "2022-07-02T23:24:02Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "I decided to remove this text and adopt `pip` by default, in setup.py I defined `jwcrypto>=1.3.1`",
              "createdAt": "2022-07-02T23:24:02Z",
              "updatedAt": "2022-07-02T23:24:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49M6OV",
          "commit": {
            "abbreviatedOid": "4a4575f"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-02T23:25:03Z",
          "updatedAt": "2022-07-02T23:25:04Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "@Sakurann let mw know if this is good to you and I can resovle this conversation or if we may insert again, with a better clarification, that text",
              "createdAt": "2022-07-02T23:25:03Z",
              "updatedAt": "2022-07-02T23:25:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49M6Rj",
          "commit": {
            "abbreviatedOid": "8fc20d7"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-02T23:31:26Z",
          "updatedAt": "2022-07-02T23:31:27Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "Done here\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/cbf13bef73911da2f37b969d0cd7b7d1993d667b",
              "createdAt": "2022-07-02T23:31:27Z",
              "updatedAt": "2022-07-02T23:31:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49M6Rq",
          "commit": {
            "abbreviatedOid": "4a4575f"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-02T23:31:34Z",
          "updatedAt": "2022-07-02T23:31:34Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Done here\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/cbf13bef73911da2f37b969d0cd7b7d1993d667b",
              "createdAt": "2022-07-02T23:31:34Z",
              "updatedAt": "2022-07-02T23:31:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49M6Sm",
          "commit": {
            "abbreviatedOid": "4a4575f"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-02T23:33:14Z",
          "updatedAt": "2022-07-02T23:33:14Z",
          "comments": [
            {
              "originalPosition": 2,
              "body": "Done here\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/46099e910dd2c9fcc4dc28e13003b3087d70a0a6",
              "createdAt": "2022-07-02T23:33:14Z",
              "updatedAt": "2022-07-02T23:33:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49M6V-",
          "commit": {
            "abbreviatedOid": "4a4575f"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-02T23:39:03Z",
          "updatedAt": "2022-07-02T23:39:03Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "done here: https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/b30cbc9bf43e003eb523df3989f0a1ea6e27cc73",
              "createdAt": "2022-07-02T23:39:03Z",
              "updatedAt": "2022-07-02T23:39:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49M6WC",
          "commit": {
            "abbreviatedOid": "4a4575f"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-02T23:39:08Z",
          "updatedAt": "2022-07-02T23:39:08Z",
          "comments": [
            {
              "originalPosition": 84,
              "body": "done here: https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/b30cbc9bf43e003eb523df3989f0a1ea6e27cc73",
              "createdAt": "2022-07-02T23:39:08Z",
              "updatedAt": "2022-07-02T23:39:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49M6WD",
          "commit": {
            "abbreviatedOid": "4a4575f"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-02T23:39:15Z",
          "updatedAt": "2022-07-02T23:39:16Z",
          "comments": [
            {
              "originalPosition": 198,
              "body": "done here: https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/b30cbc9bf43e003eb523df3989f0a1ea6e27cc73",
              "createdAt": "2022-07-02T23:39:15Z",
              "updatedAt": "2022-07-02T23:39:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49M6WN",
          "commit": {
            "abbreviatedOid": "4a4575f"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-02T23:39:28Z",
          "updatedAt": "2022-07-02T23:39:29Z",
          "comments": [
            {
              "originalPosition": 135,
              "body": "done here: https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/b30cbc9bf43e003eb523df3989f0a1ea6e27cc73",
              "createdAt": "2022-07-02T23:39:29Z",
              "updatedAt": "2022-07-02T23:39:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49M6WY",
          "commit": {
            "abbreviatedOid": "4a4575f"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-02T23:39:38Z",
          "updatedAt": "2022-07-02T23:39:38Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "done here: https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/b30cbc9bf43e003eb523df3989f0a1ea6e27cc73",
              "createdAt": "2022-07-02T23:39:38Z",
              "updatedAt": "2022-07-02T23:39:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49M6Wk",
          "commit": {
            "abbreviatedOid": "4a4575f"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-02T23:39:59Z",
          "updatedAt": "2022-07-02T23:40:00Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "Done here\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/commit/cbf13bef73911da2f37b969d0cd7b7d1993d667b",
              "createdAt": "2022-07-02T23:39:59Z",
              "updatedAt": "2022-07-02T23:40:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49M6hs",
          "commit": {
            "abbreviatedOid": "b30cbc9"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-03T00:00:25Z",
          "updatedAt": "2022-07-03T00:00:25Z",
          "comments": [
            {
              "originalPosition": 260,
              "body": "Started here\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/bfc84bf003d89db8fd45aba9633752eee690d168\r\n\r\nMore work must be done here\r\n\r\n> Generalize the function replace_all_in_main - e.g., example-simple could be an argument - so that we only need to define this once.\r\n\r\nDo you mean to not iter all the dict items but pass exactly the object, as an argument of `replace_all_in_main`, that  replace the matching placeholder? If this is it: ok by me.\r\n\r\n> Throw out all 'print' statements above\r\n\r\nFound only once and replace with a logger.info\r\n\r\n> Instead produce the CLI output from the replacements dict that is created below (e.g., print replacements['structured-sd-jwt-claims'] instead of the print_repr in Line 172.\r\n\r\nDo you mean that we should produce all the items in the replacements dict and then print_repr of these?\r\n\r\n",
              "createdAt": "2022-07-03T00:00:25Z",
              "updatedAt": "2022-07-03T00:00:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49ELD5",
          "commit": {
            "abbreviatedOid": "bfc84bf"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-30T08:48:48Z",
          "updatedAt": "2022-07-04T07:47:42Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "Thanks! Also, `type` is probably a little bit of a misnomer. I propose `--example` for this instead.\r\nSee also https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/80#issuecomment-1170476670",
              "createdAt": "2022-06-30T08:48:48Z",
              "updatedAt": "2022-07-04T07:47:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49OTaX",
          "commit": {
            "abbreviatedOid": "bfc84bf"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-04T07:58:09Z",
          "updatedAt": "2022-07-04T07:58:09Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM49Ovsu",
          "commit": {
            "abbreviatedOid": "4a4575f"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-04T09:27:57Z",
          "updatedAt": "2022-07-04T09:27:58Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "Ok, I'm changing that parameter with --example\r\ncompletely agree, I also had some concerns about that, so your proposal is the solution",
              "createdAt": "2022-07-04T09:27:57Z",
              "updatedAt": "2022-07-04T09:27:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49OxoZ",
          "commit": {
            "abbreviatedOid": "4a4575f"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-04T09:34:07Z",
          "updatedAt": "2022-07-04T09:34:07Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "Done here\r\n[8c2643c](https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/8c2643c6d51a095f28b07f955075205f79d550c4)",
              "createdAt": "2022-07-04T09:34:07Z",
              "updatedAt": "2022-07-04T09:34:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49P0sd",
          "commit": {
            "abbreviatedOid": "8fc20d7"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-04T13:27:58Z",
          "updatedAt": "2022-07-04T13:27:58Z",
          "comments": [
            {
              "originalPosition": 78,
              "body": "Ok, I'm doing it",
              "createdAt": "2022-07-04T13:27:58Z",
              "updatedAt": "2022-07-04T13:27:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49XNmL",
          "commit": {
            "abbreviatedOid": "18a45e7"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T04:58:28Z",
          "updatedAt": "2022-07-06T04:58:29Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Why is this duplicating?\r\n\r\n```suggestion\r\n```",
              "createdAt": "2022-07-06T04:58:28Z",
              "updatedAt": "2022-07-06T04:58:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49XNqm",
          "commit": {
            "abbreviatedOid": "18a45e7"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T04:59:00Z",
          "updatedAt": "2022-07-06T04:59:00Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "Again, is this duplication?\r\n\r\n```suggestion\r\n```",
              "createdAt": "2022-07-06T04:59:00Z",
              "updatedAt": "2022-07-06T04:59:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49XN18",
          "commit": {
            "abbreviatedOid": "18a45e7"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T05:00:12Z",
          "updatedAt": "2022-07-06T05:00:13Z",
          "comments": [
            {
              "originalPosition": 100,
              "body": "audience of the release is verifier, right?\r\n```suggestion\r\n  \"aud\": \"https://example.com/verifier\",\r\n```",
              "createdAt": "2022-07-06T05:00:12Z",
              "updatedAt": "2022-07-06T05:00:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49XPis",
          "commit": {
            "abbreviatedOid": "18a45e7"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T05:12:21Z",
          "updatedAt": "2022-07-06T05:12:21Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "```suggestion\r\nSD_JWT_HEADER = \"sd+jwt\"\r\n```",
              "createdAt": "2022-07-06T05:12:21Z",
              "updatedAt": "2022-07-06T05:12:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49XT1S",
          "commit": {
            "abbreviatedOid": "18a45e7"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T05:41:28Z",
          "updatedAt": "2022-07-06T05:41:28Z",
          "comments": [
            {
              "originalPosition": 209,
              "body": "again, need to verify the aud of the release ie verifier?\r\n```suggestion\r\n    vc = verify(\r\n        combined_sd_jwt_sd_jwt_release,\r\n        ISSUER_PUBLIC_KEY,\r\n        ISSUER,\r\n        HOLDER_KEY,\r\n        VERIFIER,\r\n        _args.nonce,\r\n    )\r\n```",
              "createdAt": "2022-07-06T05:41:28Z",
              "updatedAt": "2022-07-06T05:41:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49XVEf",
          "commit": {
            "abbreviatedOid": "18a45e7"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T05:49:19Z",
          "updatedAt": "2022-07-06T05:49:20Z",
          "comments": [
            {
              "originalPosition": 182,
              "body": "Isn't the audience verifier?\r\n```suggestion\r\n    #####\r\n    print(\"# Creating the SD-JWT-Release\")\r\n    sd_jwt_release_payload, serialized_sd_jwt_release = create_release_jwt(\r\n        _args.nonce, VERIFIER, DISCLOSED_CLAIMS, serialized_svc, HOLDER_KEY\r\n    )\r\n    \r\n```",
              "createdAt": "2022-07-06T05:49:19Z",
              "updatedAt": "2022-07-06T05:49:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49XVfx",
          "commit": {
            "abbreviatedOid": "18a45e7"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T05:51:54Z",
          "updatedAt": "2022-07-06T05:51:54Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "```suggestion\r\nISSUER = \"https://example.com/issuer\"\r\nVERIFIER = \"https://example.com/verifier\"\r\n```",
              "createdAt": "2022-07-06T05:51:54Z",
              "updatedAt": "2022-07-06T05:51:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49XjTM",
          "commit": {
            "abbreviatedOid": "18a45e7"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T06:58:50Z",
          "updatedAt": "2022-07-06T06:58:51Z",
          "comments": [
            {
              "originalPosition": 100,
              "body": "Yes, should be the verifier!",
              "createdAt": "2022-07-06T06:58:50Z",
              "updatedAt": "2022-07-06T06:58:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49Xlgk",
          "commit": {
            "abbreviatedOid": "18a45e7"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T07:07:29Z",
          "updatedAt": "2022-07-06T07:07:30Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "Do we decided to remove this Yesterday?",
              "createdAt": "2022-07-06T07:07:29Z",
              "updatedAt": "2022-07-06T07:07:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49Xns7",
          "commit": {
            "abbreviatedOid": "18a45e7"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T07:15:33Z",
          "updatedAt": "2022-07-06T07:15:33Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "At least it should not be in this PR. Ideally, one PR per issue.",
              "createdAt": "2022-07-06T07:15:33Z",
              "updatedAt": "2022-07-06T07:15:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49Xqwy",
          "commit": {
            "abbreviatedOid": "18a45e7"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T07:26:24Z",
          "updatedAt": "2022-07-06T07:26:24Z",
          "comments": [
            {
              "originalPosition": 100,
              "body": "mmhh... It seems coming from the legacy code. Thank you, I'm doing a general check for this",
              "createdAt": "2022-07-06T07:26:24Z",
              "updatedAt": "2022-07-06T07:26:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49XsjF",
          "commit": {
            "abbreviatedOid": "18a45e7"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T07:32:27Z",
          "updatedAt": "2022-07-06T07:32:27Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "Done here **https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/1bc26f545cbb5dd68496f2246c21231f4019e6d4**",
              "createdAt": "2022-07-06T07:32:27Z",
              "updatedAt": "2022-07-06T07:32:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49Xyhs",
          "commit": {
            "abbreviatedOid": "18a45e7"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T07:46:14Z",
          "updatedAt": "2022-07-06T07:46:14Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "yes, ideally let's remove it from this PR.",
              "createdAt": "2022-07-06T07:46:14Z",
              "updatedAt": "2022-07-06T07:46:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49YMhD",
          "commit": {
            "abbreviatedOid": "18a45e7"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T09:03:36Z",
          "updatedAt": "2022-07-06T09:03:36Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "Done here\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/6a7dbc6bbec4ad807ad2b1f1107375a66d3cfecf",
              "createdAt": "2022-07-06T09:03:36Z",
              "updatedAt": "2022-07-06T09:03:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49YMnc",
          "commit": {
            "abbreviatedOid": "18a45e7"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T09:03:52Z",
          "updatedAt": "2022-07-06T09:03:53Z",
          "comments": [
            {
              "originalPosition": 182,
              "body": "Done here\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/6a7dbc6bbec4ad807ad2b1f1107375a66d3cfecf",
              "createdAt": "2022-07-06T09:03:52Z",
              "updatedAt": "2022-07-06T09:03:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49YMwU",
          "commit": {
            "abbreviatedOid": "18a45e7"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T09:04:17Z",
          "updatedAt": "2022-07-06T09:04:18Z",
          "comments": [
            {
              "originalPosition": 209,
              "body": "Done here\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/6a7dbc6bbec4ad807ad2b1f1107375a66d3cfecf",
              "createdAt": "2022-07-06T09:04:17Z",
              "updatedAt": "2022-07-06T09:04:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49YTzN",
          "commit": {
            "abbreviatedOid": "18a45e7"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T09:25:00Z",
          "updatedAt": "2022-07-06T09:25:00Z",
          "comments": [
            {
              "originalPosition": 100,
              "body": "Done here\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/6a7dbc6bbec4ad807ad2b1f1107375a66d3cfecf",
              "createdAt": "2022-07-06T09:25:00Z",
              "updatedAt": "2022-07-06T09:25:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49YUIf",
          "commit": {
            "abbreviatedOid": "8fc20d7"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T09:25:58Z",
          "updatedAt": "2022-07-06T09:25:59Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Done here, nonce value is constant in the update-example script\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/6a7dbc6bbec4ad807ad2b1f1107375a66d3cfecf",
              "createdAt": "2022-07-06T09:25:58Z",
              "updatedAt": "2022-07-06T09:25:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49YUYF",
          "commit": {
            "abbreviatedOid": "8fc20d7"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T09:26:40Z",
          "updatedAt": "2022-07-06T09:26:40Z",
          "comments": [
            {
              "originalPosition": 78,
              "body": "Done here, nonce value is now constant in the update example\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/6a7dbc6bbec4ad807ad2b1f1107375a66d3cfecf",
              "createdAt": "2022-07-06T09:26:40Z",
              "updatedAt": "2022-07-06T09:26:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49Z8NK",
          "commit": {
            "abbreviatedOid": "bc651f9"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-07-06T14:35:11Z",
          "updatedAt": "2022-07-06T14:35:16Z",
          "comments": [
            {
              "originalPosition": 270,
              "body": "Something's missing above - the other examples are not generated.",
              "createdAt": "2022-07-06T14:35:11Z",
              "updatedAt": "2022-07-06T14:35:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49a-Ay",
          "commit": {
            "abbreviatedOid": "bc651f9"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T17:39:59Z",
          "updatedAt": "2022-07-06T17:39:59Z",
          "comments": [
            {
              "originalPosition": 270,
              "body": "Done here:\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/a6ed737cf67d03cfd78caadddf7d77aeff880862\r\n\r\nI'm doing a check if something is misaligned",
              "createdAt": "2022-07-06T17:39:59Z",
              "updatedAt": "2022-07-06T17:39:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49bBMa",
          "commit": {
            "abbreviatedOid": "bc651f9"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T17:51:41Z",
          "updatedAt": "2022-07-06T17:51:41Z",
          "comments": [
            {
              "originalPosition": 270,
              "body": "revision completed here: https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/93b33f923c4845a06b8950f13ececa8c92e2d660\r\n\r\nyes, something was missing :)",
              "createdAt": "2022-07-06T17:51:41Z",
              "updatedAt": "2022-07-06T17:51:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49bEcK",
          "commit": {
            "abbreviatedOid": "93b33f9"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thank you for doing this, @peppelinux !",
          "createdAt": "2022-07-06T18:03:33Z",
          "updatedAt": "2022-07-06T18:03:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 62,
      "id": "PR_kwDOHTmVzM452tEa",
      "title": "[do not merge] PoC: Use encryption instead of hashing",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/62",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "(spec not adapted yet)",
      "createdAt": "2022-06-17T13:50:18Z",
      "updatedAt": "2022-12-07T13:30:35Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "6e35f2134d87a030ee8913d6bf8499c6e4d85eac",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/encryption-is-the-new-hashing",
      "headRefOid": "2039792c29077eb7bb3959594704229cc97db6b3",
      "closedAt": "2022-12-07T13:30:35Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "I was looking for this.\r\nI'd propose a configuration paramenter to deal with both salted and encrypted payloads.\r\n\r\nIf you agree we may merge first this modest refactoring\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61\r\n\r\nand also the CI to get safe against regressions, stale sources and things\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/63\r\n\r\nhere an example of the running CI\r\nhttps://github.com/peppelinux/draft-selective-disclosure-jwt/runs/6937986323?check_suite_focus=true",
          "createdAt": "2022-06-17T15:14:05Z",
          "updatedAt": "2022-06-17T15:14:05Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Since it is unlikely that the final spec will support both encryption and hashing, let's keep them separate in the code base.",
          "createdAt": "2022-06-20T13:17:16Z",
          "updatedAt": "2022-06-20T13:17:16Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "+1 to Daniel's comment.",
          "createdAt": "2022-06-27T03:30:00Z",
          "updatedAt": "2022-06-27T03:30:00Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Since the spec has moved far away from what this PR was built for and problems have been addressed in other ways, I'm closing this PR.",
          "createdAt": "2022-12-07T13:30:35Z",
          "updatedAt": "2022-12-07T13:30:35Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 63,
      "id": "PR_kwDOHTmVzM4526Cq",
      "title": "feat: GH CI",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/63",
      "state": "MERGED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Github action continuous integration tests for the youth",
      "createdAt": "2022-06-17T14:44:01Z",
      "updatedAt": "2022-06-22T06:52:55Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "4c922dea83b10e95916ddb1545feedb297ceab7d",
      "headRepository": "peppelinux/draft-selective-disclosure-jwt",
      "headRefName": "ci",
      "headRefOid": "8e76f86b619dd793337bd8cd30025e1d1b6c2284",
      "closedAt": "2022-06-22T06:52:55Z",
      "mergedAt": "2022-06-22T06:52:55Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "2c9f3544ef352f562e926dac7678cc5f20b69b9c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM48VbcR",
          "commit": {
            "abbreviatedOid": "c9f30db"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-20T13:12:26Z",
          "updatedAt": "2022-06-20T13:12:26Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM48Vb6d",
          "commit": {
            "abbreviatedOid": "c9f30db"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-06-20T13:13:47Z",
          "updatedAt": "2022-06-20T13:15:51Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "Considering this is more a demo/reference code, not a library, I don't think we need to run this on three python versions. But I'm fine either way. ",
              "createdAt": "2022-06-20T13:13:47Z",
              "updatedAt": "2022-06-20T13:15:51Z"
            },
            {
              "originalPosition": 45,
              "body": "Adding `--replace` to the first example as that will tell us if the placeholders in main.md can be found; at least for this example, the other examples by design don't complain if the placeholders cannot be found.\r\n\r\nAdding the third example we have.\r\n\r\n```suggestion\r\n        python3 -m demo.simple --replace\r\n        python3 -m demo.simple_structured\r\n        python3 -m demo.complex_structured\r\n```",
              "createdAt": "2022-06-20T13:15:44Z",
              "updatedAt": "2022-06-20T13:15:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48Vkbm",
          "commit": {
            "abbreviatedOid": "c9f30db"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-20T13:37:51Z",
          "updatedAt": "2022-06-20T13:37:51Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "moving on the willing to migrate this PoC to a real python package and also considering the fact that an analyst may have different python versions this is a quite standard CI",
              "createdAt": "2022-06-20T13:37:51Z",
              "updatedAt": "2022-06-20T13:37:51Z"
            }
          ]
        }
      ]
    },
    {
      "number": 67,
      "id": "PR_kwDOHTmVzM455Bk5",
      "title": "feat: additional security considerations",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/67",
      "state": "MERGED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "# Security Considerations\r\n\r\n- feat: Minimum length of the salt\r\n- feat: weak hash algorithms to not use",
      "createdAt": "2022-06-18T10:00:46Z",
      "updatedAt": "2022-06-23T15:41:09Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "8958924a2d14f359ccee79110f95832d09d8d2bf",
      "headRepository": "peppelinux/draft-selective-disclosure-jwt",
      "headRefName": "seccons",
      "headRefOid": "3fa2cb890c9631e232538e28231e70c478ab33b4",
      "closedAt": "2022-06-23T15:41:08Z",
      "mergedAt": "2022-06-23T15:41:08Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "788140b998deceed374f6805b176ab687509ca8d"
      },
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "mh ... we already have `MUST contain at least 128 bits of pseudorandom data` in Section [SD_JWT Claims](https://github.com/oauthstuff/draft-selective-disclosure-jwt/blob/master/main.md#sd-jwt-claims)",
          "createdAt": "2022-06-18T12:35:14Z",
          "updatedAt": "2022-06-18T12:35:14Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "@danielfett I commited your suggestion\r\n\r\nI'm not sure that the normative language could be used in the considerations but it's good anyway to me, it's intellegibile :)",
          "createdAt": "2022-06-23T15:08:14Z",
          "updatedAt": "2022-06-23T15:08:14Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM48Va1b",
          "commit": {
            "abbreviatedOid": "c7667d0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-06-20T13:10:39Z",
          "updatedAt": "2022-06-20T13:10:55Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "```suggestion\r\nrevealed fundamental weaknesses and they MUST NOT be used.\r\n```",
              "createdAt": "2022-06-20T13:10:39Z",
              "updatedAt": "2022-06-20T13:10:55Z"
            },
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nThe length of the randomly-generated portion of the salt MUST be at least 128 bits.\r\n```",
              "createdAt": "2022-06-20T13:10:51Z",
              "updatedAt": "2022-06-20T13:10:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48ofsR",
          "commit": {
            "abbreviatedOid": "3fa2cb8"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-23T15:39:14Z",
          "updatedAt": "2022-06-23T15:39:14Z",
          "comments": []
        }
      ]
    },
    {
      "number": 69,
      "id": "PR_kwDOHTmVzM455HqL",
      "title": "fix: [SD-JWT] added hash_alg claim to all non normative examples",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/69",
      "state": "MERGED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "`hash_alg` is a REQUIRED claim in SD-JWT.\r\nThis PR fixes the non normative examples of SD-JWTs.\r\n\r\nThe PoC code remains as it is in this PR, with the willing to fix it in this PR\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61",
      "createdAt": "2022-06-18T12:48:08Z",
      "updatedAt": "2022-06-20T13:09:28Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "8958924a2d14f359ccee79110f95832d09d8d2bf",
      "headRepository": "peppelinux/draft-selective-disclosure-jwt",
      "headRefName": "hashalg",
      "headRefOid": "d3bcf0b5053986d9bd6785ae2f1ebfb9e04acbbf",
      "closedAt": "2022-06-20T13:09:28Z",
      "mergedAt": "2022-06-20T13:09:28Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "34e3f23c2df8a31064c341067962699750ae3dda"
      },
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "Ok, the relevant code is here\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/56 ",
          "createdAt": "2022-06-18T13:01:12Z",
          "updatedAt": "2022-06-18T13:01:12Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 70,
      "id": "PR_kwDOHTmVzM459POp",
      "title": "Added Implementation List to README",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/70",
      "state": "MERGED",
      "author": "fabian-hk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-06-20T15:08:38Z",
      "updatedAt": "2022-06-23T08:21:54Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "34e3f23c2df8a31064c341067962699750ae3dda",
      "headRepository": "fabian-hk/draft-selective-disclosure-jwt",
      "headRefName": "readme-implementation-list",
      "headRefOid": "7d1fb4988ccac2aa23085692b1168532cd996b8d",
      "closedAt": "2022-06-23T08:21:54Z",
      "mergedAt": "2022-06-23T08:21:54Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "0806868914604aa4e3ab2132ff1a35c8c5a69313"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 71,
      "id": "PR_kwDOHTmVzM46QAq9",
      "title": "Changes before -01",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/71",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "- Bump version number\r\n- Some grammar/spelling fixes, some clarifications\r\n- Added missing reference to VC Data Model\r\n- Diagram reformatted to vertical instead of horizontal, multiple verifiers instead of just one\r\n- In Concepts, clarify that holder binding is optional and renamed artifacts to defined names (e.g., RELEASE -> SD-JWT-RELEASE)\r\n- Terms and Definitions reformatted to use the \"description list\" format\r\n- Moved all examples except for Example 1 to Appendix (as suggested in Issue #44)",
      "createdAt": "2022-06-23T14:50:16Z",
      "updatedAt": "2022-06-23T15:05:06Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "acd6034de1c06c3804cb5bee22dff0c6bfce5eff",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/prepare-01",
      "headRefOid": "999a4b9eb76227d2c90ba585175f5906d75ff271",
      "closedAt": "2022-06-23T15:05:06Z",
      "mergedAt": "2022-06-23T15:05:06Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "08fe96dfad56685c02ea8a58ed37f647283d71b2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM48oQz1",
          "commit": {
            "abbreviatedOid": "999a4b9"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-23T15:04:59Z",
          "updatedAt": "2022-06-23T15:04:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 72,
      "id": "PR_kwDOHTmVzM46QNor",
      "title": "Fixes for Issue #68",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/72",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Most points in #68 have been addressed already. We can't change the list style, so keeping as is.",
      "createdAt": "2022-06-23T15:32:12Z",
      "updatedAt": "2022-06-23T15:39:52Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "08fe96dfad56685c02ea8a58ed37f647283d71b2",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/fix-68",
      "headRefOid": "38407c76a51beba2cdca2fe3007ec4427527fa61",
      "closedAt": "2022-06-23T15:39:52Z",
      "mergedAt": "2022-06-23T15:39:52Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "af1b384397fccd3f4dfa82e24f8bb737bd911306"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM48of58",
          "commit": {
            "abbreviatedOid": "38407c7"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-23T15:39:47Z",
          "updatedAt": "2022-06-23T15:39:47Z",
          "comments": []
        }
      ]
    },
    {
      "number": 78,
      "id": "PR_kwDOHTmVzM46VY5X",
      "title": "Editorial suggestions",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/78",
      "state": "MERGED",
      "author": "christianpaquin",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Some editorial changes:\r\n* Use (hash) digest instead of hash when describing the result of the hash operation\r\n* I'm suggesting to make the salt size a SHOULD vs. a MUST: 1) it doesn't affect interop, 2) some use cases might need smaller salts (with the option of using stronger (time/memory) digest derivation functions (hash)) to reduce the size of the artefact (e.g., constrained QR codes).\r\n* `_sd` --> `sd_digests`\r\n* Trimmed down duplicated info\r\n* More security consideration details for hash function\r\n* Clarified unlinkability statement in privacy consideration\r\n* Some typos",
      "createdAt": "2022-06-24T20:14:03Z",
      "updatedAt": "2022-06-30T12:35:59Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "45dbe9b37eb9304b94610604604fadce0935d10f",
      "headRepository": "christianpaquin/draft-selective-disclosure-jwt",
      "headRefName": "cp-editorial-changes-2",
      "headRefOid": "4a2ea62b0983c2a6855e16065f82d5423822086f",
      "closedAt": "2022-06-30T12:35:58Z",
      "mergedAt": "2022-06-30T12:35:58Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "ce0d19e8160d2fbb846d91dc77c65d09137a1124"
      },
      "comments": [
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "learning undisclosed holder claims probably is not a security consideration\nbut privacy.\nI have created another PR #91 for more substantial privacy considerations.\nIt has a more structured framework so the proposed text probably can be\nplaced there.\n\nOn Mon, Jun 27, 2022 at 1:01 PM Kristina ***@***.***> wrote:\n\n> ***@***.**** commented on this pull request.\n> ------------------------------\n>\n> In main.md\n> <https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/78#discussion_r906951885>\n> :\n>\n> > @@ -686,9 +686,10 @@ and revealing the claim names does not provide any additional information.\n>\n>  ## Unlinkability\n>\n> -It is also important to note that this format enables selective disclosure of claims, but\n> -in itself it does not achieve unlinkability of the subject of an SD-SWT.\n> -\n> +Colluding issuer/verifier or verifier/verifier pairs could learn undisclosed holder claims by linking\n>\n> I made a suggestion wrt unlinkability text. I agree learning undisclosed\n> holder claims is a separate issue that we should probably have a text about\n> in security considerations, outside of this PR.\n>\n> \u2014\n> Reply to this email directly, view it on GitHub\n> <https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/78#discussion_r906951885>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AABFEN6HGKZCEGF6B4BSNI3VRERSBANCNFSM5ZY4EBLQ>\n> .\n> You are receiving this because you commented.Message ID:\n> <oauthstuff/draft-selective-disclosure-jwt/pull/78/review/1019576951@\n> github.com>\n>\n\n\n-- \nNat Sakimura (=nat)\nChairman, OpenID Foundation\nhttp://nat.sakimura.org/\n@_nat_en\n",
          "createdAt": "2022-06-27T16:29:12Z",
          "updatedAt": "2022-06-27T16:29:12Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM48vKpb",
          "commit": {
            "abbreviatedOid": "d333cf4"
          },
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-24T21:24:06Z",
          "updatedAt": "2022-06-24T21:24:06Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Learning of undisclosed holder claims does not sound like an unlinkability issue. \r\nIn the case of (verifier1+verifier2)-holder1-unlinkability, it is the linking of holder1's presentations (protocol executions) at verifier1 and verifier2. This is the failure of the pairwise pseudonymity property. \r\n\r\nIf we want to talk about the uncovering of claims by colluding issuer and verifier, then we probably want to have another section on it, and IMHO, we should have one. \r\n\r\n",
              "createdAt": "2022-06-24T21:24:06Z",
              "updatedAt": "2022-06-24T21:24:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48xX6T",
          "commit": {
            "abbreviatedOid": "b8dbc4d"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-27T03:58:57Z",
          "updatedAt": "2022-06-27T03:59:56Z",
          "comments": [
            {
              "originalPosition": 200,
              "body": "Happy to approve if the change in line to the one suggested below will be incorporated.\r\n\r\n```suggestion\r\nColluding issuer/verifier or verifier/verifier pairs could link issuance/presentation or two presentation sessions\r\nto the same user on the basis of unique values encoded in the SD-JWT\r\n(issuer signature, salts, digests, etc.). More advanced cryptographic schemes, outside the scope of\r\nthis specification, can be used to prevent this type of linkability.\r\n```",
              "createdAt": "2022-06-27T03:58:57Z",
              "updatedAt": "2022-06-27T03:59:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48xYJ3",
          "commit": {
            "abbreviatedOid": "d333cf4"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-27T04:01:25Z",
          "updatedAt": "2022-06-27T04:01:25Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I made a suggestion wrt unlinkability text. I agree learning undisclosed holder claims is a separate issue that we should probably have a text about in security considerations, outside of this PR.",
              "createdAt": "2022-06-27T04:01:25Z",
              "updatedAt": "2022-06-27T04:01:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM483tIU",
          "commit": {
            "abbreviatedOid": "b8dbc4d"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-06-28T07:22:25Z",
          "updatedAt": "2022-06-28T07:24:07Z",
          "comments": [
            {
              "originalPosition": 73,
              "body": "I chose \"in the following\" for being less ambiguous, as \"following section\" can be read as \"go to the next top-level section to read more\", but we want to say \"in the following subsections\", which is an awkward way to word it. Therefore just \"in the following\". But since this is the second time someone suggests this edit, I'm starting to question my interpretation here....",
              "createdAt": "2022-06-28T07:22:26Z",
              "updatedAt": "2022-06-28T07:24:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM486sty",
          "commit": {
            "abbreviatedOid": "b8dbc4d"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-28T16:05:56Z",
          "updatedAt": "2022-06-28T16:05:56Z",
          "comments": [
            {
              "originalPosition": 73,
              "body": "let's just say `in the following subsections` or `in this document` than!",
              "createdAt": "2022-06-28T16:05:56Z",
              "updatedAt": "2022-06-28T16:05:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM488DnE",
          "commit": {
            "abbreviatedOid": "d333cf4"
          },
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-28T20:39:42Z",
          "updatedAt": "2022-06-28T20:39:43Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I mean claim \"values\" here, not their type. Linkability can be established on the basis of any correlatable information, which could be any unique value (serial number, signature value, a claim value). ",
              "createdAt": "2022-06-28T20:39:42Z",
              "updatedAt": "2022-06-28T20:39:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM488HSP",
          "commit": {
            "abbreviatedOid": "b8dbc4d"
          },
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-28T20:47:56Z",
          "updatedAt": "2022-06-28T20:47:57Z",
          "comments": [
            {
              "originalPosition": 73,
              "body": "I reverted the change adding \"sections\"; I thought it was a typo. I'll let the two editors decide on what to say here (which I suggest you do in another editorial PR).",
              "createdAt": "2022-06-28T20:47:56Z",
              "updatedAt": "2022-06-28T20:47:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49AgJ9",
          "commit": {
            "abbreviatedOid": "01ccb4c"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-29T15:00:04Z",
          "updatedAt": "2022-06-29T15:00:04Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM49A94O",
          "commit": {
            "abbreviatedOid": "b8dbc4d"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-29T16:20:40Z",
          "updatedAt": "2022-06-29T16:20:41Z",
          "comments": [
            {
              "originalPosition": 73,
              "body": "will do, thank you!",
              "createdAt": "2022-06-29T16:20:41Z",
              "updatedAt": "2022-06-29T16:20:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49A-If",
          "commit": {
            "abbreviatedOid": "01ccb4c"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-29T16:21:28Z",
          "updatedAt": "2022-06-29T16:21:28Z",
          "comments": []
        }
      ]
    },
    {
      "number": 82,
      "id": "PR_kwDOHTmVzM46XHWE",
      "title": "fix: [typo] deprecated _sd ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/82",
      "state": "MERGED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Removed deprecated pointer to _sd https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/42",
      "createdAt": "2022-06-25T20:56:14Z",
      "updatedAt": "2022-06-27T04:02:53Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "4b3eedfcd55801ca0d201b192a3aba5a5f5d5374",
      "headRepository": "peppelinux/draft-selective-disclosure-jwt",
      "headRefName": "sd_typo",
      "headRefOid": "bdd660106b6ba2845dca2eb27f0a156bdc8c63ca",
      "closedAt": "2022-06-27T04:02:53Z",
      "mergedAt": "2022-06-27T04:02:52Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "92d636b7ce337fd5af9714d54d8938f27966d39b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM48xYRT",
          "commit": {
            "abbreviatedOid": "e21ea9b"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-27T04:02:31Z",
          "updatedAt": "2022-06-27T04:02:31Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n`sd_release` object. The structure of `sd_release` object in the SD-JWT-R is the same as in SD-JWT. \r\n```",
              "createdAt": "2022-06-27T04:02:31Z",
              "updatedAt": "2022-06-27T04:02:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48xYSz",
          "commit": {
            "abbreviatedOid": "bdd6601"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-27T04:02:45Z",
          "updatedAt": "2022-06-27T04:02:45Z",
          "comments": []
        }
      ]
    },
    {
      "number": 83,
      "id": "PR_kwDOHTmVzM46XH5N",
      "title": "feat: [Draft] added sd+jwt header for SD-JWT",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/83",
      "state": "CLOSED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Definition of these new JWT headers with normative language.\r\nCloses https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/60",
      "createdAt": "2022-06-25T21:08:14Z",
      "updatedAt": "2023-01-11T08:39:17Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "ce0d19e8160d2fbb846d91dc77c65d09137a1124",
      "headRepository": "peppelinux/draft-selective-disclosure-jwt",
      "headRefName": "typ",
      "headRefOid": "b89b4aca8f46cafc7ebfebe69003cf8253617e1f",
      "closedAt": "2023-01-11T08:39:16Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "> I would be more comfortable adding only SD+JWT typ for now, since we still need to agree on SD-JWT-R being a JWT vs an object and its validation logic.\r\n\r\nOk.\r\nIf sd-jwt-r would be an object and not a signed jwt how we could bind the sub_jwk of sd-jwt, issued by a trusted party (vci) to the selfsigned release issued by the holder?",
          "createdAt": "2022-06-27T04:54:06Z",
          "updatedAt": "2022-06-27T04:55:27Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "SD-JWT-R is an object when there is no holder binding ie no`sub_jwk` inside SD-JWT.",
          "createdAt": "2022-06-27T05:28:32Z",
          "updatedAt": "2022-06-27T05:28:32Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "see https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/60#issuecomment-1167745219 :\r\n\r\n... I don't think that typ value(s) should be defined or mandated by this draft.\r\n\r\n[RFC 8725 - JSON Web Token Best Current Practices](https://tools.ietf.org/html/rfc8725.html) talks about using explicit typing as a security mechanism to prevent \"Cross-JWT Confusion\" but typing something as an SD-JWT doesn't accomplish the same thing and might preclude use in contexts where there is a typ already in use (i.e. at+jwt for an access token per https://datatracker.ietf.org/doc/html/rfc9068#section-2.1).",
          "createdAt": "2022-06-27T18:46:52Z",
          "updatedAt": "2022-06-27T18:50:43Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "> SD-JWT-R is an object when there is no holder binding ie no`sub_jwk` inside SD-JWT.\r\n\r\nmmmhh ... anyway it doesn't have any sense due to the possibility that the SD-JWT can be stolen. The signature and the binding of the sub jwk is a concrete proof of possession ",
          "createdAt": "2022-06-27T21:48:01Z",
          "updatedAt": "2022-06-27T21:48:01Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "> see [#60 (comment)](https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/60#issuecomment-1167745219) :\r\n> \r\n> ... I don't think that typ value(s) should be defined or mandated by this draft.\r\n> \r\n> [RFC 8725 - JSON Web Token Best Current Practices](https://tools.ietf.org/html/rfc8725.html) talks about using explicit typing as a security mechanism to prevent \"Cross-JWT Confusion\" but typing something as an SD-JWT doesn't accomplish the same thing and might preclude use in contexts where there is a typ already in use (i.e. at+jwt for an access token per https://datatracker.ietf.org/doc/html/rfc9068#section-2.1).\r\n\r\nmmhh ... Ok, we used that text in OIDC Federation when we decided to adopt a typ for entity statements and trust marks.\r\nIf I understand your comment: you're saying that SD-JWT can be used also in an access_token so we have the requirement to not force a specific type for this JWT.\r\n\r\nIt makes sense ... even if I can't see how an access token (or an id token) then requires a SD-JWT-R to resolve the claims value. Can we have a clear rationale for this? How SD-JWT could be used in existing JWT typ, this will help the born of a section related to this topic, in the draft if we agree    ",
          "createdAt": "2022-06-27T21:52:48Z",
          "updatedAt": "2022-06-27T21:52:48Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "SD-JWR-R typ header removed here\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/83/commits/b89b4aca8f46cafc7ebfebe69003cf8253617e1f",
          "createdAt": "2022-07-04T13:56:51Z",
          "updatedAt": "2022-07-04T13:56:51Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "Not of interest anymore\r\n\r\n",
          "createdAt": "2023-01-11T08:39:16Z",
          "updatedAt": "2023-01-11T08:39:16Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM48xazC",
          "commit": {
            "abbreviatedOid": "1b0bcfb"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I would be more comfortable adding only SD+JWT typ for now, since we still need to agree on SD-JWT-R being a JWT vs an object and its validation logic.",
          "createdAt": "2022-06-27T04:18:08Z",
          "updatedAt": "2022-06-27T04:22:43Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nA `typ` parameter in the JOSE header of an SD-JWT MUST be set to the value `sd+jwt`.\r\n```\r\n\r\nAlso can you please update a validation section with something like this?\r\n\r\n```\r\n 4. Validate the SD-JWT:\r\n    1. Check that the `typ` JOSE header parameter has the value sd+jwt\r\n    2. Ensure that a signing algorithm was used that was deemed secure for the application. Refer to [@RFC8725], Sections 3.1 and 3.2 for details.\r\n    3. Validate the signature over the SD-JWT. \r\n    4. Validate the issuer of the SD-JWT and that the signing key belongs to this issuer.\r\n    5. Check that the SD-JWT is valid using `nbf`, `iat`, and `exp` claims, if provided in the SD-JWT.\r\n    6. Check that the claim `sd_digests` is present in the SD-JWT.\r\n    7. Check that the `hash_alg` claim is present and its value is understand\r\n       and the hash algorithm deemed secure.\r\n```",
              "createdAt": "2022-06-27T04:18:09Z",
              "updatedAt": "2022-06-27T04:22:43Z"
            },
            {
              "originalPosition": 19,
              "body": "Note that SD-JWT-R is not always signed.\r\n\r\n```suggestion\r\nWhen SD-JWT-R is signed, a `typ` parameter in the JOSE header of a signed SD-JWT MUST be set to the value `sd-r+jwt`.\r\n```",
              "createdAt": "2022-06-27T04:20:17Z",
              "updatedAt": "2022-06-27T04:22:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM481aeA",
          "commit": {
            "abbreviatedOid": "1b0bcfb"
          },
          "author": "b---c",
          "authorAssociation": "NONE",
          "state": "CHANGES_REQUESTED",
          "body": "shouldn't do this ",
          "createdAt": "2022-06-27T18:47:40Z",
          "updatedAt": "2022-06-27T18:47:40Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM49M6Ks",
          "commit": {
            "abbreviatedOid": "1b0bcfb"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-02T23:18:56Z",
          "updatedAt": "2022-07-02T23:18:56Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Done here\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/83/commits/a4e455d62a6baaa879739975fd50f22256927da6\r\n\r\nthank you, it was really important",
              "createdAt": "2022-07-02T23:18:56Z",
              "updatedAt": "2022-07-02T23:18:56Z"
            }
          ]
        }
      ]
    },
    {
      "number": 92,
      "id": "PR_kwDOHTmVzM46XftK",
      "title": "To address issue #87 Security and privacy targets not defined",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/92",
      "state": "CLOSED",
      "author": "sakimura",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "To address issue #87",
      "createdAt": "2022-06-26T07:29:48Z",
      "updatedAt": "2023-03-13T12:46:59Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "4b3eedfcd55801ca0d201b192a3aba5a5f5d5374",
      "headRepository": "sakimura/draft-selective-disclosure-jwt",
      "headRefName": "patch-2",
      "headRefOid": "85d3f6e80e1d5c754cf2cae3317eb9c10feacd7d",
      "closedAt": "2023-03-13T12:46:59Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "This has been replaced by PR #225.",
          "createdAt": "2023-03-13T12:46:59Z",
          "updatedAt": "2023-03-13T12:46:59Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM48xTm7",
          "commit": {
            "abbreviatedOid": "85d3f6e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "In my understanding, we are not defining a protocol. we are defining an extension to JWT, a way to represent claims. For detailed comment please see Issue #87 ",
          "createdAt": "2022-06-27T03:13:32Z",
          "updatedAt": "2022-06-27T03:13:32Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM4-DzW4",
          "commit": {
            "abbreviatedOid": "85d3f6e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-17T21:20:49Z",
          "updatedAt": "2022-07-17T21:20:49Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "How is this text different from what is already in \"the introduction\"? I would rather have this text as a new \"use-cases\" section.\r\n\r\nAlso isn't \"data minimization\" a more common term than \"collection limitation\"?",
              "createdAt": "2022-07-17T21:20:49Z",
              "updatedAt": "2022-07-17T21:20:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM4-DzjI",
          "commit": {
            "abbreviatedOid": "85d3f6e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-17T21:29:05Z",
          "updatedAt": "2022-07-17T21:29:16Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "I do not understand \" from the section of the release that directly corresponds with the claim\". the release will contain the claim value of the claim that is being released.\r\nCould this be clarified/paraphrased, please?",
              "createdAt": "2022-07-17T21:29:05Z",
              "updatedAt": "2022-07-17T21:29:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EBPHI",
          "commit": {
            "abbreviatedOid": "85d3f6e"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-13T16:54:10Z",
          "updatedAt": "2022-10-13T16:54:11Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Shouldn't that be \"Strong Undiscoverability\"?",
              "createdAt": "2022-10-13T16:54:10Z",
              "updatedAt": "2022-10-13T16:54:11Z"
            }
          ]
        }
      ]
    },
    {
      "number": 93,
      "id": "PR_kwDOHTmVzM46Xfzm",
      "title": "To address issue #91 Create decent privacy considerations",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/93",
      "state": "CLOSED",
      "author": "sakimura",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "To address issue #91",
      "createdAt": "2022-06-26T07:32:39Z",
      "updatedAt": "2023-03-13T12:52:19Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "4b3eedfcd55801ca0d201b192a3aba5a5f5d5374",
      "headRepository": "sakimura/draft-selective-disclosure-jwt",
      "headRefName": "patch-3",
      "headRefOid": "70b403e05996fcd099745984c424390c5fa93259",
      "closedAt": "2023-03-13T12:52:18Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "This was replaced by PR #226 ",
          "createdAt": "2023-03-13T12:52:18Z",
          "updatedAt": "2023-03-13T12:52:18Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM48305u",
          "commit": {
            "abbreviatedOid": "70b403e"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-28T07:46:20Z",
          "updatedAt": "2022-06-28T07:53:33Z",
          "comments": [
            {
              "originalPosition": 64,
              "body": "Isn't this covered by the salt? ",
              "createdAt": "2022-06-28T07:46:20Z",
              "updatedAt": "2022-06-28T07:53:33Z"
            },
            {
              "originalPosition": 56,
              "body": "I think it is worth discussing this approach also independent of the problem of identifying the issuer. Always including some claims prevents verifiers from learning something about the holder just from the presence of a claim.\r\n\r\nExample: In EU driver's licenses, there may be restrictions such as \"may only drive with hearing aids\" or \"may only drive with modified vehicles to accommodate a certain disability\". The verifier may learn just from the presence of any restrictions that the owner of the license may not be of best health, potentially using it to their disadvantage.\r\n\r\nAlways including claims and just nulling the value when not applicable can prevent this.",
              "createdAt": "2022-06-28T07:52:25Z",
              "updatedAt": "2022-06-28T07:53:33Z"
            },
            {
              "originalPosition": 5,
              "body": "Is there a good link we can provide here? I fell that having the full list makes sense only if it is not readily available somewhere else.",
              "createdAt": "2022-06-28T07:52:56Z",
              "updatedAt": "2022-06-28T07:53:33Z"
            },
            {
              "originalPosition": 27,
              "body": "Can we specify \"often talked\"?",
              "createdAt": "2022-06-28T07:53:18Z",
              "updatedAt": "2022-06-28T07:53:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM488zR7",
          "commit": {
            "abbreviatedOid": "70b403e"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-28T23:13:58Z",
          "updatedAt": "2022-06-28T23:13:59Z",
          "comments": [
            {
              "originalPosition": 56,
              "body": "The following proposal resolve by design the problem of the claim names disclosed in SD-JWT\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/80\r\n\r\n",
              "createdAt": "2022-06-28T23:13:59Z",
              "updatedAt": "2022-06-28T23:13:59Z"
            }
          ]
        }
      ]
    },
    {
      "number": 97,
      "id": "PR_kwDOHTmVzM46b-qj",
      "title": "adding reference to an IETF page",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/97",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "addresses Issue #75 ",
      "createdAt": "2022-06-27T18:50:10Z",
      "updatedAt": "2022-06-29T01:18:09Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "92d636b7ce337fd5af9714d54d8938f27966d39b",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "html-ref",
      "headRefOid": "906dceda145564e4658982f2bcc5d9608b73222d",
      "closedAt": "2022-06-29T01:18:09Z",
      "mergedAt": "2022-06-29T01:18:09Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "db8305fc5f28a305f0518f166850917f306c7da8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM483qUj",
          "commit": {
            "abbreviatedOid": "9409059"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-28T07:13:22Z",
          "updatedAt": "2022-06-28T07:13:23Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nFor the latest version of the IETF draft, please see https://datatracker.ietf.org/doc/html/draft-fett-selective-disclosure-jwt\r\n\r\nFor the current version in this repository, see [main.md](main.md).\r\n```",
              "createdAt": "2022-06-28T07:13:22Z",
              "updatedAt": "2022-06-28T07:13:23Z"
            }
          ]
        }
      ]
    },
    {
      "number": 101,
      "id": "PR_kwDOHTmVzM46eY-e",
      "title": "Stress uniqueness of salt values",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/101",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-06-28T07:43:09Z",
      "updatedAt": "2022-06-29T01:17:46Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "92d636b7ce337fd5af9714d54d8938f27966d39b",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/unique-salts",
      "headRefOid": "b601fc688e3d8848d213c7f091ae5d772fe5c448",
      "closedAt": "2022-06-29T01:17:46Z",
      "mergedAt": "2022-06-29T01:17:45Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "067a798b262e532c302c01f686467a0c3172b7c6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM488_y0",
          "commit": {
            "abbreviatedOid": "b601fc6"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-29T01:03:21Z",
          "updatedAt": "2022-06-29T01:03:21Z",
          "comments": []
        }
      ]
    },
    {
      "number": 104,
      "id": "PR_kwDOHTmVzM46iGb2",
      "title": "removed duplicated hash_alg in SD_JWT",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/104",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "no changes in code needed, code generates SD-JWTs with only one hash_alg",
      "createdAt": "2022-06-29T01:11:31Z",
      "updatedAt": "2022-06-29T01:12:08Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "20a3e05e8e466b6bb8c7cd7b4250a2e1725d145e",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "master",
      "headRefOid": "ba4d2f0f6135acf0d49b58492acb9ba77e69fe1f",
      "closedAt": "2022-06-29T01:12:07Z",
      "mergedAt": "2022-06-29T01:12:07Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "1605f2cf0fd66305a899c1da8659cfd3b53875b7"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 105,
      "id": "PR_kwDOHTmVzM46lMjY",
      "title": "issue #75",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/105",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-06-29T16:38:22Z",
      "updatedAt": "2022-06-29T16:38:34Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "db8305fc5f28a305f0518f166850917f306c7da8",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "editorial",
      "headRefOid": "19f9279660a6c021f5505f2037481dee01325b20",
      "closedAt": "2022-06-29T16:38:33Z",
      "mergedAt": "2022-06-29T16:38:33Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "45dbe9b37eb9304b94610604604fadce0935d10f"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 107,
      "id": "PR_kwDOHTmVzM464ueW",
      "title": "added Christian's implementation in READ.me",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/107",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-07-05T23:13:07Z",
      "updatedAt": "2022-07-06T07:09:34Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "ce0d19e8160d2fbb846d91dc77c65d09137a1124",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "christian-implementation",
      "headRefOid": "e998450965b97f3880ebb96aa62a7d79179add24",
      "closedAt": "2022-07-06T07:09:34Z",
      "mergedAt": "2022-07-06T07:09:34Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "3de8e4113e59a95e92e5a9c03d2d266cb0e33e4d"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 108,
      "id": "PR_kwDOHTmVzM4659-c",
      "title": "[WIP] added placeholder for the security considerations on hash computation",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/108",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Would like to go with salted hashes based approach, since there has been a lot of feedback that \"simplicity (of salted hases approach) is a feature\".\r\n\r\nHowever, acknowledging [a raised concern](https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/30#issuecomment-1150205528), adding a text to the security considerations explaining mechanisms that should be adopted to ensure that   verifiers validate the claim values received in SD-JWT-R by calculating the hashes of those values and comparing them with the hashes in the SD-JWT.",
      "createdAt": "2022-07-06T06:29:28Z",
      "updatedAt": "2022-07-06T07:09:20Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "ce0d19e8160d2fbb846d91dc77c65d09137a1124",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "security-considerations",
      "headRefOid": "2b1939a628e9e53e4bb328182a88f1c0d9973ab3",
      "closedAt": "2022-07-06T07:09:20Z",
      "mergedAt": "2022-07-06T07:09:20Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "a35f077bd1c95e1563f3489bd88e0bf70ff83a8e"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 109,
      "id": "PR_kwDOHTmVzM46-T5p",
      "title": "chore: clean up",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/109",
      "state": "MERGED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Useless file that shouldnt be there",
      "createdAt": "2022-07-06T21:34:04Z",
      "updatedAt": "2022-07-07T20:19:50Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "0166cde0c195a70aa1241ef25ce0de44e6fce4d4",
      "headRepository": "peppelinux/draft-selective-disclosure-jwt",
      "headRefName": "patch-1",
      "headRefOid": "2aab65a7f222a8af27e222b6e84082c2839cf5ce",
      "closedAt": "2022-07-07T20:19:50Z",
      "mergedAt": "2022-07-07T20:19:50Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "fdc8bac32ea79f3bdddd0e82764e82517d0dddbe"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM49e8hP",
          "commit": {
            "abbreviatedOid": "2aab65a"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-07T12:52:11Z",
          "updatedAt": "2022-07-07T12:52:11Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM49hOBX",
          "commit": {
            "abbreviatedOid": "2aab65a"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-07T20:19:43Z",
          "updatedAt": "2022-07-07T20:19:43Z",
          "comments": []
        }
      ]
    },
    {
      "number": 112,
      "id": "PR_kwDOHTmVzM47ETZv",
      "title": "fix: small third-person typo in introduction",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/112",
      "state": "CLOSED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-07-07T23:22:42Z",
      "updatedAt": "2022-07-08T10:44:08Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "fdc8bac32ea79f3bdddd0e82764e82517d0dddbe",
      "headRepository": "peppelinux/draft-selective-disclosure-jwt",
      "headRefName": "patch-2",
      "headRefOid": "90c885279c57dd65e799a5075767419a85add44e",
      "closedAt": "2022-07-08T10:44:08Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "The current spelling is correct since the 'convey' refers to the plural 'SD-JWT-Releases'.\r\n\r\nThat said, the sentence is not easy to read and may need improvement.",
          "createdAt": "2022-07-08T09:47:02Z",
          "updatedAt": "2022-07-08T09:47:02Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 113,
      "id": "PR_kwDOHTmVzM47I7Ob",
      "title": "fix: python example",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/113",
      "state": "MERGED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- fix: information printed out in the examples, bad pointer\r\n- feat: salt randomness improved",
      "createdAt": "2022-07-09T09:34:33Z",
      "updatedAt": "2022-07-11T15:10:06Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "fdc8bac32ea79f3bdddd0e82764e82517d0dddbe",
      "headRepository": "peppelinux/draft-selective-disclosure-jwt",
      "headRefName": "pyexfix",
      "headRefOid": "f2e35acb14e78858b41baf9b40465f57caffb5bd",
      "closedAt": "2022-07-11T15:10:06Z",
      "mergedAt": "2022-07-11T15:10:06Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "500ca5e6668c838424dba2231717926c46e9b9f3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM49n6U_",
          "commit": {
            "abbreviatedOid": "f2e35ac"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-11T06:55:21Z",
          "updatedAt": "2022-07-11T06:55:21Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM49qVhI",
          "commit": {
            "abbreviatedOid": "f2e35ac"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-11T15:09:19Z",
          "updatedAt": "2022-07-11T15:09:19Z",
          "comments": []
        }
      ]
    },
    {
      "number": 115,
      "id": "PR_kwDOHTmVzM47Lc23",
      "title": "Generalize examples & more python code cleanup",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/115",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "In this PR, I generalized the examples: Right now, there is a lot of repetition in the code for each of the three examples. With more examples (W3C VC) and more example code (claims merging) to come, things will get more complicated.\r\n\r\nI therefore moved the examples into a separate directory as YAML files. I used YAML, because this means that we can store all data required for each example as separate JSON documents in one YAML file (JSON is a subset of YAML). \r\n\r\nThe code can now be called with a YAML file as the input and will run the demo for the example defined in the file. This will make it easier for us to add more examples in the future.\r\n\r\nAlso in this pull request:\r\n\r\n- Cleaned up the code to produce just one example each time - there is no need to calculate all examples when only one is used in each run\r\n- Cleaned up the code to produce both the CLI output and the spec examples from the same set of data to avoid repetitions\r\n- This means that placeholders in main.md are now strictly named as follows: `example-{example_id}-{artifact_id}`, where `artifact_id` refers to the identifier of the data produced in the example run (see `sd_jwt` file).\r\n- Fix for example output: serialized SVC was not shown, but serialized SD-JWT twice\r\n- Renamed `_sel_exp` to `_artifacts` (not sure what `_sel_exp` was meant to say)\r\n- Fix for no_randomness: RNG was seeded to static value even when no_randomness was not used",
      "createdAt": "2022-07-11T09:15:58Z",
      "updatedAt": "2022-07-13T06:37:02Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "500ca5e6668c838424dba2231717926c46e9b9f3",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/more-python-cleanup",
      "headRefOid": "4f8834479db69b5410770723d6e4d0aa5f4ea732",
      "closedAt": "2022-07-13T06:37:02Z",
      "mergedAt": "2022-07-13T06:37:02Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "98ced14b4faec695f4f04f909de142ca83858d72"
      },
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "> Cleaned up the code to produce just one example each time - there is no need to calculate all examples when only one is used in each run\r\n\r\nYes, it was in my backlog, thanx. \r\nThis first proposal was to get all the examples in a single shot, we can add a CLI parameter, I'll have a look for that\r\n\r\n> Cleaned up the code to produce both the CLI output and the spec examples from the same set of data to avoid repetitions\r\nThis means that placeholders in main.md are now strictly named as follows: example-{example_id}-{artifact_id}, where artifact_id refers to the identifier of the data produced in the example run (see sd_jwt file).\r\n\r\nThank you, I wanted to make a proposal for this, you did it\r\n\r\n> Fix for example output: serialized SVC was not shown, but serialized SD-JWT twice\r\n\r\nMy bad\r\n\r\n> Renamed _sel_exp to _artifacts (not sure what _sel_exp was meant to say)\r\n\r\nit was \"selected example\" but artifacts is better anyway\r\n\r\n> Fix for no_randomness: RNG was seeded to static value even when no_randomness was not used\r\n\r\nOK!",
          "createdAt": "2022-07-11T09:24:58Z",
          "updatedAt": "2022-07-11T09:24:58Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM49omGL",
          "commit": {
            "abbreviatedOid": "aa63998"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-07-11T09:27:40Z",
          "updatedAt": "2022-07-11T09:31:09Z",
          "comments": [
            {
              "originalPosition": 159,
              "body": "* prevented code repetition but this solution is fair",
              "createdAt": "2022-07-11T09:27:40Z",
              "updatedAt": "2022-07-11T09:31:09Z"
            },
            {
              "originalPosition": 277,
              "body": "f-string is better here :)",
              "createdAt": "2022-07-11T09:28:47Z",
              "updatedAt": "2022-07-11T09:31:09Z"
            },
            {
              "originalPosition": 1,
              "body": "file extention is yml but content of user_claims is json",
              "createdAt": "2022-07-11T09:30:33Z",
              "updatedAt": "2022-07-11T09:31:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49ooLN",
          "commit": {
            "abbreviatedOid": "aa63998"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T09:34:26Z",
          "updatedAt": "2022-07-11T09:34:27Z",
          "comments": [
            {
              "originalPosition": 159,
              "body": "Keeping as proposed is okay?",
              "createdAt": "2022-07-11T09:34:26Z",
              "updatedAt": "2022-07-11T09:34:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49ooSY",
          "commit": {
            "abbreviatedOid": "aa63998"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T09:34:50Z",
          "updatedAt": "2022-07-11T09:34:50Z",
          "comments": [
            {
              "originalPosition": 277,
              "body": "Intentional decision - I found this much cleaner.",
              "createdAt": "2022-07-11T09:34:50Z",
              "updatedAt": "2022-07-11T09:34:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49oo5v",
          "commit": {
            "abbreviatedOid": "aa63998"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T09:36:51Z",
          "updatedAt": "2022-07-11T09:36:51Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "As I wrote, JSON is a subset of YAML. The file is a YAML file and the file ending is correct, but we can store the user details as JSON which is close to what we show in the spec. I chose not to use JSON for the full file, as one big JSON structure would look convoluted.",
              "createdAt": "2022-07-11T09:36:51Z",
              "updatedAt": "2022-07-11T09:36:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49ouJG",
          "commit": {
            "abbreviatedOid": "aa63998"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T09:54:04Z",
          "updatedAt": "2022-07-11T09:54:04Z",
          "comments": [
            {
              "originalPosition": 159,
              "body": "I found a better solution: `import settings` and `import sd_jwt.demo_settings as settings`, respectively.",
              "createdAt": "2022-07-11T09:54:04Z",
              "updatedAt": "2022-07-11T09:54:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49ow6J",
          "commit": {
            "abbreviatedOid": "7a55bf6"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-11T10:03:20Z",
          "updatedAt": "2022-07-11T10:03:20Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM49zMv2",
          "commit": {
            "abbreviatedOid": "4f88344"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-13T06:36:29Z",
          "updatedAt": "2022-07-13T06:36:29Z",
          "comments": []
        }
      ]
    },
    {
      "number": 116,
      "id": "PR_kwDOHTmVzM47LzUZ",
      "title": "Add acknowledgements",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/116",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-07-11T10:49:40Z",
      "updatedAt": "2022-07-11T15:06:25Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "fdc8bac32ea79f3bdddd0e82764e82517d0dddbe",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/add-acknowledgements",
      "headRefOid": "aa14a3002066d764a95eaac1500f6ad28e094afc",
      "closedAt": "2022-07-11T15:06:24Z",
      "mergedAt": "2022-07-11T15:06:24Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "683d4b03c5b4c7cec34181e63f1a0269c12d1df3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM49qUSf",
          "commit": {
            "abbreviatedOid": "aa14a30"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-11T15:06:18Z",
          "updatedAt": "2022-07-11T15:06:18Z",
          "comments": []
        }
      ]
    },
    {
      "number": 117,
      "id": "PR_kwDOHTmVzM47M0v9",
      "title": "OO interface for our library",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/117",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "This commit changes the interface of the library from a set of functions to an object-oriented interface.\r\n\r\nThis will help with future improvements (blinded claim names, for example).",
      "createdAt": "2022-07-11T14:59:54Z",
      "updatedAt": "2022-07-13T06:41:01Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "danielfett/more-python-cleanup",
      "baseRefOid": "4f8834479db69b5410770723d6e4d0aa5f4ea732",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/clean-python-interface",
      "headRefOid": "34a6e88ded06cdea5b9a0057f9fbdd47b3130b6c",
      "closedAt": "2022-07-13T06:41:01Z",
      "mergedAt": "2022-07-13T06:41:01Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "e8b88dc5b751d98618a6f7f2cb21cb3a0194e439"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM49qahy",
          "commit": {
            "abbreviatedOid": "6ffffef"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "It was a great pleasure to me have read this PR, this OOP approach is the natural evolution of the code and it's the best improvement to facilitate unit testing\r\n\r\nad maiora @danielfett ",
          "createdAt": "2022-07-11T15:22:25Z",
          "updatedAt": "2022-07-11T15:22:25Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM49zNxU",
          "commit": {
            "abbreviatedOid": "34a6e88"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Agreed. this is great. thank you, Daniel.",
          "createdAt": "2022-07-13T06:40:55Z",
          "updatedAt": "2022-07-13T06:40:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 119,
      "id": "PR_kwDOHTmVzM47PstX",
      "title": "changed sub_jwk to cnf claim for holder binding",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/119",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "addresses Issue #77",
      "createdAt": "2022-07-12T08:06:10Z",
      "updatedAt": "2022-07-18T14:35:24Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "9251f360d36d8a5c18bbe1a2d8e9e1281aa28606",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "cnf-claim",
      "headRefOid": "bcd89facc4a8d8f48bd24f6d7bb33e5997a33bb6",
      "closedAt": "2022-07-18T14:35:23Z",
      "mergedAt": "2022-07-18T14:35:23Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "84afa1c8b257c7127b83671088acc60c56d726ef"
      },
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "@Sakurann considering the last OOP refactor on the python code and the revision of Brian probably it would be easier to close this PR and starting a new one on top of the current master branch, the changes in the code and in the text are very trivial",
          "createdAt": "2022-07-13T23:45:27Z",
          "updatedAt": "2022-07-13T23:45:27Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "@peppelinux ok, please do a PR directly to this branch :)",
          "createdAt": "2022-07-14T21:28:57Z",
          "updatedAt": "2022-07-14T21:29:27Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM49xRRb",
          "commit": {
            "abbreviatedOid": "53c160f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-12T18:55:07Z",
          "updatedAt": "2022-07-12T18:55:07Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "There's a layer of nesting missing here per https://datatracker.ietf.org/doc/html/rfc7800#section-3.2 that uses \"jwk\" as the confirmation method name.  i.e.:\r\n\r\n```\r\n\"cnf\":{\r\n    \"jwk\":{\r\n        \"kty\": \"RSA\",\r\n          ...  n and e ... \r\n }}```",
              "createdAt": "2022-07-12T18:55:07Z",
              "updatedAt": "2022-07-12T18:55:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49xRZL",
          "commit": {
            "abbreviatedOid": "53c160f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-12T18:55:33Z",
          "updatedAt": "2022-07-12T18:55:33Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "here too same as https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/119/files#r919304849",
              "createdAt": "2022-07-12T18:55:33Z",
              "updatedAt": "2022-07-12T18:59:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM495hS4",
          "commit": {
            "abbreviatedOid": "53c160f"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "@Sakurann I can do PR to your branch directly if you agree or start another PR and close this",
          "createdAt": "2022-07-14T08:24:28Z",
          "updatedAt": "2022-07-14T08:24:28Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM4-Dyw7",
          "commit": {
            "abbreviatedOid": "bcd89fa"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-17T20:53:02Z",
          "updatedAt": "2022-07-17T20:53:02Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM4-GxnH",
          "commit": {
            "abbreviatedOid": "bcd89fa"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-18T14:35:12Z",
          "updatedAt": "2022-07-18T14:35:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 120,
      "id": "PR_kwDOHTmVzM47UY-c",
      "title": "Missing commits in master",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/120",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "The OO interface PR ended up in danielfett/more-python-cleanup, but not in master. I'll merge this PR immediately.",
      "createdAt": "2022-07-13T08:37:11Z",
      "updatedAt": "2022-07-13T08:37:20Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "98ced14b4faec695f4f04f909de142ca83858d72",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/more-python-cleanup",
      "headRefOid": "e8b88dc5b751d98618a6f7f2cb21cb3a0194e439",
      "closedAt": "2022-07-13T08:37:20Z",
      "mergedAt": "2022-07-13T08:37:20Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "9251f360d36d8a5c18bbe1a2d8e9e1281aa28606"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 121,
      "id": "PR_kwDOHTmVzM47VAGJ",
      "title": "chore: bound version to 0.2.0",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/121",
      "state": "MERGED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "simple PR that defines a new release following the OOP refactoring of the code and all the bugfixes and minor changes",
      "createdAt": "2022-07-13T11:11:07Z",
      "updatedAt": "2022-07-14T20:58:46Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "9251f360d36d8a5c18bbe1a2d8e9e1281aa28606",
      "headRepository": "peppelinux/draft-selective-disclosure-jwt",
      "headRefName": "0.2.0",
      "headRefOid": "58e82af9c50d19cb22b528cd1a31d6b2c2dcfbd1",
      "closedAt": "2022-07-14T20:58:46Z",
      "mergedAt": "2022-07-14T20:58:45Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "9a5116b0a7972bca1c2253dc1d7921b203f890a1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM491l74",
          "commit": {
            "abbreviatedOid": "58e82af"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-13T14:25:12Z",
          "updatedAt": "2022-07-13T14:25:12Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM499RS0",
          "commit": {
            "abbreviatedOid": "58e82af"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-14T20:58:37Z",
          "updatedAt": "2022-07-14T20:58:37Z",
          "comments": []
        }
      ]
    },
    {
      "number": 122,
      "id": "PR_kwDOHTmVzM47Wk7x",
      "title": "chore: added eidas complex examples",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/122",
      "state": "MERGED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "An excercise to define a kind of eIDAS PID docType in SD-JWT using OIDC Identity assurance ... without the adoption on JWT-VC [vc-data-model] for now.",
      "createdAt": "2022-07-13T17:39:31Z",
      "updatedAt": "2022-10-14T12:19:49Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "9251f360d36d8a5c18bbe1a2d8e9e1281aa28606",
      "headRepository": "peppelinux/draft-selective-disclosure-jwt",
      "headRefName": "eidas_example_proposal",
      "headRefOid": "98d9219deb1c203a8d2835154f4297a2ad87d09e",
      "closedAt": "2022-10-14T12:19:49Z",
      "mergedAt": "2022-10-14T12:19:49Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "33ce829aa54317745dad13ba662f455ca1d78124"
      },
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "are we adding one more example in the annex..?",
          "createdAt": "2022-07-14T20:58:22Z",
          "updatedAt": "2022-07-14T20:58:22Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "> are we adding one more example in the annex..?\r\n\r\nnot for today, I'd wait for the release of OIDC IDA before this and also I'd wait for the reactions of other collegues, regarding the discussion paper on SD-JWT I have just submitted ",
          "createdAt": "2022-07-14T21:07:55Z",
          "updatedAt": "2022-07-14T21:07:55Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I don't think we would need to wait for OIDC4IDA as long as we mention that the example is based on a non-final version of OIDC4IDA. ",
          "createdAt": "2022-07-15T07:37:01Z",
          "updatedAt": "2022-07-15T07:37:01Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM495uCL",
          "commit": {
            "abbreviatedOid": "98d9219"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-14T09:02:48Z",
          "updatedAt": "2022-07-14T09:02:48Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "This line just made me realized another big advantage of YAML here - we can have comments!",
              "createdAt": "2022-07-14T09:02:48Z",
              "updatedAt": "2022-07-14T09:02:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM495uEI",
          "commit": {
            "abbreviatedOid": "98d9219"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-14T09:02:54Z",
          "updatedAt": "2022-07-14T09:02:54Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5EBNSb",
          "commit": {
            "abbreviatedOid": "98d9219"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-13T16:48:28Z",
          "updatedAt": "2022-10-13T16:48:28Z",
          "comments": []
        }
      ]
    },
    {
      "number": 123,
      "id": "PR_kwDOHTmVzM47XoUF",
      "title": "BREAKING CHANGE: hash_alg renamed to sd_hash_alg",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/123",
      "state": "MERGED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/111\r\n\r\nIf this PR title is too noisy I can change it indeed, I use [conventional commits](https://www.conventionalcommits.org/en/v1.0.0/)",
      "createdAt": "2022-07-13T23:53:36Z",
      "updatedAt": "2022-07-14T20:56:48Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "9251f360d36d8a5c18bbe1a2d8e9e1281aa28606",
      "headRepository": "peppelinux/draft-selective-disclosure-jwt",
      "headRefName": "sd_hash_alg",
      "headRefOid": "0cb1f4bd2c5dd61e897364a34f4d4ba6e781e8fe",
      "closedAt": "2022-07-14T20:56:40Z",
      "mergedAt": "2022-07-14T20:56:40Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "85942e89c55980acc355b4d6815411c77e689980"
      },
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "> Closes #111\r\n> \r\n> If this PR title is too noisy I can change it indeed, I use [conventional commits](https://www.conventionalcommits.org/en/v1.0.0/)\r\n\r\nNo need for shouting ;-)\r\n\r\n",
          "createdAt": "2022-07-14T09:00:12Z",
          "updatedAt": "2022-07-14T09:00:12Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "> No need for shouting\r\n\r\nThey asked me to do that. Generally is often ask to italian to not be too loud and you can understand my embarrassment when I read they want make me shout, knowing that then someonelse will ask me to don't do that for sure.\r\n\r\nConventional shoutings?\r\nIf is there any suggetions :'-)\r\n\r\n![image](https://user-images.githubusercontent.com/1297620/178952890-51b3fbf3-5962-488e-ac16-891be328579d.png)\r\n",
          "createdAt": "2022-07-14T09:43:28Z",
          "updatedAt": "2022-07-14T09:43:28Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Yes, I noticed that this is prescribed by conventional commits :-) I guess I can get used to it.",
          "createdAt": "2022-07-14T09:46:30Z",
          "updatedAt": "2022-07-14T09:46:39Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "> Yes, I noticed that this is prescribed by conventional commits :-) I guess I can get used to it.\r\n\r\nnow you have to shout it on the road for a concrete commitment!",
          "createdAt": "2022-07-14T09:57:22Z",
          "updatedAt": "2022-07-14T09:57:22Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "here's to Daniel also shouting",
          "createdAt": "2022-07-14T20:56:48Z",
          "updatedAt": "2022-07-14T20:56:48Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM495tbx",
          "commit": {
            "abbreviatedOid": "0cb1f4b"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-14T09:00:58Z",
          "updatedAt": "2022-07-14T09:00:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM499Qzw",
          "commit": {
            "abbreviatedOid": "0cb1f4b"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-14T20:56:32Z",
          "updatedAt": "2022-07-14T20:56:32Z",
          "comments": []
        }
      ]
    },
    {
      "number": 124,
      "id": "PR_kwDOHTmVzM47ZHmV",
      "title": "Proposal for blinding claim names",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/124",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-07-14T09:32:57Z",
      "updatedAt": "2022-10-01T04:46:31Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "2849d6a1ee96182b06e3683833673e9313564987",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/blinded-claim-names",
      "headRefOid": "39d5be4e6eb77420c914ff66c3f4502ede207e50",
      "closedAt": "2022-10-01T04:46:31Z",
      "mergedAt": "2022-10-01T04:46:31Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "199222e62a20f87bfdb838c944cd495b7c32232f"
      },
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Spec text updated, please review!",
          "createdAt": "2022-07-21T09:56:57Z",
          "updatedAt": "2022-07-21T09:56:57Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "George during OAuth side mtg pointed out that it is important for the verifier not to change anything in the JSON object in the Release (ie SVC )that is being hashed so that the hash output is the same from the one in SD-JWT",
          "createdAt": "2022-07-28T18:28:25Z",
          "updatedAt": "2022-07-28T18:28:25Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM4957lV",
          "commit": {
            "abbreviatedOid": "eba592f"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-07-14T09:45:36Z",
          "updatedAt": "2022-07-14T09:49:29Z",
          "comments": [
            {
              "originalPosition": 195,
              "body": "typo \"is not a dictionary\" instead",
              "createdAt": "2022-07-14T09:45:37Z",
              "updatedAt": "2022-07-14T09:49:29Z"
            },
            {
              "originalPosition": 9,
              "body": "mmhhh ... probably nesting that lambda in find_fn is not for the people, can we have a simple None there a an if in the code that makes it more easy to be debugged?\r\n````\r\nif not find_fn:\r\n    find_fn = lambda s, k: (k, s[k])\r\n````",
              "createdAt": "2022-07-14T09:47:16Z",
              "updatedAt": "2022-07-14T09:49:29Z"
            },
            {
              "originalPosition": 8,
              "body": "it could be a pain if we decide to push many examples but use only some of them for updating the main.md\r\n\r\na huge stdout is a problem\r\n\r\nprobably I'll push the eidas example I'm working on but I would tell to users that they may use them without enabling all of them by default",
              "createdAt": "2022-07-14T09:49:23Z",
              "updatedAt": "2022-07-14T09:49:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM496UXT",
          "commit": {
            "abbreviatedOid": "eba592f"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-14T11:12:39Z",
          "updatedAt": "2022-07-14T11:12:39Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "In 'replace' mode, the stdout is mainly for placeholders that have not been found, which is really not that much.\r\n\r\nExample right now:\r\n```\r\ndanielf@www:~/git/ietf/draft-selective-disclosure-jwt$ ./update-all-examples.sh \r\nUsing fixed randomness for demo purposes\r\nCould not find placeholder with id example-simple-serialized_svc\r\nCould not find placeholder with id example-simple-verified_contents\r\nUsing fixed randomness for demo purposes\r\nCould not find placeholder with id example-simple_structured-user_claims\r\nCould not find placeholder with id example-simple_structured-serialized_sd_jwt\r\nCould not find placeholder with id example-simple_structured-serialized_svc\r\nCould not find placeholder with id example-simple_structured-combined_sd_jwt_svc\r\nCould not find placeholder with id example-simple_structured-serialized_sd_jwt_release\r\nCould not find placeholder with id example-simple_structured-combined_sd_jwt_sd_jwt_release\r\nCould not find placeholder with id example-simple_structured-verified_contents\r\nUsing fixed randomness for demo purposes\r\nCould not find placeholder with id example-complex-svc_payload\r\nCould not find placeholder with id example-complex-serialized_svc\r\nCould not find placeholder with id example-complex-combined_sd_jwt_svc\r\nCould not find placeholder with id example-complex-serialized_sd_jwt_release\r\nCould not find placeholder with id example-complex-combined_sd_jwt_sd_jwt_release\r\nCould not find placeholder with id example-complex-verified_contents\r\n```",
              "createdAt": "2022-07-14T11:12:39Z",
              "updatedAt": "2022-07-14T11:12:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM496Un0",
          "commit": {
            "abbreviatedOid": "eba592f"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-14T11:13:33Z",
          "updatedAt": "2022-07-14T11:13:34Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "That's right, will change.",
              "createdAt": "2022-07-14T11:13:33Z",
              "updatedAt": "2022-07-14T11:13:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM496Up-",
          "commit": {
            "abbreviatedOid": "eba592f"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-14T11:13:41Z",
          "updatedAt": "2022-07-14T11:13:41Z",
          "comments": [
            {
              "originalPosition": 195,
              "body": "Indeed, thanks!",
              "createdAt": "2022-07-14T11:13:41Z",
              "updatedAt": "2022-07-14T11:13:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM496Xxq",
          "commit": {
            "abbreviatedOid": "eba592f"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-14T11:25:22Z",
          "updatedAt": "2022-07-14T11:25:22Z",
          "comments": [
            {
              "originalPosition": 195,
              "body": "Fixed now!",
              "createdAt": "2022-07-14T11:25:22Z",
              "updatedAt": "2022-07-14T11:25:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM496X9q",
          "commit": {
            "abbreviatedOid": "eba592f"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-14T11:26:08Z",
          "updatedAt": "2022-07-14T11:26:08Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Fixed by making the 'default' function explicit. ",
              "createdAt": "2022-07-14T11:26:08Z",
              "updatedAt": "2022-07-14T11:26:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49784k",
          "commit": {
            "abbreviatedOid": "8ec9dc1"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-14T16:09:38Z",
          "updatedAt": "2022-07-14T16:09:38Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM4-XQGX",
          "commit": {
            "abbreviatedOid": "e333edf"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-21T10:11:50Z",
          "updatedAt": "2022-07-21T10:11:57Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "@danielfett fixed conflicts and updated this def committing directly in your branch\r\n\r\nthen I have pushed another commit to fix the previous typo (weird movement on the keyboard?) anyway feel free to rebase these",
              "createdAt": "2022-07-21T10:11:50Z",
              "updatedAt": "2022-07-23T10:41:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM4-XQhL",
          "commit": {
            "abbreviatedOid": "e333edf"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-21T10:13:13Z",
          "updatedAt": "2022-07-21T10:13:13Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM4-XQqE",
          "commit": {
            "abbreviatedOid": "e333edf"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-21T10:13:42Z",
          "updatedAt": "2022-07-21T10:13:42Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "sure to have a DEBUG level here?",
              "createdAt": "2022-07-21T10:13:42Z",
              "updatedAt": "2022-07-21T10:13:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM4-k3LT",
          "commit": {
            "abbreviatedOid": "e333edf"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-25T17:56:18Z",
          "updatedAt": "2022-07-25T17:56:18Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "Removed again - should not be there",
              "createdAt": "2022-07-25T17:56:18Z",
              "updatedAt": "2022-07-25T17:56:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM4_ZOkC",
          "commit": {
            "abbreviatedOid": "3b7a260"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-05T16:09:10Z",
          "updatedAt": "2022-08-05T16:09:11Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nClaim name blinding\r\n:  Feature that enables to blind not only claim values, but also claim names of the claims \r\nthat are included in SD-JWT but are not disclosed to the verifier in the SD-JWT-Release.\r\n```",
              "createdAt": "2022-08-05T16:09:10Z",
              "updatedAt": "2022-08-05T16:09:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM4_ZPMc",
          "commit": {
            "abbreviatedOid": "3b7a260"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-05T16:11:29Z",
          "updatedAt": "2022-08-05T16:41:49Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "this looks like an unfinished text?",
              "createdAt": "2022-08-05T16:11:29Z",
              "updatedAt": "2022-08-05T16:41:49Z"
            },
            {
              "originalPosition": 411,
              "body": "```suggestion\r\nBlinding claim names might not provide additional privacy if this is the case.\r\n\r\nFurthermore, re-using the same value to blind a claim name may limit the privacy benefits.\r\n\r\n```",
              "createdAt": "2022-08-05T16:41:27Z",
              "updatedAt": "2022-08-05T16:41:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5BVS86",
          "commit": {
            "abbreviatedOid": "0751740"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-05T08:50:24Z",
          "updatedAt": "2022-09-05T08:50:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 126,
      "id": "PR_kwDOHTmVzM47ZenB",
      "title": "Remove outdated HTML versions",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/126",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "It's on the IETF website after all, and viewing main.md works just fine.",
      "createdAt": "2022-07-14T11:06:18Z",
      "updatedAt": "2022-07-17T20:26:21Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "9251f360d36d8a5c18bbe1a2d8e9e1281aa28606",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/remove-html-files",
      "headRefOid": "46dcbc4a78b0479776feeaaa17604ab377687e98",
      "closedAt": "2022-07-17T20:26:21Z",
      "mergedAt": "2022-07-17T20:26:20Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "9bcf63507174f82ca1141e2738b82f1ab7cd9f9b"
      },
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "umm... many implementors of sd-jwt as a vc would not know ietf process and where to look for the ietf htmls. I would prefer keeping main.md as-is",
          "createdAt": "2022-07-14T20:55:14Z",
          "updatedAt": "2022-07-14T20:55:14Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "@Sakurann the problem is that html is very outdated and we don't have a CD to keep it updated and, anyway, it would be an online replica. Having in the README a clear pointer to the IETF official page of SD-JWT I don't feel any worry for our implementers",
          "createdAt": "2022-07-14T21:11:14Z",
          "updatedAt": "2022-07-14T21:11:14Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "ah ok. I am ok deleting [github.io](https://oauthstuff.github.io/draft-selective-disclosure-jwt/draft-fett-selective-disclosure-jwt-00.html) for an HTML version.\r\nbut why do we need to remove [IETF OAuth WG](https://datatracker.ietf.org/doc/draft-fett-oauth-selective-disclosure-jwt/)?",
          "createdAt": "2022-07-14T21:22:10Z",
          "updatedAt": "2022-07-14T21:22:10Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM499YW3",
          "commit": {
            "abbreviatedOid": "4c7d6e4"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-14T21:28:11Z",
          "updatedAt": "2022-07-14T21:28:27Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "hem.. probably @Sakurann is right, can we reenable the [IETF OAuth WG](https://datatracker.ietf.org/doc/draft-fett-oauth-selective-disclosure-jwt/) link?\r\n\r\nas it is in this change the url is published quite raw",
              "createdAt": "2022-07-14T21:28:11Z",
              "updatedAt": "2022-07-14T21:28:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM499aAa",
          "commit": {
            "abbreviatedOid": "4c7d6e4"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-14T21:36:50Z",
          "updatedAt": "2022-07-14T21:36:50Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nThis is a GitHub repository for a draft specification in the [IETF OAuth WG](https://datatracker.ietf.org/doc/draft-fett-oauth-selective-disclosure-jwt/). For the latest published version of this IETF draft, please see https://datatracker.ietf.org/doc/html/draft-fett-selective-disclosure-jwt\r\n```",
              "createdAt": "2022-07-14T21:36:50Z",
              "updatedAt": "2022-07-14T21:36:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49-950",
          "commit": {
            "abbreviatedOid": "4c7d6e4"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-15T07:39:22Z",
          "updatedAt": "2022-07-15T07:39:23Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "You're right, I added the link again!",
              "createdAt": "2022-07-15T07:39:22Z",
              "updatedAt": "2022-07-15T07:39:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM4-BPyy",
          "commit": {
            "abbreviatedOid": "46dcbc4"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-15T16:13:37Z",
          "updatedAt": "2022-07-15T16:13:37Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM4-DyQ9",
          "commit": {
            "abbreviatedOid": "46dcbc4"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-17T20:26:05Z",
          "updatedAt": "2022-07-17T20:26:05Z",
          "comments": []
        }
      ]
    },
    {
      "number": 127,
      "id": "PR_kwDOHTmVzM47brWy",
      "title": "update sd-jwt-vc example",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/127",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- Updated how sd_digests are included in sd-jwt-vc (as credentialSubject as opposed to a top-level claim)\r\n- Updated holder binding using raw public key",
      "createdAt": "2022-07-14T20:53:10Z",
      "updatedAt": "2022-09-10T01:50:13Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "9251f360d36d8a5c18bbe1a2d8e9e1281aa28606",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "vc-data-model",
      "headRefOid": "f9b0e9468b1b81bb5817dc8a5c77e5d6b480dc91",
      "closedAt": "2022-09-10T01:50:13Z",
      "mergedAt": "2022-09-10T01:50:13Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "605030365642d00a8ad29cc96b9b0d89a34b4d2c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM499VAU",
          "commit": {
            "abbreviatedOid": "e495508"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-14T21:12:06Z",
          "updatedAt": "2022-07-14T21:12:06Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "interesting :)",
              "createdAt": "2022-07-14T21:12:06Z",
              "updatedAt": "2022-07-14T21:12:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM499Vmw",
          "commit": {
            "abbreviatedOid": "e495508"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I don't have any clue fo jwt-vc and these examples, I approve this as it is because seems good right now but I'll take some moment to put my head on jwt-vc concretely to back to this ",
          "createdAt": "2022-07-14T21:14:57Z",
          "updatedAt": "2022-07-14T21:14:57Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM499Y12",
          "commit": {
            "abbreviatedOid": "e495508"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-14T21:30:41Z",
          "updatedAt": "2022-07-14T21:30:41Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n  \"sub\": \"urn:ietf:params:oauth:jwk-thumbprint:sha-256:NzbLsXh8uDCcd-6MNwXF4W_7noWXFZAfHkxZsRGC9Xs\",\r\n```",
              "createdAt": "2022-07-14T21:30:41Z",
              "updatedAt": "2022-07-14T21:30:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM499Y7X",
          "commit": {
            "abbreviatedOid": "e495508"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-14T21:31:05Z",
          "updatedAt": "2022-07-14T21:31:06Z",
          "comments": [
            {
              "originalPosition": 65,
              "body": "```suggestion\r\n  \"iss\": \"urn:ietf:params:oauth:jwk-thumbprint:sha-256:NzbLsXh8uDCcd-6MNwXF4W_7noWXFZAfHkxZsRGC9Xs\",\r\n```",
              "createdAt": "2022-07-14T21:31:05Z",
              "updatedAt": "2022-07-14T21:31:06Z"
            }
          ]
        }
      ]
    },
    {
      "number": 128,
      "id": "PR_kwDOHTmVzM47pqyC",
      "title": "Rename spec to 'Selective Disclosure for JWTs'",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/128",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "PR for https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/125",
      "createdAt": "2022-07-19T13:23:12Z",
      "updatedAt": "2022-08-04T19:44:57Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "84afa1c8b257c7127b83671088acc60c56d726ef",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/rename-spec",
      "headRefOid": "adf710026672030aa17883b0470dadfcd4862f5a",
      "closedAt": "2022-08-04T19:44:57Z",
      "mergedAt": "2022-08-04T19:44:57Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "feb5b6ff7f4edf2af307e23fdf03b05a645607e0"
      },
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Done, and also cleaned up the intro slightly (repeating 'document' is superfluous there).",
          "createdAt": "2022-07-21T08:26:22Z",
          "updatedAt": "2022-07-21T08:26:22Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM4-NdPE",
          "commit": {
            "abbreviatedOid": "2fb254a"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Should we also change SD-JWT to \"Selectively disclosable JWT\"?",
          "createdAt": "2022-07-19T16:11:02Z",
          "updatedAt": "2022-07-19T16:11:02Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM4-aamz",
          "commit": {
            "abbreviatedOid": "53a544e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-21T20:38:56Z",
          "updatedAt": "2022-07-21T20:38:56Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "`token`..?",
              "createdAt": "2022-07-21T20:38:56Z",
              "updatedAt": "2022-07-21T20:38:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM4-cgaC",
          "commit": {
            "abbreviatedOid": "53a544e"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-22T09:39:41Z",
          "updatedAt": "2022-07-22T09:39:41Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "...but the T in JWT already stands for 'token'...",
              "createdAt": "2022-07-22T09:39:41Z",
              "updatedAt": "2022-07-22T09:39:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM4-2uEL",
          "commit": {
            "abbreviatedOid": "53a544e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-28T17:56:08Z",
          "updatedAt": "2022-07-28T17:56:08Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "yes, but I don't think many people call JWT a token...",
              "createdAt": "2022-07-28T17:56:08Z",
              "updatedAt": "2022-07-28T17:56:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM4_VIx5",
          "commit": {
            "abbreviatedOid": "53a544e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-04T19:44:33Z",
          "updatedAt": "2022-08-04T19:44:33Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "```suggestion\r\nsignatures. A consumer of a signed JWT that has checked the\r\n```",
              "createdAt": "2022-08-04T19:44:33Z",
              "updatedAt": "2022-08-04T19:44:33Z"
            }
          ]
        }
      ]
    },
    {
      "number": 130,
      "id": "PR_kwDOHTmVzM48RMZZ",
      "title": "sha-256 as MTI",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/130",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Issue #50 ",
      "createdAt": "2022-07-28T18:05:01Z",
      "updatedAt": "2022-08-04T22:19:42Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "84afa1c8b257c7127b83671088acc60c56d726ef",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "mti-hash",
      "headRefOid": "fb2eb8eaddf326eea1d6669ec7d72a3e9a631b66",
      "closedAt": "2022-08-04T22:19:41Z",
      "mergedAt": "2022-08-04T22:19:41Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "f39ce6bd94903be0edeb2ff61166efcb95783eaf"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM4-4GHM",
          "commit": {
            "abbreviatedOid": "c8a76b0"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-07-29T00:32:13Z",
          "updatedAt": "2022-07-29T00:32:19Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "... the SHA-256 hash algorithm MUST be implemented.",
              "createdAt": "2022-07-29T00:32:13Z",
              "updatedAt": "2022-07-29T00:32:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM4-4VSO",
          "commit": {
            "abbreviatedOid": "c8a76b0"
          },
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-29T02:51:09Z",
          "updatedAt": "2022-07-29T02:51:53Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Agreed. Perhaps something even shorter like:\r\n\r\nImplementations MUST support the SHA-256 hash algorithm as shown in Example 1.",
              "createdAt": "2022-07-29T02:51:09Z",
              "updatedAt": "2022-07-29T02:51:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM4_VJH6",
          "commit": {
            "abbreviatedOid": "c8a76b0"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-04T19:46:01Z",
          "updatedAt": "2022-08-04T19:46:02Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\nTo promote interoperability, implementations MUST support the SHA-256 hash algorithm.\r\n```",
              "createdAt": "2022-08-04T19:46:01Z",
              "updatedAt": "2022-08-04T19:46:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM4_VnG_",
          "commit": {
            "abbreviatedOid": "fb2eb8e"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-04T21:56:08Z",
          "updatedAt": "2022-08-04T21:56:08Z",
          "comments": []
        }
      ]
    },
    {
      "number": 135,
      "id": "PR_kwDOHTmVzM491HUo",
      "title": "rename draft after wg adoption",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/135",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "renaming from an individual draft to a WG adopted draft `draft-ietf-oauth-selective-disclosure-jwt-00`",
      "createdAt": "2022-08-25T23:26:17Z",
      "updatedAt": "2022-09-12T18:48:50Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "f39ce6bd94903be0edeb2ff61166efcb95783eaf",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "wg-draft",
      "headRefOid": "a1fc1d3d304089157f877567f904b65d92811101",
      "closedAt": "2022-09-12T18:48:49Z",
      "mergedAt": "2022-09-12T18:48:49Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "1af50d11d8ae16e7cf110889e3c66d31e6c3903d"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 136,
      "id": "PR_kwDOHTmVzM4-bgIj",
      "title": "clarified relationship btw sd_release in the Release and SVC",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/136",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Issue #133 \r\n(cc @vibronet)",
      "createdAt": "2022-09-06T10:50:29Z",
      "updatedAt": "2022-09-21T17:25:48Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "f39ce6bd94903be0edeb2ff61166efcb95783eaf",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "clarifysdjwtsvc",
      "headRefOid": "00d70094d119feed1ef2ec3746dd7c14d6d63b57",
      "closedAt": "2022-09-21T17:25:48Z",
      "mergedAt": "2022-09-21T17:25:48Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "f07e44c8250a572d94a38c0ed3ba3137e89dfdff"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5Ceffg",
          "commit": {
            "abbreviatedOid": "00d7009"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-21T12:00:35Z",
          "updatedAt": "2022-09-21T12:00:35Z",
          "comments": []
        }
      ]
    },
    {
      "number": 138,
      "id": "PR_kwDOHTmVzM4-eO4W",
      "title": "fix: cnf structure in sd_jwk demo",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/138",
      "state": "MERGED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/137",
      "createdAt": "2022-09-06T23:37:10Z",
      "updatedAt": "2022-09-27T23:26:59Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "f39ce6bd94903be0edeb2ff61166efcb95783eaf",
      "headRepository": "peppelinux/draft-selective-disclosure-jwt",
      "headRefName": "cnf-fix",
      "headRefOid": "bd5cb8b39db308220eae9cdef68e08ca8b262b68",
      "closedAt": "2022-09-27T23:26:59Z",
      "mergedAt": "2022-09-27T23:26:59Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "2849d6a1ee96182b06e3683833673e9313564987"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5CAV5q",
          "commit": {
            "abbreviatedOid": "bd5cb8b"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-14T12:27:58Z",
          "updatedAt": "2022-09-14T12:27:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5C7QQ0",
          "commit": {
            "abbreviatedOid": "bd5cb8b"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-27T23:26:53Z",
          "updatedAt": "2022-09-27T23:26:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 145,
      "id": "PR_kwDOHTmVzM4_6TNn",
      "title": "Editorial: Update Document History after WG adoption",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/145",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-09-30T06:35:31Z",
      "updatedAt": "2022-10-04T15:36:31Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "2849d6a1ee96182b06e3683833673e9313564987",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/editorial-update-history",
      "headRefOid": "d8b83d23b61ee290d2b549de85a6a39ba7c3b884",
      "closedAt": "2022-10-04T15:36:30Z",
      "mergedAt": "2022-10-04T15:36:30Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "64bf25aa2ad9edf1ad51806a8adfd45e04798597"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5DMUKq",
          "commit": {
            "abbreviatedOid": "d8b83d2"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-30T19:54:38Z",
          "updatedAt": "2022-09-30T19:54:38Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "usually -02 comes to the very top, no?",
              "createdAt": "2022-09-30T19:54:38Z",
              "updatedAt": "2022-09-30T19:54:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DMUTV",
          "commit": {
            "abbreviatedOid": "d8b83d2"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-30T19:55:16Z",
          "updatedAt": "2022-09-30T19:55:16Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "why are we removing this?",
              "createdAt": "2022-09-30T19:55:16Z",
              "updatedAt": "2022-09-30T19:55:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DUNyH",
          "commit": {
            "abbreviatedOid": "d8b83d2"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-04T06:45:21Z",
          "updatedAt": "2022-10-04T06:45:21Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "It was not used anywhere in the document.",
              "createdAt": "2022-10-04T06:45:21Z",
              "updatedAt": "2022-10-04T06:45:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DXXpp",
          "commit": {
            "abbreviatedOid": "d8b83d2"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-04T15:36:24Z",
          "updatedAt": "2022-10-04T15:36:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 146,
      "id": "PR_kwDOHTmVzM4_7MzJ",
      "title": "Improve explanation for JSON string literals and processing model",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/146",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-09-30T09:56:44Z",
      "updatedAt": "2022-10-14T04:46:03Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "danielfett/blinded-claim-names",
      "baseRefOid": "39d5be4e6eb77420c914ff66c3f4502ede207e50",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/blinded-claim-names-with-merging",
      "headRefOid": "8f0384648a7ddde4fc8679604d118695d7cefe42",
      "closedAt": "2022-10-14T04:45:11Z",
      "mergedAt": "2022-10-14T04:45:11Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "5d135f79eb3643376a3c1af058b427a455eda264"
      },
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this should have been two separate PRs - 1/ explanation for JSON string literals and 2/ merging SD claims with non-SD claims?",
          "createdAt": "2022-10-04T06:50:28Z",
          "updatedAt": "2022-10-04T06:50:28Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "@Sakurann I added an easier-to-understand example and included your suggestions. Ready to merge from my side.",
          "createdAt": "2022-10-07T08:19:19Z",
          "updatedAt": "2022-10-07T08:19:19Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5DUJLg",
          "commit": {
            "abbreviatedOid": "3f4d47c"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-04T06:23:38Z",
          "updatedAt": "2022-10-04T06:23:38Z",
          "comments": [
            {
              "originalPosition": 461,
              "body": "why is `cnf` reverting back to not including `jwk` element..?",
              "createdAt": "2022-10-04T06:23:38Z",
              "updatedAt": "2022-10-04T06:23:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DUM8o",
          "commit": {
            "abbreviatedOid": "3f4d47c"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-04T06:41:38Z",
          "updatedAt": "2022-10-04T06:41:38Z",
          "comments": [
            {
              "originalPosition": 461,
              "body": "I assume it's because this branch does not yet contain the fix for the `jwk` in `cnf`, but I'm not sure why it was in the example before. I expect that this will fix itself after merging into master.",
              "createdAt": "2022-10-04T06:41:38Z",
              "updatedAt": "2022-10-04T06:41:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DUKfF",
          "commit": {
            "abbreviatedOid": "3f4d47c"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-04T06:30:07Z",
          "updatedAt": "2022-10-04T06:43:31Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "I think this is the main point?\r\n```suggestion\r\nre-compute digests of the disclosed claim value and, given the same input values,\r\nobtain the same digest values as signed by the issuer.\r\n```",
              "createdAt": "2022-10-04T06:30:07Z",
              "updatedAt": "2022-10-04T06:43:32Z"
            },
            {
              "originalPosition": 13,
              "body": "```suggestion\r\n```",
              "createdAt": "2022-10-04T06:30:34Z",
              "updatedAt": "2022-10-04T06:43:32Z"
            },
            {
              "originalPosition": 19,
              "body": "```suggestion\r\n```",
              "createdAt": "2022-10-04T06:30:46Z",
              "updatedAt": "2022-10-04T06:43:32Z"
            },
            {
              "originalPosition": 24,
              "body": "can this be generalized to `a problem arises when computation over the data need to be performed and verified` to cover signing and hashing from the onset? ",
              "createdAt": "2022-10-04T06:33:09Z",
              "updatedAt": "2022-10-04T06:43:32Z"
            },
            {
              "originalPosition": 31,
              "body": "```suggestion\r\n```",
              "createdAt": "2022-10-04T06:33:38Z",
              "updatedAt": "2022-10-04T06:43:32Z"
            },
            {
              "originalPosition": 34,
              "body": "were these intentional?\r\n```suggestion\r\n```",
              "createdAt": "2022-10-04T06:34:02Z",
              "updatedAt": "2022-10-04T06:43:32Z"
            },
            {
              "originalPosition": 40,
              "body": "```suggestion\r\n```",
              "createdAt": "2022-10-04T06:34:12Z",
              "updatedAt": "2022-10-04T06:43:32Z"
            },
            {
              "originalPosition": 43,
              "body": "```suggestion\r\n```",
              "createdAt": "2022-10-04T06:34:20Z",
              "updatedAt": "2022-10-04T06:43:32Z"
            },
            {
              "originalPosition": 75,
              "body": "```suggestion\r\ncanonicalization library, purely based on widely available JSON encoding \r\nand decoding libraries. To encode the source string, JSON itself is used. To\r\n```",
              "createdAt": "2022-10-04T06:38:32Z",
              "updatedAt": "2022-10-04T06:43:32Z"
            },
            {
              "originalPosition": 117,
              "body": "I would move this higher, where describing why this approach has been taken.\r\n```suggestion\r\n```",
              "createdAt": "2022-10-04T06:39:02Z",
              "updatedAt": "2022-10-04T06:43:32Z"
            },
            {
              "originalPosition": 158,
              "body": "looks like Giuseppe's PR on adding `jwk` top level claim to `cnf` has been overwritten?",
              "createdAt": "2022-10-04T06:39:30Z",
              "updatedAt": "2022-10-04T06:43:32Z"
            },
            {
              "originalPosition": 4,
              "body": "should this be in Implementation considerations section..?",
              "createdAt": "2022-10-04T06:40:06Z",
              "updatedAt": "2022-10-04T06:43:32Z"
            },
            {
              "originalPosition": 385,
              "body": "```suggestion\r\nthat an application-consumable format is generated from the data released in\r\n```",
              "createdAt": "2022-10-04T06:40:29Z",
              "updatedAt": "2022-10-04T06:43:32Z"
            },
            {
              "originalPosition": 428,
              "body": "```suggestion\r\nIn this example, the Issuer is using a following object as a set of selectively disclosable claims to issue to the Holder:\r\n```",
              "createdAt": "2022-10-04T06:41:20Z",
              "updatedAt": "2022-10-04T06:43:32Z"
            },
            {
              "originalPosition": 398,
              "body": "why not an example with simple claim structure but complex claim structure?",
              "createdAt": "2022-10-04T06:43:27Z",
              "updatedAt": "2022-10-04T06:43:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DUNax",
          "commit": {
            "abbreviatedOid": "3f4d47c"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-04T06:43:42Z",
          "updatedAt": "2022-10-04T06:43:43Z",
          "comments": [
            {
              "originalPosition": 461,
              "body": "I see that the base branch was merged, that explains this: The base branch now contains the fix, this branch did not yet, so this will be fixed after merging.",
              "createdAt": "2022-10-04T06:43:42Z",
              "updatedAt": "2022-10-04T06:43:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DURcH",
          "commit": {
            "abbreviatedOid": "3f4d47c"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-04T07:00:19Z",
          "updatedAt": "2022-10-04T07:00:20Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Not sure - readers might miss it there.",
              "createdAt": "2022-10-04T07:00:19Z",
              "updatedAt": "2022-10-04T07:00:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DUSgD",
          "commit": {
            "abbreviatedOid": "3f4d47c"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-04T07:04:25Z",
          "updatedAt": "2022-10-04T07:04:25Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "These are intentional to show that there might be other elements here. I'm not describing a specific format, just the general approach. Note that I also didn't add commas at the end of the lines.",
              "createdAt": "2022-10-04T07:04:25Z",
              "updatedAt": "2022-10-04T07:04:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DUS9c",
          "commit": {
            "abbreviatedOid": "3f4d47c"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-04T07:06:06Z",
          "updatedAt": "2022-10-04T07:06:06Z",
          "comments": [
            {
              "originalPosition": 75,
              "body": "Your sentence sounds as if JSON encoding would be the only option, but there can be other approaches.",
              "createdAt": "2022-10-04T07:06:06Z",
              "updatedAt": "2022-10-04T07:06:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DUTFk",
          "commit": {
            "abbreviatedOid": "3f4d47c"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-04T07:06:33Z",
          "updatedAt": "2022-10-04T07:06:33Z",
          "comments": [
            {
              "originalPosition": 158,
              "body": "As above, not overwritten but not in this branch yet.",
              "createdAt": "2022-10-04T07:06:33Z",
              "updatedAt": "2022-10-04T07:06:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DUTw9",
          "commit": {
            "abbreviatedOid": "3f4d47c"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-04T07:09:05Z",
          "updatedAt": "2022-10-04T07:09:05Z",
          "comments": [
            {
              "originalPosition": 398,
              "body": "The complex claim structure example shows all interesting cases of the merging, especially how to merge objects. We can additionally show a simple example if you like.",
              "createdAt": "2022-10-04T07:09:05Z",
              "updatedAt": "2022-10-04T07:09:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DUT_w",
          "commit": {
            "abbreviatedOid": "3f4d47c"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-04T07:09:58Z",
          "updatedAt": "2022-10-04T07:09:58Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "Yes, sounds good to me.",
              "createdAt": "2022-10-04T07:09:58Z",
              "updatedAt": "2022-10-04T07:09:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DmF15",
          "commit": {
            "abbreviatedOid": "3685688"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-07T07:50:57Z",
          "updatedAt": "2022-10-07T07:50:58Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "```suggestion\r\nHowever, a problem arises when computation over the data need to be performed and verified, like signing or hashing. Common signature schemes require the same byte string as input to the\r\n```",
              "createdAt": "2022-10-07T07:50:57Z",
              "updatedAt": "2022-10-07T07:50:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Do5Vp",
          "commit": {
            "abbreviatedOid": "3f4d47c"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-07T16:22:23Z",
          "updatedAt": "2022-10-07T16:22:23Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "ok, let's keep this and come back if needed :)",
              "createdAt": "2022-10-07T16:22:23Z",
              "updatedAt": "2022-10-07T16:22:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Do59y",
          "commit": {
            "abbreviatedOid": "5b7b583"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-07T16:24:12Z",
          "updatedAt": "2022-10-07T16:24:23Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "what does `like so` mean?\r\ntypo for `like below`?",
              "createdAt": "2022-10-07T16:24:12Z",
              "updatedAt": "2022-10-07T16:24:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DqQJV",
          "commit": {
            "abbreviatedOid": "5b7b583"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-08T00:10:43Z",
          "updatedAt": "2022-10-08T00:10:44Z",
          "comments": [
            {
              "originalPosition": 404,
              "body": "```suggestion\r\nThe holder can now, for example, release the rest of the components of the `address` claim in the SD-JWT-Release:\r\n```",
              "createdAt": "2022-10-08T00:10:43Z",
              "updatedAt": "2022-10-08T00:10:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DqQQ6",
          "commit": {
            "abbreviatedOid": "5b7b583"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-08T00:13:08Z",
          "updatedAt": "2022-10-08T00:13:09Z",
          "comments": [
            {
              "originalPosition": 368,
              "body": "```suggestion\r\nThe JSON-payload of the SD-JWT that contains both selectively disclosable claims in the `sd_digests` object and not selectively disclosable claims in a top-level JWT claim would look as follows:\r\n```",
              "createdAt": "2022-10-08T00:13:08Z",
              "updatedAt": "2022-10-08T00:13:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5D-gs1",
          "commit": {
            "abbreviatedOid": "ae33891"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-13T09:47:44Z",
          "updatedAt": "2022-10-13T09:47:44Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "Now you got me looking this up :-) Seems to be a [bit of a germanism](https://english.stackexchange.com/questions/4524/is-like-so-correct) but is proper English to say \"[like this](https://www.merriam-webster.com/dictionary/like%20so)\".",
              "createdAt": "2022-10-13T09:47:44Z",
              "updatedAt": "2022-10-13T09:47:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EDp2M",
          "commit": {
            "abbreviatedOid": "8f03846"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-14T04:45:05Z",
          "updatedAt": "2022-10-14T04:45:05Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5EDp8T",
          "commit": {
            "abbreviatedOid": "8f03846"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-14T04:45:56Z",
          "updatedAt": "2022-10-14T04:46:03Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "ah you didn't change it - will change in my next PR..",
              "createdAt": "2022-10-14T04:45:56Z",
              "updatedAt": "2022-10-14T04:46:03Z"
            }
          ]
        }
      ]
    },
    {
      "number": 147,
      "id": "PR_kwDOHTmVzM4_-v-o",
      "title": "[ed] added definition of selective disclosure",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/147",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-10-01T04:39:52Z",
      "updatedAt": "2022-10-06T13:25:17Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "2849d6a1ee96182b06e3683833673e9313564987",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "sd-def",
      "headRefOid": "59e38ea11236b01b71ca1b7c5e0ac03ec9deecca",
      "closedAt": "2022-10-06T13:25:17Z",
      "mergedAt": "2022-10-06T13:25:16Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "72e3b784e17f1e6882cb76ff137ac7212a721ff8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5DWG7T",
          "commit": {
            "abbreviatedOid": "dfd5454"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-04T12:50:17Z",
          "updatedAt": "2022-10-04T12:50:22Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Probably stylistic, but this feels more natural to me:\r\n```suggestion\r\n: Process of a Holder disclosing to a Verifier a subset of claims contained in a claim set issued by an Issuer.\r\n```",
              "createdAt": "2022-10-04T12:50:17Z",
              "updatedAt": "2022-10-04T12:50:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DiDaz",
          "commit": {
            "abbreviatedOid": "59e38ea"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-06T13:25:11Z",
          "updatedAt": "2022-10-06T13:25:11Z",
          "comments": []
        }
      ]
    },
    {
      "number": 148,
      "id": "PR_kwDOHTmVzM4_-wio",
      "title": "renamed SVC to a Disclosure Document",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/148",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- I did not create an abbreviation for a Disclosure Document, DD sounded weird..\r\n- I did not replace reference to `svc` in the example references like `#example-simple-combined_sd_jwt_svc` and `#example-simple-combined_sd_jwt_sd_jwt_release`. let me know if you wanted me to.\r\n",
      "createdAt": "2022-10-01T04:53:28Z",
      "updatedAt": "2022-10-19T07:52:41Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "f7246909a942a1735a1b4835e6f309c7f57ffde4",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "disclosed-document",
      "headRefOid": "6d0eacbd7a0118b7bec8bc6828a194f9ce6ccedb",
      "closedAt": "2022-10-19T07:52:41Z",
      "mergedAt": "2022-10-19T07:52:41Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "d5a64f238ea1ceec5134e9a0b6620734958672cb"
      },
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Do we also want to update the names of the parameters/class/function names in the code?\r\nie `from_combined_sd_jwt_svc` -> `from_combined_sd_jwt_disclosure_document` and \r\n`create_sd_jwt_release` -> `create_sd_jwt_disclosure`\r\n",
          "createdAt": "2022-10-01T04:57:39Z",
          "updatedAt": "2022-10-01T05:06:14Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "> Do we also want to update the names of the parameters/class/function names in the code? ie `from_combined_sd_jwt_svc` -> `from_combined_sd_jwt_disclosure_document` and `create_sd_jwt_release` -> `create_sd_jwt_disclosure`\r\n\r\nWe should rename those as well, because otherwise everybody will get confused otherwise and in a year we'll have to explain at every conference what \"SVC\" stands for in the code :-) ",
          "createdAt": "2022-10-04T12:47:35Z",
          "updatedAt": "2022-10-04T12:47:35Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "> * I did not replace reference to `svc` in the example references like `#example-simple-combined_sd_jwt_svc` and `#example-simple-combined_sd_jwt_sd_jwt_release`. let me know if you wanted me to.\r\n\r\nMakes sense to replace those as well. As long as `_artifacts` in https://github.com/oauthstuff/draft-selective-disclosure-jwt/blob/master/sd_jwt/bin/sd_jwt#L173-L199 is changed accordingly, there should be no side effects.",
          "createdAt": "2022-10-04T12:48:59Z",
          "updatedAt": "2022-10-04T12:48:59Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "What about\r\n\r\n * Complete Disclosure Document for the thing sent by the Issuer,\r\n * Reduced Disclosure Document for the thing sent by the Holder?",
          "createdAt": "2022-10-13T15:35:53Z",
          "updatedAt": "2022-10-13T15:35:53Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "+1 to complete DD,\r\nMaybe Selectively Disclosed DD? (SDD)\r\nReduced sounds a little not in place",
          "createdAt": "2022-10-13T15:47:39Z",
          "updatedAt": "2022-10-13T15:47:39Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "full, partial...\r\nIssuer-issued Disclosures (IID) and holder-selected Disclosures (HSD)",
          "createdAt": "2022-10-13T16:23:19Z",
          "updatedAt": "2022-10-13T16:26:28Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "- I picked \"Issuer-Issued Disclosures object\" because Issuer-Issued Disclosures is plural while the text is much cleaner when the whole object in referred to in singular.\r\n- but \"A Issuer-Issued Disclosures object is a JSON object\" text sounds a little weird...",
          "createdAt": "2022-10-14T05:54:42Z",
          "updatedAt": "2022-10-14T06:14:29Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "ready for review @danielfett ",
          "createdAt": "2022-10-14T06:14:07Z",
          "updatedAt": "2022-10-14T06:14:07Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "- here too I picked \"Holder-Selected Disclosures JWT\" because Disclosures is plural while the text is much cleaner when the whole object in referred to in singular.\r\n- not sure what we will do if we go JSON object path for unsigned holder selected disclosures.. (to remove alg=none)",
          "createdAt": "2022-10-14T06:15:25Z",
          "updatedAt": "2022-10-14T06:15:25Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "lmk if not using abbreviations is significantly harder to read...\r\nIIDs and HSDs was a little alien to be rn",
          "createdAt": "2022-10-14T06:16:04Z",
          "updatedAt": "2022-10-14T06:16:04Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I see why using the abbreviation feels wrong, but at the moment, the text is quite verbose.",
          "createdAt": "2022-10-14T08:04:24Z",
          "updatedAt": "2022-10-14T08:04:24Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "should it be abbreviated to II-Disclosures and HS-Disclosures?",
          "createdAt": "2022-10-14T17:48:39Z",
          "updatedAt": "2022-10-14T17:48:39Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "try to use II-Disclosures object (singular) and II-Disclosures (plural); and HS-DIsclosures (plural) and HS-Disclosures JWT (singluar) depending on the context.",
          "createdAt": "2022-10-18T15:20:05Z",
          "updatedAt": "2022-10-18T15:20:05Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "also rename sd_digests to sd_ii_disclosures and sd_hs_disclosures",
          "createdAt": "2022-10-18T16:03:17Z",
          "updatedAt": "2022-10-18T16:03:17Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I think you accidentally added demo/lib.py containing an old version of the demo code.",
          "createdAt": "2022-10-19T07:38:27Z",
          "updatedAt": "2022-10-19T07:38:27Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5DWE_t",
          "commit": {
            "abbreviatedOid": "bd6cde4"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-04T12:44:51Z",
          "updatedAt": "2022-10-14T08:04:35Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "I think this might be misleading, as the Disclosure Document itself does not disclose anything. Disclosures List? Disclosure Container? Disclosure Map? Disclosure Transport Document? ",
              "createdAt": "2022-10-04T12:44:52Z",
              "updatedAt": "2022-10-14T08:04:35Z"
            },
            {
              "originalPosition": 42,
              "body": "Maybe just \"Disclosure-JWT\" might be a bit more brief. WDYT?",
              "createdAt": "2022-10-04T12:45:33Z",
              "updatedAt": "2022-10-14T08:04:35Z"
            },
            {
              "originalPosition": 45,
              "body": "```suggestion\r\n:  A JWT created by the holder that contains a subset of the disclosures in an Issuer-Issued Disclosures Object, potentially enriched by other data and signed by the Holder. \r\n```",
              "createdAt": "2022-10-14T07:59:43Z",
              "updatedAt": "2022-10-14T08:04:35Z"
            },
            {
              "originalPosition": 38,
              "body": "Shall we explain what a \"Disclosure\" is before this?\r\n\r\n\"Information suitable to disclose the cleartext claim value and potentially other information, such as a salt and a claim name, to a Verifier.\"",
              "createdAt": "2022-10-14T08:00:47Z",
              "updatedAt": "2022-10-14T08:04:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EHWuu",
          "commit": {
            "abbreviatedOid": "f168658"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-14T17:43:24Z",
          "updatedAt": "2022-10-14T17:43:24Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "I think you were looking at the old commit... this has been replaced with issuer-issued disclosures object",
              "createdAt": "2022-10-14T17:43:24Z",
              "updatedAt": "2022-10-14T17:43:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EHWz4",
          "commit": {
            "abbreviatedOid": "f168658"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-14T17:43:43Z",
          "updatedAt": "2022-10-14T17:43:43Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "I think you were looking at the old commit... this has been replaced with holder-selected disclosures-JWT..",
              "createdAt": "2022-10-14T17:43:43Z",
              "updatedAt": "2022-10-14T17:43:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EHW4L",
          "commit": {
            "abbreviatedOid": "bd6cde4"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-14T17:43:58Z",
          "updatedAt": "2022-10-14T17:43:58Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "I like the idea!",
              "createdAt": "2022-10-14T17:43:58Z",
              "updatedAt": "2022-10-14T17:43:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EW_TW",
          "commit": {
            "abbreviatedOid": "bd6cde4"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-19T05:43:27Z",
          "updatedAt": "2022-10-19T05:43:27Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "paraphrased to \r\n\r\nDisclosure\r\n: A combination of the cleartext claim value, the cleartext claim name, a salt and\r\n   optionally blinded claim name value that is used to calculate a digest for a certain claim.",
              "createdAt": "2022-10-19T05:43:27Z",
              "updatedAt": "2022-10-19T05:43:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EXADs",
          "commit": {
            "abbreviatedOid": "bd6cde4"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-19T05:47:39Z",
          "updatedAt": "2022-10-19T05:47:40Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "Holder-Selected Disclosures JWT (HS-Disclosures JWT)\r\n:  A JWT created by the Holder that contains the Disclosures from an Issuer-Issued Disclosures Object that the Holder is disclosing to the Verifier. In addition to the Disclosures, it can contain other properties and may be signed by the Holder.",
              "createdAt": "2022-10-19T05:47:39Z",
              "updatedAt": "2022-10-19T05:47:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EXeer",
          "commit": {
            "abbreviatedOid": "65da3c4"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-19T07:39:50Z",
          "updatedAt": "2022-10-19T07:39:51Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nSD_II_CLAIMS_KEY = \"sd_ii_disclosures\"\r\nSD_HS_CLAIMS_KEY = \"sd_hs_disclosures\"\r\n```",
              "createdAt": "2022-10-19T07:39:50Z",
              "updatedAt": "2022-10-19T07:39:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EXiXb",
          "commit": {
            "abbreviatedOid": "6d0eacb"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-19T07:50:52Z",
          "updatedAt": "2022-10-19T07:50:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 149,
      "id": "PR_kwDOHTmVzM5AG2lX",
      "title": "clarified that HMAC is an option",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/149",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- added HMAC algorithm to supported `sd_hash_alg` identifiers\r\n- replaced `salt` with `random value` to enable random value being a cryptographic key",
      "createdAt": "2022-10-04T06:16:15Z",
      "updatedAt": "2022-10-19T17:58:21Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "e2307eea50efa4b0823763e99871794642636a1a",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "hash-func",
      "headRefOid": "07add7f8ba191cf12bb6215a3c8c1a6cff42d423",
      "closedAt": "2022-10-18T17:28:37Z",
      "mergedAt": "2022-10-18T17:28:37Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "f7246909a942a1735a1b4835e6f309c7f57ffde4"
      },
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "@danielfett ready from my side",
          "createdAt": "2022-10-11T05:42:09Z",
          "updatedAt": "2022-10-11T05:42:09Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Looks good, I just had a few nitpicks here and there. ",
          "createdAt": "2022-10-14T07:50:44Z",
          "updatedAt": "2022-10-14T07:50:44Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "- resolve conflicts,\r\n- change to sd_digest_derivation_alg\r\n- check if renders correctly...",
          "createdAt": "2022-10-18T15:15:17Z",
          "updatedAt": "2022-10-18T15:15:17Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Verbal approval from @danielfett ",
          "createdAt": "2022-10-18T17:28:30Z",
          "updatedAt": "2022-10-18T17:28:30Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "@Sakurann sorry for the late revision\r\n\r\nit seems that here we have merge conflicts exposed\r\nhttps://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/149/files#diff-ce646751295775c4b20fb384cedc0e3374a9c288cc7c93c345f227a422979f46R12",
          "createdAt": "2022-10-19T10:51:14Z",
          "updatedAt": "2022-10-19T10:51:14Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "thanks! yes, fixed them in a PR #148 that was merged",
          "createdAt": "2022-10-19T17:58:21Z",
          "updatedAt": "2022-10-19T17:58:21Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5DWBWv",
          "commit": {
            "abbreviatedOid": "b5914cd"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-10-04T12:34:44Z",
          "updatedAt": "2022-10-04T12:40:25Z",
          "comments": [
            {
              "originalPosition": 146,
              "body": "```suggestion\r\n### Digest Derivation Function Claim\r\n```",
              "createdAt": "2022-10-04T12:34:44Z",
              "updatedAt": "2022-10-04T12:40:25Z"
            },
            {
              "originalPosition": 209,
              "body": "```suggestion\r\n## Entropy and Uniqueness of the Random Value\r\n```",
              "createdAt": "2022-10-04T12:35:18Z",
              "updatedAt": "2022-10-04T12:40:25Z"
            },
            {
              "originalPosition": 218,
              "body": "The current wording (which was not introduced by this PR) implies that there must be a check that any two random values are different, but that is not what we want.\r\n\r\n```suggestion\r\nguess. A new random value MUST be chosen for each claim.\r\n```",
              "createdAt": "2022-10-04T12:37:46Z",
              "updatedAt": "2022-10-04T12:40:25Z"
            },
            {
              "originalPosition": 209,
              "body": "I wonder if it is clear what we mean with \"random value\" here. \"Salt\" was clear because it refers to a specific concept, \"random value\" seems more arbitrary and leaves room for interpretation. I wonder if we should keep \"salt\" in the text and just say that in the case of an HMAC, salt becomes the key.",
              "createdAt": "2022-10-04T12:39:52Z",
              "updatedAt": "2022-10-04T12:40:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DW6dS",
          "commit": {
            "abbreviatedOid": "b5914cd"
          },
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-04T14:34:32Z",
          "updatedAt": "2022-10-04T14:34:32Z",
          "comments": [
            {
              "originalPosition": 209,
              "body": "That sounds good to me. Indeed, \"salt\" gives the right intuition.",
              "createdAt": "2022-10-04T14:34:32Z",
              "updatedAt": "2022-10-04T14:34:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DXBPb",
          "commit": {
            "abbreviatedOid": "b5914cd"
          },
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "It would be nice to further generalize \"hash alg\" to \"digest derivation alg\", to allow more mechanisms which could make time/space security trade-offs. sha256 is a MUST implement (good!), but allow other profiles to define other choices. I'd like to be able to define (in a profile) e.g. PBKDF2-HMAC-SHA256-310000 with potentially smaller salt values.",
          "createdAt": "2022-10-04T14:46:17Z",
          "updatedAt": "2022-10-04T14:51:37Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "You are only giving two different choices here: hash or hmac. We might want to generalize and allow for more, to reach different security goals. For example, in my [prototype](https://github.com/christianpaquin/selective-disclosure), I define a Digest Derivation Function (DDF), and also offer PBKDF2-HMAC-SHA256-310000 which could be useful to optimize space in the SD-JWT (e.g., for encoding into a QR code).",
              "createdAt": "2022-10-04T14:46:17Z",
              "updatedAt": "2022-10-04T14:57:42Z"
            },
            {
              "originalPosition": 154,
              "body": "Might want to change the field name to `digest_derivation_alg` or something like that, since hmac (and potentially other mechanisms, as I proposed earler) isn't really a hash alg.",
              "createdAt": "2022-10-04T14:47:31Z",
              "updatedAt": "2022-10-04T14:51:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DXFIu",
          "commit": {
            "abbreviatedOid": "b5914cd"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-04T14:55:06Z",
          "updatedAt": "2022-10-04T14:55:06Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "Would `DDF(SALT, CLAIM-VALUE)` make sense as a notation?",
              "createdAt": "2022-10-04T14:55:06Z",
              "updatedAt": "2022-10-04T14:55:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DXFl7",
          "commit": {
            "abbreviatedOid": "b5914cd"
          },
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-04T14:56:09Z",
          "updatedAt": "2022-10-04T14:56:09Z",
          "comments": [
            {
              "originalPosition": 126,
              "body": "This could be dependent on the digest derivation function, so perhaps move that information to the hash mechanism choice section (128 bits is ok for sha256 and hmac-sha256, but you could choose a smaller one if you pick a stronger iterative derivation function)",
              "createdAt": "2022-10-04T14:56:09Z",
              "updatedAt": "2022-10-04T14:56:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DXGM5",
          "commit": {
            "abbreviatedOid": "b5914cd"
          },
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-04T14:57:32Z",
          "updatedAt": "2022-10-04T14:57:33Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "I think that works well.",
              "createdAt": "2022-10-04T14:57:32Z",
              "updatedAt": "2022-10-04T14:57:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Dejt7",
          "commit": {
            "abbreviatedOid": "b5914cd"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-05T21:44:39Z",
          "updatedAt": "2022-10-05T21:44:39Z",
          "comments": [
            {
              "originalPosition": 218,
              "body": "good catch. paraphrased reference to `unique` in the rest of the spec too.",
              "createdAt": "2022-10-05T21:44:39Z",
              "updatedAt": "2022-10-05T21:44:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Dej_n",
          "commit": {
            "abbreviatedOid": "b5914cd"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-05T21:46:02Z",
          "updatedAt": "2022-10-05T21:46:03Z",
          "comments": [
            {
              "originalPosition": 154,
              "body": "agreed. suggestion adopted.",
              "createdAt": "2022-10-05T21:46:02Z",
              "updatedAt": "2022-10-05T21:46:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DelS4",
          "commit": {
            "abbreviatedOid": "b5914cd"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-05T21:52:51Z",
          "updatedAt": "2022-10-05T21:52:51Z",
          "comments": [
            {
              "originalPosition": 126,
              "body": "moved to the security considerations section. and changed 128 bits to recommendation from the requirement (cc @danielfett )",
              "createdAt": "2022-10-05T21:52:51Z",
              "updatedAt": "2022-10-05T21:52:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DemU4",
          "commit": {
            "abbreviatedOid": "b5914cd"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-05T21:58:26Z",
          "updatedAt": "2022-10-05T21:58:27Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "changed:\r\n> `SD-CLAIMS` is an object with claim names mapped to the digests over the claim values with random salts calculated using digest derivation function such as hash function, HMAC, or other:\r\n\r\n```\r\nSD-CLAIMS = (\r\n    CLAIM-NAME: DIGEST-DERIVATION(SALT | CLAIM-VALUE)\r\n)\r\n```",
              "createdAt": "2022-10-05T21:58:26Z",
              "updatedAt": "2022-10-05T21:58:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DembF",
          "commit": {
            "abbreviatedOid": "b5914cd"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-05T21:58:58Z",
          "updatedAt": "2022-10-05T21:58:58Z",
          "comments": [
            {
              "originalPosition": 209,
              "body": "reverted to salt. \r\nneed to clarify, it can be key",
              "createdAt": "2022-10-05T21:58:58Z",
              "updatedAt": "2022-10-05T21:58:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DiCbN",
          "commit": {
            "abbreviatedOid": "b5914cd"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-06T13:22:53Z",
          "updatedAt": "2022-10-06T13:22:54Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "It should be `SALT, CLAIM-VALUE` as the `|` implies concatenation which would only be correct in the hash case.",
              "createdAt": "2022-10-06T13:22:54Z",
              "updatedAt": "2022-10-06T13:22:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Dwg-M",
          "commit": {
            "abbreviatedOid": "b5914cd"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-11T05:39:16Z",
          "updatedAt": "2022-10-11T05:39:16Z",
          "comments": [
            {
              "originalPosition": 126,
              "body": "elaborated further in the latest commit.",
              "createdAt": "2022-10-11T05:39:16Z",
              "updatedAt": "2022-10-11T05:39:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DmEBe",
          "commit": {
            "abbreviatedOid": "8c379e2"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-10-07T07:44:43Z",
          "updatedAt": "2022-10-13T16:06:52Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "```suggestion\r\n    CLAIM-NAME: DIGEST-DERIVATION(SALT, CLAIM-VALUE)\r\n```",
              "createdAt": "2022-10-07T07:44:43Z",
              "updatedAt": "2022-10-13T16:06:52Z"
            },
            {
              "originalPosition": 24,
              "body": "```suggestion\r\nWhen an HMAC or another type of digest derivation function is used for digest derivation, a secret cryptographic key or other cryptographic secret is used instead of a salt value. The term \"salt\" is used throughout this document for brevity.\r\n```\r\n",
              "createdAt": "2022-10-13T14:30:53Z",
              "updatedAt": "2022-10-13T16:06:52Z"
            },
            {
              "originalPosition": 26,
              "body": "```suggestion\r\nThe claim name (`CLAIM-NAME`) is optional \r\n```",
              "createdAt": "2022-10-13T14:31:05Z",
              "updatedAt": "2022-10-13T16:06:52Z"
            },
            {
              "originalPosition": 65,
              "body": "```suggestion\r\nThe claim `digest_derivation_alg` indicates the digest derivation algorithm  \r\n```",
              "createdAt": "2022-10-13T14:32:43Z",
              "updatedAt": "2022-10-13T16:06:52Z"
            },
            {
              "originalPosition": 66,
              "body": "```suggestion\r\nused by the Issuer to generate the digests over the salts and the\r\n```",
              "createdAt": "2022-10-13T14:33:07Z",
              "updatedAt": "2022-10-13T16:06:52Z"
            },
            {
              "originalPosition": 80,
              "body": "This is not compatible with the \"MUST\" above.",
              "createdAt": "2022-10-13T14:33:42Z",
              "updatedAt": "2022-10-13T16:06:52Z"
            },
            {
              "originalPosition": 75,
              "body": "This and the next paragraph still talk about hash function where it should be digest derivation. ",
              "createdAt": "2022-10-13T14:36:49Z",
              "updatedAt": "2022-10-13T16:06:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EA_YC",
          "commit": {
            "abbreviatedOid": "8c379e2"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-13T16:10:00Z",
          "updatedAt": "2022-10-13T16:10:01Z",
          "comments": [
            {
              "originalPosition": 77,
              "body": "MUST be from a registry OR defined in a separate profile",
              "createdAt": "2022-10-13T16:10:00Z",
              "updatedAt": "2022-10-13T16:10:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EDuSZ",
          "commit": {
            "abbreviatedOid": "8c379e2"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-14T05:17:49Z",
          "updatedAt": "2022-10-14T05:17:49Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "wait, why is the claim name optional when claim name is not blinded? it is required. I would delete this sentence..",
              "createdAt": "2022-10-14T05:17:49Z",
              "updatedAt": "2022-10-14T05:17:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EDwDl",
          "commit": {
            "abbreviatedOid": "8c379e2"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-14T05:29:53Z",
          "updatedAt": "2022-10-14T05:29:53Z",
          "comments": [
            {
              "originalPosition": 75,
              "body": "I replaced \r\nhash -> digest;\r\nhash alg -> digest derivation alg",
              "createdAt": "2022-10-14T05:29:53Z",
              "updatedAt": "2022-10-14T05:29:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EEQSY",
          "commit": {
            "abbreviatedOid": "02cf5ea"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-10-14T07:41:21Z",
          "updatedAt": "2022-10-14T07:50:04Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "```suggestion\r\n`SD-CLAIMS` is an object with claim names (`CLAIM-NAME`) mapped to the digests over the claim values (`CLAIM-VALUE`) with random salts (`SALT`). Digests are calculated using a digest derivation function such as a hash function, HMAC, or other (`DIGEST-DERIVATION()`):\r\n```",
              "createdAt": "2022-10-14T07:41:21Z",
              "updatedAt": "2022-10-14T07:50:04Z"
            },
            {
              "originalPosition": 30,
              "body": "```suggestion\r\n)*\r\n```\r\nThe asterisk shows that there can be an arbitrary number of claims.",
              "createdAt": "2022-10-14T07:42:59Z",
              "updatedAt": "2022-10-14T07:50:04Z"
            },
            {
              "originalPosition": 123,
              "body": "I wonder if we want to call it `sd_digest_derivation_alg` instead.",
              "createdAt": "2022-10-14T07:44:29Z",
              "updatedAt": "2022-10-14T07:50:04Z"
            },
            {
              "originalPosition": 132,
              "body": "```suggestion\r\nThe property `sd_digests` MUST be used by the issuer to include digests of the salted claim values for any claim that is intended to be selectively disclosable.\r\n```\r\n* I was not sure what the point of the original sentence was.\r\n* My proposal leaves room for an empty `sd_digests` in corner-cases.",
              "createdAt": "2022-10-14T07:47:27Z",
              "updatedAt": "2022-10-14T07:50:04Z"
            },
            {
              "originalPosition": 192,
              "body": "I like this!",
              "createdAt": "2022-10-14T07:48:21Z",
              "updatedAt": "2022-10-14T07:50:04Z"
            },
            {
              "originalPosition": 192,
              "body": "Will this render correctly? An empty line might be required before the list.",
              "createdAt": "2022-10-14T07:49:17Z",
              "updatedAt": "2022-10-14T07:50:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EH1gr",
          "commit": {
            "abbreviatedOid": "02cf5ea"
          },
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-14T19:38:07Z",
          "updatedAt": "2022-10-14T19:47:45Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "A bit repetitive, how about \" or another type of derivation function is used for digest calculation,\"",
              "createdAt": "2022-10-14T19:38:07Z",
              "updatedAt": "2022-10-14T19:47:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ETwsu",
          "commit": {
            "abbreviatedOid": "72ce2d0"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-18T15:11:11Z",
          "updatedAt": "2022-10-18T15:11:11Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "```suggestion\r\nWhen an HMAC or another type of derivation function is used for digest calculation, a secret cryptographic key or other cryptographic secret is used instead of a salt value. \r\n```",
              "createdAt": "2022-10-18T15:11:11Z",
              "updatedAt": "2022-10-18T15:11:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ETw8V",
          "commit": {
            "abbreviatedOid": "72ce2d0"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-18T15:11:43Z",
          "updatedAt": "2022-10-18T15:11:44Z",
          "comments": [
            {
              "originalPosition": 123,
              "body": "```suggestion\r\npayload of an SD-JWT MUST contain the `sd_digests` and `sd_digest_derivation_alg` claims\r\n```",
              "createdAt": "2022-10-18T15:11:43Z",
              "updatedAt": "2022-10-18T15:11:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EUkD8",
          "commit": {
            "abbreviatedOid": "02cf5ea"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-18T17:24:56Z",
          "updatedAt": "2022-10-18T17:24:56Z",
          "comments": [
            {
              "originalPosition": 192,
              "body": "rendered conrrectly",
              "createdAt": "2022-10-18T17:24:56Z",
              "updatedAt": "2022-10-18T17:24:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EUkGx",
          "commit": {
            "abbreviatedOid": "02cf5ea"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-18T17:25:04Z",
          "updatedAt": "2022-10-18T17:25:04Z",
          "comments": [
            {
              "originalPosition": 123,
              "body": "renamed",
              "createdAt": "2022-10-18T17:25:04Z",
              "updatedAt": "2022-10-18T17:25:04Z"
            }
          ]
        }
      ]
    },
    {
      "number": 150,
      "id": "PR_kwDOHTmVzM5AUGq6",
      "title": "Add OIDC reference again (was needed after all)",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/150",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "It seems that I missed the one place where @OIDC was used in the document when removing the reference. This PR adds it back into the document.",
      "createdAt": "2022-10-06T13:38:30Z",
      "updatedAt": "2022-10-07T07:01:58Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "72e3b784e17f1e6882cb76ff137ac7212a721ff8",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/re-add-oidc-reference",
      "headRefOid": "b7fbd81a6ed800b93b64f91961c2798df8c17b61",
      "closedAt": "2022-10-07T07:01:58Z",
      "mergedAt": "2022-10-07T07:01:58Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "15d9dcd1e82bbd6f3add741a9c076cf272ba3ca4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5Dl01B",
          "commit": {
            "abbreviatedOid": "b7fbd81"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-07T07:01:53Z",
          "updatedAt": "2022-10-07T07:01:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 151,
      "id": "PR_kwDOHTmVzM5AwLGy",
      "title": "Remove HTML and XML files",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/151",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-10-13T16:37:16Z",
      "updatedAt": "2022-10-13T16:38:37Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "a9d4b52d25035018350b019c928d84a3be553486",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/remove-files",
      "headRefOid": "c9ef1625dc754de21af915986ba66f1b912d2db1",
      "closedAt": "2022-10-13T16:38:37Z",
      "mergedAt": "2022-10-13T16:38:37Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "eba2adc2283150c833ca4d3a1f30e9125a3917a7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5EBJ6G",
          "commit": {
            "abbreviatedOid": "c9ef162"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-13T16:38:13Z",
          "updatedAt": "2022-10-13T16:38:13Z",
          "comments": []
        }
      ]
    },
    {
      "number": 152,
      "id": "PR_kwDOHTmVzM5AyVEI",
      "title": "Danielfett/blinded claim names",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/152",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "merging changes in PR #146 into a master (PR #146 itself merged into blinded-claim-names branch)",
      "createdAt": "2022-10-14T04:49:52Z",
      "updatedAt": "2022-10-14T17:36:30Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "f15539367b749090704c82ec7db6f6ac61d94025",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/blinded-claim-names",
      "headRefOid": "2b571d49243c377308298b34728aea044c4a52ab",
      "closedAt": "2022-10-14T17:36:30Z",
      "mergedAt": "2022-10-14T17:36:30Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "e2307eea50efa4b0823763e99871794642636a1a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5EEPmt",
          "commit": {
            "abbreviatedOid": "2b571d4"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-14T07:39:44Z",
          "updatedAt": "2022-10-14T07:39:44Z",
          "comments": []
        }
      ]
    },
    {
      "number": 153,
      "id": "PR_kwDOHTmVzM5Ayit7",
      "title": "adding one more SD-JWT implementation",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/153",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-10-14T06:18:20Z",
      "updatedAt": "2022-10-14T07:56:29Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "f15539367b749090704c82ec7db6f6ac61d94025",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "implementation",
      "headRefOid": "350b4b479e0bd50af2d750b05093bebb89de88e7",
      "closedAt": "2022-10-14T07:56:29Z",
      "mergedAt": "2022-10-14T07:56:29Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "30f6c3f71f2c9dc65d1f9144bf4cddfbaf076d1c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5EEVtT",
          "commit": {
            "abbreviatedOid": "350b4b4"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-14T07:56:18Z",
          "updatedAt": "2022-10-14T07:56:18Z",
          "comments": []
        }
      ]
    },
    {
      "number": 154,
      "id": "PR_kwDOHTmVzM5A0jiR",
      "title": "fix: CI",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/154",
      "state": "CLOSED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This PR fixes the CI that fails after the main file was renamed",
      "createdAt": "2022-10-14T14:18:07Z",
      "updatedAt": "2022-10-14T14:35:07Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "33ce829aa54317745dad13ba662f455ca1d78124",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "fix-ci",
      "headRefOid": "ef27c4f236f1414d8a47630f08933a18d4f20041",
      "closedAt": "2022-10-14T14:35:07Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Thank you, but I have fixed this in https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/152 already, which we'll merge soon.",
          "createdAt": "2022-10-14T14:21:17Z",
          "updatedAt": "2022-10-14T14:21:17Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 155,
      "id": "PR_kwDOHTmVzM5BGHQo",
      "title": "Review",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/155",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "- Modified introduction for better explanation of the terms used\r\n- Added references, both internal and external\r\n- Introduced \"Combined Format for Issuance/Presentation\" terms\r\n- Editorial changes",
      "createdAt": "2022-10-19T10:34:12Z",
      "updatedAt": "2022-10-24T20:03:25Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "d1a73fb489eb650073aac0882957b60609827c57",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/full-review",
      "headRefOid": "a7c51fe787702a6a314bace8f093f58c12688f3c",
      "closedAt": "2022-10-24T16:32:52Z",
      "mergedAt": "2022-10-24T16:32:52Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "c651a0581223cad4cd2e29ed7e62cbae4e0929a0"
      },
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Issues #47, #36, #37",
          "createdAt": "2022-10-24T20:00:24Z",
          "updatedAt": "2022-10-24T20:03:25Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5ErTBv",
          "commit": {
            "abbreviatedOid": "b5c9e61"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "still reviewing..",
          "createdAt": "2022-10-23T02:24:20Z",
          "updatedAt": "2022-10-23T07:10:45Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "```suggestion\r\nVerifier. However, when a signed JWT is intended to be multi-use, it needs to\r\n```",
              "createdAt": "2022-10-23T02:24:20Z",
              "updatedAt": "2022-10-23T07:10:45Z"
            },
            {
              "originalPosition": 22,
              "body": "all the terms defined in the terminology section should be capitalized I think.",
              "createdAt": "2022-10-23T02:25:05Z",
              "updatedAt": "2022-10-23T07:10:45Z"
            },
            {
              "originalPosition": 22,
              "body": "\"when a signed JWT is intended to be multi-use,\" which is a key assumption here seems pretty buried in a paragraph. I think we should make it clear that this feature becomes useful (only? mainly?) when \"a signed JWT is intended to be multi-use\". ",
              "createdAt": "2022-10-23T02:27:52Z",
              "updatedAt": "2022-10-23T07:10:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Evhfh",
          "commit": {
            "abbreviatedOid": "b5c9e61"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T15:04:50Z",
          "updatedAt": "2022-10-24T15:04:50Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "Will fix.",
              "createdAt": "2022-10-24T15:04:50Z",
              "updatedAt": "2022-10-24T15:04:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EvfLV",
          "commit": {
            "abbreviatedOid": "35d464c"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T14:59:16Z",
          "updatedAt": "2022-10-24T15:29:21Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "```suggestion\r\nthe Issuer also sends a JSON object that contains a mapping between\r\n```",
              "createdAt": "2022-10-24T14:59:16Z",
              "updatedAt": "2022-10-24T15:29:21Z"
            },
            {
              "originalPosition": 62,
              "body": "```suggestion\r\nHolder-Selected Disclosures (HS-Disclosures) and is transported in a JWT, the\r\n```",
              "createdAt": "2022-10-24T15:09:01Z",
              "updatedAt": "2022-10-24T15:29:21Z"
            },
            {
              "originalPosition": 52,
              "body": "```suggestion\r\nIn an issuer-issued SD-JWT, claim values are hidden, but cryptographically protected\r\n```",
              "createdAt": "2022-10-24T15:09:20Z",
              "updatedAt": "2022-10-24T15:29:21Z"
            },
            {
              "originalPosition": 66,
              "body": "```suggestion\r\nHS-Disclosures JWT, for presentation alongside the SD-JWT. The Verifier \r\ncan verify that all disclosed claim values were part of the original, \r\nissuer-signed SD-JWT. To do so, the Verifier is required to perform cryptographic computation to validate that the values in HS-Dislosures JWT match those in SD-JWT. \r\nThe Verifier will not learn any claim values not disclosed in HS-Disclosures.\r\n```\r\n\r\nwould be good to emphasize here that the Verifier absolutely MUST do a cryptographic computation before making sure that it can accept those disclosed claims.",
              "createdAt": "2022-10-24T15:15:25Z",
              "updatedAt": "2022-10-24T15:29:21Z"
            },
            {
              "originalPosition": 66,
              "body": "since that is being pointed out as the difference in security posture btw normal JWT and SD-JWT..",
              "createdAt": "2022-10-24T15:18:12Z",
              "updatedAt": "2022-10-24T15:29:21Z"
            },
            {
              "originalPosition": 76,
              "body": "```suggestion\r\nThis specification aims to be easy to implement and to leverage\r\n```",
              "createdAt": "2022-10-24T15:18:40Z",
              "updatedAt": "2022-10-24T15:29:21Z"
            },
            {
              "originalPosition": 78,
              "body": "```suggestion\r\nwherever possible.\r\n```",
              "createdAt": "2022-10-24T15:18:52Z",
              "updatedAt": "2022-10-24T15:29:21Z"
            },
            {
              "originalPosition": 52,
              "body": "should we use 'digests' in the introduction?",
              "createdAt": "2022-10-24T15:19:32Z",
              "updatedAt": "2022-10-24T15:29:21Z"
            },
            {
              "originalPosition": 625,
              "body": "```suggestion\r\nThe SD-JWT and the HS-Disclosures JWT can be combined into one document\r\nusing period character `.` as a separator. This means that the resulting string consists of\r\nsix dot-separated parts as described below.\r\n\r\n The last part (HSD Signature) may be empty when Holder Binding is not used and \r\n HS-Disclosures JWT is not signed.\r\n```",
              "createdAt": "2022-10-24T15:25:02Z",
              "updatedAt": "2022-10-24T15:29:21Z"
            },
            {
              "originalPosition": 614,
              "body": "```suggestion\r\nis not signed. \r\n\r\nWhether to check the signature of the HS-Disclosures JWT is up to the Verifier's policy,\r\nbased on the set of trust requirements such as trust frameworks it belongs to. \r\nAs described in (#verifier-verification), the Verifier MUST NOT accept HS-Disclosures \r\nJWTs using \"none\" algorithm, when the Verifier's policy requires a signed \r\nHS-Disclosures JWT. See also (#holder_binding_security).\r\n```",
              "createdAt": "2022-10-24T15:28:35Z",
              "updatedAt": "2022-10-24T15:29:21Z"
            },
            {
              "originalPosition": 614,
              "body": "Ideally, I would like this paragraph to be in a more easily finable section....",
              "createdAt": "2022-10-24T15:29:17Z",
              "updatedAt": "2022-10-24T15:29:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Evsm8",
          "commit": {
            "abbreviatedOid": "725099e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T15:31:26Z",
          "updatedAt": "2022-10-24T15:31:27Z",
          "comments": [
            {
              "originalPosition": 710,
              "body": "```suggestion\r\n 1. Determine if Holder Binding is to be checked according to the Verifier's policy\r\n    for the use case at hand. This decision MUST NOT be based on whether \r\n    the HS-Disclosures\r\n```",
              "createdAt": "2022-10-24T15:31:26Z",
              "updatedAt": "2022-10-24T15:31:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Evu39",
          "commit": {
            "abbreviatedOid": "725099e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T15:37:30Z",
          "updatedAt": "2022-10-24T15:37:30Z",
          "comments": [
            {
              "originalPosition": 820,
              "body": "```suggestion\r\ncan be informed by various factors including, but not limited to the following:\r\nbusiness requirements, the use case, the type of\r\n```",
              "createdAt": "2022-10-24T15:37:30Z",
              "updatedAt": "2022-10-24T15:37:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EvvWe",
          "commit": {
            "abbreviatedOid": "725099e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T15:38:46Z",
          "updatedAt": "2022-10-24T15:38:46Z",
          "comments": [
            {
              "originalPosition": 826,
              "body": "```suggestion\r\nThis can be showcased based on two scenarios for a mobile driver's license use case for SD-JWT:\r\n```",
              "createdAt": "2022-10-24T15:38:46Z",
              "updatedAt": "2022-10-24T15:39:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Evvpg",
          "commit": {
            "abbreviatedOid": "725099e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T15:39:30Z",
          "updatedAt": "2022-10-24T15:39:30Z",
          "comments": [
            {
              "originalPosition": 835,
              "body": "```suggestion\r\n**Scenario B:** A rental car agency may want to ensure, for insurance\r\n```",
              "createdAt": "2022-10-24T15:39:30Z",
              "updatedAt": "2022-10-24T15:39:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EvwHT",
          "commit": {
            "abbreviatedOid": "725099e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T15:40:39Z",
          "updatedAt": "2022-10-24T15:40:39Z",
          "comments": [
            {
              "originalPosition": 829,
              "body": "```suggestion\r\n**Scenario A:** For the verification of the driver's license when\r\nstopped by a police officer for exceeding a speed limit, Holder Binding may be necessary to ensure that the person\r\n```",
              "createdAt": "2022-10-24T15:40:39Z",
              "updatedAt": "2022-10-24T15:40:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Evw9X",
          "commit": {
            "abbreviatedOid": "725099e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T15:43:00Z",
          "updatedAt": "2022-10-24T15:43:01Z",
          "comments": [
            {
              "originalPosition": 1297,
              "body": "```suggestion\r\n```",
              "createdAt": "2022-10-24T15:43:01Z",
              "updatedAt": "2022-10-24T15:43:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EvxeQ",
          "commit": {
            "abbreviatedOid": "725099e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T15:44:24Z",
          "updatedAt": "2022-10-24T15:44:25Z",
          "comments": [
            {
              "originalPosition": 1308,
              "body": "```suggestion\r\n   *  Added descriptions on the security of Holder Binding -  expecially around the usage of \"alg=none\".\r\n```",
              "createdAt": "2022-10-24T15:44:24Z",
              "updatedAt": "2022-10-24T15:44:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EvxlZ",
          "commit": {
            "abbreviatedOid": "725099e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T15:44:42Z",
          "updatedAt": "2022-10-24T15:44:42Z",
          "comments": [
            {
              "originalPosition": 1316,
              "body": "```suggestion\r\n   *  Made Holder Binding optional\r\n   *  Renamed proof to release, since when there is no signature, the term \"proof\" can be misleading\r\n```",
              "createdAt": "2022-10-24T15:44:42Z",
              "updatedAt": "2022-10-24T15:44:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Ev4Gp",
          "commit": {
            "abbreviatedOid": "b5c9e61"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T16:02:16Z",
          "updatedAt": "2022-10-24T16:02:16Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "I love the new language, thank you!",
              "createdAt": "2022-10-24T16:02:16Z",
              "updatedAt": "2022-10-24T16:02:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Ev8qD",
          "commit": {
            "abbreviatedOid": "4da71a5"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T16:14:59Z",
          "updatedAt": "2022-10-24T16:15:03Z",
          "comments": [
            {
              "originalPosition": 64,
              "body": "```suggestion\r\ncan (and has to) verify that all disclosed claim values were part of the original,\r\n```",
              "createdAt": "2022-10-24T16:14:59Z",
              "updatedAt": "2022-10-24T16:15:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Ev9k3",
          "commit": {
            "abbreviatedOid": "4da71a5"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T16:17:47Z",
          "updatedAt": "2022-10-24T16:17:48Z",
          "comments": [
            {
              "originalPosition": 1314,
              "body": "```suggestion\r\n   * improved description of Holder Binding security considerations - especially around the usage of \"alg=none\".\r\n```",
              "createdAt": "2022-10-24T16:17:48Z",
              "updatedAt": "2022-10-24T16:18:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Ev-yY",
          "commit": {
            "abbreviatedOid": "35d464c"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T16:21:16Z",
          "updatedAt": "2022-10-24T16:21:16Z",
          "comments": [
            {
              "originalPosition": 66,
              "body": "`can and has to`..",
              "createdAt": "2022-10-24T16:21:16Z",
              "updatedAt": "2022-10-24T16:21:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Ev-5r",
          "commit": {
            "abbreviatedOid": "5b2772d"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-24T16:21:38Z",
          "updatedAt": "2022-10-24T16:21:38Z",
          "comments": []
        }
      ]
    },
    {
      "number": 157,
      "id": "PR_kwDOHTmVzM5BHfX7",
      "title": "Clarify security requirements for blinded claim names",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/157",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Addresses Issue #132 ",
      "createdAt": "2022-10-19T14:57:33Z",
      "updatedAt": "2022-10-22T08:39:29Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "bda5b49534d8051a73ca2398264a74a741e10a86",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/blinded-claim-name-selection",
      "headRefOid": "44ae052b5c7976f14a2b86329ad00224b42e672c",
      "closedAt": "2022-10-22T08:39:29Z",
      "mergedAt": "2022-10-22T08:39:29Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "681712d91e555b6e263ed250fcd06312d3bff815"
      },
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "> Addresses Issue #132\r\n\r\nI also revisited the security recommendations for the salt and made some smaller changes there.",
          "createdAt": "2022-10-20T06:57:08Z",
          "updatedAt": "2022-10-20T06:57:08Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5EeYRo",
          "commit": {
            "abbreviatedOid": "9f2ef37"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-20T08:47:21Z",
          "updatedAt": "2022-10-20T08:47:22Z",
          "comments": [
            {
              "originalPosition": 121,
              "body": "```suggestion\r\nblinded claim name. For each credential issued, new random placeholder names\r\nMUST be chosen by the issuer.\r\n```",
              "createdAt": "2022-10-20T08:47:21Z",
              "updatedAt": "2022-10-20T08:47:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EpdgZ",
          "commit": {
            "abbreviatedOid": "8d91ba5"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-22T01:41:14Z",
          "updatedAt": "2022-10-22T01:41:14Z",
          "comments": [
            {
              "originalPosition": 86,
              "body": "```suggestion\r\nincluding when the same claim name occurs at different places in the\r\n```",
              "createdAt": "2022-10-22T01:41:14Z",
              "updatedAt": "2022-10-22T01:41:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EpdmZ",
          "commit": {
            "abbreviatedOid": "8d91ba5"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-22T01:44:34Z",
          "updatedAt": "2022-10-22T01:44:34Z",
          "comments": [
            {
              "originalPosition": 117,
              "body": "```suggestion\r\neach claim, including when the same claim name occurs at different\r\n```",
              "createdAt": "2022-10-22T01:44:34Z",
              "updatedAt": "2022-10-22T01:44:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EpeUA",
          "commit": {
            "abbreviatedOid": "8d91ba5"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I agree with these changes, but it really made me think that we need to clarify various options we have introduced how claims in SD-JWT can be represented as it is becoming a bit hard to follow..\r\n\r\nissue #159 filed",
          "createdAt": "2022-10-22T02:02:27Z",
          "updatedAt": "2022-10-22T02:02:27Z",
          "comments": []
        }
      ]
    },
    {
      "number": 158,
      "id": "PR_kwDOHTmVzM5BHruP",
      "title": "Ensure documents are alphabetically sorted when claim names are blinded",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/158",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "This was missing before, even though it is important for privacy.\r\n\r\nThis patch also ensures that *different* random numbers are used for the generation of each example. ",
      "createdAt": "2022-10-19T15:30:46Z",
      "updatedAt": "2022-10-24T16:37:30Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "c651a0581223cad4cd2e29ed7e62cbae4e0929a0",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/blinded-claim-names-sort-keys",
      "headRefOid": "ce2aefe5f3228560227597c44d46ca919eaa8804",
      "closedAt": "2022-10-24T16:37:30Z",
      "mergedAt": "2022-10-24T16:37:30Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "6c38e6fc4ed76d3d341d69f75b9c31e07869732a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5EpeWA",
          "commit": {
            "abbreviatedOid": "c4acee3"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-22T02:04:03Z",
          "updatedAt": "2022-10-22T02:04:04Z",
          "comments": [
            {
              "originalPosition": 134,
              "body": "```suggestion\r\nare shuffled or otherwise hidden, e.g., by alphabetically sorting using\r\n```",
              "createdAt": "2022-10-22T02:04:04Z",
              "updatedAt": "2022-10-22T02:04:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EpeWx",
          "commit": {
            "abbreviatedOid": "c4acee3"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-22T02:04:32Z",
          "updatedAt": "2022-10-22T02:04:32Z",
          "comments": [
            {
              "originalPosition": 134,
              "body": "do we want to say it is RECOMMENDED to alphabetically sort..?",
              "createdAt": "2022-10-22T02:04:32Z",
              "updatedAt": "2022-10-22T02:04:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EpeaN",
          "commit": {
            "abbreviatedOid": "c4acee3"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-22T02:06:39Z",
          "updatedAt": "2022-10-22T02:06:39Z",
          "comments": [
            {
              "originalPosition": 530,
              "body": "this claim should be after \"given_name\" if it is included in the alphabetical reordering too. If alphaberical reordering does not apply to blinded claim names, it should be clarified",
              "createdAt": "2022-10-22T02:06:39Z",
              "updatedAt": "2022-10-22T02:06:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EpebO",
          "commit": {
            "abbreviatedOid": "c4acee3"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-22T02:07:02Z",
          "updatedAt": "2022-10-22T02:07:02Z",
          "comments": [
            {
              "originalPosition": 557,
              "body": "```suggestion\r\nIn the II-Disclosures Object, it can be seen that the blinded claim's original name is `secret_club_membership_no`. Note that the claims are sorted alphabetically as described in (#blinding-claim-names).\r\n```",
              "createdAt": "2022-10-22T02:07:02Z",
              "updatedAt": "2022-10-22T02:07:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EpizS",
          "commit": {
            "abbreviatedOid": "c4acee3"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-22T02:20:30Z",
          "updatedAt": "2022-10-22T02:20:30Z",
          "comments": [
            {
              "originalPosition": 134,
              "body": "all claims, or only blinded claim names? if the former, this sentence should be in another section, if the latter, needs to be clarified.",
              "createdAt": "2022-10-22T02:20:30Z",
              "updatedAt": "2022-10-22T02:20:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Epi1t",
          "commit": {
            "abbreviatedOid": "c4acee3"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I am pretty confused alphabetical sorting of what you are trying to recommend - all claims, or only blinded claim names? there seems to be inconsistencies in spec text, code, and examples... but maybe I just did not fully understand it...",
          "createdAt": "2022-10-22T02:21:31Z",
          "updatedAt": "2022-10-22T02:21:46Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5EqFqq",
          "commit": {
            "abbreviatedOid": "c4acee3"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-22T08:43:24Z",
          "updatedAt": "2022-10-22T08:43:24Z",
          "comments": [
            {
              "originalPosition": 530,
              "body": "This is fine, as the uppercase letters in this case are ordered after the lower case ones. The precise method of alphabetical order does not matter for the purpose of hiding the original order.",
              "createdAt": "2022-10-22T08:43:24Z",
              "updatedAt": "2022-10-22T08:43:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EvcIj",
          "commit": {
            "abbreviatedOid": "c4acee3"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T14:52:14Z",
          "updatedAt": "2022-10-24T14:52:15Z",
          "comments": [
            {
              "originalPosition": 134,
              "body": "Added clarifications!",
              "createdAt": "2022-10-24T14:52:14Z",
              "updatedAt": "2022-10-24T14:52:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EvcOn",
          "commit": {
            "abbreviatedOid": "c4acee3"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T14:52:26Z",
          "updatedAt": "2022-10-24T14:52:26Z",
          "comments": [
            {
              "originalPosition": 530,
              "body": "Added clarifications!",
              "createdAt": "2022-10-24T14:52:26Z",
              "updatedAt": "2022-10-24T14:52:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Ev1-D",
          "commit": {
            "abbreviatedOid": "1431976"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T15:56:39Z",
          "updatedAt": "2022-10-24T15:56:40Z",
          "comments": [
            {
              "originalPosition": 181,
              "body": "```suggestion\r\n * randomize the order of all claims (blinded/unblinded, selectively disclosed/not-selectively disclosed),\r\n```",
              "createdAt": "2022-10-24T15:56:39Z",
              "updatedAt": "2022-10-24T15:56:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Ev4ya",
          "commit": {
            "abbreviatedOid": "34099de"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-24T16:03:45Z",
          "updatedAt": "2022-10-24T16:03:45Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5Ev5GF",
          "commit": {
            "abbreviatedOid": "34099de"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-24T16:04:36Z",
          "updatedAt": "2022-10-24T16:04:36Z",
          "comments": []
        }
      ]
    },
    {
      "number": 160,
      "id": "PR_kwDOHTmVzM5BbGYm",
      "title": "Proposal for feature summary (Issue #159)",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/160",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-10-24T15:14:30Z",
      "updatedAt": "2022-10-24T16:08:20Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "681712d91e555b6e263ed250fcd06312d3bff815",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/feature-summary",
      "headRefOid": "39d8d8472f583c1fdef3f523faab09e37ced62d2",
      "closedAt": "2022-10-24T16:08:20Z",
      "mergedAt": "2022-10-24T16:08:20Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "d1a73fb489eb650073aac0882957b60609827c57"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5EvyNV",
          "commit": {
            "abbreviatedOid": "d0b0b91"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T15:46:19Z",
          "updatedAt": "2022-10-24T15:46:20Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\n * This specification defines \r\n   - a format enabling selective disclosure for JWTs\r\n   - formats for associated data that enables disclosing claims\r\n   - formats for the combined transport of SD-JWTs and the associated data\r\n```",
              "createdAt": "2022-10-24T15:46:19Z",
              "updatedAt": "2022-10-24T15:47:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Ev0uV",
          "commit": {
            "abbreviatedOid": "d0b0b91"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T15:53:11Z",
          "updatedAt": "2022-10-24T15:53:12Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "```suggestion\r\n * The specification supports selectively disclosable claims to be expressed \r\n    using flat data structures as well as more complex, nested data structures.\r\n  * This specification enables combining selectively disclosable claims with\r\n   clear-text claims that are always disclosed.\r\n  * Optionally, this specification allows to also hide (\"blind\") the claim names, not only the claim values.\r\n  * When claim names are blinded, this specification enables combining claims with \r\n     blinded and unblinded names in the same SD-JWT.\r\n\r\n```",
              "createdAt": "2022-10-24T15:53:11Z",
              "updatedAt": "2022-10-24T15:53:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Ev5rY",
          "commit": {
            "abbreviatedOid": "6346536"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T16:06:16Z",
          "updatedAt": "2022-10-24T16:07:00Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\n * This specification defines \r\n   - a format enabling selective disclosure for JWTs,\r\n   - formats for associated data that enables disclosing claims, and\r\n   - formats for the combined transport of SD-JWTs and the associated data.\r\n```",
              "createdAt": "2022-10-24T16:06:16Z",
              "updatedAt": "2022-10-24T16:07:00Z"
            },
            {
              "originalPosition": 11,
              "body": "```suggestion\r\n * The specification supports selectively disclosable claims in flat data structures as well as more complex, nested data structures.\r\n```",
              "createdAt": "2022-10-24T16:06:46Z",
              "updatedAt": "2022-10-24T16:07:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Ev6KG",
          "commit": {
            "abbreviatedOid": "6346536"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-24T16:07:38Z",
          "updatedAt": "2022-10-24T16:07:38Z",
          "comments": []
        }
      ]
    },
    {
      "number": 161,
      "id": "PR_kwDOHTmVzM5Bbhh1",
      "title": "updated hashes for vc-data-model example",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/161",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-10-24T16:48:28Z",
      "updatedAt": "2022-10-24T16:53:38Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "0a06cd38f0a431c4c9c024174e99a2048dbbbf0e",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "vc-data-model",
      "headRefOid": "514aff4852489be74a6e976268ccf7372522e401",
      "closedAt": "2022-10-24T16:53:38Z",
      "mergedAt": "2022-10-24T16:53:38Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "fcabd4dd06f0af9b90ea98995dce9f73c9a60029"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5EwJ20",
          "commit": {
            "abbreviatedOid": "514aff4"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-24T16:53:30Z",
          "updatedAt": "2022-10-24T16:53:30Z",
          "comments": []
        }
      ]
    },
    {
      "number": 162,
      "id": "PR_kwDOHTmVzM5BblfL",
      "title": "Vc data model",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/162",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-10-24T17:02:48Z",
      "updatedAt": "2022-10-24T17:03:28Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "fcabd4dd06f0af9b90ea98995dce9f73c9a60029",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "vc-data-model",
      "headRefOid": "4455d7d2feb7b4b6960bdaf8bb010649377cf09a",
      "closedAt": "2022-10-24T17:03:28Z",
      "mergedAt": "2022-10-24T17:03:28Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "e268f0a8f87e907179aaf0347ee43ea5d74a87fb"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5EwNNE",
          "commit": {
            "abbreviatedOid": "4455d7d"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-24T17:03:13Z",
          "updatedAt": "2022-10-24T17:03:13Z",
          "comments": []
        }
      ]
    },
    {
      "number": 163,
      "id": "PR_kwDOHTmVzM5BcUDs",
      "title": "Formatting",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/163",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-10-24T19:58:56Z",
      "updatedAt": "2022-11-04T00:44:31Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "235283021f78860bdc2f488d7231edf96d589eb5",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "formatting",
      "headRefOid": "703378ee5ef473732a19ad5e28891cb90d99fa5d",
      "closedAt": "2022-11-04T00:44:31Z",
      "mergedAt": "2022-11-04T00:44:31Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "654d00b1fde3fcd3153815b6922f3a819b166c07"
      },
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Issue #90",
          "createdAt": "2022-10-24T19:59:15Z",
          "updatedAt": "2022-10-24T19:59:15Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Also this doesn't compile due to trailing spaces.",
          "createdAt": "2022-11-03T16:09:33Z",
          "updatedAt": "2022-11-03T16:09:33Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5EzSIT",
          "commit": {
            "abbreviatedOid": "54f51a2"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-10-25T07:43:16Z",
          "updatedAt": "2022-10-25T07:44:23Z",
          "comments": [
            {
              "originalPosition": 101,
              "body": "This is not the proper formatting. The formatting we're currently using is correct in terms of markdown (see https://www.markdownguide.org/extended-syntax/#definition-lists) and it gets rendered correctly into the XML, but xml2rfc does not seem to do a good job at rendering it. We should look into that.",
              "createdAt": "2022-10-25T07:43:17Z",
              "updatedAt": "2022-10-25T07:44:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Ezc7m",
          "commit": {
            "abbreviatedOid": "54f51a2"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-25T08:13:19Z",
          "updatedAt": "2022-10-25T08:13:19Z",
          "comments": [
            {
              "originalPosition": 101,
              "body": "I checked again and it seems that others (e.g., RFC9000) also use definition lists, but add another colon after the term to be defined. ",
              "createdAt": "2022-10-25T08:13:19Z",
              "updatedAt": "2022-10-25T08:13:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5FQ2cm",
          "commit": {
            "abbreviatedOid": "54f51a2"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-31T15:07:44Z",
          "updatedAt": "2022-10-31T15:07:52Z",
          "comments": [
            {
              "originalPosition": 101,
              "body": "so what is the correct formatting..?",
              "createdAt": "2022-10-31T15:07:44Z",
              "updatedAt": "2022-10-31T15:07:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5FQ4Wb",
          "commit": {
            "abbreviatedOid": "54f51a2"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-31T15:11:26Z",
          "updatedAt": "2022-10-31T15:11:27Z",
          "comments": [
            {
              "originalPosition": 101,
              "body": "> Verifier:\r\n>:  An entity that requests, checks and extracts the claims from HS-Disclosures JWT.",
              "createdAt": "2022-10-31T15:11:26Z",
              "updatedAt": "2022-10-31T15:11:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5FiYNq",
          "commit": {
            "abbreviatedOid": "d0c96cf"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-11-03T10:34:45Z",
          "updatedAt": "2022-11-03T10:35:40Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nHolder. The strength of the Holder Binding is conditional upon the trust\r\nin the protection of the private key of the key pair an SD-JWT is bound to.\r\n```",
              "createdAt": "2022-11-03T10:34:45Z",
              "updatedAt": "2022-11-03T10:35:40Z"
            },
            {
              "originalPosition": 159,
              "body": "```suggestion\r\nThe following examples show variations of a structured SD-JWT.\r\n```",
              "createdAt": "2022-11-03T10:35:29Z",
              "updatedAt": "2022-11-03T10:35:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5FkuLR",
          "commit": {
            "abbreviatedOid": "927d41e"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-11-03T16:13:12Z",
          "updatedAt": "2022-11-03T16:13:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 164,
      "id": "PR_kwDOHTmVzM5Bd2fK",
      "title": "updated a linkability section based on the UL feedback",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/164",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Added an option to do pairwise SD-JWTs to prevent Verifier/Verifier linkability\r\n\r\nOriginal feedback.\r\n\r\n> The discussion of linkability in section 8.2 is incomplete. It actually gives the impression that linkability is unavoidable if this RFC is implemented, since for a solution it only refers to undefined \u2018advanced cryptographic schemes outside the scope of this specification\u2019. However, in reality an issuer can completely avoid linkability on the basis of unique values encoded in the SD-JWT, simply by ensuring that each SD-JWT can be used for only one transaction. Of course, this places stringent demands on the connectivity of the holder app and the capacity of the issuer\u2019s systems for generating and communicating new SD-JWTs to its holder apps. To lessen these burdens, the issuer could also choose other approaches, for example \r\n> - Equipping each holder app with a pool of (for instance) 20 different SD-JWTs. The app would then randomly pick one of these SD-JWTs for every transaction, and re-start the pool once all JWTs have been used. \r\n> - Allowing each SD-JWT to be used multiple times, but only for a limited time.\r\n> \r\n> The SD-JWT mechanism therefore allows every issuer to find the correct balance between holder linkability and mitigation costs and efforts, based on a risk analysis for their specific situation.\r\nPlease re-write section 8.2 in the light of the above suggestions.\r\n",
      "createdAt": "2022-10-25T04:13:33Z",
      "updatedAt": "2022-11-02T07:57:18Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "5a42e516719f00d73cdc37d2d1b9fa0882fd053c",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "linkability",
      "headRefOid": "7732baccc124be63c5ef29e5bf696bf0639e4687",
      "closedAt": "2022-11-02T07:57:18Z",
      "mergedAt": "2022-11-02T07:57:18Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "7f2ccb7c450affb5d3327e43c21672bb39308955"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5EzSsz",
          "commit": {
            "abbreviatedOid": "2198410"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-10-25T07:44:59Z",
          "updatedAt": "2022-10-25T07:45:42Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "```suggestion\r\nTo prevent these types of linkability, various methods, including but not limited to the following ones can be used:\r\n\r\n- Use advanced cryptographic schemes, outside the scope of this specification.\r\n```",
              "createdAt": "2022-10-25T07:44:59Z",
              "updatedAt": "2022-10-25T07:45:42Z"
            },
            {
              "originalPosition": 14,
              "body": "```suggestion\r\n- Issue a batch of SD-JWTs to the Holder to enable the Holder to use a unique SD-JWT per Verifier. This only helps with Verifier/Verifier unlinkability.\r\n```",
              "createdAt": "2022-10-25T07:45:18Z",
              "updatedAt": "2022-10-25T07:45:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Faxi4",
          "commit": {
            "abbreviatedOid": "7732bac"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-11-02T07:57:09Z",
          "updatedAt": "2022-11-02T07:57:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 167,
      "id": "PR_kwDOHTmVzM5CGAMC",
      "title": "sd_hash_alg was renamed",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/167",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I know it's just the doc history but \"sd_digest_derivation_alg renamed to sd_digest_derivation_alg\" isn't a good look or helpful",
      "createdAt": "2022-11-02T21:57:28Z",
      "updatedAt": "2022-11-02T23:33:19Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "7f2ccb7c450affb5d3327e43c21672bb39308955",
      "headRepository": null,
      "headRefName": "patch-1",
      "headRefOid": "28f26279c98b09c3bbbb2b996c4df3650dda5a0b",
      "closedAt": "2022-11-02T23:06:23Z",
      "mergedAt": "2022-11-02T23:06:23Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "235283021f78860bdc2f488d7231edf96d589eb5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5FgXFR",
          "commit": {
            "abbreviatedOid": "36fb858"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-02T23:05:49Z",
          "updatedAt": "2022-11-02T23:05:50Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n   * `sd_hash_alg` renamed to `sd_digest_derivation_alg`\r\n```",
              "createdAt": "2022-11-02T23:05:49Z",
              "updatedAt": "2022-11-02T23:05:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5FgXJP",
          "commit": {
            "abbreviatedOid": "28f2627"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-11-02T23:06:14Z",
          "updatedAt": "2022-11-02T23:06:14Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5FgbOz",
          "commit": {
            "abbreviatedOid": "36fb858"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-02T23:33:18Z",
          "updatedAt": "2022-11-02T23:33:19Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Can't believe I got the name wrong there... \ud83e\udd26",
              "createdAt": "2022-11-02T23:33:18Z",
              "updatedAt": "2022-11-02T23:33:19Z"
            }
          ]
        }
      ]
    },
    {
      "number": 168,
      "id": "PR_kwDOHTmVzM5CSE0C",
      "title": "validate how HS-disclosures JWT is validated",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/168",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "resolves #166 by clarifying HS-disclosures JWT validation and separating it into a separate section",
      "createdAt": "2022-11-06T18:47:03Z",
      "updatedAt": "2022-11-22T16:51:18Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "654d00b1fde3fcd3153815b6922f3a819b166c07",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "brian-editorial",
      "headRefOid": "6353337c7a7bb4788c0909951d24950e05fffee5",
      "closedAt": "2022-11-22T16:51:18Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "superceded by IETF 115 and events",
          "createdAt": "2022-11-22T16:51:17Z",
          "updatedAt": "2022-11-22T16:51:17Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5FvK4m",
          "commit": {
            "abbreviatedOid": "6353337"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-07T08:45:35Z",
          "updatedAt": "2022-11-07T08:45:35Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "Stepping back a bit, I don't think that mandating that the disclosures go in a JWT is necessary. And maybe not even really appropriate. I was hoping to discuss the general issue/idea during the meeting(s) this week. But it's leading to a lot of unnecessary confusion/complexity in these steps. So it's hard to review or comment without raising it. ",
              "createdAt": "2022-11-07T08:45:35Z",
              "updatedAt": "2022-11-07T08:45:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5FvLX0",
          "commit": {
            "abbreviatedOid": "6353337"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-07T08:47:02Z",
          "updatedAt": "2022-11-07T08:47:02Z",
          "comments": [
            {
              "originalPosition": 68,
              "body": "why/how is this going to work when there's no holder binding?",
              "createdAt": "2022-11-07T08:47:02Z",
              "updatedAt": "2022-11-07T08:47:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5FvLup",
          "commit": {
            "abbreviatedOid": "6353337"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-07T08:48:08Z",
          "updatedAt": "2022-11-07T08:48:09Z",
          "comments": [
            {
              "originalPosition": 69,
              "body": "this is really part of the SD-JWT validation and needs to happen regardless of holder binding or no holder binding ",
              "createdAt": "2022-11-07T08:48:08Z",
              "updatedAt": "2022-11-07T08:48:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5FvMjE",
          "commit": {
            "abbreviatedOid": "6353337"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-07T08:50:27Z",
          "updatedAt": "2022-11-07T08:50:28Z",
          "comments": [
            {
              "originalPosition": 73,
              "body": "Digest comparison should probably be using the binary. At least not mandating comparison of the encoded values as this kinda suggests. ",
              "createdAt": "2022-11-07T08:50:28Z",
              "updatedAt": "2022-11-07T08:50:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5FvNVN",
          "commit": {
            "abbreviatedOid": "6353337"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-07T08:52:24Z",
          "updatedAt": "2022-11-07T08:52:24Z",
          "comments": [
            {
              "originalPosition": 92,
              "body": "how does this work? the issuer would be the holder in this context. there likely isn't an iss ",
              "createdAt": "2022-11-07T08:52:24Z",
              "updatedAt": "2022-11-07T08:52:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5FvOde",
          "commit": {
            "abbreviatedOid": "6353337"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-07T08:55:36Z",
          "updatedAt": "2022-11-07T08:55:37Z",
          "comments": [
            {
              "originalPosition": 96,
              "body": "having one of the most fundamental parts of this whole SD JWT thing duplicated in consecutive sections is less than ideal ",
              "createdAt": "2022-11-07T08:55:37Z",
              "updatedAt": "2022-11-07T08:55:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5FwCHV",
          "commit": {
            "abbreviatedOid": "6353337"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-07T11:18:24Z",
          "updatedAt": "2022-11-07T11:18:38Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Something broke here.",
              "createdAt": "2022-11-07T11:18:24Z",
              "updatedAt": "2022-11-07T11:18:38Z"
            }
          ]
        }
      ]
    },
    {
      "number": 174,
      "id": "PR_kwDOHTmVzM5DWDvF",
      "title": "New SD-JWT Encoding",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/174",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "**Link to editor's copy:** https://drafts.oauth.net/oauth-selective-disclosure-jwt/danielfett/new-sd-jwt-encoding/draft-ietf-oauth-selective-disclosure-jwt.html\r\n\r\n   * Disclosures are now delivered not as a JWT but as separate base64url-encoded JSON objects.\r\n   * In the SD-JWT, hash digests are collected under a `_sd` claim per level.\r\n   * Terms \"II-Disclosures\" and \"HS-Disclosures\" are replaced with \"Disclosures\".\r\n   * Holder Binding is now separate from delivering the Disclosures and implemented, if required, with a separate JWT.\r\n   * Examples updated and modified to properly explain the specifics of the new SD-JWT format.\r\n   * Examples are now pulled in from the examples directory, not inlined.\r\n   * Updated and automated the W3C VC example.\r\n   * Added examples with multibyte characters to show that the specification and demo code work well with UTF-8.\r\n\r\n@Sakurann I updated the W3C example since I had to adapt it to the new format. Also made some updates together with @tlodderstedt, please check. \r\n\r\n@Sakurann I added an example with a Japanese address that was thankfully AI-generated by Github Copilot. I have no clue if it makes sense or not, please take a look!",
      "createdAt": "2022-11-21T10:48:16Z",
      "updatedAt": "2022-11-23T09:00:53Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "654d00b1fde3fcd3153815b6922f3a819b166c07",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/new-sd-jwt-encoding",
      "headRefOid": "800f48e1beb4c3a5f5efc8abff7c16fb9604dea3",
      "closedAt": "2022-11-23T09:00:53Z",
      "mergedAt": "2022-11-23T09:00:53Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "15710f2b14410dcabdc126b7f6f59e9b02eaf398"
      },
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I think updated SD-JWT-VC is clean and nice. we should probably clarify in the text that it is not \"compliant\" with vc-data-model v1.1 and is \"future-looking\" in the light of v2.0 conversations.\r\n\r\nthe Japanese address is legit and correct and is pretty close from where I lived. I suspect it is an address of a tokyo tower, but have not checked. tho \"(@\u65e5\u672c.com)\" looked weird so I changed to nihon.com?",
          "createdAt": "2022-11-22T19:35:17Z",
          "updatedAt": "2022-11-22T19:35:17Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5G5EFQ",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "The SD-JWT-VC example looks good to me.",
          "createdAt": "2022-11-22T05:41:20Z",
          "updatedAt": "2022-11-22T05:41:20Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5G5j9s",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T07:13:36Z",
          "updatedAt": "2022-11-22T08:37:00Z",
          "comments": [
            {
              "originalPosition": 121,
              "body": "```suggestion\r\n    HASH(SALT, CLAIM-NAME, CLAIM-VALUE)\r\n```\r\n\r\nI would revert this back to `HASH` or did you want this to be a separate PR?",
              "createdAt": "2022-11-22T07:13:36Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 145,
              "body": "Why is this not `COMBINED-ISSUANCE = SD-JWT | DISCLOSURES` ?\r\nseems inconsistent with Holder-Selected Disclosures...",
              "createdAt": "2022-11-22T07:15:43Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 173,
              "body": "```suggestion\r\nCryptographic Holder Binding is an optional feature, but when it is desired, `SD-JWT` must contain information about key material controlled by the Holder:\r\n```",
              "createdAt": "2022-11-22T07:32:49Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 56,
              "body": "```suggestion\r\nCryptographic Holder Binding:\r\n```\r\nto differentiate with Biometric/claim-based binding",
              "createdAt": "2022-11-22T07:33:18Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 225,
              "body": "```suggestion\r\nAt a high level, the Verifier\r\n```",
              "createdAt": "2022-11-22T07:38:25Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 232,
              "body": "```suggestion\r\n * verifies the Holder Binding JWT, if Holder Binding is required by the Verifier's policy, using the public key included in the SD-JWT,\r\n```",
              "createdAt": "2022-11-22T07:38:56Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 233,
              "body": "```suggestion\r\n * calculates the hashes over the Holder-Selected Disclosures and verifies that each hash is contained in the SD-JWT.\r\n```",
              "createdAt": "2022-11-22T07:39:34Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 225,
              "body": "Why is Verifier decoding the Disclosure and obtaining the plain text values out of scope here..?",
              "createdAt": "2022-11-22T07:40:55Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 267,
              "body": "is this a widely-used terminology? I am a little confused that the definition did not change but the term did?",
              "createdAt": "2022-11-22T07:42:35Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 246,
              "body": "let's discuss in another PR if we can move this section lower, as with the new encoding approach I anticipate less questions regarding canonicalization.",
              "createdAt": "2022-11-22T07:43:50Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 314,
              "body": "```suggestion\r\nspecification, JSON is used and plain text values of each Disclosure is encoded using base64url-encoding\r\n```",
              "createdAt": "2022-11-22T07:48:28Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 331,
              "body": "what is the differentiation between Varifier and application in this context?",
              "createdAt": "2022-11-22T07:50:40Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 357,
              "body": "```suggestion\r\nFor each claim that is to be selectively disclosed, the Issuer creates a Disclosure, hashes it, and includes the hash instead of the original claim in the SD-JWT, as described next. The Disclosures are then sent to the Holder.\r\n```\r\ndon't think we need to define \"DIsclosure object\"?",
              "createdAt": "2022-11-22T07:52:56Z",
              "updatedAt": "2022-11-22T18:56:57Z"
            },
            {
              "originalPosition": 363,
              "body": "```suggestion\r\nThe Issuer MUST create a Disclosure for each selectively disclosable claim as follows:\r\n```",
              "createdAt": "2022-11-22T07:57:28Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 368,
              "body": "I would emphasize the order in other places too...\r\n\r\njust curious, any logic for the order?",
              "createdAt": "2022-11-22T08:00:01Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 370,
              "body": "```suggestion\r\n   2. The claim name, or key, as it would be used in a regular JWT body. This MUST be a string.\r\n```\r\nnot sure what `as it would be used in a regular JWT body` means though to be honest..",
              "createdAt": "2022-11-22T08:01:00Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 371,
              "body": "```suggestion\r\n   3. The claim's value, as it would be used in a regular JWT body. The value MAY be of any type that is allowed in JSON, including numbers, strings, booleans, arrays, and objects.\r\n```",
              "createdAt": "2022-11-22T08:01:23Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 395,
              "body": "(I did not know the term umlaut...)",
              "createdAt": "2022-11-22T08:02:52Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 405,
              "body": "```suggestion\r\nIt is important to note that:\r\n```",
              "createdAt": "2022-11-22T08:04:40Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 414,
              "body": "I was also not familiar with a term decoy..",
              "createdAt": "2022-11-22T08:05:27Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 428,
              "body": "```suggestion\r\nIt is an Issuer who decides which claims are selectively disclosable and which are not. However, claims controlling the validity of the SD-JWT, such as `iss`, `exp`, or `nbf` are usually included in plaintext. End-User claims MAY be included as plaintext as well, e.g., if hiding the particular claims from the Verifier does not make sense in the intended use case.\r\n```",
              "createdAt": "2022-11-22T08:09:10Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 430,
              "body": "```suggestion\r\nClaims that are not selectively disclosed are included in the SD-JWT in plaintext just as they would be in any other JWT.\r\n```",
              "createdAt": "2022-11-22T08:09:44Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 432,
              "body": "```suggestion\r\nSelectively disclosable claims are omitted from the SD-JWT. Instead, the hash digests of the respective Disclosures and potentially decoy digests are contained as an array in a new JWT claim, `_sd`.\r\n```",
              "createdAt": "2022-11-22T08:10:22Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 434,
              "body": "definition of `_sd` claim can probably be defined clearer, but we can do it in another PR :)",
              "createdAt": "2022-11-22T08:11:49Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 435,
              "body": "when can an array be empty..?",
              "createdAt": "2022-11-22T08:12:57Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 437,
              "body": "```suggestion\r\nThe Issuer MUST hide the original order of the claims in the array. To ensure this, it is RECOMMENDED to shuffle the array of hashes, e.g., by sorting it alphanumerically or randomly. The precise method does not matter as long as it does not depend on the original order of elements.\r\n```\r\n\r\nwe should probably be precise since each disclosure also hashes over an array",
              "createdAt": "2022-11-22T08:13:41Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 441,
              "body": "```suggestion\r\n * the key `_sd` is already used for the purpose other than to contain the array of hash digests, or\r\n```",
              "createdAt": "2022-11-22T08:15:12Z",
              "updatedAt": "2022-11-22T19:08:26Z"
            },
            {
              "originalPosition": 442,
              "body": "why is this not ok..?",
              "createdAt": "2022-11-22T08:15:40Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 443,
              "body": "when would this be the case? same claim value? same salt? I though we are recommending against this? ",
              "createdAt": "2022-11-22T08:16:23Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 448,
              "body": "`objects that themselves contain other data` -> something like `key value pairs where the value is an object` or `where the claim value is expressed as an object` might be clearer, no?",
              "createdAt": "2022-11-22T08:20:25Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 446,
              "body": "why not \"structured data\" for consistency with the rest of the examples, etc?",
              "createdAt": "2022-11-22T08:21:44Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 790,
              "body": "I think we should explicitly call out Disclosures are individually sent, separated by tildas? this feels missing and I think it should come much earlier in the spec.",
              "createdAt": "2022-11-22T08:23:26Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 965,
              "body": "```suggestion\r\n    Holder MUST reject the SD-JWT.\r\n 4. Decode Disclosures and obtain plaintext of the claim values.\r\n```\r\nI think this should be made explicit?",
              "createdAt": "2022-11-22T08:26:08Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 976,
              "body": "maybe add a note that it is up to the holder how to maintain the mapping between the plaintext claim values and disclosures",
              "createdAt": "2022-11-22T08:26:51Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 1054,
              "body": "why?",
              "createdAt": "2022-11-22T08:28:10Z",
              "updatedAt": "2022-11-22T08:37:01Z"
            },
            {
              "originalPosition": 1008,
              "body": "if these claims are selectively disclosed, would not be in this step, but don't know how relevant that is..",
              "createdAt": "2022-11-22T08:29:01Z",
              "updatedAt": "2022-11-22T08:37:01Z"
            },
            {
              "originalPosition": 1057,
              "body": "```suggestion\r\n    2. Find `_sd` key in the SD-JWT payload that contains a hash calculated in the previous step. Note that there might be more than one `_sd` arrays in on SD-JWT.\r\n```",
              "createdAt": "2022-11-22T08:30:53Z",
              "updatedAt": "2022-11-22T08:37:01Z"
            },
            {
              "originalPosition": 1063,
              "body": "what does this mean? I think we used to say the same claim name can be used in multiple places in one SD-JWT? like address?",
              "createdAt": "2022-11-22T08:32:00Z",
              "updatedAt": "2022-11-22T08:37:01Z"
            },
            {
              "originalPosition": 1064,
              "body": "I am confused..",
              "createdAt": "2022-11-22T08:32:21Z",
              "updatedAt": "2022-11-22T08:37:01Z"
            },
            {
              "originalPosition": 1065,
              "body": "```suggestion\r\n    5. Remove all `_sd` claims from the SD-JWT payload.\r\n```",
              "createdAt": "2022-11-22T08:32:39Z",
              "updatedAt": "2022-11-22T19:27:41Z"
            },
            {
              "originalPosition": 1066,
              "body": "why?",
              "createdAt": "2022-11-22T08:32:50Z",
              "updatedAt": "2022-11-22T08:37:01Z"
            },
            {
              "originalPosition": 1070,
              "body": "```suggestion\r\n       1. If Holder Binding JWT is not provided, the Verifier MUST reject the Presentation.\r\n```",
              "createdAt": "2022-11-22T08:33:17Z",
              "updatedAt": "2022-11-22T08:37:01Z"
            },
            {
              "originalPosition": 1071,
              "body": "A step that the public key signing the Holder Binding JWT must be included in the SD-JWT signed by the Issuer needs ot be added.",
              "createdAt": "2022-11-22T08:34:26Z",
              "updatedAt": "2022-11-22T08:37:01Z"
            },
            {
              "originalPosition": 1096,
              "body": "```suggestion\r\nis vulnerable to this attack. However, in a structured SD-JWT, without comparing the digests of the\r\n```",
              "createdAt": "2022-11-22T08:35:11Z",
              "updatedAt": "2022-11-22T08:37:01Z"
            },
            {
              "originalPosition": 1219,
              "body": "```suggestion\r\nalways blinded. This prevents an attacker from learning the names of the\r\n```",
              "createdAt": "2022-11-22T08:35:40Z",
              "updatedAt": "2022-11-22T08:37:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G6vUT",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T10:40:27Z",
          "updatedAt": "2022-11-22T10:40:27Z",
          "comments": [
            {
              "originalPosition": 121,
              "body": "Let's do that in a separate PR.",
              "createdAt": "2022-11-22T10:40:27Z",
              "updatedAt": "2022-11-22T10:40:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G6v2p",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T10:41:58Z",
          "updatedAt": "2022-11-22T10:42:13Z",
          "comments": [
            {
              "originalPosition": 145,
              "body": "Correct!\r\n```suggestion\r\nCOMBINED-ISSUANCE = SD-JWT | DISCLOSURES\r\n```",
              "createdAt": "2022-11-22T10:41:58Z",
              "updatedAt": "2022-11-22T10:42:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G6w5s",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T10:44:15Z",
          "updatedAt": "2022-11-22T10:44:16Z",
          "comments": [
            {
              "originalPosition": 233,
              "body": "What is calculated is still a hash digest, so\r\n```suggestion\r\n * calculates the hash digests over the Holder-Selected Disclosures and verifies that each digest is contained in the SD-JWT.\r\n```",
              "createdAt": "2022-11-22T10:44:15Z",
              "updatedAt": "2022-11-22T10:44:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G6xA7",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T10:44:34Z",
          "updatedAt": "2022-11-22T10:44:34Z",
          "comments": [
            {
              "originalPosition": 246,
              "body": "Agree!",
              "createdAt": "2022-11-22T10:44:34Z",
              "updatedAt": "2022-11-22T10:44:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G6xM-",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T10:45:06Z",
          "updatedAt": "2022-11-22T10:45:06Z",
          "comments": [
            {
              "originalPosition": 267,
              "body": "I think it is. It was also used at IETF. But I'm open for other suggestions.",
              "createdAt": "2022-11-22T10:45:06Z",
              "updatedAt": "2022-11-22T10:45:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G6xsh",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T10:46:29Z",
          "updatedAt": "2022-11-22T10:46:29Z",
          "comments": [
            {
              "originalPosition": 331,
              "body": "Verifier (in a stricter sense than defined above): The component implementing SD-JWT. Application: Whatever component works with the data checked by the verifier.",
              "createdAt": "2022-11-22T10:46:29Z",
              "updatedAt": "2022-11-22T10:46:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G6x9j",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T10:47:12Z",
          "updatedAt": "2022-11-22T10:47:12Z",
          "comments": [
            {
              "originalPosition": 357,
              "body": "Agree, but we still need to introduce the Disclosure term here.",
              "createdAt": "2022-11-22T10:47:12Z",
              "updatedAt": "2022-11-22T10:47:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G6zKB",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T10:50:25Z",
          "updatedAt": "2022-11-22T10:50:25Z",
          "comments": [
            {
              "originalPosition": 368,
              "body": "At which other places? \r\n\r\nI don't have a strong opinion on the order, but my logic is that the value should come last, as it can be a large object. So having the salt (constant length) and claim name (roughly same length all the time) first makes it easier to read the disclosures, should that be necessary.",
              "createdAt": "2022-11-22T10:50:25Z",
              "updatedAt": "2022-11-22T10:50:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G6zjk",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T10:51:30Z",
          "updatedAt": "2022-11-22T10:51:31Z",
          "comments": [
            {
              "originalPosition": 370,
              "body": "I just want to say that it is used just as in a Non-SD JWT (no transformation or the likes).",
              "createdAt": "2022-11-22T10:51:30Z",
              "updatedAt": "2022-11-22T10:51:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G60Aw",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T10:52:47Z",
          "updatedAt": "2022-11-22T10:52:47Z",
          "comments": [
            {
              "originalPosition": 395,
              "body": "We can replace it with \"letter with crazy german-looking dots on top\"? ;-) ",
              "createdAt": "2022-11-22T10:52:47Z",
              "updatedAt": "2022-11-22T10:52:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G60Vi",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T10:53:35Z",
          "updatedAt": "2022-11-22T10:53:35Z",
          "comments": [
            {
              "originalPosition": 414,
              "body": "It's a bit of a military term, but I hope it captures the spirit just fine.",
              "createdAt": "2022-11-22T10:53:35Z",
              "updatedAt": "2022-11-22T10:53:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G61Rk",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T10:55:07Z",
          "updatedAt": "2022-11-22T10:55:07Z",
          "comments": [
            {
              "originalPosition": 428,
              "body": "```suggestion\r\nIt is the Issuer who decides which claims are selectively disclosable and which are not. However, claims controlling the validity of the SD-JWT, such as `iss`, `exp`, or `nbf` are usually included in plaintext. End-User claims MAY be included as plaintext as well, e.g., if hiding the particular claims from the Verifier does not make sense in the intended use case.\r\n```",
              "createdAt": "2022-11-22T10:55:07Z",
              "updatedAt": "2022-11-22T10:55:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G61yS",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T10:56:19Z",
          "updatedAt": "2022-11-22T10:56:19Z",
          "comments": [
            {
              "originalPosition": 430,
              "body": "```suggestion\r\nClaims that are not selectively disclosable are included in the SD-JWT in plaintext just as they would be in any other JWT.\r\n```",
              "createdAt": "2022-11-22T10:56:19Z",
              "updatedAt": "2022-11-22T10:56:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G62bF",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T10:58:03Z",
          "updatedAt": "2022-11-22T10:58:03Z",
          "comments": [
            {
              "originalPosition": 435,
              "body": "Depending on the implementation of the Issuer, it might be convenient to just add `_sd` everywhere and leave it empty when it turns out that there's nothing to selectively disclose.",
              "createdAt": "2022-11-22T10:58:03Z",
              "updatedAt": "2022-11-22T10:58:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G62k-",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T10:58:29Z",
          "updatedAt": "2022-11-22T10:58:29Z",
          "comments": [
            {
              "originalPosition": 437,
              "body": "Good point!",
              "createdAt": "2022-11-22T10:58:29Z",
              "updatedAt": "2022-11-22T10:58:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G628J",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T10:59:27Z",
          "updatedAt": "2022-11-22T10:59:27Z",
          "comments": [
            {
              "originalPosition": 441,
              "body": "What is the intention here?",
              "createdAt": "2022-11-22T10:59:27Z",
              "updatedAt": "2022-11-22T10:59:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G63ar",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T11:00:40Z",
          "updatedAt": "2022-11-22T11:00:40Z",
          "comments": [
            {
              "originalPosition": 442,
              "body": "It's a bit of an undefined area currently how to treat this situation. Should the Verifier handle nested _sd claims like normal ones or ignore them?",
              "createdAt": "2022-11-22T11:00:40Z",
              "updatedAt": "2022-11-22T11:00:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G6378",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T11:02:06Z",
          "updatedAt": "2022-11-22T11:02:06Z",
          "comments": [
            {
              "originalPosition": 443,
              "body": "Since the same salt should not happen, it might be an error of the Issuer or intentional misbehavior. It is ruled out here and enforced by the Verifier.",
              "createdAt": "2022-11-22T11:02:06Z",
              "updatedAt": "2022-11-22T11:02:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G64Gb",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T11:02:33Z",
          "updatedAt": "2022-11-22T11:02:34Z",
          "comments": [
            {
              "originalPosition": 446,
              "body": "I'm actually not sure if 'structured' is the best term. Nested is potentially more clear.",
              "createdAt": "2022-11-22T11:02:33Z",
              "updatedAt": "2022-11-22T11:02:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G64Or",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T11:02:55Z",
          "updatedAt": "2022-11-22T11:02:56Z",
          "comments": [
            {
              "originalPosition": 448,
              "body": "Agree.",
              "createdAt": "2022-11-22T11:02:55Z",
              "updatedAt": "2022-11-22T11:02:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G64pk",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T11:04:01Z",
          "updatedAt": "2022-11-22T11:04:01Z",
          "comments": [
            {
              "originalPosition": 790,
              "body": "This is first described in the Combined Format for Issuance.",
              "createdAt": "2022-11-22T11:04:01Z",
              "updatedAt": "2022-11-22T11:04:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G65i8",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T11:06:31Z",
          "updatedAt": "2022-11-22T11:06:32Z",
          "comments": [
            {
              "originalPosition": 1054,
              "body": "I wasn't sure if we need to make this explicit, but the next steps are most easily described by saying how the JWT needs to be \"modified\". If we don't say that you can do this on a copy, people might complain when they have the JWT in a data structure that cannot be modified.",
              "createdAt": "2022-11-22T11:06:31Z",
              "updatedAt": "2022-11-22T11:06:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G66D1",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T11:07:54Z",
          "updatedAt": "2022-11-22T11:07:55Z",
          "comments": [
            {
              "originalPosition": 1063,
              "body": "It can, but it must not already exist at the same level. Note that in this version of the draft there's no merging defined (as it is not strictly needed).",
              "createdAt": "2022-11-22T11:07:54Z",
              "updatedAt": "2022-11-22T11:07:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G66QU",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T11:08:27Z",
          "updatedAt": "2022-11-22T11:08:28Z",
          "comments": [
            {
              "originalPosition": 1064,
              "body": "As above - prevents an undefined situation. Note that this refers to the disclosed claim value.",
              "createdAt": "2022-11-22T11:08:27Z",
              "updatedAt": "2022-11-22T11:08:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G66Yl",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T11:08:46Z",
          "updatedAt": "2022-11-22T11:08:47Z",
          "comments": [
            {
              "originalPosition": 1065,
              "body": "No, the above process does not remove any claims.",
              "createdAt": "2022-11-22T11:08:46Z",
              "updatedAt": "2022-11-22T11:08:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G66hN",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T11:09:05Z",
          "updatedAt": "2022-11-22T11:09:05Z",
          "comments": [
            {
              "originalPosition": 1066,
              "body": "Should not be a concern of the consuming application.",
              "createdAt": "2022-11-22T11:09:05Z",
              "updatedAt": "2022-11-22T11:09:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G66wj",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T11:09:45Z",
          "updatedAt": "2022-11-22T11:09:45Z",
          "comments": [
            {
              "originalPosition": 1071,
              "body": "```suggestion\r\n       2. Determine the public key for the Holder from the SD-JWT.\r\n```",
              "createdAt": "2022-11-22T11:09:45Z",
              "updatedAt": "2022-11-22T11:09:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G9P0I",
          "commit": {
            "abbreviatedOid": "e50f520"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T16:56:06Z",
          "updatedAt": "2022-11-22T16:56:06Z",
          "comments": [
            {
              "originalPosition": 441,
              "body": "just to clarify",
              "createdAt": "2022-11-22T16:56:06Z",
              "updatedAt": "2022-11-22T16:56:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G9T0l",
          "commit": {
            "abbreviatedOid": "e50f520"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T17:06:37Z",
          "updatedAt": "2022-11-22T17:06:37Z",
          "comments": [
            {
              "originalPosition": 790,
              "body": "add a text somewhere above saying that how to send will be described later in the text (ie in this section)",
              "createdAt": "2022-11-22T17:06:37Z",
              "updatedAt": "2022-11-22T17:06:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G9Utv",
          "commit": {
            "abbreviatedOid": "e50f520"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T17:09:01Z",
          "updatedAt": "2022-11-22T17:09:02Z",
          "comments": [
            {
              "originalPosition": 976,
              "body": "line in 652",
              "createdAt": "2022-11-22T17:09:01Z",
              "updatedAt": "2022-11-22T17:09:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G93iU",
          "commit": {
            "abbreviatedOid": "e50f520"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T18:52:30Z",
          "updatedAt": "2022-11-22T18:52:30Z",
          "comments": [
            {
              "originalPosition": 246,
              "body": "Issuer #175 ",
              "createdAt": "2022-11-22T18:52:30Z",
              "updatedAt": "2022-11-22T18:52:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G930g",
          "commit": {
            "abbreviatedOid": "e50f520"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T18:53:31Z",
          "updatedAt": "2022-11-22T18:53:32Z",
          "comments": [
            {
              "originalPosition": 267,
              "body": "Issue #176",
              "createdAt": "2022-11-22T18:53:31Z",
              "updatedAt": "2022-11-22T18:53:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G94ai",
          "commit": {
            "abbreviatedOid": "e50f520"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T18:55:34Z",
          "updatedAt": "2022-11-22T18:55:34Z",
          "comments": [
            {
              "originalPosition": 334,
              "body": "```suggestion\r\nan application that needs to access the disclosed claim values after the verification by the Verifier. The\r\n```",
              "createdAt": "2022-11-22T18:55:34Z",
              "updatedAt": "2022-11-22T18:55:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G94kK",
          "commit": {
            "abbreviatedOid": "e50f520"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T18:56:04Z",
          "updatedAt": "2022-11-22T18:56:05Z",
          "comments": [
            {
              "originalPosition": 331,
              "body": "makes sense - clarified.",
              "createdAt": "2022-11-22T18:56:05Z",
              "updatedAt": "2022-11-22T18:56:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G947F",
          "commit": {
            "abbreviatedOid": "e50f520"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T18:57:18Z",
          "updatedAt": "2022-11-22T18:57:18Z",
          "comments": [
            {
              "originalPosition": 357,
              "body": "changed disclosure object to disclosure, should be clear enough.",
              "createdAt": "2022-11-22T18:57:18Z",
              "updatedAt": "2022-11-22T18:57:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G96Zz",
          "commit": {
            "abbreviatedOid": "e50f520"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T19:02:30Z",
          "updatedAt": "2022-11-22T19:02:30Z",
          "comments": [
            {
              "originalPosition": 377,
              "body": "```suggestion\r\n\r\nThe order is decided based on the readability considerations: salts would have a constant length within the SD-JWT, claim names would be around the same length all the time, and claim values would vary in size, potentially being large objects.\r\n\r\n```",
              "createdAt": "2022-11-22T19:02:30Z",
              "updatedAt": "2022-11-22T19:02:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G964s",
          "commit": {
            "abbreviatedOid": "e50f520"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T19:04:12Z",
          "updatedAt": "2022-11-22T19:04:12Z",
          "comments": [
            {
              "originalPosition": 395,
              "body": "```suggestion\r\n * A different way to encode the umlaut (two dots `\u00a8` placed over the letter): `WyI2cU1RdlJMNWhhaiIsICJmYW1pbHlfbmFtZSIsICJNXHUwMGY2Yml1cyJd`\r\n```",
              "createdAt": "2022-11-22T19:04:12Z",
              "updatedAt": "2022-11-22T19:04:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G978C",
          "commit": {
            "abbreviatedOid": "e50f520"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T19:07:56Z",
          "updatedAt": "2022-11-22T19:07:57Z",
          "comments": [
            {
              "originalPosition": 435,
              "body": "```suggestion\r\nThe array MAY be empty in case the Issuer decided not to selectively disclose any of the claims at that level. However, it is RECOMMENDED to omit `_sd` claim in this case to save space.\r\n```",
              "createdAt": "2022-11-22T19:07:57Z",
              "updatedAt": "2022-11-22T19:07:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G98ns",
          "commit": {
            "abbreviatedOid": "e50f520"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T19:10:30Z",
          "updatedAt": "2022-11-22T19:10:31Z",
          "comments": [
            {
              "originalPosition": 442,
              "body": "```suggestion\r\n * plaintext claim value is an object that contains the `_sd` claim array, or\r\n```",
              "createdAt": "2022-11-22T19:10:31Z",
              "updatedAt": "2022-11-22T19:10:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G98y4",
          "commit": {
            "abbreviatedOid": "e50f520"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T19:11:08Z",
          "updatedAt": "2022-11-22T19:11:09Z",
          "comments": [
            {
              "originalPosition": 443,
              "body": "```suggestion\r\n * the same Disclosure value appears more than once (in the same array or in different arrays).\r\n```",
              "createdAt": "2022-11-22T19:11:08Z",
              "updatedAt": "2022-11-22T19:11:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G99Jz",
          "commit": {
            "abbreviatedOid": "e50f520"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T19:12:28Z",
          "updatedAt": "2022-11-22T19:12:28Z",
          "comments": [
            {
              "originalPosition": 446,
              "body": "`+ 1 to nested. #177",
              "createdAt": "2022-11-22T19:12:28Z",
              "updatedAt": "2022-11-22T19:12:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G99bm",
          "commit": {
            "abbreviatedOid": "e50f520"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T19:13:28Z",
          "updatedAt": "2022-11-22T19:13:29Z",
          "comments": [
            {
              "originalPosition": 448,
              "body": "```suggestion\r\nJust like any JWT, an SD-JWT MAY contain key value pairs where the value is an object. For any object in an SD-JWT, the Issuer MAY decide to either make the entire object selectively disclosable or to make its properties selectively disclosable individually. In the latter case, the Issuer MAY even choose to make some some of the object's properties selectively disclosable and others not.\r\n```",
              "createdAt": "2022-11-22T19:13:28Z",
              "updatedAt": "2022-11-22T19:13:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G999j",
          "commit": {
            "abbreviatedOid": "e50f520"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T19:15:24Z",
          "updatedAt": "2022-11-22T19:15:25Z",
          "comments": [
            {
              "originalPosition": 790,
              "body": "#178",
              "createdAt": "2022-11-22T19:15:24Z",
              "updatedAt": "2022-11-22T19:15:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G9-aS",
          "commit": {
            "abbreviatedOid": "e50f520"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T19:17:02Z",
          "updatedAt": "2022-11-22T19:17:03Z",
          "comments": [
            {
              "originalPosition": 970,
              "body": "```suggestion\r\n\r\nIt is up to the Holder how to maintain the mapping between the Disclosures and the plaintext claim values to be able to display them to the End-User when needed.\r\n\r\n```",
              "createdAt": "2022-11-22T19:17:02Z",
              "updatedAt": "2022-11-22T19:17:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G9-kE",
          "commit": {
            "abbreviatedOid": "e50f520"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T19:17:36Z",
          "updatedAt": "2022-11-22T19:17:37Z",
          "comments": [
            {
              "originalPosition": 1008,
              "body": "```suggestion\r\n    4. Check that the SD-JWT is valid using `nbf`, `iat`, and `exp` claims, if provided in the SD-JWT, and not selectively disclosed.\r\n```",
              "createdAt": "2022-11-22T19:17:36Z",
              "updatedAt": "2022-11-22T19:17:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G9-8t",
          "commit": {
            "abbreviatedOid": "e50f520"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T19:19:06Z",
          "updatedAt": "2022-11-22T19:19:07Z",
          "comments": [
            {
              "originalPosition": 1054,
              "body": "```suggestion\r\n 4. Create a copy of the SD-JWT payload, if required for further processing.\r\n```",
              "createdAt": "2022-11-22T19:19:06Z",
              "updatedAt": "2022-11-22T19:19:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G9_SR",
          "commit": {
            "abbreviatedOid": "e50f520"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T19:20:21Z",
          "updatedAt": "2022-11-22T19:20:21Z",
          "comments": [
            {
              "originalPosition": 1063,
              "body": "```suggestion\r\n          2. If the claim name already exists at the same level, the Verifier MUST reject the Presentation. Note that this also means that if a Holder sends the same Disclosure multiple times, the Verifier MUST reject the Presentation.\r\n```",
              "createdAt": "2022-11-22T19:20:21Z",
              "updatedAt": "2022-11-22T19:20:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G-A6A",
          "commit": {
            "abbreviatedOid": "e50f520"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T19:26:20Z",
          "updatedAt": "2022-11-22T19:26:20Z",
          "comments": [
            {
              "originalPosition": 1064,
              "body": "```suggestion\r\n          3. If the claim value is an object and contains an `_sd` key with an array, the Verifier MUST reject the Presentation.\r\n```",
              "createdAt": "2022-11-22T19:26:20Z",
              "updatedAt": "2022-11-22T19:26:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G-CAc",
          "commit": {
            "abbreviatedOid": "56ba38a"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T19:30:19Z",
          "updatedAt": "2022-11-22T19:30:20Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "```suggestion\r\n  \"email\": \"\\\"unusual email address\\\"@nihon.com\",\r\n```",
              "createdAt": "2022-11-22T19:30:20Z",
              "updatedAt": "2022-11-22T19:30:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G-CFu",
          "commit": {
            "abbreviatedOid": "56ba38a"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T19:30:38Z",
          "updatedAt": "2022-11-22T19:30:39Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n  \"email\": \"\\\"unusual email address\\\"@nihon.com\",\r\n```",
              "createdAt": "2022-11-22T19:30:38Z",
              "updatedAt": "2022-11-22T19:30:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G-CKa",
          "commit": {
            "abbreviatedOid": "56ba38a"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T19:30:56Z",
          "updatedAt": "2022-11-22T19:30:56Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\n  \"phone_number\": \"08012345678\",\r\n```",
              "createdAt": "2022-11-22T19:30:56Z",
              "updatedAt": "2022-11-22T19:30:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G-COG",
          "commit": {
            "abbreviatedOid": "56ba38a"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T19:31:09Z",
          "updatedAt": "2022-11-22T19:31:10Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "```suggestion\r\n  \"email\": \"\\\"unusual email address\\\"@nihon.com\",\r\n```",
              "createdAt": "2022-11-22T19:31:10Z",
              "updatedAt": "2022-11-22T19:31:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G-CUQ",
          "commit": {
            "abbreviatedOid": "56ba38a"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T19:31:30Z",
          "updatedAt": "2022-11-22T19:31:30Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\n    \"email\": \"\\\"unusual email address\\\"@nihon.com\",\r\n```",
              "createdAt": "2022-11-22T19:31:30Z",
              "updatedAt": "2022-11-22T19:31:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G-CYc",
          "commit": {
            "abbreviatedOid": "56ba38a"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T19:31:45Z",
          "updatedAt": "2022-11-22T19:31:45Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\n    \"email\": \"\\\"unusual email address\\\"@nihon.com\",\r\n```",
              "createdAt": "2022-11-22T19:31:45Z",
              "updatedAt": "2022-11-22T19:31:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G-CcZ",
          "commit": {
            "abbreviatedOid": "56ba38a"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T19:31:58Z",
          "updatedAt": "2022-11-22T19:31:59Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n  \"email\": \"\\\"unusual email address\\\"@nihon.com\",\r\n```",
              "createdAt": "2022-11-22T19:31:58Z",
              "updatedAt": "2022-11-22T19:31:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G_7jt",
          "commit": {
            "abbreviatedOid": "566f795"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-23T07:42:01Z",
          "updatedAt": "2022-11-23T07:42:01Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Can we replace it with another domain with multibyte characters? \u65e5\u672c.example.com?",
              "createdAt": "2022-11-23T07:42:01Z",
              "updatedAt": "2022-11-23T07:42:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G_8EU",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-23T07:44:17Z",
          "updatedAt": "2022-11-23T07:44:18Z",
          "comments": [
            {
              "originalPosition": 225,
              "body": "Good point, it should be mentioned.",
              "createdAt": "2022-11-23T07:44:17Z",
              "updatedAt": "2022-11-23T07:44:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5HARvh",
          "commit": {
            "abbreviatedOid": "3654c92"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-23T08:59:06Z",
          "updatedAt": "2022-11-23T08:59:07Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "```suggestion\r\n    \"phone_number\": \"08012345678\",\r\n```",
              "createdAt": "2022-11-23T08:59:06Z",
              "updatedAt": "2022-11-23T08:59:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5HASEe",
          "commit": {
            "abbreviatedOid": "800f48e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thank you, Daniel!!",
          "createdAt": "2022-11-23T09:00:02Z",
          "updatedAt": "2022-11-23T09:00:02Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5HASRf",
          "commit": {
            "abbreviatedOid": "56ba38a"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-23T09:00:36Z",
          "updatedAt": "2022-11-23T09:00:37Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "no one uses such domains in Japan though..?",
              "createdAt": "2022-11-23T09:00:37Z",
              "updatedAt": "2022-11-23T09:00:37Z"
            }
          ]
        }
      ]
    },
    {
      "number": 179,
      "id": "PR_kwDOHTmVzM5Dj2hY",
      "title": "Add Brian as coauthor",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/179",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-11-23T12:59:23Z",
      "updatedAt": "2022-11-23T17:38:34Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "15710f2b14410dcabdc126b7f6f59e9b02eaf398",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/add-brian",
      "headRefOid": "a3d8b11e039bf482216781289e76a7054987e544",
      "closedAt": "2022-11-23T17:38:34Z",
      "mergedAt": "2022-11-23T17:38:33Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "6d363285371ae98a8023e0a99a552ffc6e159ec1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5HDXJ3",
          "commit": {
            "abbreviatedOid": "a3d8b11"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-11-23T17:38:28Z",
          "updatedAt": "2022-11-23T17:38:28Z",
          "comments": []
        }
      ]
    },
    {
      "number": 181,
      "id": "PR_kwDOHTmVzM5DnfZX",
      "title": "revert to hash alg from digest derivation alg",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/181",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "per IETF115 WG agreement.",
      "createdAt": "2022-11-24T05:33:00Z",
      "updatedAt": "2022-12-06T20:06:17Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "b95186a440d78ad04bf862b0af94d8cc7df217fb",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "revert-to-hash",
      "headRefOid": "c5071cd1a67da2f8b46cf71c7dfb08acc89e949a",
      "closedAt": "2022-12-06T20:06:17Z",
      "mergedAt": "2022-12-06T20:06:17Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "f044eae6bb714e1423056e91940c3a71a548cdb9"
      },
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Can you please recompute the examples?",
          "createdAt": "2022-11-24T09:26:15Z",
          "updatedAt": "2022-11-24T09:26:15Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5HGGjM",
          "commit": {
            "abbreviatedOid": "17b2a54"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-11-24T09:18:41Z",
          "updatedAt": "2022-11-24T09:25:57Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "```suggestion\r\n * calculates the digests over the Holder-Selected Disclosures and verifies that each digest is contained in the SD-JWT.\r\n```",
              "createdAt": "2022-11-24T09:18:41Z",
              "updatedAt": "2022-11-24T09:25:57Z"
            },
            {
              "originalPosition": 34,
              "body": "```suggestion\r\nsignature verification as was used for creating the signature. In the hash digest approach outlined above, the same problem exists: for the Issuer and the\r\n```",
              "createdAt": "2022-11-24T09:19:01Z",
              "updatedAt": "2022-11-24T09:25:57Z"
            },
            {
              "originalPosition": 47,
              "body": "```suggestion\r\n   calculcation there. This means that the Verifier can easily compute and check the\r\n```",
              "createdAt": "2022-11-24T09:19:18Z",
              "updatedAt": "2022-11-24T09:25:57Z"
            },
            {
              "originalPosition": 75,
              "body": "```suggestion\r\n * The bytes of the output of the hash function are base64url-encoded, not the bytes making up the (often used) hex representation of the bytes of the digest.\r\n```",
              "createdAt": "2022-11-24T09:19:59Z",
              "updatedAt": "2022-11-24T09:25:57Z"
            },
            {
              "originalPosition": 85,
              "body": "Please fix `digest s` \u2192 `digests` everywhere.",
              "createdAt": "2022-11-24T09:20:43Z",
              "updatedAt": "2022-11-24T09:25:57Z"
            },
            {
              "originalPosition": 85,
              "body": "Why replace `hash digests` with `digests` everywhere? ",
              "createdAt": "2022-11-24T09:21:25Z",
              "updatedAt": "2022-11-24T09:25:57Z"
            },
            {
              "originalPosition": 149,
              "body": "```suggestion\r\n    1. Calculate the digest over the base64url string as described in (#hashing_disclosures).\r\n```",
              "createdAt": "2022-11-24T09:22:19Z",
              "updatedAt": "2022-11-24T09:25:57Z"
            },
            {
              "originalPosition": 150,
              "body": "```suggestion\r\n    2. Find all `_sd` keys in the SD-JWT payload that contain a digest calculated in the previous step. Note that there might be more than one `_sd` arrays in on SD-JWT.\r\n```",
              "createdAt": "2022-11-24T09:22:33Z",
              "updatedAt": "2022-11-24T09:25:57Z"
            },
            {
              "originalPosition": 177,
              "body": "I don't think this sentence adds information, the RECOMMENDATION is already there.\r\n```suggestion\r\n```",
              "createdAt": "2022-11-24T09:23:39Z",
              "updatedAt": "2022-11-24T09:25:57Z"
            },
            {
              "originalPosition": 197,
              "body": "Technically speaking, that would not be a profile, as it would need to change normative things within this spec. We cannot really give this recommendation here. All we can say is: HMAC or similar is at your own risk, non-standard, etc.; I'm not sure if we want to say that here.",
              "createdAt": "2022-11-24T09:25:19Z",
              "updatedAt": "2022-11-24T09:25:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5HRGtj",
          "commit": {
            "abbreviatedOid": "17b2a54"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-28T11:46:56Z",
          "updatedAt": "2022-11-28T11:46:56Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "lots of `digest s` that need to be fixed to `digests`",
              "createdAt": "2022-11-28T11:46:56Z",
              "updatedAt": "2022-11-28T11:46:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5HRSDK",
          "commit": {
            "abbreviatedOid": "17b2a54"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-28T12:21:49Z",
          "updatedAt": "2022-11-28T12:21:50Z",
          "comments": [
            {
              "originalPosition": 194,
              "body": "Do we need to say anything about truncated hashes here? I think probably so. The [registry](https://www.iana.org/assignments/named-information/named-information.xhtml ) has several including `sha-256-128`, which is probably okay security-wise and even useful as a space saving device. But it also has `sha-256-32`, which is probably never okay in this context. And a few in between those two that I'm not sure about. ",
              "createdAt": "2022-11-28T12:21:50Z",
              "updatedAt": "2022-11-28T12:21:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5HRi5Z",
          "commit": {
            "abbreviatedOid": "17b2a54"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-28T13:10:23Z",
          "updatedAt": "2022-11-28T13:10:23Z",
          "comments": [
            {
              "originalPosition": 197,
              "body": "I think what we are trying to say here is that a smaller salt could potentially be used in conjunction with a more computationally expensive hash function. Where a hash function is a single input -> single digest output. And the  Hash Function Claim section says sd_hash_alg can be \"a value defined in another specification and/or profile of this specification\". Such a spec/profile would need to define that hash function for use at the SD-JWT layer as a single input to single digest output thing. But it could map/profile something like PBKDF2 to do that or define a 30 billion iteration sha2 thing. \r\n\r\nI'm not sure how much of that we want to say here. But it would be an \"at your own risk\" kind of thing. \r\n\r\nI think that the specific talk of HMAC and cryptographic secrets here is confusing things though. It certainly confused me :) \r\n\r\n\r\n\r\n",
              "createdAt": "2022-11-28T13:10:23Z",
              "updatedAt": "2022-11-28T13:10:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5HRkVF",
          "commit": {
            "abbreviatedOid": "17b2a54"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-28T13:14:23Z",
          "updatedAt": "2022-11-28T13:14:23Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "I'd like to be consistent with the sd names.  So either \r\n\r\n`_sd` and `_sd_hash_alg` \r\n\r\nor\r\n\r\n`sd` and `sd_hash_alg`\r\n\r\nBut not mixed. \r\n\r\n",
              "createdAt": "2022-11-28T13:14:23Z",
              "updatedAt": "2022-11-28T13:14:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5HRk9v",
          "commit": {
            "abbreviatedOid": "17b2a54"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-28T13:15:47Z",
          "updatedAt": "2022-11-28T13:15:48Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "and maybe shorten `[_]sd_hash_alg` to something like `[_]sdha`",
              "createdAt": "2022-11-28T13:15:47Z",
              "updatedAt": "2022-11-28T13:15:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5HRlV3",
          "commit": {
            "abbreviatedOid": "17b2a54"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-28T13:16:31Z",
          "updatedAt": "2022-11-28T13:16:32Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "+1 for `_sd_hash_alg`. \r\n\r\nBTW, I added the underscore in front of `_sd` because it sorts nicely to the top (in case the claims are sorted alphabetically by key). With just `sd` the hashes sit somewhere in between the other non-sd claims.",
              "createdAt": "2022-11-28T13:16:31Z",
              "updatedAt": "2022-11-28T13:16:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5HRqTu",
          "commit": {
            "abbreviatedOid": "17b2a54"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-28T13:29:51Z",
          "updatedAt": "2022-11-28T13:29:52Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "`_sd_alg` may work as well.",
              "createdAt": "2022-11-28T13:29:51Z",
              "updatedAt": "2022-11-28T13:29:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5HS5MQ",
          "commit": {
            "abbreviatedOid": "17b2a54"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-28T16:30:33Z",
          "updatedAt": "2022-11-28T16:30:33Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "`_sd_alg` would work for me  ",
              "createdAt": "2022-11-28T16:30:33Z",
              "updatedAt": "2022-11-28T16:30:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Hs5Wi",
          "commit": {
            "abbreviatedOid": "17b2a54"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-02T19:09:45Z",
          "updatedAt": "2022-12-02T19:16:24Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "fixed",
              "createdAt": "2022-12-02T19:09:45Z",
              "updatedAt": "2022-12-02T19:16:24Z"
            },
            {
              "originalPosition": 57,
              "body": "I think `_sd_hash_alg` is explicit and nice?",
              "createdAt": "2022-12-02T19:13:26Z",
              "updatedAt": "2022-12-02T19:16:24Z"
            },
            {
              "originalPosition": 85,
              "body": "> Why replace hash digests with digests everywhere?\r\n\r\nbecause digest implies it is a hash digest?",
              "createdAt": "2022-12-02T19:14:23Z",
              "updatedAt": "2022-12-02T19:16:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Hs9EV",
          "commit": {
            "abbreviatedOid": "17b2a54"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-02T19:20:09Z",
          "updatedAt": "2022-12-02T19:20:10Z",
          "comments": [
            {
              "originalPosition": 197,
              "body": "> the Hash Function Claim section says sd_hash_alg can be \"a value defined in another specification and/or profile of this specification\"\r\npersonally, I am ok removing this section, with this PR, don't think it's relevant anymore.",
              "createdAt": "2022-12-02T19:20:09Z",
              "updatedAt": "2022-12-02T19:20:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5HtDQW",
          "commit": {
            "abbreviatedOid": "17b2a54"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-02T19:45:12Z",
          "updatedAt": "2022-12-02T19:45:12Z",
          "comments": [
            {
              "originalPosition": 197,
              "body": "also removed this clause to prevent confusion.",
              "createdAt": "2022-12-02T19:45:12Z",
              "updatedAt": "2022-12-02T19:45:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5HtDmT",
          "commit": {
            "abbreviatedOid": "17b2a54"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-02T19:46:43Z",
          "updatedAt": "2022-12-02T19:46:44Z",
          "comments": [
            {
              "originalPosition": 197,
              "body": "cc @christianpaquin for transparency that during IETF115 OAuth WG, there was a decision to revert to hashing alg because including HMAC includes a lot of additional definitions to be made, not just saying _sd_hash_alg can be HMAC, and we should keep SD-JWT spec simple.",
              "createdAt": "2022-12-02T19:46:44Z",
              "updatedAt": "2022-12-02T19:46:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5HtD-C",
          "commit": {
            "abbreviatedOid": "17b2a54"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-02T19:48:23Z",
          "updatedAt": "2022-12-02T19:48:23Z",
          "comments": [
            {
              "originalPosition": 194,
              "body": "externalized to Issue #183 so that we can merge this PR now, publish and come back to this later",
              "createdAt": "2022-12-02T19:48:23Z",
              "updatedAt": "2022-12-02T19:48:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5HtMU2",
          "commit": {
            "abbreviatedOid": "17b2a54"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-02T20:11:42Z",
          "updatedAt": "2022-12-02T20:11:42Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "I'd prefer `_sd_alg`. Size isn't everything but keeping JWTs as small as reasonable is worth keeping in mind. And JWT claim names are typically rather short/concise. `_sd_alg` is shorter but still conveys enough about what it is.  ",
              "createdAt": "2022-12-02T20:11:42Z",
              "updatedAt": "2022-12-02T20:11:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5H4fmI",
          "commit": {
            "abbreviatedOid": "4d336d3"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-06T06:57:21Z",
          "updatedAt": "2022-12-06T06:57:21Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5H8taH",
          "commit": {
            "abbreviatedOid": "4e19309"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-06T18:22:29Z",
          "updatedAt": "2022-12-06T18:22:30Z",
          "comments": [
            {
              "originalPosition": 118,
              "body": "```suggestion\r\n### Hash Function Claim {#hash_function_claim}\r\n```",
              "createdAt": "2022-12-06T18:22:29Z",
              "updatedAt": "2022-12-06T18:22:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5H8t2j",
          "commit": {
            "abbreviatedOid": "c5071cd"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-06T18:23:50Z",
          "updatedAt": "2022-12-06T18:23:50Z",
          "comments": []
        }
      ]
    },
    {
      "number": 182,
      "id": "PR_kwDOHTmVzM5EKyUB",
      "title": "little edits on review of the new sd jwt encoding ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/182",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Some hopefully uncontroversial changes to the new approach from IETF 115 and a few other minor things I noticed. ",
      "createdAt": "2022-12-02T19:45:05Z",
      "updatedAt": "2022-12-05T19:10:59Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "6d363285371ae98a8023e0a99a552ffc6e159ec1",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "bc/new-sd-jwt-encoding-review",
      "headRefOid": "964455fb599acf854d81d0d13bc653d395bce487",
      "closedAt": "2022-12-05T19:10:51Z",
      "mergedAt": "2022-12-05T19:10:51Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "b95186a440d78ad04bf862b0af94d8cc7df217fb"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5HuWs3",
          "commit": {
            "abbreviatedOid": "0d81086"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-03T04:18:52Z",
          "updatedAt": "2022-12-03T04:21:11Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "```suggestion\n`SD-CLAIMS` is an array of digest values that ensures the integrity of and maps to the respective Disclosures.  Digest values are calculated over the Disclosures, each of which contains the claim name (`CLAIM-NAME`), the claim value (`CLAIM-VALUE`), and a random salt (`SALT`). Digests are calculated using a digest derivation function such as a hash function, HMAC, or other (`DIGEST-DERIVATION()`):\n```\n",
              "createdAt": "2022-12-03T04:18:52Z",
              "updatedAt": "2022-12-03T04:21:11Z"
            },
            {
              "originalPosition": 31,
              "body": "Was this perceived redundant?",
              "createdAt": "2022-12-03T04:19:39Z",
              "updatedAt": "2022-12-03T04:21:11Z"
            },
            {
              "originalPosition": 92,
              "body": "```suggestion\nThe security model that conceals the plaintext claims relies on the fact that the salt cannot be learned or guessed by\n```\n",
              "createdAt": "2022-12-03T04:21:00Z",
              "updatedAt": "2022-12-03T04:21:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5HxGMC",
          "commit": {
            "abbreviatedOid": "0d81086"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Thank you, a number of good points here! Generally approved, left a few comments.",
          "createdAt": "2022-12-05T08:00:44Z",
          "updatedAt": "2022-12-05T08:06:18Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "Best of both?\r\n```suggestion\r\n`SD-CLAIMS` is an array of digest values that ensure the integrity of and map to the respective Disclosures.  Digest values are calculated over the Disclosures, each of which contains the claim name (`CLAIM-NAME`), the claim value (`CLAIM-VALUE`), and a random salt (`SALT`). Digests are calculated using a digest derivation function such as a hash function, HMAC, or other (`DIGEST-DERIVATION()`):\r\n```",
              "createdAt": "2022-12-05T08:00:44Z",
              "updatedAt": "2022-12-05T08:06:18Z"
            },
            {
              "originalPosition": 65,
              "body": "I did not put a colon here as the introduction to the list is not a complete sentence.\r\n\r\n```suggestion\r\nIssuers MUST NOT issue SD-JWTs where\r\n```",
              "createdAt": "2022-12-05T08:04:43Z",
              "updatedAt": "2022-12-05T08:06:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Hy34x",
          "commit": {
            "abbreviatedOid": "0d81086"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-05T13:06:08Z",
          "updatedAt": "2022-12-05T13:06:08Z",
          "comments": [
            {
              "originalPosition": 92,
              "body": "The draft currently uses plaintext, cleartext and plain text. Maybe a full reconciliation is needed at some point. In the meantime, I'll take this suggestion. ",
              "createdAt": "2022-12-05T13:06:08Z",
              "updatedAt": "2022-12-05T13:06:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Hy7FK",
          "commit": {
            "abbreviatedOid": "964455f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-05T13:14:25Z",
          "updatedAt": "2022-12-05T13:14:26Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "Yeah, it felt redundant and somewhat out of order with the content just below.",
              "createdAt": "2022-12-05T13:14:25Z",
              "updatedAt": "2022-12-05T13:14:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Hy9cU",
          "commit": {
            "abbreviatedOid": "0d81086"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-05T13:21:02Z",
          "updatedAt": "2022-12-05T13:21:02Z",
          "comments": [
            {
              "originalPosition": 65,
              "body": "You will come to find, if you haven't already, that this native English speaker isn't very good at English :) ",
              "createdAt": "2022-12-05T13:21:02Z",
              "updatedAt": "2022-12-05T13:21:02Z"
            }
          ]
        }
      ]
    },
    {
      "number": 184,
      "id": "PR_kwDOHTmVzM5Ec_G7",
      "title": "First draft for enveloping considerations",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/184",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-12-06T08:43:12Z",
      "updatedAt": "2022-12-07T13:29:37Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "b95186a440d78ad04bf862b0af94d8cc7df217fb",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/address-enveloping-concerns",
      "headRefOid": "7fd611b7336904ba15f7faaf6fb9fc5c21a88aad",
      "closedAt": "2022-12-07T13:29:37Z",
      "mergedAt": "2022-12-07T13:29:37Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "de9277994a7427bd874b57e73ab6ee1ea653fc4e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5H62qe",
          "commit": {
            "abbreviatedOid": "7487434"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-06T13:39:22Z",
          "updatedAt": "2022-12-06T13:39:23Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "```suggestion\r\nif the privacy of End-User data or correlation attacks are a concern. Implementers MAY define a\r\n```",
              "createdAt": "2022-12-06T13:39:22Z",
              "updatedAt": "2022-12-06T13:39:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5H64jq",
          "commit": {
            "abbreviatedOid": "7487434"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-06T13:43:54Z",
          "updatedAt": "2022-12-06T13:43:54Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "```suggestion\r\nintercept and read the End-User's personal data or correlate the information with previous uses of the same SD-JWT.\r\n```",
              "createdAt": "2022-12-06T13:43:54Z",
              "updatedAt": "2022-12-06T13:43:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5H64zm",
          "commit": {
            "abbreviatedOid": "7487434"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-06T13:44:32Z",
          "updatedAt": "2022-12-06T13:44:33Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "Damn. We're even now ;-) ",
              "createdAt": "2022-12-06T13:44:32Z",
              "updatedAt": "2022-12-06T13:44:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5H69pT",
          "commit": {
            "abbreviatedOid": "7487434"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-06T13:53:59Z",
          "updatedAt": "2022-12-06T13:53:59Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "It's not a competition :) ",
              "createdAt": "2022-12-06T13:53:59Z",
              "updatedAt": "2022-12-06T13:53:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5H7dhN",
          "commit": {
            "abbreviatedOid": "17e1baf"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-06T15:05:24Z",
          "updatedAt": "2022-12-06T15:05:24Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "```suggestion\r\nImplementers MUST ensure that the transport protocol provides confidentiality,\r\nif the privacy of End-User data or correlation attacks are a concern. Implementers MAY define an\r\nenvelope format (such as described in (#enveloping) or nesting the SD-JWT Combined Format as\r\nthe plaintext payload of a JWE) to encrypt the SD-JWT\r\nand associated Disclosures when transmitted over an insecure channel.\r\n```",
              "createdAt": "2022-12-06T15:05:24Z",
              "updatedAt": "2022-12-06T15:10:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5H7eSn",
          "commit": {
            "abbreviatedOid": "17e1baf"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-06T15:07:07Z",
          "updatedAt": "2022-12-06T15:07:08Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "Should 'plaintext' be 'payload'? Other than that, looks good!",
              "createdAt": "2022-12-06T15:07:07Z",
              "updatedAt": "2022-12-06T15:07:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5H7fF2",
          "commit": {
            "abbreviatedOid": "17e1baf"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-06T15:08:53Z",
          "updatedAt": "2022-12-06T15:08:53Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "as mentioned on one of the messaging platforms - I think nesting the SD-JWT and Disclosures directly in a JWE is an appropriate approach in some/many cases. This suggestion just tries to leave room for that. ",
              "createdAt": "2022-12-06T15:08:53Z",
              "updatedAt": "2022-12-06T15:08:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5H7gjM",
          "commit": {
            "abbreviatedOid": "17e1baf"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-06T15:12:11Z",
          "updatedAt": "2022-12-06T15:12:12Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "> Should 'plaintext' be 'payload'? Other than that, looks good!\r\n\r\nAFAIK JWE/T uses 'plaintext' and 'payload' somewhat interchangeably and sometimes together.  I updated the suggestion to have both \"plaintext payload\". ",
              "createdAt": "2022-12-06T15:12:12Z",
              "updatedAt": "2022-12-06T15:12:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5H7gq8",
          "commit": {
            "abbreviatedOid": "17e1baf"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-06T15:12:27Z",
          "updatedAt": "2022-12-06T15:12:27Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "I see it says 'plaintext payload' now. Thanks, I'll merge this!",
              "createdAt": "2022-12-06T15:12:27Z",
              "updatedAt": "2022-12-06T15:12:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5H7hI2",
          "commit": {
            "abbreviatedOid": "463ab5d"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-06T15:13:31Z",
          "updatedAt": "2022-12-06T15:13:31Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5IBMHP",
          "commit": {
            "abbreviatedOid": "463ab5d"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-07T11:44:48Z",
          "updatedAt": "2022-12-07T12:46:32Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "```suggestion\r\nIn some applications or transport protocols, it is desirable to put an SD-JWT and associated Disclosures into a JWT container. For example, an implementation may envelope all credentials and presentations, independent of their format, in a JWT to enable application-layer encryption during transport.\r\n```\r\n\r\n(feel free not to accept if this is not what you meant..)",
              "createdAt": "2022-12-07T11:44:48Z",
              "updatedAt": "2022-12-07T12:46:32Z"
            },
            {
              "originalPosition": 61,
              "body": "```suggestion\r\nintercept and read the End-User's personal data.\r\n```\r\nHow does the insecure channel related to correlating the multiple usage of the same SD-JWT..? isn't it more of an identifier/signing key not being pairwise issue..?",
              "createdAt": "2022-12-07T12:42:41Z",
              "updatedAt": "2022-12-07T12:46:32Z"
            },
            {
              "originalPosition": 75,
              "body": "```suggestion\r\nIf the privacy of End-User data or correlation attacks are a concern, \r\nImplementers MUST ensure that the transport protocol provides confidentiality. \r\nWhen transmitted over an insecure channel, implementers MAY also define an\r\nenvelope format (such as described in (#enveloping) or nesting the SD-JWT Combined Format as\r\nthe plaintext payload of a JWE) to encrypt the SD-JWT\r\nand associated Disclosures.\r\n```",
              "createdAt": "2022-12-07T12:45:08Z",
              "updatedAt": "2022-12-07T12:46:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5IBhlV",
          "commit": {
            "abbreviatedOid": "463ab5d"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-07T12:50:09Z",
          "updatedAt": "2022-12-07T12:50:09Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "The solution to both problems is the same, but \r\n\r\n1. colluding verifiers identifying a person using the same signing keys, and\r\n2. attackers observing the wire and seeing the same credential\r\n\r\nare two different problems. ",
              "createdAt": "2022-12-07T12:50:09Z",
              "updatedAt": "2022-12-07T12:50:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5IBip7",
          "commit": {
            "abbreviatedOid": "463ab5d"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-07T12:53:16Z",
          "updatedAt": "2022-12-07T12:53:16Z",
          "comments": [
            {
              "originalPosition": 75,
              "body": "This changes the meaning (in an unintended way). Implementers may define an envelope format even for secure channels. \r\n\r\n(Also, the second sentence may imply that Implementers are sometimes transmitted over insecure channels... )",
              "createdAt": "2022-12-07T12:53:16Z",
              "updatedAt": "2022-12-07T12:53:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5IBmn5",
          "commit": {
            "abbreviatedOid": "7fd611b"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "made comments/suggestions, but overall sounds good.",
          "createdAt": "2022-12-07T13:04:18Z",
          "updatedAt": "2022-12-07T13:04:18Z",
          "comments": []
        }
      ]
    },
    {
      "number": 186,
      "id": "PR_kwDOHTmVzM5Eik-l",
      "title": "Fix (I hope?) the includes in the Complex Structured SD-JWT section",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/186",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "was getting \r\n```\r\n2022/12/06 13:37:49 Failure to read: \"open /Users/briancampbell/dev/sd-jwt/oauth-selective-disclosure-jwt/examples/complex-ekyc/user_claims.json: no such file or directory\" (from \"*\")\r\n2022/12/06 13:37:49 Failure to read: \"open /Users/briancampbell/dev/sd-jwt/oauth-selective-disclosure-jwt/examples/complex-ekyc/sd_jwt_payload.json: no such file or directory\" (from \"*\")\r\n2022/12/06 13:37:49 Failure to read: \"open /Users/briancampbell/dev/sd-jwt/oauth-selective-disclosure-jwt/examples/complex-ekyc/disclosures.md: no such file or directory\" (from \"*\")\r\n2022/12/06 13:37:49 Failure to read: \"open /Users/briancampbell/dev/sd-jwt/oauth-selective-disclosure-jwt/examples/complex-ekyc/combined_presentation.txt: no such file or directory\" (from \"*\")\r\n2022/12/06 13:37:49 Failure to read: \"open /Users/briancampbell/dev/sd-jwt/oauth-selective-disclosure-jwt/examples/complex-ekyc/verified_contents.json: no such file or directory\" (from \"*\")\r\n```\r\nand all those examples are/were missing from https://drafts.oauth.net/oauth-selective-disclosure-jwt/draft-ietf-oauth-selective-disclosure-jwt.html#name-example-3-complex-structure \r\n\r\n",
      "createdAt": "2022-12-06T20:44:14Z",
      "updatedAt": "2023-01-18T19:23:48Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "f044eae6bb714e1423056e91940c3a71a548cdb9",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "bc/fix-_",
      "headRefOid": "c9f86c456d0bf78ce57150a4fa9c20e9d0b29f69",
      "closedAt": "2022-12-07T07:48:09Z",
      "mergedAt": "2022-12-07T07:48:09Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "7184af03f74597b18ff60c2dfc45ba6e1531f45e"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "and that looks better https://drafts.oauth.net/oauth-selective-disclosure-jwt/bc/fix-_/draft-ietf-oauth-selective-disclosure-jwt.html#name-example-3-complex-structure ",
          "createdAt": "2022-12-06T21:05:02Z",
          "updatedAt": "2022-12-06T21:05:02Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5H_ZtV",
          "commit": {
            "abbreviatedOid": "c9f86c4"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-07T05:51:10Z",
          "updatedAt": "2022-12-07T05:51:10Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5H_3W7",
          "commit": {
            "abbreviatedOid": "c9f86c4"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-07T07:48:04Z",
          "updatedAt": "2022-12-07T07:48:04Z",
          "comments": []
        }
      ]
    },
    {
      "number": 187,
      "id": "PR_kwDOHTmVzM5EjgrP",
      "title": "Attempt to finish the change to _sd_alg for the hash algortim claim name",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/187",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-12-06T22:58:57Z",
      "updatedAt": "2023-01-18T19:23:32Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "f044eae6bb714e1423056e91940c3a71a548cdb9",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "bc/_sd_alg",
      "headRefOid": "656587513bc101cd9189059731855c573cf03a57",
      "closedAt": "2022-12-07T07:41:07Z",
      "mergedAt": "2022-12-07T07:41:07Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "e9cea2ccf1dd164759f9d135797321fc16686768"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5H-w1T",
          "commit": {
            "abbreviatedOid": "6565875"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-07T01:55:05Z",
          "updatedAt": "2022-12-07T01:55:05Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5H_0ZY",
          "commit": {
            "abbreviatedOid": "6565875"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-07T07:36:47Z",
          "updatedAt": "2022-12-07T07:36:47Z",
          "comments": []
        }
      ]
    },
    {
      "number": 190,
      "id": "PR_kwDOHTmVzM5EqE5h",
      "title": "Longer salt",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/190",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Longer salt, which meets the recommendations, in examples in Creating\u2026 Disclosures",
      "createdAt": "2022-12-07T15:59:00Z",
      "updatedAt": "2023-01-18T19:23:44Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "de9277994a7427bd874b57e73ab6ee1ea653fc4e",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "bc/big-salt",
      "headRefOid": "19eec7ca9425c9f44eb0895d87afdb8298dd45c8",
      "closedAt": "2022-12-07T18:12:10Z",
      "mergedAt": "2022-12-07T18:12:10Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "88cd058e2bb5813e2d4a2979601656bde08e7900"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "While working on this PR, I was going to a base64 decoding site to do a bit of a sanity check on the values but got distracted and decided to see how ChatGPT would handle it. So I gave it this prompt in the openai playground:\r\n\r\n```decode WyJfMjZiYzRMVC1hYzZxMktJNmNCVzVlcyIsICJmYW1pbHlfbmFtZSIsICJNw7ZiaXVzIl0``` \r\n\r\nand it added one `=` pad character to the end of the prompt and answered with:\r\n\r\n```[\"f26bc4L-ac6q2KI6cBW5es\", \"family_name\", \"M\u00fcller\"]```\r\n\r\nNote that it actually decodes to:\r\n\r\n```[\"_26bc4LT-ac6q2KI6cBW5es\", \"family_name\", \"M\u00f6bius\"]```\r\n\r\nif you need me, I'll just be over here staring into the void while tears run down my face as I contemplate the arrival of the quiet end of days. ",
          "createdAt": "2022-12-07T16:44:05Z",
          "updatedAt": "2022-12-07T16:46:54Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "![Screenshot_20221208_142124](https://user-images.githubusercontent.com/89476/206457005-cd675635-664b-463b-879c-2139d6d11dc0.png)\r\n\r\nLooks like it must be a very tedious process to decode character by character and at some point ChatGPT is going \"ah, good enough, this must be a German name with some umlaut, let's say... \"M\u00fcbiz\". \r\n\r\nThe salt decoded differently, but also wrong.\r\n\r\nM\u00fcbiz is btw not a real family name as far as I can tell.",
          "createdAt": "2022-12-08T13:24:31Z",
          "updatedAt": "2022-12-08T13:24:31Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "It's amazing and terrifying at the same time.  ",
          "createdAt": "2022-12-08T15:16:46Z",
          "updatedAt": "2022-12-08T15:16:46Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 191,
      "id": "PR_kwDOHTmVzM5Ermvs",
      "title": "acknowledgements",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/191",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Add Justin to Acknowledgements (he suggested the array for _sd in sid\u2026e meeting) \r\n\r\nand fix the commas + and in that list of names ",
      "createdAt": "2022-12-07T19:37:58Z",
      "updatedAt": "2023-01-18T19:23:15Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "88cd058e2bb5813e2d4a2979601656bde08e7900",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "bc/ack-jr",
      "headRefOid": "e15b2372e5b73552abfc1a3ea76ce3a0624cda7f",
      "closedAt": "2022-12-15T17:09:59Z",
      "mergedAt": "2022-12-15T17:09:59Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "83e948bfa366e0c760c0b2b6a085c167ec08fe6d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5IG7vz",
          "commit": {
            "abbreviatedOid": "e15b237"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-08T09:55:13Z",
          "updatedAt": "2022-12-08T09:55:13Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5IsjgU",
          "commit": {
            "abbreviatedOid": "e15b237"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-15T17:09:48Z",
          "updatedAt": "2022-12-15T17:09:48Z",
          "comments": []
        }
      ]
    },
    {
      "number": 192,
      "id": "PR_kwDOHTmVzM5ExZJC",
      "title": "Use ES256 instead of RS256 to generate shorter examples",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/192",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-12-08T10:35:47Z",
      "updatedAt": "2023-01-18T19:23:19Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "88cd058e2bb5813e2d4a2979601656bde08e7900",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/ec-crypto",
      "headRefOid": "0e160af29c22e8817e1c4299108b73806159c5b1",
      "closedAt": "2022-12-15T17:12:45Z",
      "mergedAt": "2022-12-15T17:12:45Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "c34d4795eeb7d4df5dc4278e5357452d780be761"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Approved!",
          "createdAt": "2022-12-09T13:27:52Z",
          "updatedAt": "2022-12-09T13:27:52Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5IHOtT",
          "commit": {
            "abbreviatedOid": "0ec403f"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-08T10:37:31Z",
          "updatedAt": "2022-12-08T10:37:32Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "@bc-pi I removed the \"kid\" header parameter from the examples. It used to contain the key thumbprint. AFAIK there is no requirement for a \"kid\" header parameter and just always putting the thumbprint there is not the right solution anyway - any objections?",
              "createdAt": "2022-12-08T10:37:31Z",
              "updatedAt": "2022-12-08T10:37:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5IIUMd",
          "commit": {
            "abbreviatedOid": "0ec403f"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-08T14:07:34Z",
          "updatedAt": "2022-12-08T14:07:34Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "(I'm not sure why `kid` was in there in the first place.)",
              "createdAt": "2022-12-08T14:07:34Z",
              "updatedAt": "2022-12-08T14:07:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5IIj-A",
          "commit": {
            "abbreviatedOid": "0ec403f"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-08T14:46:05Z",
          "updatedAt": "2022-12-08T14:46:06Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "It was me @danielfett, it's not relevant for the draft and its examples, please go ahead :-)",
              "createdAt": "2022-12-08T14:46:05Z",
              "updatedAt": "2022-12-08T14:46:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5IJCIZ",
          "commit": {
            "abbreviatedOid": "0ec403f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-08T15:53:41Z",
          "updatedAt": "2022-12-08T15:53:41Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "no objections",
              "createdAt": "2022-12-08T15:53:41Z",
              "updatedAt": "2022-12-08T15:53:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5IKqKN",
          "commit": {
            "abbreviatedOid": "0ec403f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-08T20:43:43Z",
          "updatedAt": "2022-12-08T20:43:43Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "I don't think `use`, `alg` and `kid` should be included here.",
              "createdAt": "2022-12-08T20:43:43Z",
              "updatedAt": "2022-12-08T20:43:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5IKqpd",
          "commit": {
            "abbreviatedOid": "0ec403f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-08T20:45:42Z",
          "updatedAt": "2022-12-08T20:45:42Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "`use`, `alg` and `kid` are not really meaningful or useful in this context (I don't think?) but take up space and potentially distract or confuse ",
              "createdAt": "2022-12-08T20:45:42Z",
              "updatedAt": "2022-12-08T21:37:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5IKreZ",
          "commit": {
            "abbreviatedOid": "0ec403f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-08T20:48:41Z",
          "updatedAt": "2022-12-08T20:48:41Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "I'm guessing this is where they (`use`, `alg` and `kid`) come from but, as per my previous comments, I don't think use/kid/alg should be in the holder confirmation key. ",
              "createdAt": "2022-12-08T20:48:41Z",
              "updatedAt": "2022-12-08T21:37:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5IK2SS",
          "commit": {
            "abbreviatedOid": "0ec403f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Looks pretty good overall! I even double checked some of the signatures with my JOSE/JWT library. \r\n\r\nI do, however, think that before merging a few parameters should be removed from the holder jwk.",
          "createdAt": "2022-12-08T21:27:09Z",
          "updatedAt": "2022-12-08T21:27:09Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5IMt2u",
          "commit": {
            "abbreviatedOid": "0ec403f"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-09T08:29:04Z",
          "updatedAt": "2022-12-09T08:29:05Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "You're right! I removed them.",
              "createdAt": "2022-12-09T08:29:04Z",
              "updatedAt": "2022-12-09T08:29:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5IMt_z",
          "commit": {
            "abbreviatedOid": "0ec403f"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-09T08:29:35Z",
          "updatedAt": "2022-12-09T08:29:35Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "As above - removed the three superfluous elements.",
              "createdAt": "2022-12-09T08:29:35Z",
              "updatedAt": "2022-12-09T08:29:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5IOINr",
          "commit": {
            "abbreviatedOid": "0e160af"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-09T13:25:51Z",
          "updatedAt": "2022-12-09T13:25:51Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5Iskbn",
          "commit": {
            "abbreviatedOid": "0e160af"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-15T17:12:27Z",
          "updatedAt": "2022-12-15T17:12:27Z",
          "comments": []
        }
      ]
    },
    {
      "number": 193,
      "id": "PR_kwDOHTmVzM5GIbI_",
      "title": "Examples for eIDAS pid, eaa, and JSON-LD credential",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/193",
      "state": "CLOSED",
      "author": "tlodderstedt",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Hi, \r\n\r\nthis PR adds examples for PID and EAA (Diploma based on EBSI Schema) as SD-JWT-VCs and an example of a SD-JWT with JSON-LD payload (Vaccination Certificate).",
      "createdAt": "2022-12-23T17:06:48Z",
      "updatedAt": "2023-02-10T17:17:11Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "3fe80e9796bd49cd5f9578ea3f2faf45dff5c509",
      "headRepository": "tlodderstedt/oauth-selective-disclosure-jwt",
      "headRefName": "vc-examples",
      "headRefOid": "f9413ea61c012b956fe2bcbd85c4c82d897e325f",
      "closedAt": "2023-02-10T17:17:10Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "to clarify, the idea is not to add this to the main spec text, but purely add examples in this repo for people who want to generate them?",
          "createdAt": "2023-01-05T16:19:13Z",
          "updatedAt": "2023-01-05T16:19:13Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> to clarify, the idea is not to add this to the main spec text, but purely add examples in this repo for people who want to generate them?\r\n\r\nI think it'd be more appropriate to do that kind of thing in a fork of the repo and keep the scope of the main repo to the SD-JWT document itself. ",
          "createdAt": "2023-02-09T15:35:32Z",
          "updatedAt": "2023-02-09T15:35:32Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5JmW6e",
          "commit": {
            "abbreviatedOid": "72f3f80"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-03T16:21:29Z",
          "updatedAt": "2023-01-03T16:21:29Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "I suggest an indented representation of this JSON for better readability",
              "createdAt": "2023-01-03T16:21:29Z",
              "updatedAt": "2023-01-03T16:21:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5JmtDp",
          "commit": {
            "abbreviatedOid": "72f3f80"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-03T17:27:05Z",
          "updatedAt": "2023-01-03T17:27:05Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "This is auto generated by the script and I suppose there's no need to include this markdown snippet in the spec itself.",
              "createdAt": "2023-01-03T17:27:05Z",
              "updatedAt": "2023-01-03T17:27:05Z"
            }
          ]
        }
      ]
    },
    {
      "number": 195,
      "id": "PR_kwDOHTmVzM5GkCtP",
      "title": "Discuss Storage of End-User Credentials",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/195",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "As discussed on our last call, I added a section saying that there is a potential privacy risk in storing signed End-User data inclusing a discussion and recommendations on potential mitigations. \r\n\r\nThis does include a potentially controversial bit on burning private keys. My final stance on that is subject to the outcome of the [thorough investigation](https://twitter.com/dfett42/status/1610344521425895424) that I have launched on Twitter.",
      "createdAt": "2023-01-03T19:18:46Z",
      "updatedAt": "2023-01-18T16:13:11Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "c34d4795eeb7d4df5dc4278e5357452d780be761",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/privacy-considerations-signed-payloads",
      "headRefOid": "b78d49f96013ccf9b54df232a94f5c6ac6a3a59c",
      "closedAt": "2023-01-18T16:13:10Z",
      "mergedAt": "2023-01-18T16:13:10Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "8f530a248958057b28ebcf994092c83450e77de8"
      },
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Besides what we discussed in our last call, I also made some other tweaks to the wording in the [last commit](https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/195/commits/563220c567907749723f66255ebd743963745d25), please review.",
          "createdAt": "2023-01-06T08:38:03Z",
          "updatedAt": "2023-01-06T08:38:03Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "should probably add something to the document history too just for posterity ",
          "createdAt": "2023-01-09T19:25:58Z",
          "updatedAt": "2023-01-09T19:25:58Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5JxZm-",
          "commit": {
            "abbreviatedOid": "6f1b9e6"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-05T16:28:17Z",
          "updatedAt": "2023-01-05T16:28:18Z",
          "comments": [
            {
              "originalPosition": 75,
              "body": "Todo - Improve wording here",
              "createdAt": "2023-01-05T16:28:17Z",
              "updatedAt": "2023-01-05T16:28:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5JxlWf",
          "commit": {
            "abbreviatedOid": "6f1b9e6"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-05T17:02:12Z",
          "updatedAt": "2023-01-05T17:02:12Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "reword this last sentence to something like \"Verifiers need to ensure that they are not using expired or revoked keys for signature verification as reasonable and appropriate for the given key distribution method.\" or similar ",
              "createdAt": "2023-01-05T17:02:12Z",
              "updatedAt": "2023-01-05T17:02:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5JyS-8",
          "commit": {
            "abbreviatedOid": "6f1b9e6"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-05T19:21:00Z",
          "updatedAt": "2023-01-05T19:21:01Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "or better ",
              "createdAt": "2023-01-05T19:21:00Z",
              "updatedAt": "2023-01-05T19:21:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5J0m4B",
          "commit": {
            "abbreviatedOid": "6f1b9e6"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-06T08:36:33Z",
          "updatedAt": "2023-01-06T08:36:33Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "I like your suggested wording and changed the PR accordingly.",
              "createdAt": "2023-01-06T08:36:33Z",
              "updatedAt": "2023-01-06T08:36:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5J85Nc",
          "commit": {
            "abbreviatedOid": "563220c"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-09T15:34:38Z",
          "updatedAt": "2023-01-09T15:34:38Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5JxZOS",
          "commit": {
            "abbreviatedOid": "563220c"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-05T16:27:14Z",
          "updatedAt": "2023-01-10T00:09:52Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "I think how biometrics can be used needs to be elaborated. I am still not sure if biometrics-based binding is sub-category of claim-based binding or if it is a category on its own.\r\n\r\nnot to stop merging of this PR, could we open an issue to track biometrics-based binding and remove it for now from this PR?\r\n\r\n```suggestion\r\nphysical document.\r\n```",
              "createdAt": "2023-01-10T00:07:02Z",
              "updatedAt": "2023-01-10T00:09:52Z"
            },
            {
              "originalPosition": 42,
              "body": "related to an above comment, picture of the user would be a \"biometric-based holder binding\" in my mind.\r\n\r\n```suggestion\r\nkey. Claims-based Holder Binding may be used as well, e.g., by including a\r\nfirst name, last name and a date of birth that matches that of an insurance policy paper.\r\n```",
              "createdAt": "2023-01-10T00:09:37Z",
              "updatedAt": "2023-01-10T00:09:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5KEnGY",
          "commit": {
            "abbreviatedOid": "208ee3b"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-10T17:55:10Z",
          "updatedAt": "2023-01-10T17:55:11Z",
          "comments": [
            {
              "originalPosition": 82,
              "body": "```suggestion\r\nWherever End-User data is stored, it represents a potential\r\ntarget for an attacker. This target can be of particularly\r\n```",
              "createdAt": "2023-01-10T17:55:10Z",
              "updatedAt": "2023-01-10T17:55:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5KEnar",
          "commit": {
            "abbreviatedOid": "208ee3b"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-10T17:56:09Z",
          "updatedAt": "2023-01-10T17:56:10Z",
          "comments": [
            {
              "originalPosition": 89,
              "body": "```suggestion\r\nA leak of such data risks revealing private data of End-Users\r\n```",
              "createdAt": "2023-01-10T17:56:10Z",
              "updatedAt": "2023-01-10T17:56:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5KEoBf",
          "commit": {
            "abbreviatedOid": "208ee3b"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-10T17:57:47Z",
          "updatedAt": "2023-01-10T18:02:34Z",
          "comments": [
            {
              "originalPosition": 97,
              "body": "SHOULD or RECOMMENDED TO?",
              "createdAt": "2023-01-10T17:57:47Z",
              "updatedAt": "2023-01-10T18:02:34Z"
            },
            {
              "originalPosition": 75,
              "body": "```suggestion\r\nVerifiers need to ensure that they are not using expired or revoked keys\r\nfor signature verification using reasonable and appropriate method for the given\r\nkey distribution method.\r\n```",
              "createdAt": "2023-01-10T18:00:04Z",
              "updatedAt": "2023-01-10T18:02:34Z"
            },
            {
              "originalPosition": 95,
              "body": "Is this what is meant? I was struggling with `because the authenticity of the authority-signed data is easy to verify,`\r\n\r\n```suggestion\r\nto third parties. As discussed in (#holder_binding_security),\r\nbecause the authenticity of the authority-signed data is easy to verify,\r\nleaked SD-JWTs may also allow attackers to impersonate Holders, unless Holder\r\nBinding is enforced and the attacker does not have access to the\r\nHolder's cryptographic keys. For these reasons,\r\nthe data may have a high monetary value on black markets.\r\n```",
              "createdAt": "2023-01-10T18:02:29Z",
              "updatedAt": "2023-01-10T18:02:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5KIArl",
          "commit": {
            "abbreviatedOid": "208ee3b"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-11T10:01:46Z",
          "updatedAt": "2023-01-11T10:01:47Z",
          "comments": [
            {
              "originalPosition": 95,
              "body": "What I want to say is that the signature increases the value of the data (because anyone can verify that the data is authentic). ",
              "createdAt": "2023-01-11T10:01:46Z",
              "updatedAt": "2023-01-11T10:01:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5KIICC",
          "commit": {
            "abbreviatedOid": "208ee3b"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-11T10:20:36Z",
          "updatedAt": "2023-01-11T10:20:37Z",
          "comments": [
            {
              "originalPosition": 75,
              "body": "I think the original sentence is just fine.",
              "createdAt": "2023-01-11T10:20:36Z",
              "updatedAt": "2023-01-11T10:20:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5KIIG9",
          "commit": {
            "abbreviatedOid": "208ee3b"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-11T10:20:49Z",
          "updatedAt": "2023-01-11T10:20:49Z",
          "comments": [
            {
              "originalPosition": 97,
              "body": "That should not make a difference here.",
              "createdAt": "2023-01-11T10:20:49Z",
              "updatedAt": "2023-01-11T10:20:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5KJCOf",
          "commit": {
            "abbreviatedOid": "208ee3b"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-11T13:10:46Z",
          "updatedAt": "2023-01-11T13:10:46Z",
          "comments": [
            {
              "originalPosition": 97,
              "body": "per https://www.rfc-editor.org/rfc/rfc2119.html#section-3 RECOMMENDED and SHOULD are basically stating the same strength of requirement.  \"RECOMMENDED TO\" isn't a thing. ",
              "createdAt": "2023-01-11T13:10:46Z",
              "updatedAt": "2023-01-11T13:10:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5KJECQ",
          "commit": {
            "abbreviatedOid": "208ee3b"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-11T13:15:37Z",
          "updatedAt": "2023-01-11T13:15:37Z",
          "comments": [
            {
              "originalPosition": 75,
              "body": "The original sentence seemed okay to me too. And the suggested change isn't quite grammatically correct. ",
              "createdAt": "2023-01-11T13:15:37Z",
              "updatedAt": "2023-01-11T13:15:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5KKzwX",
          "commit": {
            "abbreviatedOid": "208ee3b"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-11T17:41:18Z",
          "updatedAt": "2023-01-11T17:41:18Z",
          "comments": [
            {
              "originalPosition": 75,
              "body": "maybe it's just me, but I just don't understand the meaning of the original sentence. can you please paraphrase in a grammatically correct way so that I don't have to spend 5min thinking about the meaning..?",
              "createdAt": "2023-01-11T17:41:18Z",
              "updatedAt": "2023-01-11T17:41:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5KPEgo",
          "commit": {
            "abbreviatedOid": "208ee3b"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-12T11:54:21Z",
          "updatedAt": "2023-01-12T11:54:21Z",
          "comments": [
            {
              "originalPosition": 95,
              "body": "```suggestion\r\nto third parties. Signed End-User data, the authenticity of which\r\ncan be easily verified by third parties, further exacerbates the risk.\r\nAs discussed in (#holder_binding_security), leaked\r\nSD-JWTs may also allow attackers to impersonate Holders unless Holder\r\nBinding is enforced and the attacker does not have access to the\r\nHolder's cryptographic keys. Altogether, leaked SD-JWT credentials may have\r\na high monetary value on black markets.\r\n```",
              "createdAt": "2023-01-12T11:54:21Z",
              "updatedAt": "2023-01-12T11:54:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5KPE1n",
          "commit": {
            "abbreviatedOid": "208ee3b"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-12T11:55:09Z",
          "updatedAt": "2023-01-12T11:55:09Z",
          "comments": [
            {
              "originalPosition": 89,
              "body": "I'd like to keep the notion that this sentence is not telling anything new. What about this?\r\n\r\n```suggestion\r\nNot surprisingly, a leak of such data risks revealing private data of End-Users\r\n```",
              "createdAt": "2023-01-12T11:55:09Z",
              "updatedAt": "2023-01-12T11:55:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5KPj7U",
          "commit": {
            "abbreviatedOid": "208ee3b"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-12T13:23:43Z",
          "updatedAt": "2023-01-12T13:23:44Z",
          "comments": [
            {
              "originalPosition": 75,
              "body": "```suggestion\r\nVerifiers need to ensure that they are not using expired or revoked keys\r\nfor signature verification using reasonable and appropriate means for the given\r\nkey-distribution method.\r\n```\r\n\r\nis that wording more straightforward?",
              "createdAt": "2023-01-12T13:23:43Z",
              "updatedAt": "2023-01-12T13:23:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Ku4Nw",
          "commit": {
            "abbreviatedOid": "b78d49f"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-18T16:12:56Z",
          "updatedAt": "2023-01-18T16:12:56Z",
          "comments": []
        }
      ]
    },
    {
      "number": 197,
      "id": "PR_kwDOHTmVzM5HF_rc",
      "title": "general applicability of SD-JWT",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/197",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "for #185 \r\nadd a bit more context/background to the intro about the indented general applicability of SD-JWT and the relation to JWT and the OAuth WG ",
      "createdAt": "2023-01-10T18:23:22Z",
      "updatedAt": "2023-01-12T13:55:19Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "c34d4795eeb7d4df5dc4278e5357452d780be761",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "bc/more-context-wrt-jwt-oauth",
      "headRefOid": "59f132878cbaf4de7a44bf6a3cbc5047d11efea6",
      "closedAt": "2023-01-12T12:02:33Z",
      "mergedAt": "2023-01-12T12:02:33Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "cbf26255918eee813a66338e29f0dfeb8ee5c40a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5KFAjU",
          "commit": {
            "abbreviatedOid": "762ba55"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-10T19:18:11Z",
          "updatedAt": "2023-01-10T19:18:11Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "```suggestion\r\nWeb Authorization Protocol (oauth) working group. However, while both JWT and SD-JWT\r\nhave potential OAuth 2.0 applications, their utility and application is certainly not constrained to OAuth 2.0.\r\n```",
              "createdAt": "2023-01-10T19:18:11Z",
              "updatedAt": "2023-01-10T19:20:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5KFBWb",
          "commit": {
            "abbreviatedOid": "762ba55"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-10T19:20:52Z",
          "updatedAt": "2023-01-10T19:20:56Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "```suggestion\r\nSD-JWTs defined in this document enable such selective disclosure JWT claims.\r\n```\r\n..?",
              "createdAt": "2023-01-10T19:20:53Z",
              "updatedAt": "2023-01-10T19:20:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5KFWYM",
          "commit": {
            "abbreviatedOid": "9a6fca1"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-10T20:27:25Z",
          "updatedAt": "2023-01-10T20:27:26Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "```suggestion\r\nSD-JWTs defined in this document enable such selective disclosure of JWT claims .\r\n```\r\n...?",
              "createdAt": "2023-01-10T20:27:25Z",
              "updatedAt": "2023-01-10T20:27:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5KHGw6",
          "commit": {
            "abbreviatedOid": "9a6fca1"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-11T07:04:47Z",
          "updatedAt": "2023-01-11T07:04:47Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5KHcKl",
          "commit": {
            "abbreviatedOid": "9a6fca1"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-11T08:24:39Z",
          "updatedAt": "2023-01-11T08:24:39Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "```suggestion\r\nSD-JWTs defined in this document enable such selective disclosure of JWT claims.\r\n```\r\n....?",
              "createdAt": "2023-01-11T08:24:39Z",
              "updatedAt": "2023-01-11T08:29:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5KHdGX",
          "commit": {
            "abbreviatedOid": "9a6fca1"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-11T08:27:26Z",
          "updatedAt": "2023-01-11T08:27:27Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "Shall we add something like \"... and this is why this specification in general does not use OAuth-specific terms like client and authorization server but instead more broadly applicable terms like Verifier and Holder\"?",
              "createdAt": "2023-01-11T08:27:26Z",
              "updatedAt": "2023-01-11T08:27:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5KI8F4",
          "commit": {
            "abbreviatedOid": "9a6fca1"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-11T12:55:22Z",
          "updatedAt": "2023-01-11T12:55:22Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "I know that was part of Hannes' question but I think that's more than should be said here. ",
              "createdAt": "2023-01-11T12:55:22Z",
              "updatedAt": "2023-01-11T12:55:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5KI9d2",
          "commit": {
            "abbreviatedOid": "9a6fca1"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-11T12:59:13Z",
          "updatedAt": "2023-01-11T12:59:13Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "i.e. I wanted to give some context for why this thing is coming out of the OAuth WG and state the general-purpose intent. But don't want to try and touch on each question/objection from the particular email from Hannes and don't want to get into specifics of how SD-JWT would be used w/ OAuth. ",
              "createdAt": "2023-01-11T12:59:13Z",
              "updatedAt": "2023-01-11T12:59:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5KPGoN",
          "commit": {
            "abbreviatedOid": "9a6fca1"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-12T12:00:52Z",
          "updatedAt": "2023-01-12T12:00:52Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "That works for me!",
              "createdAt": "2023-01-12T12:00:52Z",
              "updatedAt": "2023-01-12T12:00:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5KPHHD",
          "commit": {
            "abbreviatedOid": "59f1328"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-12T12:02:24Z",
          "updatedAt": "2023-01-12T12:02:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 201,
      "id": "PR_kwDOHTmVzM5HpaSU",
      "title": "Fix doc history",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/201",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "for #199 and as we noticed on our sync call today ",
      "createdAt": "2023-01-18T17:37:14Z",
      "updatedAt": "2023-06-04T21:50:49Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "8f530a248958057b28ebcf994092c83450e77de8",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "bc/fix-doc-history",
      "headRefOid": "f671950cc5b8d12d9cac91127e37bd8212b77240",
      "closedAt": "2023-01-19T12:51:17Z",
      "mergedAt": "2023-01-19T12:51:17Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "bae6caafc1100814cd4aac7e673db7f3317856fe"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5LKLa4",
          "commit": {
            "abbreviatedOid": "f671950"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-19T00:08:11Z",
          "updatedAt": "2023-01-19T00:08:11Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5LLcTO",
          "commit": {
            "abbreviatedOid": "f671950"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-19T08:13:25Z",
          "updatedAt": "2023-01-19T08:13:25Z",
          "comments": []
        }
      ]
    },
    {
      "number": 202,
      "id": "PR_kwDOHTmVzM5I6lPw",
      "title": "Independent and Secret Salts",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/202",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Makes these two points in John Mattsson's review explicit:\r\n\r\n> - The salts need to be secret. Otherwise, an attacker can guess and verify claims.\r\n> - The salts need to be independent of each other.  Otherwise, a Verifier can guess claims.",
      "createdAt": "2023-01-31T13:45:10Z",
      "updatedAt": "2023-02-03T07:52:23Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "bae6caafc1100814cd4aac7e673db7f3317856fe",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/independent-salts",
      "headRefOid": "a300bdbbbaed00f094b1a7cefe1875c7abc80687",
      "closedAt": "2023-02-03T07:52:23Z",
      "mergedAt": "2023-02-03T07:52:23Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "218b08052d934f4eb997dbe01595b089769ba12d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5MJhKd",
          "commit": {
            "abbreviatedOid": "0c66a10"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-31T16:17:13Z",
          "updatedAt": "2023-01-31T16:17:14Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "salt is part of the disclosures, so maybe something like:\r\n```suggestion\r\nnone, multiple, or all Disclosures. The Holder MUST NOT send Disclosures,\r\nespeciallt salt values, for data that should not be revealed to the Verifier.\r\n```",
              "createdAt": "2023-01-31T16:17:13Z",
              "updatedAt": "2023-01-31T16:17:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5MJjQj",
          "commit": {
            "abbreviatedOid": "0c66a10"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-31T16:21:56Z",
          "updatedAt": "2023-01-31T16:21:56Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "do we need a statement saying that the holder/wallet must protect Disclosures, and in particular, salts with particular care? I mean, the spec of disclosing them is not the only place when salts can get to the hands on an attacker..",
              "createdAt": "2023-01-31T16:21:56Z",
              "updatedAt": "2023-01-31T16:21:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5MJluV",
          "commit": {
            "abbreviatedOid": "0c66a10"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-31T16:26:33Z",
          "updatedAt": "2023-01-31T16:26:33Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "probably it is this sentence that would benefit from clarifying?: \"The salt value MUST be unique for each claim that is to be selectively disclosed.\"\r\nto something like \"A new salt MUST be chosen for each claim independently from other salts.\" in a change below?",
              "createdAt": "2023-01-31T16:26:33Z",
              "updatedAt": "2023-01-31T16:26:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5MRNwg",
          "commit": {
            "abbreviatedOid": "0c66a10"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-01T17:38:39Z",
          "updatedAt": "2023-02-01T17:38:39Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "\"especially\" makes it sound like the salt is somehow more sensitive than the claim name/value. Which is not the case at all. The salt only adds randomness to the hash input  to make it infeasible to \"reverse\" the hash value by enumerating potential claim name/values into the hash function. The salt does nothing from the privacy perspective, if the claim is revealed. ",
              "createdAt": "2023-02-01T17:38:39Z",
              "updatedAt": "2023-02-01T17:39:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5MRPWT",
          "commit": {
            "abbreviatedOid": "0c66a10"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-01T17:43:02Z",
          "updatedAt": "2023-02-01T17:43:03Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "maybe something like this, which acknowledges that salt is part of the disclosure but doesn't over emphasize it: \r\n```suggestion\r\nnone, multiple, or all Disclosures. The Holder MUST NOT send Disclosures\r\n(including salt values) for data that should not be revealed to the Verifier.\r\n```\r\n?",
              "createdAt": "2023-02-01T17:43:02Z",
              "updatedAt": "2023-02-01T17:43:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5MRRSk",
          "commit": {
            "abbreviatedOid": "0c66a10"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-01T17:48:22Z",
          "updatedAt": "2023-02-01T17:48:23Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Being pedantic \"MUST NOT be disclosed to third parties except the Holder\" suggests that it can't be sent to any Verifier. I do realize this is in the context of the Issuer creating the thing but can see easy confusion. ",
              "createdAt": "2023-02-01T17:48:22Z",
              "updatedAt": "2023-02-01T17:48:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5MRUpi",
          "commit": {
            "abbreviatedOid": "0c66a10"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-01T17:57:38Z",
          "updatedAt": "2023-02-01T17:57:39Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "maybe something like this? I'm not sure anything needs to be said here or this is the right place to say it. But if so, something like this would (to me anyway) avoid potential confusing of a statement like \"The salt MUST NOT be disclosed to third parties except the Holder\" that could be read out of context.  \r\n\r\n```suggestion\r\n   1. A salt value. See (#salt-entropy) and (#salt_minlength) for security considerations. The salt value MUST be unique for each claim that is to be selectively disclosed. It is RECOMMENDED to base64url-encode the salt value, producing a string. Any other type that is allowed in JSON MAY be used, e.g., a number. The Issuer MUST NOT disclose the salt value to any party other than the Holder.\r\n```",
              "createdAt": "2023-02-01T17:57:39Z",
              "updatedAt": "2023-02-01T18:02:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5MRsEM",
          "commit": {
            "abbreviatedOid": "0c66a10"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-01T19:06:42Z",
          "updatedAt": "2023-02-01T19:06:43Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "I wanted to say something like \"don't reveal the disclosures, but also don't take the salt values out of them and reveal them separately\". \r\n\r\nAlso I just notice that I don't like the 'should' in the original sentence.\r\n\r\n```suggestion\r\nnone, multiple, or all Disclosures. For data that the Holder does not want to reveal\r\nto the Verifier, the Holder MUST NOT send Disclosures or reveal the salt values in any\r\nother way.\r\n```",
              "createdAt": "2023-02-01T19:06:42Z",
              "updatedAt": "2023-02-01T19:06:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5MRtV0",
          "commit": {
            "abbreviatedOid": "0c66a10"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-01T19:08:53Z",
          "updatedAt": "2023-02-01T19:08:54Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "@Sakurann I think this is now sufficiently clear from the rest of the text.",
              "createdAt": "2023-02-01T19:08:53Z",
              "updatedAt": "2023-02-01T19:08:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5MRvlO",
          "commit": {
            "abbreviatedOid": "d108b96"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-01T19:13:55Z",
          "updatedAt": "2023-02-01T19:14:06Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Would you keep the other sentence that I added further below?",
              "createdAt": "2023-02-01T19:13:55Z",
              "updatedAt": "2023-02-01T19:14:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5MRyIA",
          "commit": {
            "abbreviatedOid": "0c66a10"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-01T19:21:48Z",
          "updatedAt": "2023-02-01T19:21:48Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "I can live with that. ",
              "createdAt": "2023-02-01T19:21:48Z",
              "updatedAt": "2023-02-01T19:21:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5MUZlK",
          "commit": {
            "abbreviatedOid": "0c66a10"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-02T06:35:48Z",
          "updatedAt": "2023-02-02T06:35:49Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "me too",
              "createdAt": "2023-02-02T06:35:48Z",
              "updatedAt": "2023-02-02T06:35:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Marvi",
          "commit": {
            "abbreviatedOid": "a300bdb"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-02T23:28:12Z",
          "updatedAt": "2023-02-02T23:28:12Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5MbzXM",
          "commit": {
            "abbreviatedOid": "a300bdb"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-03T06:41:45Z",
          "updatedAt": "2023-02-03T06:41:45Z",
          "comments": []
        }
      ]
    },
    {
      "number": 204,
      "id": "PR_kwDOHTmVzM5JCuPY",
      "title": "JSON RFC7159 was obsoleted by RFC8259",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/204",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "this was pointed out to me during the conversation I mentioned here https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/175#issuecomment-1412626333",
      "createdAt": "2023-02-01T20:19:49Z",
      "updatedAt": "2023-02-02T23:19:44Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "bae6caafc1100814cd4aac7e673db7f3317856fe",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "bc/8259obs7159",
      "headRefOid": "297ed0c31663e97973c27515c269c25807a2301b",
      "closedAt": "2023-02-02T23:19:39Z",
      "mergedAt": "2023-02-02T23:19:39Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "4bb80f5dfd448bb76a5eb722879d35e5d0e80993"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5MTdvL",
          "commit": {
            "abbreviatedOid": "297ed0c"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-02T02:17:14Z",
          "updatedAt": "2023-02-02T02:17:14Z",
          "comments": []
        }
      ]
    },
    {
      "number": 205,
      "id": "PR_kwDOHTmVzM5JPf9k",
      "title": "move (& rename) the c14n challenges section to an appendix",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/205",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Rename and move the c14n section to an appendix. Also add a paragraph attempting to provide a bit more context in the new location. \r\n\r\nfor #175 ",
      "createdAt": "2023-02-03T22:43:00Z",
      "updatedAt": "2023-06-04T21:50:33Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "3fe80e9796bd49cd5f9578ea3f2faf45dff5c509",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "bc/move-c14n",
      "headRefOid": "d7c06350b83787caafe631864ab8d6e0c9131885",
      "closedAt": "2023-02-09T19:01:36Z",
      "mergedAt": "2023-02-09T19:01:36Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "fcf3315d434913db48ab5683f371c51dd251f8d5"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm not thrilled with the section name either but thought \"The Challenge of Canonicalization\" felt really out of place in an appendix so wanted to change it. \"Disclosure Format Considerations\" was the best I could come up with. ",
          "createdAt": "2023-02-05T13:31:32Z",
          "updatedAt": "2023-02-05T13:31:32Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Looks good to me, but we should probably reference the new appendix somewhere in the main body.",
          "createdAt": "2023-02-06T15:57:14Z",
          "updatedAt": "2023-02-06T15:57:14Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> Looks good to me, but we should probably reference the new appendix somewhere in the main body.\r\n\r\nPlease add such a reference wherever you think is appropriate. \r\n",
          "createdAt": "2023-02-06T19:11:01Z",
          "updatedAt": "2023-02-06T19:11:01Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> Looks good to me, but we should probably reference the new appendix somewhere in the main body. \r\n\r\nwent ahead and did that with 0db6e9865fedf8437e75b9f2eb9d12fc52ee48f1 \r\n\r\n",
          "createdAt": "2023-02-09T19:01:01Z",
          "updatedAt": "2023-02-09T19:01:01Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Thank you!",
          "createdAt": "2023-02-10T14:55:49Z",
          "updatedAt": "2023-02-10T14:55:49Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5MilmM",
          "commit": {
            "abbreviatedOid": "cc80b59"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I wasn't totally sure about the title \"Disclosure Format Considerations\", but can't think of a better one and after re-reading the content, I think it captures the goal.",
          "createdAt": "2023-02-05T01:29:45Z",
          "updatedAt": "2023-02-05T01:29:45Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5Mnyup",
          "commit": {
            "abbreviatedOid": "cc80b59"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-06T15:56:31Z",
          "updatedAt": "2023-02-06T15:56:31Z",
          "comments": []
        }
      ]
    },
    {
      "number": 206,
      "id": "PR_kwDOHTmVzM5JPsuN",
      "title": "no MACs",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/206",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "More explicitly state that SD-JWTs have to be signed asymmetrically (no MAC and no `none`)\r\n\r\nOne item out of John Mattsson's review: https://mailarchive.ietf.org/arch/msg/oauth/QhyXsK8ZXFBbkIcH5LNjMPC1zX4/",
      "createdAt": "2023-02-03T23:59:09Z",
      "updatedAt": "2023-06-04T21:50:46Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "218b08052d934f4eb997dbe01595b089769ba12d",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "bc/return-of-the-mac",
      "headRefOid": "cee17fbefc50701cbc8e9246410fd668ca538dfb",
      "closedAt": "2023-02-06T16:31:20Z",
      "mergedAt": "2023-02-06T16:31:20Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "0c6b84a0b538431f54f5aefb9484f7a1feb089d9"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5MiiJL",
          "commit": {
            "abbreviatedOid": "7df467f"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-04T22:20:43Z",
          "updatedAt": "2023-02-04T22:20:49Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Are there any asymmetric digital signatures that are not registered in IANA? Are we prohibiting those?",
              "createdAt": "2023-02-04T22:20:43Z",
              "updatedAt": "2023-02-04T22:20:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Mi4wy",
          "commit": {
            "abbreviatedOid": "7df467f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-05T13:18:26Z",
          "updatedAt": "2023-02-05T13:18:26Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "That's a good question. There might be unregistered ones (JWS allows for it https://datatracker.ietf.org/doc/html/rfc7515#section-4.1.1) and this text would prohibit their use in SD-JWT. Which is kind of an edge case but probably not what we want. I borrowed that text from DPoP where an AD had suggested it be more restrictive with respect to the registry. But I didn't love it there and your question reminds me of that and that it's probably less appropriate here. I'll rephrase this sentence so as not to be prohibitive. ",
              "createdAt": "2023-02-05T13:18:26Z",
              "updatedAt": "2023-02-05T13:18:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Mi5A2",
          "commit": {
            "abbreviatedOid": "7df467f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-05T13:24:51Z",
          "updatedAt": "2023-02-05T13:24:51Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nIt MUST use a JWS asymmetric digital signature algorithm and\r\nMUST NOT use `none` or an identifier for a symmetric algorithm (MAC).\r\n```",
              "createdAt": "2023-02-05T13:24:51Z",
              "updatedAt": "2023-02-05T13:24:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5MnzUi",
          "commit": {
            "abbreviatedOid": "cee17fb"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-06T15:57:53Z",
          "updatedAt": "2023-02-06T15:57:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 207,
      "id": "PR_kwDOHTmVzM5JWakn",
      "title": "a little more on Choice of a Hash Algorithm ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/207",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "A bit more in security considerations for Choice of a Hash Algorithm (1st & 2nd preimage resistant and not majorly truncated) for issue  #183",
      "createdAt": "2023-02-06T15:22:30Z",
      "updatedAt": "2023-02-06T19:19:27Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "218b08052d934f4eb997dbe01595b089769ba12d",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "not-all-hashes",
      "headRefOid": "894cf577886736a7518c8649ae53d6c40186dbc2",
      "closedAt": "2023-02-06T19:19:27Z",
      "mergedAt": "2023-02-06T19:19:27Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "3fe80e9796bd49cd5f9578ea3f2faf45dff5c509"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "While looking at this I noticed https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-02.html#name-hash-function-claim only allows hash algs from the registry.  https://github.com/oauth-wg/oauth-selective-disclosure-jwt/commit/b836ab1e9f8001221ed5245d75faa90680bc86d6 removed the JOSE HMAC stuff but also removed allowing the hash alg to be \"a value defined in another specification and/or profile of this specification\" which I thought we wanted to have - for Christian's type use cases and extensibility in general. \r\n\r\nThis isn't the right place for a discussion but wanted to note it somewhere before our call.\r\n",
          "createdAt": "2023-02-06T15:57:18Z",
          "updatedAt": "2023-02-06T15:57:18Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I think we intentionally removed \u201ca value defined in another specification and/or profile of this specification\u201d Because using that would require a separate profile and not just defining an identifier.",
          "createdAt": "2023-02-06T16:26:05Z",
          "updatedAt": "2023-02-06T16:26:05Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5Mnixz",
          "commit": {
            "abbreviatedOid": "1f532b7"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-06T15:26:56Z",
          "updatedAt": "2023-02-06T15:27:03Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "```suggestion\r\nresult in a matching digest, respectively. \r\n\r\nHash algorithms that do not meet the aforementioned requirements MUST NOT be used. \r\nInclusion in the \"Named Information Hash Algorithm\" registry [@IANA.Hash.Algorithms] \r\nalone does not indicate a hash algorithm's suitability for use in SD-JWT (it contains several\r\nheavily truncated digests, such as `sha-256-32` and `sha-256-64`, which are unfit for security\r\napplications).\r\n```",
              "createdAt": "2023-02-06T15:26:56Z",
              "updatedAt": "2023-02-06T15:27:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Mn1Nr",
          "commit": {
            "abbreviatedOid": "ef207f4"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-02-06T16:02:02Z",
          "updatedAt": "2023-02-06T16:03:27Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\na particular digest, and, for any salt and claim value pair, it is infeasible to find a different salt and claim value pair that\r\nresult in the same digest, respectively.\r\n```",
              "createdAt": "2023-02-06T16:02:02Z",
              "updatedAt": "2023-02-06T16:03:27Z"
            },
            {
              "originalPosition": 5,
              "body": "Is first and second preimage resistance a common term? I usually see \"preimage resistant\" and \"second-preimage resistant\".",
              "createdAt": "2023-02-06T16:03:10Z",
              "updatedAt": "2023-02-06T16:03:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5MoBpf",
          "commit": {
            "abbreviatedOid": "76b3950"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-06T16:28:47Z",
          "updatedAt": "2023-02-06T16:28:48Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nFor the security of this scheme, the hash algorithm is required to be preimage resistant and second-preimage \r\n```",
              "createdAt": "2023-02-06T16:28:47Z",
              "updatedAt": "2023-02-06T16:28:48Z"
            }
          ]
        }
      ]
    },
    {
      "number": 209,
      "id": "PR_kwDOHTmVzM5JqhIo",
      "title": "Tidy up example in Appendix 4",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/209",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "basically removing the example JWT header JSON (which aren't shown elsewhere FWIW) that had a fictitious `typ` and meaningless `kid` and didn't add anything to understanding/following the example ",
      "createdAt": "2023-02-09T23:26:05Z",
      "updatedAt": "2023-06-04T21:50:35Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "fcf3315d434913db48ab5683f371c51dd251f8d5",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "bc/tidy-up-e4",
      "headRefOid": "995a5e9dc3f5659d70514529eb5cbd57e8c99a7f",
      "closedAt": "2023-02-10T14:56:41Z",
      "mergedAt": "2023-02-10T14:56:41Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "8f91205cc44046cf77b67e0e96db3633a260cf5b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5NFGFJ",
          "commit": {
            "abbreviatedOid": "995a5e9"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "we may want to align the language around:\r\n\r\n\"The SD-JWT payload is as follows:\"\r\nvs\r\n\"The following shows the resulting SD-JWT payload:\"\r\netc.\r\n\r\nbut agree in principle.",
          "createdAt": "2023-02-10T13:31:55Z",
          "updatedAt": "2023-02-10T13:31:55Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5NFn_p",
          "commit": {
            "abbreviatedOid": "995a5e9"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-10T14:56:31Z",
          "updatedAt": "2023-02-10T14:56:31Z",
          "comments": []
        }
      ]
    },
    {
      "number": 210,
      "id": "PR_kwDOHTmVzM5JuwiL",
      "title": "Example PID",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/210",
      "state": "CLOSED",
      "author": "tlodderstedt",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Here is an example of a PID (Person Identification Data) (see https://digital-strategy.ec.europa.eu/en/library/european-digital-identity-wallet-architecture-and-reference-framework)\r\n\r\nThis example has an array called `binding`, where every object contains the data for a certain holder binding method (cryptographic and biometric). My assumption is that a holder would only disclose the data for one method with a certain verifier, so this example also illustrates the need to be able to selectively disclose individual objects from an array.",
      "createdAt": "2023-02-10T16:46:38Z",
      "updatedAt": "2023-06-28T17:52:25Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "8f91205cc44046cf77b67e0e96db3633a260cf5b",
      "headRepository": "tlodderstedt/oauth-selective-disclosure-jwt",
      "headRefName": "example-pid",
      "headRefOid": "496a0ecee2b8ffa6568805268f24925a6412d981",
      "closedAt": "2023-06-28T17:52:25Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "the formatting of the yml file has changed a bit. I can do a PR conformant to a new ver. suggest merging after that to have these examples in the repo even if they are not used in the actual spec text.",
          "createdAt": "2023-06-20T03:57:27Z",
          "updatedAt": "2023-06-20T03:57:27Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "closing in favor of #304",
          "createdAt": "2023-06-28T17:52:25Z",
          "updatedAt": "2023-06-28T17:52:25Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 211,
      "id": "PR_kwDOHTmVzM5Ju2DQ",
      "title": "Example EAA ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/211",
      "state": "CLOSED",
      "author": "tlodderstedt",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is an example of a \"Electronic Attestation of Attributes\" (see https://digital-strategy.ec.europa.eu/en/library/european-digital-identity-wallet-architecture-and-reference-framework). \r\n\r\nThe example if a diploma. The schema is based on the EBSi schema for diplomas (but uses plain JSON). The credential uses claims based holder binding, i.e. it contains a declaration of the name and date of birth of the legitimate holder. The holder needs to prove this claims separately from the diploma. She can, for example, use the PID from PR #210. ",
      "createdAt": "2023-02-10T17:06:58Z",
      "updatedAt": "2023-06-28T17:54:45Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "8f91205cc44046cf77b67e0e96db3633a260cf5b",
      "headRepository": "tlodderstedt/oauth-selective-disclosure-jwt",
      "headRefName": "example-eaa",
      "headRefOid": "d53e200e917f366f1e83c24832aba1c124075bf5",
      "closedAt": "2023-06-28T17:54:44Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "the formatting of the yml file has changed a bit. I can do a PR conformant to a new ver. suggest merging after that to have these examples in the repo even if they are not used in the actual spec text.",
          "createdAt": "2023-06-20T03:57:15Z",
          "updatedAt": "2023-06-20T03:57:15Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "moving to sd-jwt-vc repo",
          "createdAt": "2023-06-28T17:54:44Z",
          "updatedAt": "2023-06-28T17:54:44Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 212,
      "id": "PR_kwDOHTmVzM5Ju4Hr",
      "title": "Example JSON-LD",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/212",
      "state": "MERGED",
      "author": "tlodderstedt",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is an example of a JSON-LD based credential conveyed in a SD-JWT. SD-JWT provides integrity, authenticity, and selective disclosure for the enclosed JSOMN-LD object. The payload (after processing the SD-JWT) is a JSON-LD object that can be fed into a JSON-LD processor. \r\nThe concrete example is a Vaccination Certificate according to https://w3c-ccg.github.io/vaccination-vocab/. ",
      "createdAt": "2023-02-10T17:14:42Z",
      "updatedAt": "2023-03-12T05:49:56Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "8f91205cc44046cf77b67e0e96db3633a260cf5b",
      "headRepository": "tlodderstedt/oauth-selective-disclosure-jwt",
      "headRefName": "example-jsonld",
      "headRefOid": "dcdb62189b3786318e1307c57a58af2f79fc66ae",
      "closedAt": "2023-03-12T05:49:55Z",
      "mergedAt": "2023-03-12T05:49:55Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "63305b3d305f1b3fa901ed95bc3924c33686d619"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5PneZn",
          "commit": {
            "abbreviatedOid": "b9725f0"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-10T23:38:29Z",
          "updatedAt": "2023-03-10T23:38:29Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "`issuer` has to match `iss`.\r\n\r\n```suggestion\r\n  \"issuer\": \"https://example.com/issuer\",\r\n```",
              "createdAt": "2023-03-10T23:38:29Z",
              "updatedAt": "2023-03-10T23:58:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Pnecr",
          "commit": {
            "abbreviatedOid": "b9725f0"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-10T23:38:54Z",
          "updatedAt": "2023-03-10T23:38:55Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\n  \"issuer\": \"https://example.com/issuer\",\r\n```",
              "createdAt": "2023-03-10T23:38:55Z",
              "updatedAt": "2023-03-10T23:38:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Pneeq",
          "commit": {
            "abbreviatedOid": "b9725f0"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-10T23:39:11Z",
          "updatedAt": "2023-03-10T23:39:12Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\n  \"issuer\": \"https://example.com/issuer\",\r\n```",
              "createdAt": "2023-03-10T23:39:12Z",
              "updatedAt": "2023-03-10T23:39:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PnegW",
          "commit": {
            "abbreviatedOid": "b9725f0"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-10T23:39:25Z",
          "updatedAt": "2023-03-10T23:39:26Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\n    \"issuer\": \"https://example.com/issuer\",\r\n```",
              "createdAt": "2023-03-10T23:39:25Z",
              "updatedAt": "2023-03-10T23:39:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Pneom",
          "commit": {
            "abbreviatedOid": "b9725f0"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-10T23:40:33Z",
          "updatedAt": "2023-03-10T23:40:34Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "```suggestion\r\n  \"nbf\": 1516239022,\r\n```\r\n\r\nIt's not `iat`, but `nbf` per `nbf MUST represent issuanceDate, encoded as a UNIX timestamp (NumericDate).` ",
              "createdAt": "2023-03-10T23:40:33Z",
              "updatedAt": "2023-03-10T23:40:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Pnl7n",
          "commit": {
            "abbreviatedOid": "b9725f0"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "[passed JSON-LD playground](https://json-ld.org/playground/#startTab=tab-expanded&json-ld=%7B%22%40context%22%3A%5B%22https%3A%2F%2Fwww.w3.org%2F2018%2Fcredentials%2Fv1%22%2C%22https%3A%2F%2Fw3id.org%2Fvaccination%2Fv1%22%5D%2C%22type%22%3A%5B%22VerifiableCredential%22%2C%22VaccinationCertificate%22%5D%2C%22issuer%22%3A%22https%3A%2F%2Fexample.com%2Fjdoe%22%2C%22issuanceDate%22%3A%222023-02-09T11%3A01%3A59Z%22%2C%22expirationDate%22%3A%222028-02-08T11%3A01%3A59Z%22%2C%22name%22%3A%22COVID-19%20Vaccination%20Certificate%22%2C%22description%22%3A%22COVID-19%20Vaccination%20Certificate%22%2C%22credentialSubject%22%3A%7B%22vaccine%22%3A%7B%22type%22%3A%22Vaccine%22%2C%22atcCode%22%3A%22J07BX03%22%2C%22medicinalProductName%22%3A%22COVID-19%20Vaccine%20Moderna%22%2C%22marketingAuthorizationHolder%22%3A%22Moderna%20Biotech%22%7D%2C%22nextVaccinationDate%22%3A%222021-08-16T13%3A40%3A12Z%22%2C%22countryOfVaccination%22%3A%22GE%22%2C%22dateOfVaccination%22%3A%222021-06-23T13%3A40%3A12Z%22%2C%22order%22%3A%223%2F3%22%2C%22recipient%22%3A%7B%22type%22%3A%22VaccineRecipient%22%2C%22gender%22%3A%22Female%22%2C%22birthDate%22%3A%221961-08-17%22%2C%22givenName%22%3A%22Marion%22%2C%22familyName%22%3A%22Mustermann%22%7D%2C%22type%22%3A%22VaccinationEvent%22%2C%22administeringCentre%22%3A%22Praxis%20Sommergarten%22%2C%22batchNumber%22%3A%221626382736%22%2C%22healthProfessional%22%3A%22883110000015376%22%7D%7D) with the below changes",
          "createdAt": "2023-03-11T00:45:58Z",
          "updatedAt": "2023-03-11T00:47:17Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\n        \"https://w3id.org/vaccination/v1\"\r\n```",
              "createdAt": "2023-03-11T00:45:58Z",
              "updatedAt": "2023-03-11T00:46:59Z"
            },
            {
              "originalPosition": 21,
              "body": "```suggestion\r\n            \"marketingAuthorizationHolder\": \"Moderna Biotech\"\r\n```",
              "createdAt": "2023-03-11T00:46:07Z",
              "updatedAt": "2023-03-11T00:46:59Z"
            },
            {
              "originalPosition": 33,
              "body": "```suggestion\r\n            \"familyName\": \"Mustermann\"\r\n```",
              "createdAt": "2023-03-11T00:46:15Z",
              "updatedAt": "2023-03-11T00:46:59Z"
            },
            {
              "originalPosition": 39,
              "body": "```suggestion\r\n      }\r\n```",
              "createdAt": "2023-03-11T00:46:22Z",
              "updatedAt": "2023-03-11T00:46:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Pn7BN",
          "commit": {
            "abbreviatedOid": "b9725f0"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-11T13:31:46Z",
          "updatedAt": "2023-03-11T13:31:47Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "I think the JWT claims should be removed/be replaced by JSON-LD claims (like iss must be issuer, iat must be issuanceDate). ",
              "createdAt": "2023-03-11T13:31:47Z",
              "updatedAt": "2023-03-11T13:31:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PoUAY",
          "commit": {
            "abbreviatedOid": "dcdb621"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "thank you - Looks good.",
          "createdAt": "2023-03-12T05:49:06Z",
          "updatedAt": "2023-03-12T05:49:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 216,
      "id": "PR_kwDOHTmVzM5KjhdL",
      "title": "use example domain in email in simple_structured examples",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/216",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "for #214 \r\nchange the domain of the email from \"nihon.com\" to \"example.jp\" in simple_structured.yml and simple_structured_with_decoys.yml and update the associated examples with the sd_jwt tooling ",
      "createdAt": "2023-02-22T21:49:07Z",
      "updatedAt": "2023-06-04T21:50:31Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "8f91205cc44046cf77b67e0e96db3633a260cf5b",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "bc/example-domain-in-email",
      "headRefOid": "1a342fd85da56e5482a74b982e9e185cfc49af8d",
      "closedAt": "2023-02-27T08:15:06Z",
      "mergedAt": "2023-02-27T08:15:06Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "9df497b93097bca06babe51994ddaa80faf985f8"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "borrowed from update-all-examples.sh, I used `sd_jwt sd_jwt/examples/simple_structured.yml --output-dir ./examples --nonce XZOUco1u_gEPknxS78sWWg --iat 1516239022 --exp 1516247022 --no-randomness` (also simple_structured_with_decoys.yml) but seem to have gotten all new salts ",
          "createdAt": "2023-02-22T21:56:31Z",
          "updatedAt": "2023-02-22T21:56:31Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5OH5ch",
          "commit": {
            "abbreviatedOid": "1a342fd"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-23T06:56:43Z",
          "updatedAt": "2023-02-23T06:56:43Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5OYoeB",
          "commit": {
            "abbreviatedOid": "1a342fd"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-27T08:14:59Z",
          "updatedAt": "2023-02-27T08:14:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 217,
      "id": "PR_kwDOHTmVzM5Ks7Ty",
      "title": "Remove the notational stuff from the Concepts section",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/217",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Remove the notational stuff from the Concepts section keeping the text explanations mostly unchanged (related to #203 #86)",
      "createdAt": "2023-02-24T13:41:13Z",
      "updatedAt": "2023-03-01T00:11:01Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "aa7da4908211bc7f10d0313959fa38bdf3a89c39",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "bc/concepts-section",
      "headRefOid": "c0f6caa21b4b40fafb9c0a9a2217ae0c92356587",
      "closedAt": "2023-03-01T00:10:54Z",
      "mergedAt": "2023-03-01T00:10:54Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "c8bfbad0798b7aaf23696f0f7d311bca011f2571"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "thanks to the magic of the tooling that I don't really understand, a preview of this can be seen https://drafts.oauth.net/oauth-selective-disclosure-jwt/bc/concepts-section/draft-ietf-oauth-selective-disclosure-jwt.html#name-concepts ",
          "createdAt": "2023-02-24T16:51:00Z",
          "updatedAt": "2023-02-24T16:51:00Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Maybe the section titles were not really good from the beginning or they are not very fitting now. Shall we rename as follows?\r\n\r\nFrom:\r\n> 4. Concepts\r\n> 4.1.  Creating an SD-JWT\r\n> 4.2.  Creating Holder-Selected Disclosures\r\n> 4.3.  Optional Holder Binding\r\n> 4.4.  Verifying Holder-Selected Disclosures\r\n\r\nTo:\r\n\r\n> 4. Concepts\r\n> 4.1.  SD-JWT and Disclosures\r\n> 4.2.  Disclosing to a Verifier\r\n> 4.3.  Optional Holder Binding\r\n> 4.4.  Verification\r\n",
          "createdAt": "2023-02-27T08:14:18Z",
          "updatedAt": "2023-02-27T08:14:18Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, those section titles are indeed better. I'll update. ",
          "createdAt": "2023-02-27T13:20:21Z",
          "updatedAt": "2023-02-27T13:20:21Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5OSnIK",
          "commit": {
            "abbreviatedOid": "861a109"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Just a typo, otherwise looks good to me! Thank you!",
          "createdAt": "2023-02-24T14:13:59Z",
          "updatedAt": "2023-02-24T14:19:36Z",
          "comments": [
            {
              "originalPosition": 71,
              "body": "Thee shalt use holder binding for thee must not blindly trust the credential!",
              "createdAt": "2023-02-24T14:13:59Z",
              "updatedAt": "2023-02-24T14:19:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5OS2_v",
          "commit": {
            "abbreviatedOid": "861a109"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-24T14:38:35Z",
          "updatedAt": "2023-02-24T14:38:36Z",
          "comments": [
            {
              "originalPosition": 71,
              "body": "```suggestion\r\nCryptographic Holder Binding is an optional feature, but when required by the use-case, the SD-JWT must contain information about key material controlled by the Holder.\r\n```",
              "createdAt": "2023-02-24T14:38:35Z",
              "updatedAt": "2023-02-24T14:38:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Ogxhd",
          "commit": {
            "abbreviatedOid": "10b660f"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-28T10:22:55Z",
          "updatedAt": "2023-02-28T10:22:55Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5OjagC",
          "commit": {
            "abbreviatedOid": "10b660f"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-28T15:43:06Z",
          "updatedAt": "2023-02-28T15:58:24Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "```suggestion\r\nAn SD-JWT, at its core, is a digitally signed JSON document containing digests over the selectively disclosable claims with the Disclosures outside the document.\r\n```",
              "createdAt": "2023-02-28T15:43:07Z",
              "updatedAt": "2023-02-28T15:58:25Z"
            },
            {
              "originalPosition": 15,
              "body": "- I don't understand what `the clear-text claims as Disclosures` means\r\n- `(per claim: a random salt, the claim name and the claim value)` was also confusing to me.",
              "createdAt": "2023-02-28T15:43:43Z",
              "updatedAt": "2023-02-28T15:58:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Ojlt4",
          "commit": {
            "abbreviatedOid": "10b660f"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-28T16:01:44Z",
          "updatedAt": "2023-02-28T16:01:44Z",
          "comments": [
            {
              "originalPosition": 62,
              "body": "```suggestion\r\nTo disclose to a Verifier a subset of the SD-JWT claim values, a Holder sends only the Disclosures of those selectively released claims to the Verifier along with the SD-JWT in the Combined Format for Presentation.\r\n```",
              "createdAt": "2023-02-28T16:01:44Z",
              "updatedAt": "2023-02-28T16:01:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5OjmWt",
          "commit": {
            "abbreviatedOid": "10b660f"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-28T16:02:38Z",
          "updatedAt": "2023-02-28T16:02:39Z",
          "comments": [
            {
              "originalPosition": 73,
              "body": "```suggestion\r\nHolder Binding is an optional feature. For example, when Cryptographic Holder Binding is required by the use-case, the SD-JWT must contain information about the key material controlled by the Holder.\r\n```\r\nI think it can be biometric Holder Binding too",
              "createdAt": "2023-02-28T16:02:38Z",
              "updatedAt": "2023-02-28T17:15:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Omi0E",
          "commit": {
            "abbreviatedOid": "c0f6caa"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-28T21:59:15Z",
          "updatedAt": "2023-02-28T21:59:15Z",
          "comments": []
        }
      ]
    },
    {
      "number": 220,
      "id": "PR_kwDOHTmVzM5K0TNp",
      "title": "Re-curse SD-JWT",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/220",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "This PR enables recursive SD-JWTs (i.e., Disclosures containing digests pointing to other Disclosures).\r\n\r\n* The examples should work *mostly* as before (made some hopefully insignificant changes)\r\n* The largest change is in the tooling (it required a new way to express which claim should be SD'd)\r\n* The spec was adapted as well.",
      "createdAt": "2023-02-27T10:30:02Z",
      "updatedAt": "2023-03-08T19:30:23Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "49b7a1357db3282512f4dbf81d192fdba51ba492",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/recurse-sd-jwt",
      "headRefOid": "fb4b464ef329c72787da61f6bb5084691081564a",
      "closedAt": "2023-03-07T19:45:35Z",
      "mergedAt": "2023-03-07T19:45:34Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "a94e2d1a2c4306a45e7d4a42df482d3fa19a9972"
      },
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Merging #224 before this should produce fewer conflicts.",
          "createdAt": "2023-03-01T14:59:50Z",
          "updatedAt": "2023-03-01T14:59:50Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I resolved the conflicts with master and updated the examples. Github wants you to re-review :-) ",
          "createdAt": "2023-03-03T10:11:43Z",
          "updatedAt": "2023-03-03T10:11:43Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Looks good to me now. Thanks Dr. ",
          "createdAt": "2023-03-03T13:07:19Z",
          "updatedAt": "2023-03-03T13:07:19Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "@Sakurann this one is awaiting review and merge  ",
          "createdAt": "2023-03-07T18:15:50Z",
          "updatedAt": "2023-03-07T18:15:50Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "no need to revert, but I have not approved this explicitly for a reason - I wanted the time to re-read.",
          "createdAt": "2023-03-08T16:54:41Z",
          "updatedAt": "2023-03-08T16:54:52Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I am sorry for prematurely merging this one. I got a little over-eager yesterday working though PRs and stuff - I jumped to the incorrect conclusion that this one was probably okay b/c your suggestions had been incorporated a few days ago. Apologies again. ",
          "createdAt": "2023-03-08T19:30:22Z",
          "updatedAt": "2023-03-08T19:30:22Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5OsR5v",
          "commit": {
            "abbreviatedOid": "4d85a9b"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-01T16:41:31Z",
          "updatedAt": "2023-03-01T16:41:32Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "```suggestion\r\nFor any selectively disclosable claim, the `_sd` key containing the digest value MUST be included in the SD-JWT at the same level as the original claim. It follows that the `_sd` key MAY appear multiple times in an SD-JWT and MAY even appear wihin Disclosures.\r\n```\r\n\r\n\"hash digest\" isn't really a thing and not a combination of words that we've used elsewhere. I suggested \"digest value\" but \"hash value\" or just \"digest\" could be used there too. But \"hash digest\" doesn't really work.\r\n",
              "createdAt": "2023-03-01T16:41:32Z",
              "updatedAt": "2023-03-01T16:41:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Osxli",
          "commit": {
            "abbreviatedOid": "4d85a9b"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-01T17:59:35Z",
          "updatedAt": "2023-03-01T17:59:35Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "That's right, thanks!",
              "createdAt": "2023-03-01T17:59:35Z",
              "updatedAt": "2023-03-01T17:59:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Os7aW",
          "commit": {
            "abbreviatedOid": "4d85a9b"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-01T18:27:17Z",
          "updatedAt": "2023-03-01T18:27:18Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "I think maybe one more newline would help the final output, which looks kinda funky now (https://drafts.oauth.net/oauth-selective-disclosure-jwt/danielfett/recurse-sd-jwt/draft-ietf-oauth-selective-disclosure-jwt.html#section-5.2-28).\r\n\r\n```suggestion\r\n    iid_payload += f\"__Disclosure for `{claim_name}`:__\\n\\n\"\r\n```\r\n\r\nOr put the line that was moved back down where it was.",
              "createdAt": "2023-03-01T18:27:17Z",
              "updatedAt": "2023-03-01T18:27:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Os_gX",
          "commit": {
            "abbreviatedOid": "4d85a9b"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-01T18:38:37Z",
          "updatedAt": "2023-03-01T18:38:37Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "and update the examples again... ",
              "createdAt": "2023-03-01T18:38:37Z",
              "updatedAt": "2023-03-01T18:38:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5OtBjM",
          "commit": {
            "abbreviatedOid": "4d85a9b"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-01T18:44:05Z",
          "updatedAt": "2023-03-01T18:44:05Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "I think it'll be good to go after that. ",
              "createdAt": "2023-03-01T18:44:05Z",
              "updatedAt": "2023-03-01T18:44:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5O1LKv",
          "commit": {
            "abbreviatedOid": "07a715c"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-02T20:29:26Z",
          "updatedAt": "2023-03-02T20:29:26Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "```suggestion\r\nBeing JSON, an object in an SD-JWT payload MAY contain key value pairs where the value is another object. In SD-JWT, the Issuer decides for each key individually, on each level of the JSON, whether the key should be selectively disclosable or not.\r\n```",
              "createdAt": "2023-03-02T20:29:26Z",
              "updatedAt": "2023-03-03T00:03:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5O1MbL",
          "commit": {
            "abbreviatedOid": "07a715c"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-02T20:33:47Z",
          "updatedAt": "2023-03-02T20:33:47Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "i am slightly worried this title might be confusing..\r\nwould be more in favor of something like `SD-JWT with recursive Disclosures`?",
              "createdAt": "2023-03-02T20:33:47Z",
              "updatedAt": "2023-03-02T20:33:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5O1NgO",
          "commit": {
            "abbreviatedOid": "07a715c"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-02T20:37:39Z",
          "updatedAt": "2023-03-02T20:37:40Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "```suggestion\r\n    included and decode the respective plaintext values from the Disclosures at the\r\n    appropriate places. The processing MUST take into account that digests might be\r\n    included not only directly in the SD-JWT, but also in other Disclosures. If any of the\r\n    digests cannot be found, the Holder MUST reject the SD-JWT.\r\n```",
              "createdAt": "2023-03-02T20:37:39Z",
              "updatedAt": "2023-03-02T20:37:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5O1Oux",
          "commit": {
            "abbreviatedOid": "07a715c"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-02T20:41:48Z",
          "updatedAt": "2023-03-02T20:41:48Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "^ makes sense ",
              "createdAt": "2023-03-02T20:41:48Z",
              "updatedAt": "2023-03-02T20:41:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5O2i_D",
          "commit": {
            "abbreviatedOid": "07a715c"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-03T00:12:51Z",
          "updatedAt": "2023-03-03T00:12:51Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "I actually found this deleted text pretty helpful and would like to see something like it in the text..\r\n> the Issuer MAY decide to either make the entire object selectively disclosable or to make its properties selectively disclosable individually. In the latter case, the Issuer MAY even choose to make some of the object's properties selectively disclosable and others not.\r\n\r\nMaybe after `the Issuer decides for each key individually, on each level of the JSON, whether the key should be selectively disclosable or not.` add something like `A certain layer can be made selectively disclosable independent from whether a layer up or down is selectively disclosable or not`. should not hurt clarifying.",
              "createdAt": "2023-03-03T00:12:51Z",
              "updatedAt": "2023-03-03T00:12:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5O2j5C",
          "commit": {
            "abbreviatedOid": "07a715c"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-03T00:15:33Z",
          "updatedAt": "2023-03-03T00:15:33Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "```suggestion\r\nFor any selectively disclosable claim, the `_sd` key containing the digest value MUST be included in the SD-JWT at the same level as the original claim. It follows that the `_sd` key MAY appear multiple times in an SD-JWT. It MAY even appear within Disclosures.\r\n```\r\nsome don't like two MAYs in one sentences",
              "createdAt": "2023-03-03T00:15:33Z",
              "updatedAt": "2023-03-03T00:15:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5O4VpC",
          "commit": {
            "abbreviatedOid": "07a715c"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-03T09:36:35Z",
          "updatedAt": "2023-03-03T09:36:36Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "```suggestion\r\n#### Option 3: SD-JWT with Recursive Disclosures\r\n```",
              "createdAt": "2023-03-03T09:36:36Z",
              "updatedAt": "2023-03-03T09:36:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5O4ZQu",
          "commit": {
            "abbreviatedOid": "07a715c"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-03T09:46:18Z",
          "updatedAt": "2023-03-03T09:46:18Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "I added the clarification and used the \"Being JSON\" part but kept the hyphen in key-value pair (which is correct AFAIK).",
              "createdAt": "2023-03-03T09:46:18Z",
              "updatedAt": "2023-03-03T09:46:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5O5yBN",
          "commit": {
            "abbreviatedOid": "fb4b464"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-03T13:06:45Z",
          "updatedAt": "2023-03-03T13:06:45Z",
          "comments": []
        }
      ]
    },
    {
      "number": 221,
      "id": "PR_kwDOHTmVzM5K24ig",
      "title": "make salt always be a string",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/221",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "salt to just always be a string (for #218) ",
      "createdAt": "2023-02-27T17:55:01Z",
      "updatedAt": "2023-06-04T21:50:54Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "9df497b93097bca06babe51994ddaa80faf985f8",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "string-salt",
      "headRefOid": "7ed8f302d02f0c8b35c84eb109c81ee90af561d6",
      "closedAt": "2023-02-28T16:37:53Z",
      "mergedAt": "2023-02-28T16:37:53Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "aa7da4908211bc7f10d0313959fa38bdf3a89c39"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5OgxLT",
          "commit": {
            "abbreviatedOid": "bd31377"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-28T10:22:08Z",
          "updatedAt": "2023-02-28T10:22:08Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5OjU4A",
          "commit": {
            "abbreviatedOid": "bd31377"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-28T15:32:29Z",
          "updatedAt": "2023-02-28T15:32:29Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n   1. A salt value MUST be a string. See (#salt-entropy) and (#salt_minlength) for security considerations. It is RECOMMENDED to base64url-encode minimum 128 bits of cryptographically secure pseudorandom data, producing a string. The salt value MUST be unique for each claim that is to be selectively disclosed. The Issuer MUST NOT disclose the salt value to any party other than the Holder.\r\n```",
              "createdAt": "2023-02-28T15:32:29Z",
              "updatedAt": "2023-02-28T15:32:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Oj_B2",
          "commit": {
            "abbreviatedOid": "7ed8f30"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-28T16:37:38Z",
          "updatedAt": "2023-02-28T16:37:38Z",
          "comments": []
        }
      ]
    },
    {
      "number": 222,
      "id": "PR_kwDOHTmVzM5K4auJ",
      "title": "sha-256 as the default hash algorithm, if the hash alg claim is omitted",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/222",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "for #219",
      "createdAt": "2023-02-27T23:46:43Z",
      "updatedAt": "2023-06-04T21:50:58Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "9df497b93097bca06babe51994ddaa80faf985f8",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "default-hash-algorithm",
      "headRefOid": "669bba5b89fa7ae0faf0bf7d2c36bf45db9f5e1c",
      "closedAt": "2023-02-28T10:21:32Z",
      "mergedAt": "2023-02-28T10:21:32Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "be04bbd7f5aab14e35ff1d1bf6208d7db95430ce"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5OgBF8",
          "commit": {
            "abbreviatedOid": "669bba5"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-28T08:32:21Z",
          "updatedAt": "2023-02-28T08:32:21Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5Ogwpl",
          "commit": {
            "abbreviatedOid": "669bba5"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-28T10:21:17Z",
          "updatedAt": "2023-02-28T10:21:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 224,
      "id": "PR_kwDOHTmVzM5K7Zmq",
      "title": "Improvements from ID-Union hackathon",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/224",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "This PR will contain improvements developed during the ID-Union hackathon integrating OpenID4VC and SD-JWT.",
      "createdAt": "2023-02-28T12:53:37Z",
      "updatedAt": "2023-03-03T09:46:52Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "be04bbd7f5aab14e35ff1d1bf6208d7db95430ce",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/idunion-hackathon-feedback",
      "headRefOid": "c53e5137c7461d5950d87752fe65baf8daa0eb25",
      "closedAt": "2023-03-03T09:46:52Z",
      "mergedAt": "2023-03-03T09:46:52Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "49b7a1357db3282512f4dbf81d192fdba51ba492"
      },
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Should be merged before PR #220 ",
          "createdAt": "2023-03-01T14:45:36Z",
          "updatedAt": "2023-03-01T14:45:36Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5OtAaK",
          "commit": {
            "abbreviatedOid": "c53e513"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "honestly not in a position to review the python in any meaningful way ",
          "createdAt": "2023-03-01T18:41:03Z",
          "updatedAt": "2023-03-01T18:41:03Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5O1JVI",
          "commit": {
            "abbreviatedOid": "c53e513"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-02T20:23:13Z",
          "updatedAt": "2023-03-02T20:23:13Z",
          "comments": []
        }
      ]
    },
    {
      "number": 225,
      "id": "PR_kwDOHTmVzM5LarPv",
      "title": "security targets",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/225",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This PR outlines security targets of SD-JWT.\r\nwhen merged it will replace PR #92 and close issue #87.",
      "createdAt": "2023-03-06T22:36:29Z",
      "updatedAt": "2023-03-13T12:41:53Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "49b7a1357db3282512f4dbf81d192fdba51ba492",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "sakurann-security",
      "headRefOid": "4fd4f3b569f4bceaeb109f92f283860c1645a533",
      "closedAt": "2023-03-13T12:41:53Z",
      "mergedAt": "2023-03-13T12:41:53Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "37a55c2e217b7282818fbe7fdb260a8a44318616"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5PHwW-",
          "commit": {
            "abbreviatedOid": "37c902c"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T00:27:20Z",
          "updatedAt": "2023-03-07T00:27:20Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\nSecurity considerations in this section help achieve the following properties:\r\n```\r\n\r\n",
              "createdAt": "2023-03-07T00:27:20Z",
              "updatedAt": "2023-03-07T00:27:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PHzMs",
          "commit": {
            "abbreviatedOid": "37c902c"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T00:35:16Z",
          "updatedAt": "2023-03-07T00:35:16Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "There's not much, if any really, discussion of the second bullet about the exchange being observed in the Security Considerations Section that follows. So I'm not sure it makes sense to call out in this text, which is kinda introducing the Security Considerations. ",
              "createdAt": "2023-03-07T00:35:16Z",
              "updatedAt": "2023-03-07T00:35:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PNAq0",
          "commit": {
            "abbreviatedOid": "37c902c"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T15:29:06Z",
          "updatedAt": "2023-03-07T15:29:07Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "it's [Confidentiality during Transport](https://drafts.oauth.net/oauth-selective-disclosure-jwt/draft-ietf-oauth-selective-disclosure-jwt.html#name-confidentiality-during-tran) in **privacy considerations** that addresses this second bullet point.\r\n\r\nI don't know if we should move that section into security considerations.. it is tricky because encryption is both security and privacy measure.",
              "createdAt": "2023-03-07T15:29:06Z",
              "updatedAt": "2023-03-07T15:29:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5POAYO",
          "commit": {
            "abbreviatedOid": "37c902c"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T16:51:10Z",
          "updatedAt": "2023-03-07T16:51:10Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Yeah, it is tricky. But I don't know about moving that Confidentiality during Transport in into security considerations. I think I'd prefer to just remove that \"even if the content of the protocol exchange was observed\" part. To keep this new intro to the Security Considerations brief and concise. ",
              "createdAt": "2023-03-07T16:51:10Z",
              "updatedAt": "2023-03-08T19:48:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Pmm2p",
          "commit": {
            "abbreviatedOid": "37c902c"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-10T19:45:27Z",
          "updatedAt": "2023-03-10T19:45:28Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "I have read some other RFCs in oauth WG and the text related to encryption usually tends to be under the privacy considerations section. for example, https://datatracker.ietf.org/doc/html/rfc9068#section-6\r\n\r\nso I am ok deleting this bullet point. will reformat because now it does not make sense having bullet point.",
              "createdAt": "2023-03-10T19:45:27Z",
              "updatedAt": "2023-03-10T19:45:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PmnBX",
          "commit": {
            "abbreviatedOid": "6f108bf"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-10T19:46:07Z",
          "updatedAt": "2023-03-10T19:46:07Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\n* Claim values issued by the Issuer cannot be obtained by the adversary, if the Holder did not intend to disclose them.\r\n* Claim values that are not issued by the Issuer cannot be successfully verified by the Verifier, if the Holder forged the Disclosures.\r\n```",
              "createdAt": "2023-03-10T19:46:07Z",
              "updatedAt": "2023-03-10T19:46:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PsGAA",
          "commit": {
            "abbreviatedOid": "4fd4f3b"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-13T12:37:10Z",
          "updatedAt": "2023-03-13T12:37:10Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5PsH04",
          "commit": {
            "abbreviatedOid": "4fd4f3b"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-13T12:41:46Z",
          "updatedAt": "2023-03-13T12:41:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 226,
      "id": "PR_kwDOHTmVzM5La8Mt",
      "title": "updating Privacy Considerations",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/226",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "When merged, this PR replaces PR #93 and closes Issue #91.\r\n\r\n- I am not sure what value reference to ISO 27551 brings (+1 to remove it). \r\n   - Unlinkability pairs defined in ISO27551 do not really apply to Issuer-Holder-Verifier model, since they are modelled after User Agent-RP model. \r\n   - and anonymity of the User is out of scope for SD-JWT IMO, but adding one subsection on \"User identifier should be chosen to guarantee user anonymity and not only pseudonymity\". but feels redundant since SD-JWT is not only for natural persons..\r\n- Some of the notions in PR 93 were outdated since claim names are now blinded by default.\r\n- \"Issuer Issuing One Type of SD-JWT\" section might be valuable, also confirming with Smart health card community.",
      "createdAt": "2023-03-06T23:35:53Z",
      "updatedAt": "2023-03-13T12:51:37Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "49b7a1357db3282512f4dbf81d192fdba51ba492",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "sakurann-privacy",
      "headRefOid": "fe7c7ce6c97ed2f26f5b657273c8fd500eb86bf7",
      "closedAt": "2023-03-13T12:51:36Z",
      "mergedAt": "2023-03-13T12:51:36Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "280bd6a427c4f3bab21f72b9db7b2f224c59b7b7"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "the \"build\" for this PR isn't working https://github.com/oauth-wg/oauth-selective-disclosure-jwt/actions/runs/4349009852/jobs/7598175781 ",
          "createdAt": "2023-03-07T01:00:34Z",
          "updatedAt": "2023-03-07T01:00:34Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5PH0Qz",
          "commit": {
            "abbreviatedOid": "6d6f50d"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T00:38:12Z",
          "updatedAt": "2023-03-07T00:38:13Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "I don't feel it's appropriate to have a normative MUST pointing to a document that isn't freely available. ",
              "createdAt": "2023-03-07T00:38:12Z",
              "updatedAt": "2023-03-07T00:38:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PH1ha",
          "commit": {
            "abbreviatedOid": "6d6f50d"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T00:42:54Z",
          "updatedAt": "2023-03-07T00:42:54Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "There's not any group signatures registered or spec'd for JWS/JWT (that I know of anyway) so that's not really a meaningful suggestion. ",
              "createdAt": "2023-03-07T00:42:54Z",
              "updatedAt": "2023-03-07T00:42:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PH3Kz",
          "commit": {
            "abbreviatedOid": "6d6f50d"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T00:53:08Z",
          "updatedAt": "2023-03-07T00:53:09Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "I don't have access to ISO.27551 and am not going to pay for it. I doubt I'm unique there.  `RP+RP'-U` looks odd but what do I know? What value does this sentence bring? ",
              "createdAt": "2023-03-07T00:53:08Z",
              "updatedAt": "2023-03-07T00:53:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PH7E9",
          "commit": {
            "abbreviatedOid": "6d6f50d"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T01:15:46Z",
          "updatedAt": "2023-03-07T01:15:46Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "It is actually publicly available - see url and search for the number",
              "createdAt": "2023-03-07T01:15:46Z",
              "updatedAt": "2023-03-07T01:15:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PH_Cn",
          "commit": {
            "abbreviatedOid": "6d6f50d"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T01:34:22Z",
          "updatedAt": "2023-03-07T01:34:22Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "My mistake. Sorry. I guess I'm accustomed to ISO docs being difficult to access.  Even so, I don't think a normative MUST to a different document is okay. ",
              "createdAt": "2023-03-07T01:34:22Z",
              "updatedAt": "2023-03-07T01:34:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PM8LE",
          "commit": {
            "abbreviatedOid": "6d6f50d"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T15:22:44Z",
          "updatedAt": "2023-03-07T15:22:45Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "no, you are probably not unique. \r\none value might be helping readers familiar with ISO 27551 draw the parallel between SD-JWT spec and ISO text, which is not an absolute requirement and I have not seen other IETF specs really do it.",
              "createdAt": "2023-03-07T15:22:45Z",
              "updatedAt": "2023-03-07T15:22:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PM-GH",
          "commit": {
            "abbreviatedOid": "6d6f50d"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T15:25:28Z",
          "updatedAt": "2023-03-07T15:25:28Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "agreed. though, we do say in section 9.4 `Use advanced cryptographic schemes, outside the scope of this specification`.\r\n\r\n```suggestion\r\nTo mitigate this issue, a group of issuers may elect to use a common Issuer identifier. A group signature scheme outside the scope of this specification may also be used, instead of an individual signature.\r\n```",
              "createdAt": "2023-03-07T15:25:28Z",
              "updatedAt": "2023-03-07T15:25:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PM-Nr",
          "commit": {
            "abbreviatedOid": "6d6f50d"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T15:25:38Z",
          "updatedAt": "2023-03-07T15:25:38Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "I agree must is too strong. Would should be acceptable?\r\n\r\n```suggestion\r\nThe privacy principles of [@ISO.29100] should be adhered to. \r\n```",
              "createdAt": "2023-03-07T15:25:38Z",
              "updatedAt": "2023-03-07T15:25:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PNWYk",
          "commit": {
            "abbreviatedOid": "edf1424"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T15:56:26Z",
          "updatedAt": "2023-03-07T15:56:26Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "updated the text because confirmed with the smart health community for below use-case:\r\n> A scenario we have seen is something like a military organization or a rehab clinic issuing a vaccine credential; if the iss is directly associated with one of theses orgs, it allow verifiers to deduce that the holder is a military member or has a substance use disorder. That's undesirable, and indeed we've seen issuers adopt generic names or maybe even (I'm not sure about this) join up with other issuing orgs to pool populations.",
              "createdAt": "2023-03-07T15:56:26Z",
              "updatedAt": "2023-03-07T15:56:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5POEZi",
          "commit": {
            "abbreviatedOid": "6d6f50d"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T16:58:55Z",
          "updatedAt": "2023-03-07T16:58:56Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "I'd suggest the sentence be dropped. ",
              "createdAt": "2023-03-07T16:58:55Z",
              "updatedAt": "2023-03-07T16:58:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5POHOD",
          "commit": {
            "abbreviatedOid": "6d6f50d"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T17:04:29Z",
          "updatedAt": "2023-03-07T17:04:30Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "little should would be better, yes.",
              "createdAt": "2023-03-07T17:04:29Z",
              "updatedAt": "2023-03-07T17:04:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5POILF",
          "commit": {
            "abbreviatedOid": "edf1424"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T17:06:40Z",
          "updatedAt": "2023-03-07T17:06:41Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "makes sense ",
              "createdAt": "2023-03-07T17:06:40Z",
              "updatedAt": "2023-03-07T17:06:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5POI5j",
          "commit": {
            "abbreviatedOid": "edf1424"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T17:08:22Z",
          "updatedAt": "2023-03-07T17:08:23Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\nThe privacy principles of [@ISO.29100] should be adhered to.\r\n```",
              "createdAt": "2023-03-07T17:08:22Z",
              "updatedAt": "2023-03-07T17:08:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5POJW1",
          "commit": {
            "abbreviatedOid": "6d6f50d"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T17:09:22Z",
          "updatedAt": "2023-03-07T17:09:23Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "github is telling me this conversation is outdated though so I can't commit the suggestion",
              "createdAt": "2023-03-07T17:09:23Z",
              "updatedAt": "2023-03-07T17:09:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5POUV7",
          "commit": {
            "abbreviatedOid": "0e800aa"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T17:30:57Z",
          "updatedAt": "2023-03-07T17:30:57Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "```suggestion\r\nMoreover, issuer identifier alone may reveal information about the user.\r\n```\r\n\r\nremove the trailing whitespace ",
              "createdAt": "2023-03-07T17:30:57Z",
              "updatedAt": "2023-03-07T17:30:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PO1cr",
          "commit": {
            "abbreviatedOid": "ef867c0"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T18:39:32Z",
          "updatedAt": "2023-03-07T18:39:32Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "I agree.\r\n```suggestion\r\n```",
              "createdAt": "2023-03-07T18:39:32Z",
              "updatedAt": "2023-03-07T18:39:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PO2m8",
          "commit": {
            "abbreviatedOid": "ef867c0"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T18:42:46Z",
          "updatedAt": "2023-03-07T18:42:47Z",
          "comments": [
            {
              "originalPosition": 56,
              "body": "```suggestion\r\n```",
              "createdAt": "2023-03-07T18:42:46Z",
              "updatedAt": "2023-03-07T18:42:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PPG7M",
          "commit": {
            "abbreviatedOid": "e6c5a39"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-07T19:25:55Z",
          "updatedAt": "2023-03-07T19:25:55Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5Pqyq6",
          "commit": {
            "abbreviatedOid": "e6c5a39"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-03-13T10:00:51Z",
          "updatedAt": "2023-03-13T10:05:14Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Intentional lower-case should?",
              "createdAt": "2023-03-13T10:00:52Z",
              "updatedAt": "2023-03-13T10:05:14Z"
            },
            {
              "originalPosition": 12,
              "body": "```suggestion\r\nImplementers MUST ensure that the transport protocol provides confidentiality\r\n```",
              "createdAt": "2023-03-13T10:02:00Z",
              "updatedAt": "2023-03-13T10:05:14Z"
            },
            {
              "originalPosition": 14,
              "body": "```suggestion\r\nif the privacy of End-User data or correlation attacks by passive observers are a concern. Implementers MAY define an\r\n```",
              "createdAt": "2023-03-13T10:02:13Z",
              "updatedAt": "2023-03-13T10:05:15Z"
            },
            {
              "originalPosition": 31,
              "body": "```suggestion\r\nAn Issuer issuing only one type of SD-JWT might have privacy implications, because if the Holder has an SD-JWT issued by that Issuer, its type and claim names can be determined.\r\n\r\nFor example, if the National Cancer Institute only issued SD-JWTs with cancer registry information, it is possible to deduce that the Holder owning its SD-JWT is a cancer patient.\r\n\r\nMoreover, the issuer identifier alone may reveal information about the user.\r\n\r\nFor example, when a military organization or a drug rehabilitation center issues a vaccine credential, verifiers can deduce that the holder is a military member or may have a substance use disorder.\r\n```",
              "createdAt": "2023-03-13T10:04:41Z",
              "updatedAt": "2023-03-13T10:05:15Z"
            },
            {
              "originalPosition": 31,
              "body": "Good examples!",
              "createdAt": "2023-03-13T10:04:56Z",
              "updatedAt": "2023-03-13T10:05:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Pq070",
          "commit": {
            "abbreviatedOid": "e6c5a39"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-13T10:06:05Z",
          "updatedAt": "2023-03-13T10:06:06Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Just saw the conversation pertaining to this.",
              "createdAt": "2023-03-13T10:06:06Z",
              "updatedAt": "2023-03-13T10:06:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PsL5n",
          "commit": {
            "abbreviatedOid": "fe7c7ce"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-13T12:51:21Z",
          "updatedAt": "2023-03-13T12:51:21Z",
          "comments": []
        }
      ]
    },
    {
      "number": 227,
      "id": "PR_kwDOHTmVzM5LfABb",
      "title": "added Authlete's Java library to Read.me",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/227",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "addresses Issue #223 ",
      "createdAt": "2023-03-07T14:46:47Z",
      "updatedAt": "2023-03-07T19:44:09Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "49b7a1357db3282512f4dbf81d192fdba51ba492",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "authlete-lib",
      "headRefOid": "72ec0fde63e38c70ecdb5ff1cda29f819cb5a50e",
      "closedAt": "2023-03-07T19:44:08Z",
      "mergedAt": "2023-03-07T19:44:08Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "b53f2a0cabe7a8816bf9469e85e0c671b7582333"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5PMg2b",
          "commit": {
            "abbreviatedOid": "72ec0fd"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-07T14:48:00Z",
          "updatedAt": "2023-03-07T14:48:00Z",
          "comments": []
        }
      ]
    },
    {
      "number": 228,
      "id": "PR_kwDOHTmVzM5LfxAg",
      "title": "Editorial",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/228",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Few editorial suggestions based on what I noticed when re-reading the itnroduction",
      "createdAt": "2023-03-07T16:49:05Z",
      "updatedAt": "2023-03-13T12:59:31Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "280bd6a427c4f3bab21f72b9db7b2f224c59b7b7",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "sakurann-typos",
      "headRefOid": "183afe5630eaac329f336b615a9ed6049a5ab5de",
      "closedAt": "2023-03-13T12:59:31Z",
      "mergedAt": "2023-03-13T12:59:31Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "9ba32156f6212bba52b72867413ca22e0e6a47d3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5PPCxD",
          "commit": {
            "abbreviatedOid": "b03a0ef"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T19:14:48Z",
          "updatedAt": "2023-03-07T19:14:48Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "```suggestion\r\nthe mechanisms defined in this document can be used for other use\r\n```",
              "createdAt": "2023-03-07T19:14:48Z",
              "updatedAt": "2023-03-07T19:14:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PPDO9",
          "commit": {
            "abbreviatedOid": "b03a0ef"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T19:16:13Z",
          "updatedAt": "2023-03-07T19:16:13Z",
          "comments": [
            {
              "originalPosition": 170,
              "body": "```suggestion\r\nVerifiers validate the claim values received in Disclosures by calculating the\r\n```\r\n\r\nThe HS-Disclosures JWT has gone away so that was some old text that hadn't been updated.",
              "createdAt": "2023-03-07T19:16:13Z",
              "updatedAt": "2023-03-07T19:21:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PWjxU",
          "commit": {
            "abbreviatedOid": "5bd0eb4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-08T19:33:34Z",
          "updatedAt": "2023-03-08T19:33:34Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5Pq2Zw",
          "commit": {
            "abbreviatedOid": "5bd0eb4"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-03-13T10:09:35Z",
          "updatedAt": "2023-03-13T10:15:13Z",
          "comments": [
            {
              "originalPosition": 55,
              "body": "```suggestion\r\n  - a format for an Issuer-signed JWT containing selectively disclosable claims,\r\n```",
              "createdAt": "2023-03-13T10:09:36Z",
              "updatedAt": "2023-03-13T10:15:13Z"
            },
            {
              "originalPosition": 171,
              "body": "This change breaks the sentence above. I suggest to **remove this section completely:** It comes from a time when the format did force Verifiers to hash the disclosures. Also, manipulation of disclosures is discussed below.",
              "createdAt": "2023-03-13T10:15:09Z",
              "updatedAt": "2023-03-13T10:15:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PsNtD",
          "commit": {
            "abbreviatedOid": "ac95f94"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-13T12:54:48Z",
          "updatedAt": "2023-03-13T12:54:48Z",
          "comments": [
            {
              "originalPosition": 171,
              "body": "agreed to remove.\r\n",
              "createdAt": "2023-03-13T12:54:48Z",
              "updatedAt": "2023-03-13T12:54:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PsPr9",
          "commit": {
            "abbreviatedOid": "183afe5"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-13T12:59:22Z",
          "updatedAt": "2023-03-13T12:59:22Z",
          "comments": []
        }
      ]
    },
    {
      "number": 229,
      "id": "PR_kwDOHTmVzM5Lf6uA",
      "title": "initial IANA media type registration",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/229",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "if merged resolves Issue #74.",
      "createdAt": "2023-03-07T17:16:56Z",
      "updatedAt": "2023-04-25T15:53:37Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "49b7a1357db3282512f4dbf81d192fdba51ba492",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "sakurann-iana",
      "headRefOid": "bdc3e6c7cb378ffe9152e092c8567faae398c08d",
      "closedAt": "2023-04-25T15:53:37Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "the alternative PR merged",
          "createdAt": "2023-04-25T15:53:37Z",
          "updatedAt": "2023-04-25T15:53:37Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5PO0GW",
          "commit": {
            "abbreviatedOid": "37f1bfa"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T18:36:06Z",
          "updatedAt": "2023-03-07T18:36:06Z",
          "comments": [
            {
              "originalPosition": 2,
              "body": "We probably should keep some kind of TBD in here as a reminder for other things - like JWT claims - that'll need registration. ",
              "createdAt": "2023-03-07T18:36:06Z",
              "updatedAt": "2023-03-07T18:36:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PO1PN",
          "commit": {
            "abbreviatedOid": "37f1bfa"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T18:39:03Z",
          "updatedAt": "2023-03-07T18:39:03Z",
          "comments": [
            {
              "originalPosition": 2,
              "body": "```suggestion\r\n# IANA Considerations {#iana_considerations}\r\n\r\nTBD\r\n```",
              "createdAt": "2023-03-07T18:39:03Z",
              "updatedAt": "2023-03-07T18:39:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PO15c",
          "commit": {
            "abbreviatedOid": "37f1bfa"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T18:40:51Z",
          "updatedAt": "2023-03-07T18:40:51Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I hate to bikeshed but SD-JWT is hyphenated everywhere else in this draft so `sdjwt-issuance` and `sdjwt-presentation` look a bit off.  Is there a reason not to go w/ `sd-jwt-issuance` and `sd-jwt-presentation`?",
              "createdAt": "2023-03-07T18:40:51Z",
              "updatedAt": "2023-03-07T18:40:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PPASv",
          "commit": {
            "abbreviatedOid": "37f1bfa"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T19:07:44Z",
          "updatedAt": "2023-03-07T19:07:44Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "or if length is of concern, something like `sd-jwt-i` and `sd-jwt-p` ",
              "createdAt": "2023-03-07T19:07:44Z",
              "updatedAt": "2023-03-07T19:07:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PQizg",
          "commit": {
            "abbreviatedOid": "18231cb"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T23:40:57Z",
          "updatedAt": "2023-03-07T23:40:57Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "I don't know how specific the  Encoding considerations needs to be but the dot character also is a separator in the JWT part.  ",
              "createdAt": "2023-03-07T23:40:57Z",
              "updatedAt": "2023-03-07T23:40:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PQj0c",
          "commit": {
            "abbreviatedOid": "18231cb"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T23:45:23Z",
          "updatedAt": "2023-03-07T23:45:23Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "dot character will be a separator too ... \r\n",
              "createdAt": "2023-03-07T23:45:23Z",
              "updatedAt": "2023-03-07T23:45:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Pmdcf",
          "commit": {
            "abbreviatedOid": "18231cb"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-10T19:17:58Z",
          "updatedAt": "2023-03-10T19:17:59Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Please bikeshed :)\r\n\r\n```suggestion\r\nThis section registers the \"application/sd-jwt-issuance\" media type [@RFC2046] in\r\n```",
              "createdAt": "2023-03-10T19:17:59Z",
              "updatedAt": "2023-03-10T19:17:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PmdiV",
          "commit": {
            "abbreviatedOid": "18231cb"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-10T19:18:15Z",
          "updatedAt": "2023-03-10T19:18:16Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\nThis section also registers the \"application/sd-jwt-presentation\" media type\r\n```",
              "createdAt": "2023-03-10T19:18:15Z",
              "updatedAt": "2023-03-10T19:18:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PmdmQ",
          "commit": {
            "abbreviatedOid": "18231cb"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-10T19:18:25Z",
          "updatedAt": "2023-03-10T19:18:26Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "```suggestion\r\n*  Subtype name: sd-jwt-issuance\r\n```",
              "createdAt": "2023-03-10T19:18:26Z",
              "updatedAt": "2023-03-10T19:18:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Pmd6o",
          "commit": {
            "abbreviatedOid": "18231cb"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-10T19:19:23Z",
          "updatedAt": "2023-03-10T19:19:24Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "```suggestion\r\n### application/sd-jwt-issuance\r\n```",
              "createdAt": "2023-03-10T19:19:23Z",
              "updatedAt": "2023-03-10T19:19:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Pmd-a",
          "commit": {
            "abbreviatedOid": "18231cb"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-10T19:19:35Z",
          "updatedAt": "2023-03-10T19:19:36Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "```suggestion\r\n### application/sd-jwt-presentation\r\n```",
              "createdAt": "2023-03-10T19:19:35Z",
              "updatedAt": "2023-03-10T19:19:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PmeBA",
          "commit": {
            "abbreviatedOid": "18231cb"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-10T19:19:43Z",
          "updatedAt": "2023-03-10T19:19:44Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "```suggestion\r\n*  Subtype name: sd-jwt-presentation\r\n```",
              "createdAt": "2023-03-10T19:19:43Z",
              "updatedAt": "2023-03-10T19:19:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PmecL",
          "commit": {
            "abbreviatedOid": "18231cb"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-10T19:21:20Z",
          "updatedAt": "2023-03-10T19:21:21Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n\r\n### Registry Contents\r\n\r\n```",
              "createdAt": "2023-03-10T19:21:20Z",
              "updatedAt": "2023-03-10T19:21:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Pmg0l",
          "commit": {
            "abbreviatedOid": "18231cb"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-10T19:26:07Z",
          "updatedAt": "2023-03-10T19:26:07Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "```suggestion\r\n*  Encoding considerations: 8bit; application/sd-jwt-issuance values are encoded such that the first three base64url-encoded values are separated from the previous one by a single period ('.') character, and the following series of base64url-encoded values are each separated from the next by a single tilde ('~') character.\r\n```",
              "createdAt": "2023-03-10T19:26:07Z",
              "updatedAt": "2023-03-10T19:26:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PmjDt",
          "commit": {
            "abbreviatedOid": "bdc3e6c"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-10T19:31:34Z",
          "updatedAt": "2023-03-10T19:31:34Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "```suggestion\r\n*  Encoding considerations: 8bit; application/sd-jwt-presentation values are encoded such that the first three base64url-encoded values are separated from the previous one by a single period ('.') character, and the following series of base64url-encoded values (the last of which may be an empty string or three base64url-encoded values separated from the next one by a single period ('.') character) are each separated from the previous one by a single tilde ('~') character.\r\n```",
              "createdAt": "2023-03-10T19:31:34Z",
              "updatedAt": "2023-03-10T19:32:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PmjfJ",
          "commit": {
            "abbreviatedOid": "bdc3e6c"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-10T19:32:50Z",
          "updatedAt": "2023-03-10T19:33:09Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "I tried.",
              "createdAt": "2023-03-10T19:32:50Z",
              "updatedAt": "2023-03-10T19:33:09Z"
            },
            {
              "originalPosition": 42,
              "body": "my best attempt to put it in one sentence",
              "createdAt": "2023-03-10T19:33:04Z",
              "updatedAt": "2023-03-10T19:33:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Pqvg0",
          "commit": {
            "abbreviatedOid": "bdc3e6c"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-03-13T09:55:12Z",
          "updatedAt": "2023-03-13T09:57:20Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "```suggestion\r\n*  Encoding considerations: 8bit; application/sdjwt-issuance values are encoded as a series of strings separated from the next by a single tilde ('~') character; the first string consists of dot-separated base64url-encoded values, all further strings are base64url-encoded values.\r\n```",
              "createdAt": "2023-03-13T09:55:12Z",
              "updatedAt": "2023-03-13T09:57:20Z"
            },
            {
              "originalPosition": 42,
              "body": "```suggestion\r\n*  Encoding considerations: 8bit; application/sdjwt-presentation values are encoded as a series of strings, each separated from the next by a single tilde ('~') character; the first and last strings consist of dot-separated base64url-encoded values, all other strings are base64url-encoded values; the last string may be empty.\r\n```",
              "createdAt": "2023-03-13T09:57:01Z",
              "updatedAt": "2023-03-13T09:57:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Pujq7",
          "commit": {
            "abbreviatedOid": "18231cb"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-13T17:28:17Z",
          "updatedAt": "2023-03-13T17:28:17Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "```suggestion\r\n*  Encoding considerations: 8bit; application/sdj-wt-issuance values are a series of base64url-encoded values (some of which may be the empty string) separated by period ('.') or tilde ('~') characters.\r\n```\r\n\r\nThis tries to simplify it and make it less specific.",
              "createdAt": "2023-03-13T17:28:17Z",
              "updatedAt": "2023-03-13T17:28:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PukTn",
          "commit": {
            "abbreviatedOid": "18231cb"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-13T17:29:52Z",
          "updatedAt": "2023-03-13T17:29:52Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "```suggestion\r\n*  Encoding considerations: 8bit; application/sd-jwt-presentation values are a series of base64url-encoded values (some of which may be the empty string) separated by period ('.') or tilde ('~') characters.\r\n```\r\n\r\nThis tries to simplify it and make it less specific.",
              "createdAt": "2023-03-13T17:29:52Z",
              "updatedAt": "2023-03-13T17:29:52Z"
            }
          ]
        }
      ]
    },
    {
      "number": 230,
      "id": "PR_kwDOHTmVzM5LgVDx",
      "title": "clarify requirements for the combined formats",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/230",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "It struck me odd that we use an example as a normative definition of the combined formats.",
      "createdAt": "2023-03-07T18:35:58Z",
      "updatedAt": "2023-03-13T13:14:37Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "49b7a1357db3282512f4dbf81d192fdba51ba492",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "sakurann-tilde",
      "headRefOid": "541f3040981d0d03509f33d7b91c6d4ecc09cfa1",
      "closedAt": "2023-03-13T13:14:37Z",
      "mergedAt": "2023-03-13T13:14:37Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "9f3c6591fc556edad7cc0d97deb80064cf67dac2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5PPGH9",
          "commit": {
            "abbreviatedOid": "f37f883"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-07T19:23:42Z",
          "updatedAt": "2023-03-07T19:23:42Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5PqtSe",
          "commit": {
            "abbreviatedOid": "f37f883"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "Good observation, I just added another sentence re the last tilde character.",
          "createdAt": "2023-03-13T09:50:33Z",
          "updatedAt": "2023-03-13T09:50:57Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "```suggestion\r\nThe order of the base64url-encoded values MUST be an SD-JWT, Disclosures, and an optional Holder Binding JWT. In case there is no Holder Binding JWT, the last element is an empty string. The last separating tilde character MUST NOT be omitted.\r\n```",
              "createdAt": "2023-03-13T09:50:33Z",
              "updatedAt": "2023-03-13T09:50:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PsWJA",
          "commit": {
            "abbreviatedOid": "e9edc67"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-13T13:13:40Z",
          "updatedAt": "2023-03-13T13:13:41Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "```suggestion\r\nThe order of the base64url-encoded values MUST be an SD-JWT, Disclosures, and an optional Holder Binding JWT. In case there is no Holder Binding JWT, the last element MUST be an empty string. The last separating tilde character MUST NOT be omitted.\r\n```",
              "createdAt": "2023-03-13T13:13:40Z",
              "updatedAt": "2023-03-13T13:13:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PsWdZ",
          "commit": {
            "abbreviatedOid": "541f304"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-13T13:14:20Z",
          "updatedAt": "2023-03-13T13:14:20Z",
          "comments": []
        }
      ]
    },
    {
      "number": 232,
      "id": "PR_kwDOHTmVzM5Lzxb4",
      "title": "add example for JSON-LD in the main text",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/232",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Has to be merged after PR #212 (will not compile until then, too)\r\nResolves Issue #208.\r\n",
      "createdAt": "2023-03-10T23:57:36Z",
      "updatedAt": "2023-03-13T13:58:43Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "2e20dcb91bc18414e669ed7c9185224b68f013d1",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "sakurann-json",
      "headRefOid": "ffe9d79d55e0a8d57cc40e229693a29a142bd71a",
      "closedAt": "2023-03-13T13:58:42Z",
      "mergedAt": "2023-03-13T13:58:42Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "f05dbff64403043376a53d665935902602b6e2a1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5Pn6uN",
          "commit": {
            "abbreviatedOid": "495ca93"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "I miss the definition of the `typ` value for SD-JWT-based VCs. Suggest `vc+sd-jwt`. I also made some suggestions for text modifications. ",
          "createdAt": "2023-03-11T13:18:21Z",
          "updatedAt": "2023-03-11T13:27:52Z",
          "comments": [
            {
              "originalPosition": 92,
              "body": "I suggest to state \"using JSON payload\" or \"JSON claim set\" that reads much more positive than \"not ...\"",
              "createdAt": "2023-03-11T13:18:21Z",
              "updatedAt": "2023-03-11T13:27:52Z"
            },
            {
              "originalPosition": 97,
              "body": "again \"with the credential content being a set of JSON claims\" \"with JSON based content\". ",
              "createdAt": "2023-03-11T13:19:08Z",
              "updatedAt": "2023-03-11T13:27:52Z"
            },
            {
              "originalPosition": 98,
              "body": "I think the text should also define the `typ` value. Suggest `vc+sd-jwt`. I also suggest to explicitly mention the header name `cty` for the content type.  ",
              "createdAt": "2023-03-11T13:21:23Z",
              "updatedAt": "2023-03-11T13:27:52Z"
            },
            {
              "originalPosition": 104,
              "body": "\"would be\" or \"is\"?",
              "createdAt": "2023-03-11T13:21:53Z",
              "updatedAt": "2023-03-11T13:27:52Z"
            },
            {
              "originalPosition": 123,
              "body": "\"How the artifacts defined in this presentation can be used to represent a Verifiable Credential according to W3C Verifiable Credentials Data Model v2.0 ...\"",
              "createdAt": "2023-03-11T13:23:18Z",
              "updatedAt": "2023-03-11T13:27:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PoUcL",
          "commit": {
            "abbreviatedOid": "495ca93"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-12T06:16:29Z",
          "updatedAt": "2023-03-12T06:16:29Z",
          "comments": [
            {
              "originalPosition": 104,
              "body": "`would be` because we are not putting the example of a VP. ",
              "createdAt": "2023-03-12T06:16:29Z",
              "updatedAt": "2023-03-12T06:16:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PoUcX",
          "commit": {
            "abbreviatedOid": "495ca93"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-12T06:16:47Z",
          "updatedAt": "2023-03-12T06:16:47Z",
          "comments": [
            {
              "originalPosition": 123,
              "body": "paraphrased",
              "createdAt": "2023-03-12T06:16:47Z",
              "updatedAt": "2023-03-12T06:16:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PoUdY",
          "commit": {
            "abbreviatedOid": "495ca93"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-12T06:17:50Z",
          "updatedAt": "2023-03-12T06:17:50Z",
          "comments": [
            {
              "originalPosition": 97,
              "body": "JSON-LD is JSON, too. We say `without using JSON-LD` in OID4VP spec. I want to be explicit.",
              "createdAt": "2023-03-12T06:17:50Z",
              "updatedAt": "2023-03-12T06:17:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PoUdr",
          "commit": {
            "abbreviatedOid": "495ca93"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-12T06:18:06Z",
          "updatedAt": "2023-03-12T06:18:07Z",
          "comments": [
            {
              "originalPosition": 92,
              "body": "JSON-LD is JSON, too. We say `without using JSON-LD` in OID4VP spec. I want to be explicit that it is not JSON-LD",
              "createdAt": "2023-03-12T06:18:06Z",
              "updatedAt": "2023-03-12T06:18:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PoUlN",
          "commit": {
            "abbreviatedOid": "495ca93"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-12T06:24:48Z",
          "updatedAt": "2023-03-12T06:24:48Z",
          "comments": [
            {
              "originalPosition": 98,
              "body": "yes, `typ` should be defined for sd-jwt-vc, I added for clarity, but I strongly believe then it should be in the main text and not the examples that are **non-normative**.",
              "createdAt": "2023-03-12T06:24:48Z",
              "updatedAt": "2023-03-12T06:24:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PoUln",
          "commit": {
            "abbreviatedOid": "495ca93"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-12T06:25:17Z",
          "updatedAt": "2023-03-12T06:25:18Z",
          "comments": [
            {
              "originalPosition": 98,
              "body": "`cty` clarified.",
              "createdAt": "2023-03-12T06:25:18Z",
              "updatedAt": "2023-03-12T06:25:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Poh0T",
          "commit": {
            "abbreviatedOid": "495ca93"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-12T13:24:55Z",
          "updatedAt": "2023-03-12T13:24:56Z",
          "comments": [
            {
              "originalPosition": 98,
              "body": "Non-normative examples should not be using (or pseudo defining) nonexistent media types.  \r\n\r\n`vc+sd-jwt` isn't a registered media type nor is there text anywhere that's intending to define/register it. It also suggests a structured-suffix media type of `+sd-jwt` which similarly doesn't exist. Those maybe things that'd be desirable to define/register but not just by putting them in examples. That's a somewhat different direction than what's being proposed in #229 too. \r\n",
              "createdAt": "2023-03-12T13:24:55Z",
              "updatedAt": "2023-03-12T13:24:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Poj6h",
          "commit": {
            "abbreviatedOid": "f1de174"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-12T14:22:03Z",
          "updatedAt": "2023-03-12T14:22:04Z",
          "comments": [
            {
              "originalPosition": 73,
              "body": "Beware that this will change to https://www.w3.org/TR/vc-jwt when it goes to FPWD.\r\n\r\nYou might want to file an issue to track fixing it if you fear you will forget.",
              "createdAt": "2023-03-12T14:22:03Z",
              "updatedAt": "2023-03-12T14:22:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PokCt",
          "commit": {
            "abbreviatedOid": "f1de174"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-12T14:25:18Z",
          "updatedAt": "2023-03-12T14:25:18Z",
          "comments": [
            {
              "originalPosition": 92,
              "body": "I agree with @tlodderstedt ... The example and text should be what makes it explicit.\r\n\r\nperhaps \"W3C Verifiable Credentials as Native JSON Web Tokens\" ?\r\n\r\n",
              "createdAt": "2023-03-12T14:25:18Z",
              "updatedAt": "2023-03-12T14:25:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PokGN",
          "commit": {
            "abbreviatedOid": "f1de174"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-12T14:26:39Z",
          "updatedAt": "2023-03-12T14:26:39Z",
          "comments": [
            {
              "originalPosition": 99,
              "body": "```suggestion\r\nand does not use JSON-LD to provide semantic definitions for claims. The example uses a content type `credential-claims-set+json` defined in [@VC_JWT], Section 3 in a `cty` JOSE Header value.\r\n```",
              "createdAt": "2023-03-12T14:26:39Z",
              "updatedAt": "2023-03-12T14:26:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PokIC",
          "commit": {
            "abbreviatedOid": "f1de174"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-12T14:27:29Z",
          "updatedAt": "2023-03-12T14:27:29Z",
          "comments": [
            {
              "originalPosition": 104,
              "body": "will be with an issue marker ?",
              "createdAt": "2023-03-12T14:27:29Z",
              "updatedAt": "2023-03-12T14:27:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PokLa",
          "commit": {
            "abbreviatedOid": "f1de174"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-12T14:28:54Z",
          "updatedAt": "2023-03-12T14:28:55Z",
          "comments": [
            {
              "originalPosition": 110,
              "body": "not sure we want to call JWK a \"raw public key\".... I think `cnf` also supports by reference / URL... do we want to support both?",
              "createdAt": "2023-03-12T14:28:55Z",
              "updatedAt": "2023-03-12T14:28:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PokN4",
          "commit": {
            "abbreviatedOid": "f1de174"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-12T14:30:08Z",
          "updatedAt": "2023-03-12T14:30:09Z",
          "comments": [
            {
              "originalPosition": 126,
              "body": "```suggestion\r\nand uses a JSON-LD object as the claims set. The example uses a content type `credential+ld+json` defined in [@VC_DATA_v2.0], Section 6.3 in a `cty` JOSE Header value.\r\n```",
              "createdAt": "2023-03-12T14:30:08Z",
              "updatedAt": "2023-03-12T14:30:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PokQ4",
          "commit": {
            "abbreviatedOid": "f1de174"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-12T14:31:21Z",
          "updatedAt": "2023-03-12T14:31:22Z",
          "comments": [
            {
              "originalPosition": 134,
              "body": "same comments, if these sections going to be identical, it would be nice to be DRY-er.",
              "createdAt": "2023-03-12T14:31:21Z",
              "updatedAt": "2023-03-12T14:31:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PokYr",
          "commit": {
            "abbreviatedOid": "f1de174"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-12T14:34:45Z",
          "updatedAt": "2023-03-12T14:34:46Z",
          "comments": [
            {
              "originalPosition": 152,
              "body": "This reads a bit awkward, I think it would be nice to split the claims disclosure from the confirmation binding, but leave both as traits of the example.",
              "createdAt": "2023-03-12T14:34:45Z",
              "updatedAt": "2023-03-12T14:34:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PokgC",
          "commit": {
            "abbreviatedOid": "f1de174"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-12T14:37:54Z",
          "updatedAt": "2023-03-12T14:37:55Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\nOne of the common use cases of a signed JWT is representing a user's\r\n```",
              "createdAt": "2023-03-12T14:37:54Z",
              "updatedAt": "2023-03-12T14:37:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PokhM",
          "commit": {
            "abbreviatedOid": "f1de174"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-12T14:38:22Z",
          "updatedAt": "2023-03-12T14:38:23Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "I like this.",
              "createdAt": "2023-03-12T14:38:22Z",
              "updatedAt": "2023-03-12T14:38:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Poksu",
          "commit": {
            "abbreviatedOid": "f1de174"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-12T14:43:26Z",
          "updatedAt": "2023-03-12T14:43:27Z",
          "comments": [
            {
              "originalPosition": 102,
              "body": "the equivalence language reads roughly...  i think there are 2 cases:\r\n\r\nSD-JWT is a VC where:\r\n\r\n1. the verified / decoded claim set is a core data model media type. (with JSON-LD)\r\n2. the verified / decoded claim set JSON. (without JSON-LD)\r\n\r\nBoth are \"W3C VCs\" if a mapping exists for 2.\r\n\r\nIt would be preferable to call them both \"W3C Verifiable Credentials\", and define a minimal mapping to ensure 2 is valid, with caveats, like we are doing here: https://github.com/w3c/vc-jwt/pull/60",
              "createdAt": "2023-03-12T14:43:26Z",
              "updatedAt": "2023-03-12T14:43:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Pok04",
          "commit": {
            "abbreviatedOid": "f1de174"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "All my suggestions are nits.\r\n\r\nI support merging the PR with or without addressing them, it improves the document.\r\n",
          "createdAt": "2023-03-12T14:46:55Z",
          "updatedAt": "2023-03-12T14:46:55Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5PqrB6",
          "commit": {
            "abbreviatedOid": "f1de174"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-03-13T09:45:28Z",
          "updatedAt": "2023-03-13T09:47:52Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "The 'signed' part is besides the point (we did say only 'unencrypted' in the previous sentence) because that's what matters here.",
              "createdAt": "2023-03-13T09:45:29Z",
              "updatedAt": "2023-03-13T09:47:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PsX7j",
          "commit": {
            "abbreviatedOid": "f1de174"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-13T13:17:36Z",
          "updatedAt": "2023-03-13T13:17:36Z",
          "comments": [
            {
              "originalPosition": 110,
              "body": "```suggestion\r\na Holder's public key passed in a `cnf` Claim in the SD-JWT.\r\n```",
              "createdAt": "2023-03-13T13:17:36Z",
              "updatedAt": "2023-03-13T13:17:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PsYQk",
          "commit": {
            "abbreviatedOid": "f1de174"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-13T13:18:20Z",
          "updatedAt": "2023-03-13T13:18:20Z",
          "comments": [
            {
              "originalPosition": 134,
              "body": "```suggestion\r\nusing a Holder's public key passed in a `cnf` Claim in the SD-JWT.\r\n```",
              "createdAt": "2023-03-13T13:18:20Z",
              "updatedAt": "2023-03-13T13:18:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Psbih",
          "commit": {
            "abbreviatedOid": "495ca93"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-13T13:25:30Z",
          "updatedAt": "2023-03-13T13:25:31Z",
          "comments": [
            {
              "originalPosition": 98,
              "body": "externalized this into the issue #236 so that we can continue the discussion",
              "createdAt": "2023-03-13T13:25:31Z",
              "updatedAt": "2023-03-13T13:25:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Psch-",
          "commit": {
            "abbreviatedOid": "495ca93"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-13T13:27:36Z",
          "updatedAt": "2023-03-13T13:27:37Z",
          "comments": [
            {
              "originalPosition": 104,
              "body": "```suggestion\r\nA Holder-signed Verifiable Presentation as defined in [@VC_DATA_v2.0] is equivalent to\r\n```",
              "createdAt": "2023-03-13T13:27:36Z",
              "updatedAt": "2023-03-13T13:27:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PsdfL",
          "commit": {
            "abbreviatedOid": "f1de174"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-13T13:29:35Z",
          "updatedAt": "2023-03-13T13:29:35Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5PskWV",
          "commit": {
            "abbreviatedOid": "f1de174"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-13T13:42:48Z",
          "updatedAt": "2023-03-13T13:42:49Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nclaims. Likewise, anyone with the decryption key receiving encrypted JWT\r\n```",
              "createdAt": "2023-03-13T13:42:48Z",
              "updatedAt": "2023-03-13T13:42:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PslFa",
          "commit": {
            "abbreviatedOid": "f1de174"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-13T13:44:17Z",
          "updatedAt": "2023-03-13T13:44:18Z",
          "comments": [
            {
              "originalPosition": 73,
              "body": "thanks, issue #237",
              "createdAt": "2023-03-13T13:44:17Z",
              "updatedAt": "2023-03-13T13:44:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PsmL1",
          "commit": {
            "abbreviatedOid": "f1de174"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-13T13:46:20Z",
          "updatedAt": "2023-03-13T13:46:21Z",
          "comments": [
            {
              "originalPosition": 102,
              "body": "I will merge the current language as a starting point. can you please file an issue on this so that we can fix it later? (or I can do it too)",
              "createdAt": "2023-03-13T13:46:20Z",
              "updatedAt": "2023-03-13T13:46:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Pso3a",
          "commit": {
            "abbreviatedOid": "f1de174"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-13T13:49:07Z",
          "updatedAt": "2023-03-13T13:49:07Z",
          "comments": [
            {
              "originalPosition": 152,
              "body": "```suggestion\r\nThe following is a non-normative example of a Combined Format for Presentation for the SD-JWT with a Holder Binding JWT. It only discloses `type`, `medicinalProductName`, `atcCode` of the vaccine, `type` of the `recipient`, `type`, `order` and `dateOfVaccination`.\r\n```",
              "createdAt": "2023-03-13T13:49:07Z",
              "updatedAt": "2023-03-13T13:49:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PsqBf",
          "commit": {
            "abbreviatedOid": "9ede0fd"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-13T13:51:24Z",
          "updatedAt": "2023-03-13T13:51:25Z",
          "comments": [
            {
              "originalPosition": 92,
              "body": "keeping the language for now after discussion with other editors. please file an issue if you feel strongly about it.",
              "createdAt": "2023-03-13T13:51:24Z",
              "updatedAt": "2023-03-13T13:51:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PsqRC",
          "commit": {
            "abbreviatedOid": "495ca93"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-13T13:51:54Z",
          "updatedAt": "2023-03-13T13:51:54Z",
          "comments": [
            {
              "originalPosition": 97,
              "body": "keeping the language for now after discussion with other editors. please file an issue if you feel strongly about it.",
              "createdAt": "2023-03-13T13:51:54Z",
              "updatedAt": "2023-03-13T13:51:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PsqhU",
          "commit": {
            "abbreviatedOid": "9ede0fd"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-13T13:52:23Z",
          "updatedAt": "2023-03-13T13:52:23Z",
          "comments": []
        }
      ]
    },
    {
      "number": 233,
      "id": "PR_kwDOHTmVzM5Lz6le",
      "title": "added examples for ISO mDL 18013-5 data model",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/233",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses Issue #144 and expresses ISO 18013-5 mDL data model using SD-JWT.\r\n18013-5 itself is in CBOR, so this SD-JWT includes all of the data elements/use claims that are mandatory by 18013-5 in JSON.\r\n\r\nuses same data set as in [OID4VP ISO mDL example](https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-iso-mobile-driving-licence-)\r\n\r\nGiven EUDIW ARF, this PR and PR #210 should probably be combined into one.",
      "createdAt": "2023-03-11T01:18:18Z",
      "updatedAt": "2023-06-28T19:06:24Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "a94e2d1a2c4306a45e7d4a42df482d3fa19a9972",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "180135",
      "headRefOid": "74327d48d9b241482b27f368f7389744afb8f043",
      "closedAt": "2023-06-28T19:06:24Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I can't comment on the validity of the mDL-specifics, but overall this looks good. ",
          "createdAt": "2023-03-13T13:28:48Z",
          "updatedAt": "2023-03-13T13:28:48Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "the text needs to be updated to the new terminology and the yml file needs to be reformatted, but after that should be good to go.",
          "createdAt": "2023-06-20T03:59:58Z",
          "updatedAt": "2023-06-20T03:59:58Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "closing in favor of #304. the work could continue in sd-jwt-vc repo",
          "createdAt": "2023-06-28T19:06:22Z",
          "updatedAt": "2023-06-28T19:06:22Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5PqoDI",
          "commit": {
            "abbreviatedOid": "2851599"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-13T09:39:07Z",
          "updatedAt": "2023-03-13T09:51:23Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "```suggestion\r\nAn SD-JWT is equivalent to an `issuerSigned` object as defined in [@ISO.18013-5].\r\n```",
              "createdAt": "2023-03-13T09:39:07Z",
              "updatedAt": "2023-03-13T09:51:23Z"
            },
            {
              "originalPosition": 49,
              "body": "```suggestion\r\nA Combined Format for Presentation for the SD-JWT that discloses only `nameSpace`, `issuing_authority`, and `issuing_country`, and has a Holder Binding JWT, could look as follows:\r\n```",
              "createdAt": "2023-03-13T09:40:37Z",
              "updatedAt": "2023-03-13T09:51:23Z"
            },
            {
              "originalPosition": 1,
              "body": "Is this intended to be here?",
              "createdAt": "2023-03-13T09:41:22Z",
              "updatedAt": "2023-03-13T09:51:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5XJMQy",
          "commit": {
            "abbreviatedOid": "2851599"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-06-05T08:40:57Z",
          "updatedAt": "2023-06-05T08:41:46Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "the same by me, shouldn't this text be removed?",
              "createdAt": "2023-06-05T08:40:58Z",
              "updatedAt": "2023-06-05T08:41:46Z"
            },
            {
              "originalPosition": 7,
              "body": "why \"n\" is the only claim enclosed in double quotes?",
              "createdAt": "2023-06-05T08:41:35Z",
              "updatedAt": "2023-06-05T08:41:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YpcVe",
          "commit": {
            "abbreviatedOid": "2851599"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-20T03:58:35Z",
          "updatedAt": "2023-06-20T03:58:35Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "```suggestion\r\n```",
              "createdAt": "2023-06-20T03:58:35Z",
              "updatedAt": "2023-06-20T03:58:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YpcZx",
          "commit": {
            "abbreviatedOid": "2851599"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-20T03:59:02Z",
          "updatedAt": "2023-06-20T03:59:02Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I had the same question, but I think it works even without \". (@danielfett)",
              "createdAt": "2023-06-20T03:59:02Z",
              "updatedAt": "2023-06-20T03:59:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Y5sY9",
          "commit": {
            "abbreviatedOid": "74327d4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Lots of little changes needed to bring this PR up to date with recent(ish) changes to the way example content is generated and terminology in document itself. ",
          "createdAt": "2023-06-21T19:01:05Z",
          "updatedAt": "2023-06-21T19:18:00Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "```suggestion\r\nAn SD-JWT Presentation with a Key Binding JWT is equivalent to a Document\r\n```",
              "createdAt": "2023-06-21T19:01:05Z",
              "updatedAt": "2023-06-21T19:18:00Z"
            },
            {
              "originalPosition": 45,
              "body": "```suggestion\r\nkey_binding: True\r\n```",
              "createdAt": "2023-06-21T19:03:18Z",
              "updatedAt": "2023-06-21T19:18:00Z"
            },
            {
              "originalPosition": 3,
              "body": "Is there reason to not let it use the holder_key from settings.yml? I think that's what will sign the KB-JWT anyway... ",
              "createdAt": "2023-06-21T19:06:11Z",
              "updatedAt": "2023-06-21T19:18:00Z"
            },
            {
              "originalPosition": 1,
              "body": "don't need this file anymore ",
              "createdAt": "2023-06-21T19:06:47Z",
              "updatedAt": "2023-06-21T19:18:00Z"
            },
            {
              "originalPosition": 1,
              "body": "don't need this file anymore ",
              "createdAt": "2023-06-21T19:06:54Z",
              "updatedAt": "2023-06-21T19:18:00Z"
            },
            {
              "originalPosition": 1,
              "body": "don't need this file anymore ",
              "createdAt": "2023-06-21T19:06:59Z",
              "updatedAt": "2023-06-21T19:18:00Z"
            },
            {
              "originalPosition": 1,
              "body": "don't need this file anymore ",
              "createdAt": "2023-06-21T19:07:04Z",
              "updatedAt": "2023-06-21T19:18:00Z"
            },
            {
              "originalPosition": 5,
              "body": "huh? but whatever - don't need this file anymore ",
              "createdAt": "2023-06-21T19:07:23Z",
              "updatedAt": "2023-06-21T19:18:00Z"
            },
            {
              "originalPosition": 1,
              "body": "don't need this file anymore ",
              "createdAt": "2023-06-21T19:07:30Z",
              "updatedAt": "2023-06-21T19:18:00Z"
            },
            {
              "originalPosition": 1,
              "body": "don't need this file anymore ",
              "createdAt": "2023-06-21T19:07:40Z",
              "updatedAt": "2023-06-21T19:18:00Z"
            },
            {
              "originalPosition": 1,
              "body": "don't need this file anymore ",
              "createdAt": "2023-06-21T19:07:44Z",
              "updatedAt": "2023-06-21T19:18:00Z"
            },
            {
              "originalPosition": 1,
              "body": "don't need this file anymore ",
              "createdAt": "2023-06-21T19:07:51Z",
              "updatedAt": "2023-06-21T19:18:00Z"
            },
            {
              "originalPosition": 49,
              "body": "```suggestion\r\nAn SD-JWT Presentation that discloses only `nameSpace`, `issuing_authority`, and `issuing_country`, and has a Key Binding JWT, could look as follows:\r\n```",
              "createdAt": "2023-06-21T19:08:03Z",
              "updatedAt": "2023-06-21T19:18:00Z"
            },
            {
              "originalPosition": 33,
              "body": "```suggestion\r\nIn this example, Key Binding is applied and the Key Binding JWT is signed with the private key corresponding to\r\nthe raw public key passed in a `cnf` Claim in the SD-JWT.\r\n```",
              "createdAt": "2023-06-21T19:12:32Z",
              "updatedAt": "2023-06-21T19:18:00Z"
            },
            {
              "originalPosition": 51,
              "body": "```suggestion\r\n<{{examples/18013-5/sd_jwt_presentation.txt}}\r\n```",
              "createdAt": "2023-06-21T19:14:41Z",
              "updatedAt": "2023-06-21T19:18:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ZNVKv",
          "commit": {
            "abbreviatedOid": "74327d4"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-06-24T14:33:27Z",
          "updatedAt": "2023-06-24T14:34:13Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "ok, let's try do to some clarification.\r\n\r\nthis representation doesn't contain the elements of a typical mdoc structure like the one below\r\n\r\n````\r\n{\r\n 'version': '1.0',\r\n 'documents': Array of $doc,\r\n 'status': 0\r\n}\r\n````\r\nbut just a doc, and its ok only if we explicitly say it in the text. At the same time we find the claim `version` in the proposed example, so it seems a mix. Just give some clarification about this not conventional data structure.\r\n\r\nGoing to the single doc (considering that an mdoc is able to contain more than a single doc), we have\r\n\r\n````\r\n{\r\n \"docType\": \"org.iso.18013.5.1.mDL\",\r\n \"issuerSigned\": {\r\n     \"nameSpaces\":  {\r\n         \"org.iso.18013.5.1\": [ $array of digests ]}, \r\n     \"issuerAuth\": {CBORTag 18 containing a COSE Sign1 Document without a content-type, that's the MSO}\r\n },\r\n \"deviceSigned\": ... not of interest for SD-JWT\r\n}\r\n````\r\n\r\nI agree about the flattened approach proposed in this PR, that makes sd-jwt one step forward.\r\n\r\nProbably the nameSpaces may have the `nameSpace` as a dictionary, as it is in mdoc cbor",
              "createdAt": "2023-06-24T14:33:27Z",
              "updatedAt": "2023-06-24T14:34:13Z"
            }
          ]
        }
      ]
    },
    {
      "number": 234,
      "id": "PR_kwDOHTmVzM5Lz9x6",
      "title": "clarify other specifications may define how to envelop multiple SD-JWT when presenting",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/234",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses issue #114.\r\n\r\n> Another specification and/or profile of this specification may define other mechanisms that enable\r\nenveloping in a single signed JWT more than one Combined Format for Presentation without a Holder\r\nBinding JWT.",
      "createdAt": "2023-03-11T01:58:31Z",
      "updatedAt": "2023-03-13T13:43:27Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "a94e2d1a2c4306a45e7d4a42df482d3fa19a9972",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "multiple-sdjwt",
      "headRefOid": "110e7b0278341dd017902ebb4729462a20018eb9",
      "closedAt": "2023-03-13T13:43:27Z",
      "mergedAt": "2023-03-13T13:43:27Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "2e20dcb91bc18414e669ed7c9185224b68f013d1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5Pqnls",
          "commit": {
            "abbreviatedOid": "99041d8"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-13T09:38:04Z",
          "updatedAt": "2023-03-13T09:38:05Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "```suggestion\r\nOther specifications or profiles of this specification may define alternative formats for transporting the Combined Format for Presentation, enveloping multiple such objects into one object, and proving Holder Binding.\r\n```",
              "createdAt": "2023-03-13T09:38:05Z",
              "updatedAt": "2023-03-13T09:38:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PquDF",
          "commit": {
            "abbreviatedOid": "99041d8"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-13T09:51:47Z",
          "updatedAt": "2023-03-13T09:51:47Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5Psjw5",
          "commit": {
            "abbreviatedOid": "99041d8"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-13T13:41:38Z",
          "updatedAt": "2023-03-13T13:41:39Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "```suggestion\r\nOther specifications or profiles of this specification may define alternative formats for transporting the Combined Format for Presentation that envelopes multiple such objects into one object, and provides Holder Binding using means other than Holder Binding JWT.\r\n```",
              "createdAt": "2023-03-13T13:41:38Z",
              "updatedAt": "2023-03-13T13:41:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PskLS",
          "commit": {
            "abbreviatedOid": "110e7b0"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-13T13:42:28Z",
          "updatedAt": "2023-03-13T13:42:28Z",
          "comments": []
        }
      ]
    },
    {
      "number": 238,
      "id": "PR_kwDOHTmVzM5L5hii",
      "title": "add changelog from the last few PRs",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/238",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-03-13T14:14:34Z",
      "updatedAt": "2023-03-13T15:09:39Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "f05dbff64403043376a53d665935902602b6e2a1",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "change-log",
      "headRefOid": "0bd3bd0d74fda332859460300ab58773950b48d3",
      "closedAt": "2023-03-13T15:09:39Z",
      "mergedAt": "2023-03-13T15:09:39Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "9b6fc6abc40aba045853d9b4793d5ba35385a4c5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5Ps2Rz",
          "commit": {
            "abbreviatedOid": "0bd3bd0"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-13T14:15:13Z",
          "updatedAt": "2023-03-13T14:15:14Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "removing since this has been accidentally re-added in this commit: https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/228/commits/183afe5630eaac329f336b615a9ed6049a5ab5de",
              "createdAt": "2023-03-13T14:15:13Z",
              "updatedAt": "2023-03-13T14:15:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Ps2hp",
          "commit": {
            "abbreviatedOid": "0bd3bd0"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-13T14:15:41Z",
          "updatedAt": "2023-03-13T14:15:42Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "felt like saying \"Add security goals\" was too much.",
              "createdAt": "2023-03-13T14:15:41Z",
              "updatedAt": "2023-03-13T14:15:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Pta88",
          "commit": {
            "abbreviatedOid": "0bd3bd0"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-13T15:09:10Z",
          "updatedAt": "2023-03-13T15:09:11Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "makes sense ",
              "createdAt": "2023-03-13T15:09:11Z",
              "updatedAt": "2023-03-13T15:09:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5PtbB8",
          "commit": {
            "abbreviatedOid": "0bd3bd0"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-13T15:09:20Z",
          "updatedAt": "2023-03-13T15:09:20Z",
          "comments": []
        }
      ]
    },
    {
      "number": 239,
      "id": "PR_kwDOHTmVzM5L6GUj",
      "title": "Add a -04 placeholder to the doc history",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/239",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Add a -04 placeholder to the doc history (to hopefully avoid a mixup like last time) ",
      "createdAt": "2023-03-13T15:38:23Z",
      "updatedAt": "2023-06-04T21:51:16Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "9b6fc6abc40aba045853d9b4793d5ba35385a4c5",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "h04",
      "headRefOid": "0d9c9904afa34542c62e1a3517bc030a3943d54f",
      "closedAt": "2023-03-13T15:51:06Z",
      "mergedAt": "2023-03-13T15:51:06Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "7aa6f926bfc684eae530ebf1210d74b636ae0a06"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 245,
      "id": "PR_kwDOHTmVzM5Ncp-r",
      "title": "Process disclosures properly",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/245",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Fixes Issue #244 ",
      "createdAt": "2023-04-03T03:19:28Z",
      "updatedAt": "2023-04-11T16:02:12Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "7aa6f926bfc684eae530ebf1210d74b636ae0a06",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/process-disclosures-properly",
      "headRefOid": "d961bc6c271a62ee58790848ac82e28861404e53",
      "closedAt": "2023-04-11T16:02:12Z",
      "mergedAt": "2023-04-11T16:02:12Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "9cff950d1e2bc9a629f030061f7d3d6f5babfb4d"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @danielfett! I think the two folks should be acknowledged and the small change around the `_sd_alg` claim incorporated. Then I think this should be merged and we should publish a -04 as basically a bug fix. The issue @panva https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/242#issuecomment-1486865620 found kinda undermines the whole point of SD-JWT and we should have a published version out that fixes that. ",
          "createdAt": "2023-04-04T20:37:16Z",
          "updatedAt": "2023-04-04T20:37:16Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5RkOZQ",
          "commit": {
            "abbreviatedOid": "088a60c"
          },
          "author": "panva",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-04-03T07:37:19Z",
          "updatedAt": "2023-04-03T07:37:19Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5RwpCE",
          "commit": {
            "abbreviatedOid": "088a60c"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-04T20:08:40Z",
          "updatedAt": "2023-04-04T20:08:41Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "```suggestion\r\n    5. Check that the `_sd_alg` claim value is understood and the hash algorithm is deemed secure.\r\n```\r\n\r\nThe `_sd_alg` claim  is optional with a default now so removing the \"is present\" part. I know it's not directly related to this PR but I just noticed it. \r\n",
              "createdAt": "2023-04-04T20:08:40Z",
              "updatedAt": "2023-04-04T20:11:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5RxhTC",
          "commit": {
            "abbreviatedOid": "d87195f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-04-04T23:52:37Z",
          "updatedAt": "2023-04-04T23:52:37Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5RyVjW",
          "commit": {
            "abbreviatedOid": "d87195f"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-04-05T04:49:52Z",
          "updatedAt": "2023-04-06T08:58:32Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "```suggestion\r\n    2. For each Disclosure provided:\r\n        1. If the Disclosure is not a JSON-encoded array of three elements, the Verifier MUST reject the Presentation.\r\n        2. Calculate the digest over the base64url-encoded string as described in (#hashing_disclosures).\r\n```\r\nthe rest of the document seem to use `base64url-encoded`, we might want to do a clean up PR on that if not in this one",
              "createdAt": "2023-04-06T08:45:03Z",
              "updatedAt": "2023-04-06T08:58:32Z"
            },
            {
              "originalPosition": 35,
              "body": "```suggestion\r\n          1. Compare the value with the digests calculated previously and find the matching Disclosure. If no such Disclosure can be found, the digest MUST be ignored.\r\n```",
              "createdAt": "2023-04-06T08:47:58Z",
              "updatedAt": "2023-04-11T16:01:36Z"
            },
            {
              "originalPosition": 36,
              "body": "shouldn't this belong to a `2. For each Disclosure provided:` section?\r\n```suggestion\r\n```",
              "createdAt": "2023-04-06T08:50:43Z",
              "updatedAt": "2023-04-06T08:58:32Z"
            },
            {
              "originalPosition": 44,
              "body": "```suggestion\r\n          5. If the decoded value contains an `_sd` key in an object, recursively process each entry in the `_sd` array by repeating these steps 1 to 5.\r\n```\r\n`described here` can mean a lot of things...",
              "createdAt": "2023-04-06T08:53:00Z",
              "updatedAt": "2023-04-06T08:58:32Z"
            },
            {
              "originalPosition": 27,
              "body": "I think I asked before but what is the purpose here?",
              "createdAt": "2023-04-06T08:57:19Z",
              "updatedAt": "2023-04-06T08:58:32Z"
            },
            {
              "originalPosition": 57,
              "body": "@bc-pi can you please put in the alphabetic order? `Matthew Miller` seems to be out of place too.",
              "createdAt": "2023-04-06T08:58:25Z",
              "updatedAt": "2023-04-06T08:58:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5R9HN3",
          "commit": {
            "abbreviatedOid": "d87195f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-06T14:22:58Z",
          "updatedAt": "2023-04-06T14:22:59Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "Will do. Sorry, I somehow missed that they were in alphabetic order on first name (guess I was looking at last name and just didn't see it). ",
              "createdAt": "2023-04-06T14:22:59Z",
              "updatedAt": "2023-04-06T19:12:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5R-22W",
          "commit": {
            "abbreviatedOid": "d87195f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-06T19:13:21Z",
          "updatedAt": "2023-04-06T19:13:21Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "done w/ ca20ac44bdc0c2d9022256ad7526464d67c73620",
              "createdAt": "2023-04-06T19:13:21Z",
              "updatedAt": "2023-04-06T19:13:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5R_whG",
          "commit": {
            "abbreviatedOid": "ca20ac4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-06T23:01:30Z",
          "updatedAt": "2023-04-06T23:01:30Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "I think it could go in either spot but having it here might be better from a security/integrity perspective because it suggests not to do anything with the content of a Disclosure until/unless it's digest value is found in an _sd element. ",
              "createdAt": "2023-04-06T23:01:30Z",
              "updatedAt": "2023-04-06T23:01:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5R_w4N",
          "commit": {
            "abbreviatedOid": "ca20ac4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-06T23:04:11Z",
          "updatedAt": "2023-04-06T23:04:12Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "I think digest would be plural in that suggested change? i.e for the value from the _sd array, compare it to each of the calculated Disclosure digests to find the match - it's being compared to the set of digests rather than a single one.\r\n\r\n\"Compare the value with the digest calculated ...\" -> \"Compare the value with the digests calculated ...\"\r\n\r\n```suggestion\r\n          1. Compare the value with the digests calculated in an earlier processing step, and find the matching Disclosure. If no such Disclosure can be found, the digest MUST be ignored.\r\n```",
              "createdAt": "2023-04-06T23:04:12Z",
              "updatedAt": "2023-04-06T23:04:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5SMa6g",
          "commit": {
            "abbreviatedOid": "ca20ac4"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-11T11:00:10Z",
          "updatedAt": "2023-04-11T11:18:57Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "This might be required depending on how the processing is implemented. It's an implementation detail, but hopefully helps with understanding the algorithm.",
              "createdAt": "2023-04-11T11:00:10Z",
              "updatedAt": "2023-04-11T11:18:57Z"
            },
            {
              "originalPosition": 29,
              "body": "base64url-encoded works for me.",
              "createdAt": "2023-04-11T11:01:59Z",
              "updatedAt": "2023-04-11T11:18:57Z"
            },
            {
              "originalPosition": 35,
              "body": "In *an* earler processing step is a bit unclear. How about just \"previously\"?",
              "createdAt": "2023-04-11T11:03:27Z",
              "updatedAt": "2023-04-11T11:18:57Z"
            },
            {
              "originalPosition": 36,
              "body": "My reasoning for putting that check here was that until here, there is no need to JSON-parse the disclosures. It feels more natural to me to check before further processing.",
              "createdAt": "2023-04-11T11:05:03Z",
              "updatedAt": "2023-04-11T11:18:57Z"
            },
            {
              "originalPosition": 44,
              "body": "Agree to the need to improve, but the proposed wording is not quite correct. I propose to use a reference as follows:\r\n\r\n```suggestion\r\n          5. If the decoded value contains an `_sd` key in an object, recursively process the key using the steps described in (*).\r\n```",
              "createdAt": "2023-04-11T11:18:12Z",
              "updatedAt": "2023-04-11T11:18:57Z"
            },
            {
              "originalPosition": 30,
              "body": "Add marker so that we can refer to this later:\r\n\r\n```suggestion\r\n    3. Find all `_sd` keys in the SD-JWT payload. For each such key perform the following steps (*):\r\n```",
              "createdAt": "2023-04-11T11:18:36Z",
              "updatedAt": "2023-04-11T11:18:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5SM49Y",
          "commit": {
            "abbreviatedOid": "ca20ac4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-11T12:11:14Z",
          "updatedAt": "2023-04-11T12:11:14Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "base64url-encoded works for me too. So it'd be\r\n```suggestion\r\n    2. For each Disclosure provided:\r\n       1. Calculate the digest over the base64url-encoded string as described in (#hashing_disclosures).\r\n```",
              "createdAt": "2023-04-11T12:11:14Z",
              "updatedAt": "2023-04-11T12:11:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5SM6bf",
          "commit": {
            "abbreviatedOid": "ca20ac4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-11T12:15:10Z",
          "updatedAt": "2023-04-11T12:15:10Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "I think just \"previously\" works okay too. ",
              "createdAt": "2023-04-11T12:15:10Z",
              "updatedAt": "2023-04-11T15:03:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5SOzxh",
          "commit": {
            "abbreviatedOid": "ca20ac4"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-11T15:53:51Z",
          "updatedAt": "2023-04-11T15:53:52Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "> it suggests not to do anything with the content of a Disclosure until/unless it's digest value is found in an _sd element.\r\n\r\nok, agreed to keep this sentence here.",
              "createdAt": "2023-04-11T15:53:51Z",
              "updatedAt": "2023-04-11T15:53:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5SO15r",
          "commit": {
            "abbreviatedOid": "159d3d5"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-11T15:58:14Z",
          "updatedAt": "2023-04-11T15:58:15Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "it can be another PR, but I think this should be an implementation considerations... this keeps bugging me, but maybe it's only me.",
              "createdAt": "2023-04-11T15:58:14Z",
              "updatedAt": "2023-04-11T15:58:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5SO17d",
          "commit": {
            "abbreviatedOid": "159d3d5"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-04-11T15:58:19Z",
          "updatedAt": "2023-04-11T15:58:19Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5SO3Gu",
          "commit": {
            "abbreviatedOid": "159d3d5"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-11T16:00:35Z",
          "updatedAt": "2023-04-11T16:00:36Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "#247 ",
              "createdAt": "2023-04-11T16:00:36Z",
              "updatedAt": "2023-04-11T16:00:36Z"
            }
          ]
        }
      ]
    },
    {
      "number": 246,
      "id": "PR_kwDOHTmVzM5Nghuo",
      "title": "Add progressive redaction",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/246",
      "state": "MERGED",
      "author": "OR13",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "See #243 ",
      "createdAt": "2023-04-03T16:41:44Z",
      "updatedAt": "2023-04-25T15:49:26Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "7aa6f926bfc684eae530ebf1210d74b636ae0a06",
      "headRepository": "OR13/oauth-selective-disclosure-jwt",
      "headRefName": "feat/243-progressive-redaction",
      "headRefOid": "b8da26fc5b1825bf5f887b8880d52b64fbc015b7",
      "closedAt": "2023-04-25T15:49:26Z",
      "mergedAt": "2023-04-25T15:49:26Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "6bf840ed1541587581b0023bd39db9b3383911b8"
      },
      "comments": [
        {
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "body": "accepted suggestions",
          "createdAt": "2023-04-12T20:42:18Z",
          "updatedAt": "2023-04-12T20:42:18Z"
        },
        {
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "body": "anything I can do to help push this along?",
          "createdAt": "2023-04-25T01:01:43Z",
          "updatedAt": "2023-04-25T01:01:43Z"
        },
        {
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I have applied suggestions.",
          "createdAt": "2023-04-25T01:07:37Z",
          "updatedAt": "2023-04-25T01:07:37Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5SKDxC",
          "commit": {
            "abbreviatedOid": "a8ab0c5"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "thank you for doing the PR - I like the content, would just like to see the text use already defined terms unless there is a strong reason to introduce a new terminology such as `reduction`",
          "createdAt": "2023-04-11T02:38:09Z",
          "updatedAt": "2023-04-11T02:39:18Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "```suggestion\r\n## Selective Disclosure without Holder Binding\r\n\r\nThe Issuers and the Verifiers should be aware that when Holder Binding is not present,\r\nany entity that is not the original receiver can be presenting the Combined Format for Presentation.\r\nWhen doing so, that entity may be applying selective disclosure to the SD-JWT\r\nthat has already been previously selectively disclosed.\r\n\r\nFor example, a device manufacturer might produce an SD-JWT\r\ncontaining information about upstream and downstream supply chain contributors.\r\nEach supply chain party can verify only the claims that were selectively disclosed to them\r\nby an upstream party, and they can choose to apply selective disclosure to those claims\r\nwhen presenting to a downstream party.\r\n\r\nIn some scenarios this behavior could be desirable,\r\nbut if it is not, the Issuers are encouraged to apply Holder Binding.\r\n```\r\nI like the direction of the text, tried to paraphrase so that already defined terms are re-used.\r\nUnless progressive redaction\" is a term well-defined in supply chain industry..?\r\n",
              "createdAt": "2023-04-11T02:38:10Z",
              "updatedAt": "2023-04-11T02:39:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5RqWfB",
          "commit": {
            "abbreviatedOid": "52d4b5b"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "I think the focus for enforcing holder binding should be on the Verifiers (the Issuers must be cooperating for HB to work, but it's not their duty to enforce it).\r\n\r\nAlso changed some wording.",
          "createdAt": "2023-04-04T02:01:16Z",
          "updatedAt": "2023-04-14T08:50:01Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "This text is phrased to show a problem, but we might as well word this to highlight a feature (and then notice that this might be undesirable in some circumstances).",
              "createdAt": "2023-04-04T02:01:17Z",
              "updatedAt": "2023-04-14T08:49:44Z"
            },
            {
              "originalPosition": 18,
              "body": "This is both a duty of the Issuers and the Verifiers. The Verifiers need to enforce the holder binding.",
              "createdAt": "2023-04-04T02:01:46Z",
              "updatedAt": "2023-04-14T08:49:44Z"
            },
            {
              "originalPosition": 4,
              "body": "This is a somewhat nondescript section title and feels duplicate to the \"Holder Binding\" title above; how about this?\r\n```suggestion\r\n## Forwarding Credentials\r\n```",
              "createdAt": "2023-04-14T08:43:46Z",
              "updatedAt": "2023-04-14T08:49:44Z"
            },
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nWhen Holder Binding is not enforced,\r\nany entity in possession of a Combined Format for Presentation can forward the contents to third parties.\r\n```",
              "createdAt": "2023-04-14T08:45:26Z",
              "updatedAt": "2023-04-14T08:49:44Z"
            },
            {
              "originalPosition": 9,
              "body": "```suggestion\r\nWhen doing so, that entity may remove Disclosures such that the receiver\r\nlearns only a subset of the claims contained in the original Combined Format for Presentation.\r\n```",
              "createdAt": "2023-04-14T08:47:06Z",
              "updatedAt": "2023-04-14T08:49:44Z"
            },
            {
              "originalPosition": 15,
              "body": "```suggestion\r\nby an upstream party, and they can choose to further restrict the disclosed claims \r\nwhen presenting to a downstream party.\r\n```",
              "createdAt": "2023-04-14T08:47:58Z",
              "updatedAt": "2023-04-14T08:49:44Z"
            },
            {
              "originalPosition": 18,
              "body": "```suggestion\r\nIn some scenarios this behavior could be desirable,\r\nbut if it is not, Verifiers MUST enforce Holder Binding.\r\n```",
              "createdAt": "2023-04-14T08:48:28Z",
              "updatedAt": "2023-04-14T12:21:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Skkh7",
          "commit": {
            "abbreviatedOid": "52d4b5b"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-14T11:56:30Z",
          "updatedAt": "2023-04-14T11:56:30Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "```suggestion\r\nIn some scenarios this behavior could be desirable,\r\nbut if it is not, Verifiers are encouraged to enforce Holder Binding.\r\n```\r\nmaybe not use a MUST here? ",
              "createdAt": "2023-04-14T11:56:30Z",
              "updatedAt": "2023-04-14T11:56:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5SkpUB",
          "commit": {
            "abbreviatedOid": "52d4b5b"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-14T12:06:14Z",
          "updatedAt": "2023-04-14T12:06:15Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "or \"need to\"?",
              "createdAt": "2023-04-14T12:06:14Z",
              "updatedAt": "2023-04-14T12:06:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Skr-5",
          "commit": {
            "abbreviatedOid": "52d4b5b"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-14T12:13:26Z",
          "updatedAt": "2023-04-14T12:13:26Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "\"need to\" would work too. I was just wanting to avoid introducing the capitalized normative language in this section that is about general conceptual guidance. ",
              "createdAt": "2023-04-14T12:13:26Z",
              "updatedAt": "2023-04-14T12:13:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Sku0o",
          "commit": {
            "abbreviatedOid": "52d4b5b"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-14T12:21:05Z",
          "updatedAt": "2023-04-14T12:21:06Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "```suggestion\r\nIn some scenarios this behavior could be desirable,\r\nbut if it is not, Verifiers need to enforce Holder Binding.\r\n```",
              "createdAt": "2023-04-14T12:21:05Z",
              "updatedAt": "2023-04-14T12:21:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Sxw5U",
          "commit": {
            "abbreviatedOid": "52d4b5b"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-17T18:57:18Z",
          "updatedAt": "2023-04-17T18:57:19Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "@Sakurann before I accept, what do you think?",
              "createdAt": "2023-04-17T18:57:18Z",
              "updatedAt": "2023-04-17T18:57:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5SxxD1",
          "commit": {
            "abbreviatedOid": "52d4b5b"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-17T18:57:46Z",
          "updatedAt": "2023-04-17T18:57:46Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "hmm, not sure about this actually.\r\n\r\nI think we do want to warn the issuer to apply holder binding.\r\n\r\nWe want the verifier to know that when holder binding is not enforced, they can receive presentations form parties other than the original holder, and that this is always the case when any verifier does not enforce holder binding, but that this can be a feature of not using holder binding, in certain issuance scenarios.",
              "createdAt": "2023-04-17T18:57:46Z",
              "updatedAt": "2023-04-17T19:01:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5SyALS",
          "commit": {
            "abbreviatedOid": "52d4b5b"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-17T19:43:34Z",
          "updatedAt": "2023-04-17T19:43:35Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "This seems better, maybe position \"receiver\" in terms of a \"next verifier\" to emphasis the \"enforcement\" comment you made earlier.",
              "createdAt": "2023-04-17T19:43:35Z",
              "updatedAt": "2023-04-17T19:43:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5SyA0r",
          "commit": {
            "abbreviatedOid": "52d4b5b"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-17T19:45:47Z",
          "updatedAt": "2023-04-17T19:45:47Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "maybe \"Issuers ought to (provide for / leverage / require ), and Verifiers ought to enforce Holder Binding\".",
              "createdAt": "2023-04-17T19:45:47Z",
              "updatedAt": "2023-04-17T19:45:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5S0n-0",
          "commit": {
            "abbreviatedOid": "52d4b5b"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-18T08:07:14Z",
          "updatedAt": "2023-04-18T08:11:46Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "I think this is relevant to #254. Is `Credentials` a term used for SD-JWT + disclosures..?",
              "createdAt": "2023-04-18T08:07:14Z",
              "updatedAt": "2023-04-18T08:11:46Z"
            },
            {
              "originalPosition": 15,
              "body": "whitespace in the end of line 794 needs to be removed or won't compile",
              "createdAt": "2023-04-18T08:08:20Z",
              "updatedAt": "2023-04-18T08:11:46Z"
            },
            {
              "originalPosition": 15,
              "body": "I would prefer `further remove`. further restrict means something different to me.",
              "createdAt": "2023-04-18T08:09:33Z",
              "updatedAt": "2023-04-18T08:11:46Z"
            },
            {
              "originalPosition": 18,
              "body": "I think the point is **the Issuers** need to enforce holder binding if it does not want anyone to be able to forward sd-jwts all over. it's not about verifiers ignoring holder binding when it is present.\r\n\r\n(I am ok with `need to enforce` but it should be issuers, not verifiers)",
              "createdAt": "2023-04-18T08:11:04Z",
              "updatedAt": "2023-04-18T08:11:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5S0rUP",
          "commit": {
            "abbreviatedOid": "52d4b5b"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-18T08:14:44Z",
          "updatedAt": "2023-04-18T08:14:44Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "How can an Issuer enforce holder binding when the Verifier can always opt not to check it?",
              "createdAt": "2023-04-18T08:14:44Z",
              "updatedAt": "2023-04-18T08:14:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5S0r46",
          "commit": {
            "abbreviatedOid": "52d4b5b"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-18T08:16:00Z",
          "updatedAt": "2023-04-18T08:16:00Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "\"further reduce\"?",
              "createdAt": "2023-04-18T08:16:00Z",
              "updatedAt": "2023-04-18T08:16:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5S5pHr",
          "commit": {
            "abbreviatedOid": "52d4b5b"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-18T19:59:13Z",
          "updatedAt": "2023-04-18T19:59:14Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "Issuer needs to be aware that without binding, the credential is basically a Netflix password in a big family.\r\nVerifier (Netflix) needs to be aware that accepting a password with no binding maybe means the current user is not the original account holder.\r\n\r\nSorry for trollish analogy, but they both need to be given guidance (Issuer and Verifier).",
              "createdAt": "2023-04-18T19:59:13Z",
              "updatedAt": "2023-04-18T19:59:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5S7tkI",
          "commit": {
            "abbreviatedOid": "52d4b5b"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-19T07:04:52Z",
          "updatedAt": "2023-04-19T07:04:52Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "Yes, both need guidance, but the Issuer cannot _enforce_ holder binding. Only the Verifier can. The Issuer should _support_ holder binding though.",
              "createdAt": "2023-04-19T07:04:52Z",
              "updatedAt": "2023-04-19T07:04:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5S7t5x",
          "commit": {
            "abbreviatedOid": "52d4b5b"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-19T07:05:50Z",
          "updatedAt": "2023-04-19T07:05:51Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "```suggestion\r\nby an upstream party, and they can choose to further reduce the disclosed claims\r\nwhen presenting to a downstream party.\r\n```",
              "createdAt": "2023-04-19T07:05:51Z",
              "updatedAt": "2023-04-19T07:05:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5S-mUb",
          "commit": {
            "abbreviatedOid": "52d4b5b"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-19T13:59:26Z",
          "updatedAt": "2023-04-19T13:59:26Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "The issuer \"enables\" holder binding\", the verifier \"enforces\" it.",
              "createdAt": "2023-04-19T13:59:26Z",
              "updatedAt": "2023-04-19T13:59:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5TdbJo",
          "commit": {
            "abbreviatedOid": "6cac05a"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-04-25T15:41:40Z",
          "updatedAt": "2023-04-25T15:41:40Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5Tdc4t",
          "commit": {
            "abbreviatedOid": "6cac05a"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-25T15:45:38Z",
          "updatedAt": "2023-04-25T15:45:39Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "```suggestion\r\nbut if it is not, Issuers need to support and Verifiers need to enforce Holder Binding.\r\n```",
              "createdAt": "2023-04-25T15:45:38Z",
              "updatedAt": "2023-04-25T15:45:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5TddiE",
          "commit": {
            "abbreviatedOid": "b8da26f"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-04-25T15:47:01Z",
          "updatedAt": "2023-04-25T15:47:01Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5Tddm1",
          "commit": {
            "abbreviatedOid": "b8da26f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-04-25T15:47:13Z",
          "updatedAt": "2023-04-25T15:47:13Z",
          "comments": []
        }
      ]
    },
    {
      "number": 249,
      "id": "PR_kwDOHTmVzM5OElkr",
      "title": "initial IANA media type and structured suffix registration",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/249",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-04-11T23:48:18Z",
      "updatedAt": "2023-04-25T15:53:14Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "9cff950d1e2bc9a629f030061f7d3d6f5babfb4d",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "bc-iana-media-type-and-suffix",
      "headRefOid": "3474b8b15d47179f8ab2b9acbf6077ffe91de2ae",
      "closedAt": "2023-04-25T15:52:54Z",
      "mergedAt": "2023-04-25T15:52:54Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "24dccc8ae0330d9b2156b7aff4489bc3fe59e35b"
      },
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Will close #229 when this PR gets merged",
          "createdAt": "2023-04-12T00:53:41Z",
          "updatedAt": "2023-04-12T00:53:41Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Does there need to be anything said for these in the main body of the document? ",
          "createdAt": "2023-04-16T23:04:16Z",
          "updatedAt": "2023-04-16T23:04:16Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5SRTPb",
          "commit": {
            "abbreviatedOid": "f1a54df"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Direction lgtm. I am just getting confused about application/sd-jwt (again)",
          "createdAt": "2023-04-12T00:55:08Z",
          "updatedAt": "2023-04-12T00:55:51Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "@OR13 @tlodderstedt when we discussed in person, how did we say this one media type will be used for both issuance and presentation of SD-JWT? Those will have different processing rules (section 6) and the latter might have HB JWT too...",
              "createdAt": "2023-04-12T00:55:08Z",
              "updatedAt": "2023-04-12T00:55:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5SXM4s",
          "commit": {
            "abbreviatedOid": "f1a54df"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-12T17:44:06Z",
          "updatedAt": "2023-04-12T17:44:07Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "I don't recall, but if it is in the protected header, and must be disclosed, it can't be changed after issuance.\r\n\r\nThere won't be any integrity protection on a \"presentation format token\" unless it is signed over by the holder, so as you say, holder binding JWT probably wants a specific sub type... something like:\r\n\r\n`application/hb+jwt`\r\n ",
              "createdAt": "2023-04-12T17:44:06Z",
              "updatedAt": "2023-04-12T17:49:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5SXNkC",
          "commit": {
            "abbreviatedOid": "f1a54df"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-12T17:46:02Z",
          "updatedAt": "2023-04-12T17:46:02Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "imo, you should also reference security considerations of RFC7519 here.",
              "createdAt": "2023-04-12T17:46:02Z",
              "updatedAt": "2023-04-12T17:46:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5SXN7Q",
          "commit": {
            "abbreviatedOid": "f1a54df"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-12T17:46:57Z",
          "updatedAt": "2023-04-12T17:46:58Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "Same comment about referencing RFC7519 as well, or maybe just note that at the top of that section...",
              "createdAt": "2023-04-12T17:46:58Z",
              "updatedAt": "2023-04-12T17:46:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5SXgB9",
          "commit": {
            "abbreviatedOid": "f1a54df"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-12T18:34:09Z",
          "updatedAt": "2023-04-12T18:34:10Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Makes sense. I'll add that. And maybe the JWT BCP RFC8725 too.",
              "createdAt": "2023-04-12T18:34:09Z",
              "updatedAt": "2023-04-12T18:34:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5SXiXt",
          "commit": {
            "abbreviatedOid": "f1a54df"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-12T18:41:01Z",
          "updatedAt": "2023-04-12T18:41:02Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "done",
              "createdAt": "2023-04-12T18:41:01Z",
              "updatedAt": "2023-04-12T18:41:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5SxH1P",
          "commit": {
            "abbreviatedOid": "dd28a13"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-17T17:16:48Z",
          "updatedAt": "2023-04-17T17:16:49Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "The media type is always the same (as it is signed by the issuer). The additional hb JWT does not seem to have a dedicated `typ` yet, but I think it should have one. `application/hb+jwt` is reasonable to me. \r\n\r\nWhat do the co-authors think? @bc-pi @Sakurann @danielfett ",
              "createdAt": "2023-04-17T17:16:48Z",
              "updatedAt": "2023-04-17T17:16:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5SxH-R",
          "commit": {
            "abbreviatedOid": "dd28a13"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-04-17T17:17:14Z",
          "updatedAt": "2023-04-17T17:17:14Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5SxOZ1",
          "commit": {
            "abbreviatedOid": "f1a54df"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-17T17:32:40Z",
          "updatedAt": "2023-04-17T17:32:41Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "`application/hb+jwt` is reasonable to me too but I'm not sure the HB JWT needs to be typed.  Also the precise contents of the HB JWT are left out of scope so registering a media type for that seems like a stretch. ",
              "createdAt": "2023-04-17T17:32:40Z",
              "updatedAt": "2023-04-17T17:37:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5SxWup",
          "commit": {
            "abbreviatedOid": "f1a54df"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-17T17:51:42Z",
          "updatedAt": "2023-04-17T17:51:43Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "@bc-pi yea, it does not need to be typed, unless you want to ensure header or claimset members are processed a specific way... the `nonce` seems like it might be one of those... not sure.",
              "createdAt": "2023-04-17T17:51:42Z",
              "updatedAt": "2023-04-17T17:51:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5SxW4S",
          "commit": {
            "abbreviatedOid": "dd28a13"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-04-17T17:52:08Z",
          "updatedAt": "2023-04-17T17:52:08Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5S0jNV",
          "commit": {
            "abbreviatedOid": "dd28a13"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-18T07:56:30Z",
          "updatedAt": "2023-04-18T07:56:30Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "ok, so do I understand that the same application/sd-jwt will be used regardless whether it is issuance and presentation and the receiver is expected to know which combined format it is, based on the context, protocol?",
              "createdAt": "2023-04-18T07:56:30Z",
              "updatedAt": "2023-04-18T07:56:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5S3EQO",
          "commit": {
            "abbreviatedOid": "f1a54df"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-18T13:47:01Z",
          "updatedAt": "2023-04-18T13:47:01Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Yes @Sakurann, I believe so. ",
              "createdAt": "2023-04-18T13:47:01Z",
              "updatedAt": "2023-04-18T13:47:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5TdeDi",
          "commit": {
            "abbreviatedOid": "2fe54c5"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-04-25T15:48:02Z",
          "updatedAt": "2023-04-25T15:48:02Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5Tde_a",
          "commit": {
            "abbreviatedOid": "2fe54c5"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-04-25T15:50:06Z",
          "updatedAt": "2023-04-25T15:50:06Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5TdfiJ",
          "commit": {
            "abbreviatedOid": "2fe54c5"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-25T15:51:12Z",
          "updatedAt": "2023-04-25T15:51:12Z",
          "comments": [
            {
              "originalPosition": 87,
              "body": "```suggestion\r\n   * Added initial IANA media type and structured suffix registration requests\r\n   * Added considerations around forwarding credentials\r\n```",
              "createdAt": "2023-04-25T15:51:12Z",
              "updatedAt": "2023-04-25T15:51:12Z"
            }
          ]
        }
      ]
    },
    {
      "number": 250,
      "id": "PR_kwDOHTmVzM5OU8cS",
      "title": "Attempt to improve description of security properties",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/250",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "This fixes Issue #235. The main  change is to better describe in which role the adversary acts.",
      "createdAt": "2023-04-14T13:33:36Z",
      "updatedAt": "2023-05-15T16:55:20Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "5137ec7f15a368ab37c853553f6dfbe3f33b9109",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/attacker-model",
      "headRefOid": "b98fd4a1c185337f4a5001c24b72b0065c569069",
      "closedAt": "2023-05-15T16:55:20Z",
      "mergedAt": "2023-05-15T16:55:20Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "c863e4728293f8749090c887288b5449f55e4f14"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "does this one need a doc history entry... ? ",
          "createdAt": "2023-05-02T21:49:40Z",
          "updatedAt": "2023-05-02T21:49:40Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5Sn7Cz",
          "commit": {
            "abbreviatedOid": "85b7022"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-14T21:26:48Z",
          "updatedAt": "2023-04-14T21:26:49Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "I'm finding the main sentence kinda hard to process. What about just something inspired by the text you had in the parenthetical? \r\n\r\n```suggestion\r\n**Integrity:** A malicious Holder cannot modify names or values of selectively disclosable claims without detection by the Verifier.\r\n```\r\n\r\n",
              "createdAt": "2023-04-14T21:26:48Z",
              "updatedAt": "2023-04-14T21:26:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5SposI",
          "commit": {
            "abbreviatedOid": "85b7022"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-04-16T02:15:45Z",
          "updatedAt": "2023-04-16T02:19:32Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\n* An adversary in the role of the Verifier cannot obtain\n```\nI find two abstractions of a property achieved by security considerations confusing.",
              "createdAt": "2023-04-16T02:15:45Z",
              "updatedAt": "2023-04-16T02:19:32Z"
            },
            {
              "originalPosition": 13,
              "body": "I like Brian's suggested text. Would also suggest removing **Integrity**. Per a comment above, I find two introduced abstractions confusing.",
              "createdAt": "2023-04-16T02:17:33Z",
              "updatedAt": "2023-04-16T02:19:33Z"
            },
            {
              "originalPosition": 15,
              "body": "Suggest removing this text. Holder binding ensures that it is the holder that directly received combined format for issuance that is taking to the verifier. But as Orie's PR suggests, some use-cases might want to allow it.\n\n```suggestion\n```\n",
              "createdAt": "2023-04-16T02:19:27Z",
              "updatedAt": "2023-04-16T02:19:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5StJWu",
          "commit": {
            "abbreviatedOid": "85b7022"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-17T08:48:03Z",
          "updatedAt": "2023-04-17T08:48:03Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Not sure what you mean by abstractions, but it is usually helpful to introduce names for the security properties you want to achieve. I'm open to suggestions for better names.",
              "createdAt": "2023-04-17T08:48:03Z",
              "updatedAt": "2023-04-17T08:48:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5StJ_N",
          "commit": {
            "abbreviatedOid": "85b7022"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-17T08:49:40Z",
          "updatedAt": "2023-04-17T08:49:40Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "I mention holder binding here as something you might want to achieve, as it is another important security property.",
              "createdAt": "2023-04-17T08:49:40Z",
              "updatedAt": "2023-04-17T08:49:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5S0vcV",
          "commit": {
            "abbreviatedOid": "85b7022"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-18T08:23:57Z",
          "updatedAt": "2023-04-18T08:23:58Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "is \"selective disclosure\" a security property..?",
              "createdAt": "2023-04-18T08:23:57Z",
              "updatedAt": "2023-04-18T08:23:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5S0wmA",
          "commit": {
            "abbreviatedOid": "292200e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-18T08:26:24Z",
          "updatedAt": "2023-04-18T08:26:28Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "then it should be explained more, including a security property HB achieves",
              "createdAt": "2023-04-18T08:26:24Z",
              "updatedAt": "2023-04-18T08:26:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5S01KM",
          "commit": {
            "abbreviatedOid": "85b7022"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-18T08:33:45Z",
          "updatedAt": "2023-04-18T08:33:45Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "It is if we define it, and I think we should because that's the main goal of the spec. I'm open to better names, though.",
              "createdAt": "2023-04-18T08:33:45Z",
              "updatedAt": "2023-04-18T08:33:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5TdjHN",
          "commit": {
            "abbreviatedOid": "292200e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-25T15:59:12Z",
          "updatedAt": "2023-04-25T15:59:12Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "what is the scenario that verifier can obtain plaintext claim value using \"the information derived from\r\nother disclosed claims or external sources\"",
              "createdAt": "2023-04-25T15:59:12Z",
              "updatedAt": "2023-04-25T15:59:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5TgEWH",
          "commit": {
            "abbreviatedOid": "292200e"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-26T00:03:24Z",
          "updatedAt": "2023-04-26T00:03:24Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Maybe something like this then? Tries to explain it a bit while saying what it achieves.  \r\n\r\n```suggestion\r\nAdditionally, as described in (#holder_binding_security), the application of Holder Binding can ensure that the presenter of an SD-JWT credential is the legitimate Holder of the credential.\r\n```",
              "createdAt": "2023-04-26T00:03:24Z",
              "updatedAt": "2023-04-26T00:03:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5TkhtO",
          "commit": {
            "abbreviatedOid": "292200e"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-26T14:07:17Z",
          "updatedAt": "2023-04-26T14:07:18Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "For example, if `nationalities` is selectively disclosable, and the holder does not disclose it to the verifier, the verifier might still learn the nationality from \r\n\r\n - a passport image acquired out of band, e.g., during a video identification session (external source), or\r\n - a disclosed claim containing the passport number, which may leak information about the nationality (\"other disclosed claims\").\r\n\r\nSo we have to say \"the verifier does not learn the `nationality` claim's value from the presentation of that claim\" but it still may learn it from somewhere else because we cannot control that.",
              "createdAt": "2023-04-26T14:07:17Z",
              "updatedAt": "2023-04-26T14:07:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5TkkGI",
          "commit": {
            "abbreviatedOid": "292200e"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-26T14:11:45Z",
          "updatedAt": "2023-04-26T14:11:46Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "Maybe we should use the same format as for the other two properties. Re-using text from Brian's proposal:\r\n\r\n```suggestion\r\n**Holder Binding:** When Holder Binding is enforced, only the legitimate Holder of the credential can present the SD-JWT (as described in (#holder_binding_security)).\r\n```",
              "createdAt": "2023-04-26T14:11:46Z",
              "updatedAt": "2023-04-26T14:11:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5T5-zT",
          "commit": {
            "abbreviatedOid": "292200e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-01T15:14:23Z",
          "updatedAt": "2023-05-01T15:14:23Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "I would be ok with \r\n> **Holder Binding:** Only the legitimate Holder of the credential can present the SD-JWT (as described in (#holder_binding_security)).",
              "createdAt": "2023-05-01T15:14:23Z",
              "updatedAt": "2023-05-01T15:14:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5UDi3Q",
          "commit": {
            "abbreviatedOid": "292200e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-03T05:46:15Z",
          "updatedAt": "2023-05-03T05:46:16Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\nexplicitly disclosed by the Holder unless that information can be derived from\r\nother disclosed claims or is available from sources other than SD-JWT.\r\n```",
              "createdAt": "2023-05-03T05:46:16Z",
              "updatedAt": "2023-05-03T05:46:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5VB7sZ",
          "commit": {
            "abbreviatedOid": "bb2842a"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-15T13:30:24Z",
          "updatedAt": "2023-05-15T13:31:06Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "How about this?\r\n```suggestion\r\nexplicitly disclosed by the Holder unless that information can be derived from\r\nother disclosed claims or sources other than the presented SD-JWT.\r\n```",
              "createdAt": "2023-05-15T13:30:24Z",
              "updatedAt": "2023-05-15T13:31:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5VDcUz",
          "commit": {
            "abbreviatedOid": "b98fd4a"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-15T16:48:59Z",
          "updatedAt": "2023-05-15T16:48:59Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5VDeB5",
          "commit": {
            "abbreviatedOid": "b98fd4a"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-15T16:53:24Z",
          "updatedAt": "2023-05-15T16:53:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 251,
      "id": "PR_kwDOHTmVzM5OVIYh",
      "title": "Remove Example 2b to fix Issue #240",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/251",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "To fix Issue #240, I found that removing Example 2b is the best way to go. \r\n\r\nI tried to fixate the nonces used in the examples despite decoys being generated in one of the examples, but that got quite messy and introduces a lot of unsafe code paths into the python code.\r\n\r\nAn alternative would be to manage the example manually, but that is a source for errors, so let's not do that.",
      "createdAt": "2023-04-14T14:03:49Z",
      "updatedAt": "2023-05-15T14:56:04Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "2087c75d8a03b35c6b68a3460184db47595d6754",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/example-2b-description",
      "headRefOid": "ff2c453cd735a2cd5860533020626cf4e15d8000",
      "closedAt": "2023-05-15T14:56:04Z",
      "mergedAt": "2023-05-15T14:56:04Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "82a851562896e5cc0f6f0a0abbd4dbe88ea516e6"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "The decoy concept is intuitive enough that a separate example isn't needed, I think. And per #240 the separate example that has a completely different set of digests might cause confusion. So removing 2b seems like a good course of action. \r\n\r\nThe change is larger than I'd have expected. Are all the other file changes due to regenerating examples? I think so but it caught my attention. And it seems like #252 and this will be difficult to resolve. But maybe you've already considered that.  \r\n",
          "createdAt": "2023-04-14T18:41:06Z",
          "updatedAt": "2023-04-14T18:41:06Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Why remove an entire example, if we can add a text clarifying that \"Example 2b uses the same data as 2a, but because even for the same claim values, different nonces are used, not just the decoys but all digests are different from those in 2a\"?",
          "createdAt": "2023-04-16T02:13:27Z",
          "updatedAt": "2023-04-16T02:13:27Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "That was my initial approach, but with that change there's really not that much value to the example: It just shows a bunch of digests, where the number of digests is higher than it was previously. The fact that the digests are different can be confusing for readers at worst and the example is not very helpful at best.",
          "createdAt": "2023-04-17T08:45:44Z",
          "updatedAt": "2023-04-17T08:46:08Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "So instead of showing the decoy digests in the examples you propose to list them seperately and not show a complete example with decoy digests?",
          "createdAt": "2023-04-18T08:35:59Z",
          "updatedAt": "2023-04-18T08:35:59Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "We agreed on our call to generate a snippet of markdown code to explicitly list the decoy digests to improve the explanation.",
          "createdAt": "2023-05-01T15:43:33Z",
          "updatedAt": "2023-05-01T15:43:33Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I updated the python script and the spec to show the decoy digests: https://drafts.oauth.net/oauth-selective-disclosure-jwt/danielfett/example-2b-description/draft-ietf-oauth-selective-disclosure-jwt.html#name-example-2-handling-structur",
          "createdAt": "2023-05-02T07:40:30Z",
          "updatedAt": "2023-05-02T07:40:30Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Other than the little nit about the the text that says the decoys in the example are about the address, this looks pretty good. ",
          "createdAt": "2023-05-02T14:20:11Z",
          "updatedAt": "2023-05-02T14:20:11Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Do you want to mention something in the doc history? ",
          "createdAt": "2023-05-02T15:44:33Z",
          "updatedAt": "2023-05-02T15:44:33Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Good point, done!",
          "createdAt": "2023-05-02T17:05:30Z",
          "updatedAt": "2023-05-02T17:05:30Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "@Sakurann Can you please review this?",
          "createdAt": "2023-05-15T13:29:02Z",
          "updatedAt": "2023-05-15T13:29:02Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5SwusM",
          "commit": {
            "abbreviatedOid": "862687a"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-04-17T16:17:16Z",
          "updatedAt": "2023-04-17T16:17:16Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5S0t8f",
          "commit": {
            "abbreviatedOid": "862687a"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "given feedback in issue #260. I am not still not sure entirely removing is a good option...\r\nCould we add to example 2 a text saying \"if the issuer wants to use decoys, these strings would be added to an `_sd` array: <2-3 decoy digests>\"?",
          "createdAt": "2023-04-18T08:20:38Z",
          "updatedAt": "2023-04-18T08:20:38Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5T_pO3",
          "commit": {
            "abbreviatedOid": "84bbc02"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-02T14:11:15Z",
          "updatedAt": "2023-05-02T14:11:15Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "The example has decoys in the address and at the top level too. So this text should probably be more general about the decoys.  Maybe just:\r\n```suggestion\r\nIn contrast to Example 1, here the Issuer decided to create a structured object for the `address` claim, allowing for separate disclosure of the individual members of the claim, and also added decoy digests to prevent the Verifier from deducing the true number of claims. The following payload is used for the SD-JWT:\r\n```",
              "createdAt": "2023-05-02T14:11:15Z",
              "updatedAt": "2023-05-02T14:11:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5UAVHM",
          "commit": {
            "abbreviatedOid": "07f2a35"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-02T15:37:34Z",
          "updatedAt": "2023-05-02T15:37:34Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5VCpN4",
          "commit": {
            "abbreviatedOid": "ff2c453"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-15T14:55:23Z",
          "updatedAt": "2023-05-15T14:55:23Z",
          "comments": []
        }
      ]
    },
    {
      "number": 252,
      "id": "PR_kwDOHTmVzM5OVOmM",
      "title": "Improved formatting for disclosures",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/252",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Fixes #231 ",
      "createdAt": "2023-04-14T14:19:15Z",
      "updatedAt": "2023-05-02T06:56:06Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "5137ec7f15a368ab37c853553f6dfbe3f33b9109",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/doctor-disclosure-description",
      "headRefOid": "a4ad0919c156a3b215b4034b7ec672ba2aacf3b1",
      "closedAt": "2023-05-02T06:56:06Z",
      "mergedAt": "2023-05-02T06:56:06Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "2087c75d8a03b35c6b68a3460184db47595d6754"
      },
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "This is the HTML output after this fix:\r\n![Screenshot_20230414_161944](https://user-images.githubusercontent.com/89476/232071527-5e6d2ee7-b888-42e6-9260-3226ad0e11f5.png)\r\n\r\n",
          "createdAt": "2023-04-14T14:22:32Z",
          "updatedAt": "2023-04-14T14:23:06Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "would it be easier to read \r\n> `phone_numer` Claim\r\n\r\ninstead of\r\n\r\n> Claim `phone_number`",
          "createdAt": "2023-04-18T08:27:50Z",
          "updatedAt": "2023-04-18T08:27:50Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5SnEcv",
          "commit": {
            "abbreviatedOid": "a4ad091"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Kinda hard (for me anyway) to review all the file changes but looking at https://drafts.oauth.net/oauth-selective-disclosure-jwt/danielfett/doctor-disclosure-description/draft-ietf-oauth-selective-disclosure-jwt.html and the new formatting looks good. ",
          "createdAt": "2023-04-14T18:08:25Z",
          "updatedAt": "2023-04-14T18:08:25Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5T6E5W",
          "commit": {
            "abbreviatedOid": "a4ad091"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-01T15:34:04Z",
          "updatedAt": "2023-05-01T15:34:04Z",
          "comments": []
        }
      ]
    },
    {
      "number": 257,
      "id": "PR_kwDOHTmVzM5Odvb0",
      "title": "Fix Issue #256 - Example 2a",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/257",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-04-17T11:10:30Z",
      "updatedAt": "2023-04-25T16:09:03Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "4cce100aa2bbbbf4eb8cf52a5de7a9b4479931c3",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/fix-example",
      "headRefOid": "11651b10fdae7d69a43bfca3c1a38760d5f55c3b",
      "closedAt": "2023-04-25T16:09:03Z",
      "mergedAt": "2023-04-25T16:09:03Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "c72b109cb8cae60cf172736df69dce67811cd923"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "The changes to [sd_jwt/examples/simple_structured.yml](https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/257/files#diff-419b00ae17c9bf1fc5862b7cb23eb2c0b44423b8422ccda8fcf4df73b7cef7a6) look right but the files in simple_structured/ didn't get updated (or looks like updated https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/257/commits/82763136eacecbfa0ce0d2446c2a0d7f06aa31d2#diff-831dca81705d15f42d1f30e0228a989a66a1dcb9695fc3e36804f3654a4b81db and then reverted https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/257/commits/11651b10fdae7d69a43bfca3c1a38760d5f55c3b#diff-831dca81705d15f42d1f30e0228a989a66a1dcb9695fc3e36804f3654a4b81db).  \r\n\r\nI'm having a hard time following the changes :( \r\n but the editors copy of the PR branch doesn't have the update https://drafts.oauth.net/oauth-selective-disclosure-jwt/danielfett/fix-example/draft-ietf-oauth-selective-disclosure-jwt.html#name-example-2a-handling-structu ",
          "createdAt": "2023-04-17T12:31:18Z",
          "updatedAt": "2023-04-17T12:31:18Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "This time I removed all changed output files to not cause merge conflicts with the other PRs we have. \r\n\r\nIt seems like we should switch to generating the examples in github actions and not committing them.",
          "createdAt": "2023-04-17T12:36:27Z",
          "updatedAt": "2023-04-17T12:36:27Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> This time I removed all changed output files to not cause merge conflicts with the other PRs we have.\r\n\r\nOk, that's sort of what I suspected.\r\n\r\n> It seems like we should switch to generating the examples in github actions and not committing them.\r\n\r\nMaybe...\r\n",
          "createdAt": "2023-04-17T12:48:37Z",
          "updatedAt": "2023-04-17T12:48:37Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "(trusting it will be merged to minimize conflicting changes with other PRs)",
          "createdAt": "2023-04-18T08:15:29Z",
          "updatedAt": "2023-04-18T08:15:29Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5Sw34B",
          "commit": {
            "abbreviatedOid": "11651b1"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-04-17T16:37:16Z",
          "updatedAt": "2023-04-17T16:37:16Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5S0rgR",
          "commit": {
            "abbreviatedOid": "11651b1"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-04-18T08:15:09Z",
          "updatedAt": "2023-04-18T08:15:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 258,
      "id": "PR_kwDOHTmVzM5Oev6a",
      "title": "Remove 'create a copy of the SD-JWT', fixes Issue #247",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/258",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-04-17T13:52:48Z",
      "updatedAt": "2023-05-01T15:17:01Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "70a7d52db804a16cae98ad223da87a54836c885e",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/remove-copy-sd-jwt-line",
      "headRefOid": "85f2ff2b971d53d18e92f28afcb3cf8166bb758c",
      "closedAt": "2023-05-01T15:17:01Z",
      "mergedAt": "2023-05-01T15:17:01Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "e50b8d04f75446f6ec44e83bf9e674e447b82549"
      },
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I didn't realize both of you were convinced it is a good idea to remove this step altogether, without clarifying anywhere in the text implementers might want to do it, and why?",
          "createdAt": "2023-04-18T08:03:21Z",
          "updatedAt": "2023-04-18T08:05:32Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Seems fine to remove it. It's just an implementation detail/choice that doesn't need to be with the normative stuff about Verification. And really doesn't warrant treatment elsewhere.",
          "createdAt": "2023-04-18T13:49:03Z",
          "updatedAt": "2023-04-25T23:27:09Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5SwQv5",
          "commit": {
            "abbreviatedOid": "85f2ff2"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-04-17T15:24:33Z",
          "updatedAt": "2023-04-17T15:24:33Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5T5_km",
          "commit": {
            "abbreviatedOid": "85f2ff2"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-01T15:16:39Z",
          "updatedAt": "2023-05-01T15:16:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 262,
      "id": "PR_kwDOHTmVzM5P9JPz",
      "title": "define HB-JWT normatively",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/262",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Discussions around defining SD-JWT-VC show that it would be very helpful for interoperability if HB JWT is normatively defined in SD-JWT specification itself. Using HB JWT is optional, but if used, it should be compliant to the definitions in SD-JWT.\r\n\r\nHow to represent validity (iat, exp, nbf) will probably need the most discussion...\r\n\r\nalso we should introduce an abbreviation `HB JWT`....\r\n\r\ncc @awoie ",
      "createdAt": "2023-05-08T02:42:51Z",
      "updatedAt": "2023-05-30T21:39:10Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "c3e2ad685e73d47f688ba0ff63b7e8bee04c8871",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "sakurann-hb-jwt",
      "headRefOid": "1ce10919264ee3835c629f83defd5f56060d8f55",
      "closedAt": "2023-05-30T21:39:09Z",
      "mergedAt": "2023-05-30T21:39:09Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "1419c5cdebfc733a18ab5b4c402cc3277dfbf634"
      },
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "need to re-generate example 4b, and 4a to update hb jwt header....",
          "createdAt": "2023-05-22T23:47:45Z",
          "updatedAt": "2023-05-22T23:47:45Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "cc @awoie please take a look (can't ask review from you...)",
          "createdAt": "2023-05-22T23:54:23Z",
          "updatedAt": "2023-05-22T23:54:23Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "This change is sufficient to warrant an entry in the doc history like just, \"Defined the structure of the Holder Binding JWT\"",
          "createdAt": "2023-05-24T18:13:05Z",
          "updatedAt": "2023-05-24T18:13:05Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "done, thank you, Brian",
          "createdAt": "2023-05-24T23:20:45Z",
          "updatedAt": "2023-05-24T23:20:45Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5UerqB",
          "commit": {
            "abbreviatedOid": "deb2cac"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "This change probably also warrants a mention in the doc history - i.e. just a simple, \"Defined the structure of the Holder Binding JWT\" ",
          "createdAt": "2023-05-08T18:50:54Z",
          "updatedAt": "2023-05-08T19:38:03Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "I don't think we should assume or say anything about a new credential. I think maybe the \"containing the key material the new Credential shall be bound to\" came from similar(ish) text in VCI. But it doesn't make sense or seem appropriate here. ",
              "createdAt": "2023-05-08T18:50:54Z",
              "updatedAt": "2023-05-08T19:38:03Z"
            },
            {
              "originalPosition": 43,
              "body": "\u201cCONDITIONAL\u201c is not an RFC2119 keyword. So it shouldn't be used like one.\r\n",
              "createdAt": "2023-05-08T18:56:02Z",
              "updatedAt": "2023-05-08T19:38:03Z"
            },
            {
              "originalPosition": 45,
              "body": "I'm not sure I really grok the key attestation conveyance stuff, to be honest. ",
              "createdAt": "2023-05-08T19:03:00Z",
              "updatedAt": "2023-05-08T19:38:03Z"
            },
            {
              "originalPosition": 45,
              "body": "In general I think the JOSE headers that convey or point to the key don't need to be and shouldn't be in this list. The HB-JWT for an SD-JWT that is holder bound with a cnf.jwk doesn't need any of these, for one example. And the requirements re kid/jwk/x5c as written in these bullets now aren't totally clear (to me anyway) and need some fixup. Or just remove them.  I'd argue that the defined structure of the Holder Binding JWT should be only the minimal claims/headers necessary. Other requirements, if needed, such as saying that no more than one of `kid` or `jwk` or `x5c` be used together could be in text elsewhere. ",
              "createdAt": "2023-05-08T19:15:07Z",
              "updatedAt": "2023-05-08T19:38:03Z"
            },
            {
              "originalPosition": 43,
              "body": "\"`kid`: `kid`: \"  should probably only have one \"`kid`:\"",
              "createdAt": "2023-05-08T19:15:51Z",
              "updatedAt": "2023-05-08T19:38:03Z"
            },
            {
              "originalPosition": 47,
              "body": "I don't think issuer should be required. It's kinda implied by context to be the Holder. And doesn't really add anything to have it, that I can see. And there may not always be an obvious value to use for the iss value for the holder. Seems more likely to hurt than help. ",
              "createdAt": "2023-05-08T19:20:20Z",
              "updatedAt": "2023-05-08T19:38:03Z"
            },
            {
              "originalPosition": 47,
              "body": "Oh and also the current examples of the Holder Binding JWT or its payload have iat, aud, and nonce. But not iss. Removing it here, where it's not necessary IMHO, would be easier than updating the code and examples. \r\n\r\nAlso I suspect there's some reason Dr. Fett didn't have `iss` in the HB JWT payloads. Even if not normative examples. ",
              "createdAt": "2023-05-08T19:22:25Z",
              "updatedAt": "2023-05-08T19:38:04Z"
            },
            {
              "originalPosition": 41,
              "body": "So... the encoded HB-JWT examples (or the code that generates them) should probably be updated to have this `typ` ",
              "createdAt": "2023-05-08T19:33:34Z",
              "updatedAt": "2023-05-08T19:38:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5VB1Xl",
          "commit": {
            "abbreviatedOid": "deb2cac"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-05-15T13:18:49Z",
          "updatedAt": "2023-05-15T13:28:15Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "```suggestion\r\nThe Holder can then create a signed document, the Holder Binding JWT as defined in (#hb-jwt), using its private key. This document contains some\r\n```",
              "createdAt": "2023-05-15T13:18:49Z",
              "updatedAt": "2023-05-15T13:28:15Z"
            },
            {
              "originalPosition": 45,
              "body": "This use case should probably be described in a few sentences elsewhere (before or after this paragraph).",
              "createdAt": "2023-05-15T13:22:42Z",
              "updatedAt": "2023-05-15T13:28:15Z"
            },
            {
              "originalPosition": 47,
              "body": "> Also I suspect there's some reason Dr. Fett didn't have `iss` in the HB JWT payloads. Even if not normative examples.\r\n\r\nEssentially what you said above - (1) I'm not sure if there's always a defined value to put there and (2) I don't think it is necessary. Audience is really important, but I don't see a strict need for iss.",
              "createdAt": "2023-05-15T13:26:10Z",
              "updatedAt": "2023-05-15T13:28:15Z"
            },
            {
              "originalPosition": 57,
              "body": "```suggestion\r\nBelow is a non-normative example of a JWT produced by signing a payload in the example above:\r\n```",
              "createdAt": "2023-05-15T13:27:11Z",
              "updatedAt": "2023-05-15T13:28:15Z"
            },
            {
              "originalPosition": 68,
              "body": "The `typ` must also be checked. ",
              "createdAt": "2023-05-15T13:28:12Z",
              "updatedAt": "2023-05-15T13:28:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Uk1Of",
          "commit": {
            "abbreviatedOid": "9594788"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-09T15:40:29Z",
          "updatedAt": "2023-05-15T14:32:20Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "probably also need to add this in the IANA section.",
              "createdAt": "2023-05-09T15:40:29Z",
              "updatedAt": "2023-05-15T14:32:20Z"
            },
            {
              "originalPosition": 43,
              "body": "```suggestion\r\n    * `kid`: REQUIRED when JOSE Header containing the key ID is used to communicate the key material information. MUST NOT be present if `jwk` or `x5c` is present.\r\n```",
              "createdAt": "2023-05-09T15:41:45Z",
              "updatedAt": "2023-05-15T14:32:20Z"
            },
            {
              "originalPosition": 44,
              "body": "```suggestion\r\n    * `jwk`: CONDITIONAL. JOSE Header containing the key material. MUST NOT be present if `kid` or `x5c` is present.\r\n```",
              "createdAt": "2023-05-15T14:29:21Z",
              "updatedAt": "2023-05-15T14:32:20Z"
            },
            {
              "originalPosition": 68,
              "body": "```suggestion\r\n       5. Check that the Holder Binding JWT is valid using `iat`, and `typ` and, if provided, `nbf` and `exp` claims.\r\n       6. Determine that the Holder Binding JWT is bound to the current transaction and was created for this Verifier (replay protection) by validating `nonce` and `aud` claims.\r\n```",
              "createdAt": "2023-05-15T14:31:48Z",
              "updatedAt": "2023-05-15T14:32:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5VCdy5",
          "commit": {
            "abbreviatedOid": "9594788"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-15T14:33:25Z",
          "updatedAt": "2023-05-15T14:33:25Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "```suggestion\r\n```",
              "createdAt": "2023-05-15T14:33:25Z",
              "updatedAt": "2023-05-15T14:33:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5VCevn",
          "commit": {
            "abbreviatedOid": "deb2cac"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-15T14:35:08Z",
          "updatedAt": "2023-05-15T14:35:09Z",
          "comments": [
            {
              "originalPosition": 68,
              "body": "```suggestion\r\n       5. Check that the `typ` of the Holder Binding JWT is `hb+jwt`.\r\n       6. Check that the Holder Binding JWT is valid using `iat`, and, if provided, `nbf` and `exp` claims.\r\n       7. Determine that the Holder Binding JWT is bound to the current transaction and was created for this Verifier (replay protection) by validating `nonce` and `aud` claims.\r\n```",
              "createdAt": "2023-05-15T14:35:08Z",
              "updatedAt": "2023-05-15T14:35:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5VCkGz",
          "commit": {
            "abbreviatedOid": "9594788"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-15T14:45:24Z",
          "updatedAt": "2023-05-15T14:45:25Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "ok to remove JOSE headers and replace with a sentence saying \"use the key identified in SD-JWT, if not clear which one, applications of sd-jwt must specify which key to use in HB-JWT.\"",
              "createdAt": "2023-05-15T14:45:25Z",
              "updatedAt": "2023-05-15T14:45:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5VtFj2",
          "commit": {
            "abbreviatedOid": "808fd40"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-22T23:46:41Z",
          "updatedAt": "2023-05-22T23:46:41Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "I updated the code and added examples, but did not re-generate example 4b, and 4a (was too much)....",
              "createdAt": "2023-05-22T23:46:41Z",
              "updatedAt": "2023-05-22T23:46:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Vws1r",
          "commit": {
            "abbreviatedOid": "37e1e4b"
          },
          "author": "awoie",
          "authorAssociation": "NONE",
          "state": "CHANGES_REQUESTED",
          "body": "direction looks great, just a few questions and comments.",
          "createdAt": "2023-05-23T07:18:51Z",
          "updatedAt": "2023-05-23T07:21:41Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "@Sakurann Does that mean I can use a DID as well? I don't want to be too restrictive in what can be used for verifying the HB-JWT? Being restrictive is the job of specific profiles such as the hi-assurance profile.",
              "createdAt": "2023-05-23T07:18:51Z",
              "updatedAt": "2023-05-23T07:21:41Z"
            },
            {
              "originalPosition": 74,
              "body": "Why is `hb+jwt` needed for this? We would also need to register a media type -> application/hb+jwt for this.",
              "createdAt": "2023-05-23T07:19:53Z",
              "updatedAt": "2023-05-23T07:21:41Z"
            },
            {
              "originalPosition": 75,
              "body": "If `nbf` and `exp` are not provided, then I think this step is not needed. How would somebody check whether the HB-JWT is valid if only `iat` is provided`",
              "createdAt": "2023-05-23T07:20:45Z",
              "updatedAt": "2023-05-23T07:21:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5V1OIm",
          "commit": {
            "abbreviatedOid": "37e1e4b"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-23T15:39:50Z",
          "updatedAt": "2023-05-23T15:39:51Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "yes, that's the plan, to register",
              "createdAt": "2023-05-23T15:39:50Z",
              "updatedAt": "2023-05-23T15:39:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5V1mOk",
          "commit": {
            "abbreviatedOid": "37e1e4b"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-23T16:14:00Z",
          "updatedAt": "2023-05-23T16:14:01Z",
          "comments": [
            {
              "originalPosition": 75,
              "body": "it's the same logic as [DPoP JWT](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop-16#section-4.2). iat is sufficient to know if that HB-JWT is fresh enough.",
              "createdAt": "2023-05-23T16:14:00Z",
              "updatedAt": "2023-05-23T16:14:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5V1mq2",
          "commit": {
            "abbreviatedOid": "37e1e4b"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-23T16:15:04Z",
          "updatedAt": "2023-05-23T16:15:04Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "I don't think anything in the text prevents DIDs. `kid` is expected to be used mainly with DIDs.",
              "createdAt": "2023-05-23T16:15:04Z",
              "updatedAt": "2023-05-23T16:15:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5V1uUa",
          "commit": {
            "abbreviatedOid": "37e1e4b"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-23T16:25:20Z",
          "updatedAt": "2023-05-23T16:25:20Z",
          "comments": [
            {
              "originalPosition": 75,
              "body": "I think the idea is that the Verifier wants HB-JWTs that are relatively freshly created. And so would reject HB-JWTs that have an `iat` that falls outside some policy based window.  But something like that should probably said more explicitly because `iat` doesn't have any normative validity rules on its own. Maybe, \"Check that Holder Binding JWT was created within an acceptable timeframe as indicated by the `iat` claim\" or something along those lines.\r\n\r\nFWIW the idea is similar to DPoP and [Checking DPoP Proofs](https://www.ietf.org/archive/id/draft-ietf-oauth-dpop-16.html#name-checking-dpop-proofs) does have some text that attempts to say the the creation time of the JWT needs to be within an acceptable window.\r\n\r\nAnd rather than mentioning the`nbf` and `exp` claims maybe have another general item like \"Ensure that the Holder Binding JWT is valid in all other respects per [@!RFC7519].\"  that's more of a catch-all. ",
              "createdAt": "2023-05-23T16:25:20Z",
              "updatedAt": "2023-05-23T16:27:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5V2vf_",
          "commit": {
            "abbreviatedOid": "37e1e4b"
          },
          "author": "awoie",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-23T19:19:19Z",
          "updatedAt": "2023-05-23T19:19:19Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "sounds good.",
              "createdAt": "2023-05-23T19:19:19Z",
              "updatedAt": "2023-05-23T19:19:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5V2vpx",
          "commit": {
            "abbreviatedOid": "37e1e4b"
          },
          "author": "awoie",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-23T19:19:45Z",
          "updatedAt": "2023-05-23T19:19:46Z",
          "comments": [
            {
              "originalPosition": 75,
              "body": "ok, got it",
              "createdAt": "2023-05-23T19:19:46Z",
              "updatedAt": "2023-05-23T19:19:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5V2vuG",
          "commit": {
            "abbreviatedOid": "37e1e4b"
          },
          "author": "awoie",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "lgtm",
          "createdAt": "2023-05-23T19:19:58Z",
          "updatedAt": "2023-05-23T19:19:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5V-fqv",
          "commit": {
            "abbreviatedOid": "c0eea20"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-24T17:40:00Z",
          "updatedAt": "2023-05-24T17:40:00Z",
          "comments": [
            {
              "originalPosition": 75,
              "body": "```suggestion\r\n       6. Check that the creation time of the Holder Binding JWT, as determined by the `iat` claim, is within an acceptable window.\r\n       7. Check that the Holder Binding JWT is valid in all other respects, per [@!RFC7519] and [@!RFC8725].\r\n```\r\nupdated the verfication steps as suggested.\r\n@awoie @bc-pi ",
              "createdAt": "2023-05-24T17:40:00Z",
              "updatedAt": "2023-05-24T17:40:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5V-iU2",
          "commit": {
            "abbreviatedOid": "c0eea20"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-24T17:46:13Z",
          "updatedAt": "2023-05-24T17:46:17Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "I added the IANA registration section in this PR :)",
              "createdAt": "2023-05-24T17:46:13Z",
              "updatedAt": "2023-05-24T17:46:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5V-p9w",
          "commit": {
            "abbreviatedOid": "677183f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-24T18:05:15Z",
          "updatedAt": "2023-05-24T18:05:16Z",
          "comments": [
            {
              "originalPosition": 75,
              "body": "wfm",
              "createdAt": "2023-05-24T18:05:16Z",
              "updatedAt": "2023-05-24T18:05:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5WPDjq",
          "commit": {
            "abbreviatedOid": "7457d60"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-26T18:54:14Z",
          "updatedAt": "2023-05-26T18:54:14Z",
          "comments": [
            {
              "originalPosition": 77,
              "body": "swap these two and fix the numbering\r\n\r\n```suggestion\r\n       7. Determine that the Holder Binding JWT is bound to the current transaction and was created for this Verifier (replay protection) by validating `nonce` and `aud` claims.\r\n       8. Check that the Holder Binding JWT is valid in all other respects, per [@!RFC7519] and [@!RFC8725].\r\n```",
              "createdAt": "2023-05-26T18:54:14Z",
              "updatedAt": "2023-05-26T18:55:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5WSN2g",
          "commit": {
            "abbreviatedOid": "1ce1091"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-27T21:55:15Z",
          "updatedAt": "2023-05-27T21:55:15Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5WiZxU",
          "commit": {
            "abbreviatedOid": "1ce1091"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-30T21:38:57Z",
          "updatedAt": "2023-05-30T21:38:57Z",
          "comments": []
        }
      ]
    },
    {
      "number": 263,
      "id": "PR_kwDOHTmVzM5QO_aR",
      "title": "Added golang impl",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/263",
      "state": "MERGED",
      "author": "andresuribe87",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is part of TBD supporting SSI, yay!",
      "createdAt": "2023-05-10T22:27:35Z",
      "updatedAt": "2023-05-11T14:05:07Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "2087c75d8a03b35c6b68a3460184db47595d6754",
      "headRepository": "andresuribe87/oauth-selective-disclosure-jwt",
      "headRefName": "patch-1",
      "headRefOid": "9596e2f2e666862f6fbacd037dd58f8da83d5f60",
      "closedAt": "2023-05-11T14:05:07Z",
      "mergedAt": "2023-05-11T14:05:07Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "9c65384b3e7b559a1786f1bdb3d9052237e852fa"
      },
      "comments": [
        {
          "author": "andresuribe87",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks folks. Would you be so kind and approve the workflow run so I can merge?",
          "createdAt": "2023-05-11T10:57:14Z",
          "updatedAt": "2023-05-11T10:57:14Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5UueNF",
          "commit": {
            "abbreviatedOid": "9596e2f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-10T22:54:44Z",
          "updatedAt": "2023-05-10T22:54:44Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5Uw5Kn",
          "commit": {
            "abbreviatedOid": "9596e2f"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-11T08:57:54Z",
          "updatedAt": "2023-05-11T08:57:54Z",
          "comments": []
        }
      ]
    },
    {
      "number": 270,
      "id": "PR_kwDOHTmVzM5Qi6VH",
      "title": "Fix Issuer/Verifier mixup typo in sec 8.2",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/270",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": " to fix #269  ",
      "createdAt": "2023-05-15T19:20:21Z",
      "updatedAt": "2023-05-22T19:35:39Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "c863e4728293f8749090c887288b5449f55e4f14",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "bc/8-2-typo",
      "headRefOid": "b60ea6577133463b0a8741ac11d8030771f0621e",
      "closedAt": "2023-05-22T09:09:12Z",
      "mergedAt": "2023-05-22T09:09:12Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "c3e2ad685e73d47f688ba0ff63b7e8bee04c8871"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5VFE9_",
          "commit": {
            "abbreviatedOid": "b60ea65"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-15T21:29:02Z",
          "updatedAt": "2023-05-15T21:29:02Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5Vmirc",
          "commit": {
            "abbreviatedOid": "b60ea65"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-22T09:09:00Z",
          "updatedAt": "2023-05-22T09:09:00Z",
          "comments": []
        }
      ]
    },
    {
      "number": 273,
      "id": "PR_kwDOHTmVzM5RByaF",
      "title": "Use external SD-JWT library to generate examples",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/273",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Fixes #259 ",
      "createdAt": "2023-05-22T15:04:14Z",
      "updatedAt": "2023-05-24T22:57:48Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "c3e2ad685e73d47f688ba0ff63b7e8bee04c8871",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/generated-examples",
      "headRefOid": "31e15fe0c067fa420dd1f0c2445a4b4d18d3ba05",
      "closedAt": "2023-05-24T22:57:47Z",
      "mergedAt": "2023-05-24T22:57:47Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "82984e8f495cfc7cc512bfe766b4428c7109953d"
      },
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Since this is a 122 files-changed commit, here's the gist:\r\n\r\n- I removed the sd-jwt python code\r\n- I added code to the github action to pull the danielfett/sd-jwt library and generate the examples from the example specifications\r\n- Those now live in examples/*/specification.yml\r\n- I removed all the generated artifacts and updated the .gitignore accordingly.",
          "createdAt": "2023-05-22T15:50:02Z",
          "updatedAt": "2023-05-22T15:50:02Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for doing the work here (I know it wasn't insignificant) and for the gist of the changes. It is, as I'm sure you know, not easy to review or approve a change like this. I wanted to acknowledge the work but hoping we can discuss in our (usually) weekly meeting. \r\n\r\nIn the meantime, it does look like the decoy_digests.md stuff from the recent PR #251 didn't make it through this change. There are no digest values after the \"The Issuer added the following decoy digests:\" text at https://drafts.oauth.net/oauth-selective-disclosure-jwt/danielfett/generated-examples/draft-ietf-oauth-selective-disclosure-jwt.html#appendix-A.1-26 which I just happened to notice looking at this diff https://author-tools.ietf.org/api/iddiff?url_1=https://oauth-wg.github.io/oauth-selective-disclosure-jwt/draft-ietf-oauth-selective-disclosure-jwt.txt&url_2=https://oauth-wg.github.io/oauth-selective-disclosure-jwt/danielfett/generated-examples/draft-ietf-oauth-selective-disclosure-jwt.txt which I just happened to notice was at https://drafts.oauth.net/oauth-selective-disclosure-jwt/ \r\n\r\n\r\n\r\n",
          "createdAt": "2023-05-22T21:45:36Z",
          "updatedAt": "2023-05-22T22:11:00Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Thanks for catching that. The change was in the SD-JWT library repository, but there was a bug leading to an empty decoy_digests.md file. Should be fixed now.",
          "createdAt": "2023-05-23T07:03:44Z",
          "updatedAt": "2023-05-23T07:03:44Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for fixing that! \r\nNext question/observation/request: can or should the README.md be updated to reflect the use of the external lib and give regular folks (like myself) the steps to produce the examples locally and build the whole document?\r\n\r\n",
          "createdAt": "2023-05-23T15:24:01Z",
          "updatedAt": "2023-05-23T15:24:01Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "That is another very good point, @bc-pi! I modified the readme to add that information (and did some changes in the build process to account for a simplification I made in the SD-JWT library).\r\n\r\nhttps://github.com/oauth-wg/oauth-selective-disclosure-jwt/blob/483a4972f5c9b65fac821c7891ea9455d9e4aa9d/README.md",
          "createdAt": "2023-05-23T17:55:53Z",
          "updatedAt": "2023-05-23T17:55:53Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I actually meant to have a line break before and after the \"or\", but I guess the (here intended) trailing white space was eaten by my VS Code (because I configured it to do so, duh!). I'm fine with the current version.",
          "createdAt": "2023-05-24T07:40:32Z",
          "updatedAt": "2023-05-24T07:40:32Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I was just trying to fix the 404 from https://github.com/danielfett/sd-jwt\\ ",
          "createdAt": "2023-05-24T13:12:38Z",
          "updatedAt": "2023-05-24T13:12:38Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5V2_zP",
          "commit": {
            "abbreviatedOid": "5f948d9"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-23T20:02:13Z",
          "updatedAt": "2023-05-23T20:02:13Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "```suggestion\r\n - Install the sd-jwt library as described in https://github.com/danielfett/sd-jwt\r\n```",
              "createdAt": "2023-05-23T20:02:13Z",
              "updatedAt": "2023-05-23T20:02:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5V3LWO",
          "commit": {
            "abbreviatedOid": "31e15fe"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-23T20:36:39Z",
          "updatedAt": "2023-05-23T20:36:39Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5WAC8y",
          "commit": {
            "abbreviatedOid": "31e15fe"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-24T22:57:18Z",
          "updatedAt": "2023-05-24T22:57:18Z",
          "comments": []
        }
      ]
    },
    {
      "number": 275,
      "id": "PR_kwDOHTmVzM5RLdwJ",
      "title": "Added recommendation for explicit typing of SD-JWTs (to address #267)",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/275",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-05-23T19:50:24Z",
      "updatedAt": "2023-06-04T21:50:10Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "c3e2ad685e73d47f688ba0ff63b7e8bee04c8871",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "bc/explicit-typing",
      "headRefOid": "ae9b1ff66eaa5b750e05769f4d37fe1fade379f1",
      "closedAt": "2023-05-24T13:29:47Z",
      "mergedAt": "2023-05-24T13:29:47Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "565f779175ddc62072210691b9a71494637b0291"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks, editorial comments taken. ",
          "createdAt": "2023-05-24T13:29:37Z",
          "updatedAt": "2023-05-24T13:29:37Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5V3EBL",
          "commit": {
            "abbreviatedOid": "595cc74"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-23T20:15:23Z",
          "updatedAt": "2023-05-23T20:15:23Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5V5e7e",
          "commit": {
            "abbreviatedOid": "595cc74"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Thanks for preparing this! LGTM, just two small editorial comments.",
          "createdAt": "2023-05-24T07:34:56Z",
          "updatedAt": "2023-05-24T07:37:28Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\n\r\nApplications of SD-JWT SHOULD be explicitly typed using the `typ` header parameter. See (#explicit_typing) for more details.\r\n```",
              "createdAt": "2023-05-24T07:34:56Z",
              "updatedAt": "2023-05-24T07:37:28Z"
            },
            {
              "originalPosition": 15,
              "body": "```suggestion\r\nSection 3.11 of [@RFC8725] describes the use of explicit typing to prevent confusion attacks\r\nin which one kind of JWT is mistaken for another. SD-JWTs are also potentially\r\n```",
              "createdAt": "2023-05-24T07:36:32Z",
              "updatedAt": "2023-05-24T07:37:28Z"
            }
          ]
        }
      ]
    },
    {
      "number": 276,
      "id": "PR_kwDOHTmVzM5RYnQF",
      "title": "Updated title to be more inclusive of general JWS with JSON and added some corresponding text to the Abstract and Intro",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/276",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Honestly, I'm not sure about this one.  But I said I'd put together a PR for #265 with an update to the title and some qualifying text. So this is that PR as something to discuss anyway. \r\n\r\nAt least these few sentences took me an embarrassingly long time to write :/ ",
      "createdAt": "2023-05-25T22:28:49Z",
      "updatedAt": "2023-06-04T21:50:09Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "82984e8f495cfc7cc512bfe766b4428c7109953d",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "bc/also-jws",
      "headRefOid": "c32d94f2e61af06347e23a916d2f63d5cd4079b5",
      "closedAt": "2023-06-02T01:21:55Z",
      "mergedAt": "2023-06-02T01:21:55Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "332ded8faf20d528c5c05e04cebed28aab1a0d33"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5WnNrB",
          "commit": {
            "abbreviatedOid": "c32d94f"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-31T12:46:17Z",
          "updatedAt": "2023-05-31T12:46:17Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5W0LXi",
          "commit": {
            "abbreviatedOid": "c32d94f"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-02T01:21:47Z",
          "updatedAt": "2023-06-02T01:21:47Z",
          "comments": []
        }
      ]
    },
    {
      "number": 282,
      "id": "PR_kwDOHTmVzM5Ru5a2",
      "title": "[ed] remove old terminology",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/282",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "resolves #271 ",
      "createdAt": "2023-05-30T23:05:03Z",
      "updatedAt": "2023-05-31T00:36:12Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "1419c5cdebfc733a18ab5b4c402cc3277dfbf634",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "sakurann-figure-terms",
      "headRefOid": "a6c518101bb448bdc8f0edcddbcaa1017feaea8d",
      "closedAt": "2023-05-31T00:36:11Z",
      "mergedAt": "2023-05-31T00:36:11Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "b60afd49c5377b62f83de13ab601bb583eac9b7d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5Wi_3A",
          "commit": {
            "abbreviatedOid": "a6c5181"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-31T00:01:30Z",
          "updatedAt": "2023-05-31T00:01:30Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5WjEqc",
          "commit": {
            "abbreviatedOid": "a6c5181"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-31T00:35:53Z",
          "updatedAt": "2023-05-31T00:35:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 283,
      "id": "PR_kwDOHTmVzM5R0BXJ",
      "title": "Array feature specification",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/283",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Editor's copy for this branch: https://drafts.oauth.net/oauth-selective-disclosure-jwt/danielfett/arrays/draft-ietf-oauth-selective-disclosure-jwt.html",
      "createdAt": "2023-05-31T17:11:26Z",
      "updatedAt": "2023-06-14T16:57:07Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "72aa1150199a36c2695a06547ecbc1afdb328294",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/arrays",
      "headRefOid": "d73638aab5b775a4c6d14538389966e8f5e64687",
      "closedAt": "2023-06-14T16:57:07Z",
      "mergedAt": "2023-06-14T16:57:07Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "ec79dae0a26d2f13bec797e38c3475d7691f5a03"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5WrpMN",
          "commit": {
            "abbreviatedOid": "bd2f5bb"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-05-31T22:42:49Z",
          "updatedAt": "2023-05-31T22:42:49Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "```suggestion\r\n:  A combination of a salt, a cleartext claim name (in case the claim is a key/value pair and not an array element), and a cleartext claim value, all of which are used to calculate a digest for the respective claim.\r\n```",
              "createdAt": "2023-05-31T22:42:49Z",
              "updatedAt": "2023-05-31T22:42:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5W0Oof",
          "commit": {
            "abbreviatedOid": "9282202"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-02T01:41:30Z",
          "updatedAt": "2023-06-02T01:41:31Z",
          "comments": [
            {
              "originalPosition": 458,
              "body": "```suggestion\r\n       1. Find all objects having an `_sd` key that refers to an array of strings.\r\n```",
              "createdAt": "2023-06-02T01:41:31Z",
              "updatedAt": "2023-06-02T01:41:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5XZC9C",
          "commit": {
            "abbreviatedOid": "fcc90f4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-06T21:57:07Z",
          "updatedAt": "2023-06-06T21:57:08Z",
          "comments": [
            {
              "originalPosition": 76,
              "body": "```suggestion\r\nThe payload of an SD-JWT is a JSON object according to the following rules:\r\n```\r\n\r\nI know it's implied and maybe even obvious but I still think explicitly saying \"JSON object\" here is worthwhile. ",
              "createdAt": "2023-06-06T21:57:07Z",
              "updatedAt": "2023-06-06T21:57:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5XZEP0",
          "commit": {
            "abbreviatedOid": "fcc90f4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-06T22:01:56Z",
          "updatedAt": "2023-06-06T22:01:56Z",
          "comments": [
            {
              "originalPosition": 80,
              "body": "```suggestion\r\n 3. The payload MAY contain one or more decoy digests to hide the number of claims in the SD-JWT, created and formatted as described in (#decoy_digests).\r\n```",
              "createdAt": "2023-06-06T22:01:56Z",
              "updatedAt": "2023-06-06T22:01:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5XZfJn",
          "commit": {
            "abbreviatedOid": "fcc90f4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-06T23:36:55Z",
          "updatedAt": "2023-06-06T23:36:56Z",
          "comments": [
            {
              "originalPosition": 404,
              "body": "```suggestion\r\nNote: Examples in this document use the `cnf` Claim defined in [@RFC7800] to include\r\n```",
              "createdAt": "2023-06-06T23:36:56Z",
              "updatedAt": "2023-06-06T23:36:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5XbkxU",
          "commit": {
            "abbreviatedOid": "78534e5"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-07T07:24:29Z",
          "updatedAt": "2023-06-07T07:24:30Z",
          "comments": [
            {
              "originalPosition": 405,
              "body": "```suggestion\r\nNote: Examples in this document use the `cnf` Claim defined in [@RFC7800] to include\r\nthe raw public key by value in SD-JWT.\r\n```",
              "createdAt": "2023-06-07T07:24:29Z",
              "updatedAt": "2023-06-07T07:24:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5XgOHj",
          "commit": {
            "abbreviatedOid": "fcc90f4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-07T15:57:54Z",
          "updatedAt": "2023-06-07T15:57:54Z",
          "comments": [
            {
              "originalPosition": 256,
              "body": "```suggestion\r\n  \"nationalities\": \r\n    [\"DE\", {\"...\": \"w0I8EKcdCtUPkGCNUrfwVp2xEgNjtoIDlOxc9-PlOhs\"}]\r\n```\r\n\r\njust a line break so it doesn't overrun width-wise ",
              "createdAt": "2023-06-07T15:57:54Z",
              "updatedAt": "2023-06-07T15:57:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5XgQJU",
          "commit": {
            "abbreviatedOid": "0a24b9d"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-07T16:02:00Z",
          "updatedAt": "2023-06-07T16:02:00Z",
          "comments": [
            {
              "originalPosition": 256,
              "body": "```suggestion\r\n  \"nationalities\":\r\n```",
              "createdAt": "2023-06-07T16:02:00Z",
              "updatedAt": "2023-06-07T16:02:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5XgSOS",
          "commit": {
            "abbreviatedOid": "c973a58"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-07T16:06:08Z",
          "updatedAt": "2023-06-07T16:06:08Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5X-WY7",
          "commit": {
            "abbreviatedOid": "c973a58"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-12T23:33:11Z",
          "updatedAt": "2023-06-12T23:33:11Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "what does this double `!sd` mean?",
              "createdAt": "2023-06-12T23:33:11Z",
              "updatedAt": "2023-06-12T23:33:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5X-XUs",
          "commit": {
            "abbreviatedOid": "c973a58"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-12T23:37:49Z",
          "updatedAt": "2023-06-12T23:37:49Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nWhile JWTs with claims describing natural persons are a common use case, the\r\n```",
              "createdAt": "2023-06-12T23:37:49Z",
              "updatedAt": "2023-06-12T23:37:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5X-Xz-",
          "commit": {
            "abbreviatedOid": "c973a58"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-12T23:40:05Z",
          "updatedAt": "2023-06-12T23:40:05Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "```suggestion\r\n  - a format for an Issuer-signed JWT containing selectively disclosable claims that include object properties (key-value pairs), array elements, and nested data structures built from these),\r\n```",
              "createdAt": "2023-06-12T23:40:05Z",
              "updatedAt": "2023-06-12T23:40:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5X-YgC",
          "commit": {
            "abbreviatedOid": "c973a58"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-12T23:44:35Z",
          "updatedAt": "2023-06-12T23:44:35Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "```suggestion\r\n:  A combination of a salt, a cleartext claim name (present when the claim is a key-value pair and absent when the claim is an array element), and a cleartext claim value, all of which are used to calculate a digest for the respective claim.\r\n```",
              "createdAt": "2023-06-12T23:44:35Z",
              "updatedAt": "2023-06-12T23:44:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5X-Y37",
          "commit": {
            "abbreviatedOid": "c973a58"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-06-12T23:47:14Z",
          "updatedAt": "2023-06-13T00:57:03Z",
          "comments": [
            {
              "originalPosition": 56,
              "body": "```suggestion\r\nEach digest value ensures the integrity of, and maps to, the respective Disclosure.  Digest values are calculated using a hash function over the Disclosures, each of which contains a random salt, the claim name (only when the claim is an object property), and the claim value. The Disclosures are sent to the Holder together with the SD-JWT in the Combined Format for Issuance defined in (#combined_format_for_issuance).\r\n```\r\nfor consistency in the order: salt, claim name, claim value",
              "createdAt": "2023-06-12T23:47:14Z",
              "updatedAt": "2023-06-13T00:57:03Z"
            },
            {
              "originalPosition": 89,
              "body": "```suggestion\r\nIt is the Issuer who decides which claims are selectively disclosable and which are not. However, claims controlling the validity of the SD-JWT, such as `iss`, `exp`, or `nbf` are usually included in plaintext. End-User claims MAY be included as plaintext as well, e.g., if hiding the particular claims from the Verifier is not required in the intended use case.\r\n```",
              "createdAt": "2023-06-12T23:53:12Z",
              "updatedAt": "2023-06-13T00:57:03Z"
            },
            {
              "originalPosition": 99,
              "body": "```suggestion\r\n * For a claim that is an object property, the Issuer creates a Disclosure as described in (#disclosures_for_object_properties).\r\n```",
              "createdAt": "2023-06-12T23:54:35Z",
              "updatedAt": "2023-06-13T00:57:03Z"
            },
            {
              "originalPosition": 133,
              "body": "```suggestion\r\nsame claim value \"M\u00f6bius\":\r\n```",
              "createdAt": "2023-06-12T23:56:57Z",
              "updatedAt": "2023-06-13T00:57:03Z"
            },
            {
              "originalPosition": 78,
              "body": "```suggestion\r\n 1. The payload MAY contain the hash algorithm used by the Issuer to generate the digests as described in (#hash_function_claim).\r\n```\r\nbecause points 2 and 3 do not mention `_sd` and `...` (which I think is correct), for consistency, suggest not to mention `_sd_alg` too. otherwise my brain went like \"why is `_sd` not metioned!\"",
              "createdAt": "2023-06-13T00:00:10Z",
              "updatedAt": "2023-06-13T00:57:03Z"
            },
            {
              "originalPosition": 200,
              "body": "```suggestion\r\nDisclosure is embedded into the SD-JWT instead of the original claim that is being selectively disclosed. The precise way of embedding depends on whether a claim is an object property (key-value pair) or an array element.\r\n\r\n * For a claim that is an object property, the Issuer embeds a Disclosure as described in (#embedding_object_properties).\r\n* For a claim that is an array element, the Issuer creates a Disclosure as described in (#embedding_array_elements).\r\n```\r\nlet's be consistent between creating and embedding sections",
              "createdAt": "2023-06-13T00:07:05Z",
              "updatedAt": "2023-06-13T00:57:03Z"
            },
            {
              "originalPosition": 203,
              "body": "```suggestion\r\n### Object Properties {#embedding_object_properties}\r\n```",
              "createdAt": "2023-06-13T00:07:29Z",
              "updatedAt": "2023-06-13T00:57:04Z"
            },
            {
              "originalPosition": 238,
              "body": "```suggestion\r\n### Array Elements {#embedding_array_elements}\r\n```",
              "createdAt": "2023-06-13T00:07:48Z",
              "updatedAt": "2023-06-13T00:57:04Z"
            },
            {
              "originalPosition": 144,
              "body": "```suggestion\r\nFor each claim that is an array element and that is to be made selectively disclosable, the Issuer MUST create a Disclosure as follows:\r\n```",
              "createdAt": "2023-06-13T00:09:42Z",
              "updatedAt": "2023-06-13T00:57:04Z"
            },
            {
              "originalPosition": 162,
              "body": "```suggestion\r\ncould be created by first creating the following array:\r\n```",
              "createdAt": "2023-06-13T00:11:59Z",
              "updatedAt": "2023-06-13T00:57:04Z"
            },
            {
              "originalPosition": 151,
              "body": "```suggestion\r\nThe Disclosure string is created by JSON-encoding this array and base64url-encoding the byte representation of the resulting string as described in (#disclosures_for_object_properties). The same considerations regarding\r\n```",
              "createdAt": "2023-06-13T00:17:19Z",
              "updatedAt": "2023-06-13T00:57:04Z"
            },
            {
              "originalPosition": 221,
              "body": "```suggestion\r\nthis, it is RECOMMENDED to shuffle the array of hashes, e.g., by sorting it\r\nalphanumerically or randomly, after potentially adding\r\ndecoy digests as described in (#decoy_digests). The precise method does not matter as long as it\r\n```",
              "createdAt": "2023-06-13T00:23:02Z",
              "updatedAt": "2023-06-13T00:57:04Z"
            },
            {
              "originalPosition": 243,
              "body": "```suggestion\r\nof the form `{\"...\": \"<digest>\"}` is added to the array. The key MUST always be the\r\n```",
              "createdAt": "2023-06-13T00:29:20Z",
              "updatedAt": "2023-06-13T00:57:04Z"
            },
            {
              "originalPosition": 244,
              "body": "```suggestion\r\nstring `...` (three dots). The value MUST be the digest of the Disclosure created as\r\n```",
              "createdAt": "2023-06-13T00:29:40Z",
              "updatedAt": "2023-06-13T00:57:04Z"
            },
            {
              "originalPosition": 262,
              "body": "```suggestion\r\nAs described in (#verifier_verification), Verifiers MUST ignore all selectively\r\n```",
              "createdAt": "2023-06-13T00:30:09Z",
              "updatedAt": "2023-06-13T00:57:04Z"
            },
            {
              "originalPosition": 296,
              "body": "```suggestion\r\n## Adding Decoy Digests {#decoy_digests}\r\n```",
              "createdAt": "2023-06-13T00:32:50Z",
              "updatedAt": "2023-06-13T00:57:04Z"
            },
            {
              "originalPosition": 367,
              "body": "```suggestion\r\nThe claim `_sd_alg` indicates the hash algorithm used by the Issuer to generate\r\nthe digests as described in (#creating_disclosures). If the  `_sd_alg` claim is not\r\n```\r\nto avoid saying when the hashed array contains a claim name and when it does not",
              "createdAt": "2023-06-13T00:35:01Z",
              "updatedAt": "2023-06-13T00:57:04Z"
            },
            {
              "originalPosition": 315,
              "body": "```suggestion\r\nnot contain decoy digests unless explicitly stated. For an example\r\nwith decoy digests, see (#example-simple_structured).\r\n```",
              "createdAt": "2023-06-13T00:38:19Z",
              "updatedAt": "2023-06-13T00:57:04Z"
            },
            {
              "originalPosition": 327,
              "body": "```suggestion\r\nThe following examples illustrate some of the options an Issuer has. It is up to the Issuer to decide which option to use, depending on, for example, the expected use cases for the SD-JWT, requirements for privacy, size considerations, or ecosystem requirements. For more examples with nested structures, see (#example-simple_structured) and (#example-complex-structured-sd-jwt).\r\n```\r\n\r\nI am a little confused why we need (#example-complex-structured-sd-jwt) if we have these 3 options. or I am a little confused why we need these three options if we have (#example-complex-structured-sd-jwt). but guess both are useful..",
              "createdAt": "2023-06-13T00:43:22Z",
              "updatedAt": "2023-06-14T16:53:48Z"
            },
            {
              "originalPosition": 318,
              "body": "```suggestion\r\n## Nested Data in SD-JWTs {#nested_data}\r\n```\r\nIt is not a note if there are three examples explaining the concept",
              "createdAt": "2023-06-13T00:45:42Z",
              "updatedAt": "2023-06-13T00:57:04Z"
            },
            {
              "originalPosition": 269,
              "body": "I don't disagree this section probably belongs here in terms of the order, but the level of this section feels off (looked at [the rendered ver of this branch](https://drafts.oauth.net/oauth-selective-disclosure-jwt/danielfett/arrays/draft-ietf-oauth-selective-disclosure-jwt.html#name-format-of-an-sd-jwt)).\r\n\r\nI think there is a logical separations between sections from 5.1 to 5.5 (basic operations) and from sections 5.6 to 5.7 (advanced concepts) from 5.8 to 5.9 (content of the SD-JWT) and 5.10 to 5.11 (combined formats). and having them all at the same level makes it hard to read..",
              "createdAt": "2023-06-13T00:50:22Z",
              "updatedAt": "2023-06-13T00:57:04Z"
            },
            {
              "originalPosition": 431,
              "body": "```suggestion\r\n    Disclosures are included by looking for `_sd` and `...` keys. Decode the respective plaintext values from the\r\n```",
              "createdAt": "2023-06-13T00:51:22Z",
              "updatedAt": "2023-06-13T00:57:04Z"
            },
            {
              "originalPosition": 467,
              "body": "```suggestion\r\n          4. If the value still has embedded digests, recursively process the value using the steps described in (*) and (**).\r\n```",
              "createdAt": "2023-06-13T00:54:55Z",
              "updatedAt": "2023-06-13T00:57:04Z"
            },
            {
              "originalPosition": 468,
              "body": "```suggestion\r\n       3. If the digest was found in an array element using `\"...\"` key:\r\n```",
              "createdAt": "2023-06-13T00:55:39Z",
              "updatedAt": "2023-06-13T00:57:04Z"
            },
            {
              "originalPosition": 471,
              "body": "```suggestion\r\n          3. If the value still has embedded digests, recursively process the value using the steps described in (*) and (**).\r\n```",
              "createdAt": "2023-06-13T00:56:40Z",
              "updatedAt": "2023-06-13T00:57:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YBCWO",
          "commit": {
            "abbreviatedOid": "c973a58"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-13T09:16:03Z",
          "updatedAt": "2023-06-13T09:16:03Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "This is a selectively disclosable array element which is an object containing selectively disclosable keys.",
              "createdAt": "2023-06-13T09:16:03Z",
              "updatedAt": "2023-06-14T07:30:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YBDjk",
          "commit": {
            "abbreviatedOid": "c973a58"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-13T09:18:23Z",
          "updatedAt": "2023-06-13T09:18:23Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "```suggestion\r\n - a format for an Issuer-signed JWT containing selectively disclosable claims that include object properties (key-value pairs), array elements, and nested data structures built from these,\r\n```\r\nRemove extra paranthesis.",
              "createdAt": "2023-06-13T09:18:23Z",
              "updatedAt": "2023-06-13T09:18:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YBHVr",
          "commit": {
            "abbreviatedOid": "c973a58"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-13T09:25:29Z",
          "updatedAt": "2023-06-13T09:25:30Z",
          "comments": [
            {
              "originalPosition": 262,
              "body": "This here is intentionally not a normative requirement. We don't need to state the same \"MUST\" twice.",
              "createdAt": "2023-06-13T09:25:29Z",
              "updatedAt": "2023-06-13T09:25:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YBI0f",
          "commit": {
            "abbreviatedOid": "c973a58"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-13T09:28:43Z",
          "updatedAt": "2023-06-13T09:28:44Z",
          "comments": [
            {
              "originalPosition": 467,
              "body": "I don't think we need to say that here. The abort condition is in (*) and (**). If we say this here, developers may be tempted to implement another check searching for embedded digests.",
              "createdAt": "2023-06-13T09:28:44Z",
              "updatedAt": "2023-06-13T09:28:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YBJGe",
          "commit": {
            "abbreviatedOid": "c973a58"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-13T09:29:22Z",
          "updatedAt": "2023-06-13T09:29:23Z",
          "comments": [
            {
              "originalPosition": 468,
              "body": "How else would a digest be found in an array element?",
              "createdAt": "2023-06-13T09:29:22Z",
              "updatedAt": "2023-06-13T09:29:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YBJKl",
          "commit": {
            "abbreviatedOid": "c973a58"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-13T09:29:30Z",
          "updatedAt": "2023-06-13T09:29:31Z",
          "comments": [
            {
              "originalPosition": 471,
              "body": "As above.",
              "createdAt": "2023-06-13T09:29:31Z",
              "updatedAt": "2023-06-13T09:29:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YBK59",
          "commit": {
            "abbreviatedOid": "eede5a5"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-13T09:32:17Z",
          "updatedAt": "2023-06-13T09:32:17Z",
          "comments": [
            {
              "originalPosition": 78,
              "body": "I don't think that this is needed. `_sd_alg` is very concise and concrete, so we should mention it. For `...` and `_sd` we say how exactly they are embedded further below (because it needs much more explanation than `_sd_alg`).\r\n\r\nBonus nitpick: The payload doesn't contain the hash algorithm, but the hash algorithm's identifier.",
              "createdAt": "2023-06-13T09:32:17Z",
              "updatedAt": "2023-06-13T09:58:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YBMK2",
          "commit": {
            "abbreviatedOid": "eede5a5"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-13T09:34:45Z",
          "updatedAt": "2023-06-13T09:34:46Z",
          "comments": [
            {
              "originalPosition": 200,
              "body": "```suggestion\r\nFor selectively disclosable claims, the digests of the Disclosures are embedded into the SD-JWT instead of the claims themselves. The precise way of embedding depends on whether a claim is an object property (key-value pair) or an array element.\r\n\r\n * For a claim that is an object property, the Issuer embeds a Disclosure as described in (#embedding_object_properties).\r\n* For a claim that is an array element, the Issuer creates a Disclosure as described in (#embedding_array_elements).\r\n```",
              "createdAt": "2023-06-13T09:34:45Z",
              "updatedAt": "2023-06-13T09:34:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YBQgp",
          "commit": {
            "abbreviatedOid": "5541463"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-13T09:39:26Z",
          "updatedAt": "2023-06-13T09:39:26Z",
          "comments": [
            {
              "originalPosition": 269,
              "body": "Yes, I agree! There will be other changes coming that may prompt a slight restructuring of existing sections. Let's revisit after those changes. I created Issue #290 for this.",
              "createdAt": "2023-06-13T09:39:26Z",
              "updatedAt": "2023-06-13T09:39:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YBQ0O",
          "commit": {
            "abbreviatedOid": "5541463"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-13T09:40:03Z",
          "updatedAt": "2023-06-13T09:40:04Z",
          "comments": [
            {
              "originalPosition": 296,
              "body": "Since this explains decoy digests (and not only how to add them), I'd like to keep the title as is.",
              "createdAt": "2023-06-13T09:40:04Z",
              "updatedAt": "2023-06-13T09:40:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YBRyE",
          "commit": {
            "abbreviatedOid": "5541463"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-13T09:42:14Z",
          "updatedAt": "2023-06-13T09:42:14Z",
          "comments": [
            {
              "originalPosition": 327,
              "body": "The purpose of (#example-complex-structured-sd-jwt) alias `examples/complex_ekyc/user_claims.json` is to show *really* deeply nested objects. This section here shows a relatively simple structure to explain the basics.",
              "createdAt": "2023-06-13T09:42:14Z",
              "updatedAt": "2023-06-13T09:42:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YBSMt",
          "commit": {
            "abbreviatedOid": "5541463"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-13T09:43:12Z",
          "updatedAt": "2023-06-13T09:43:12Z",
          "comments": [
            {
              "originalPosition": 468,
              "body": "(I'm hesitating to add your addition because technically, you need to look for not only a `...` key but also whether the object only has one element and the value is a string.)",
              "createdAt": "2023-06-13T09:43:12Z",
              "updatedAt": "2023-06-13T09:43:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YNY49",
          "commit": {
            "abbreviatedOid": "459b8b9"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-14T16:44:37Z",
          "updatedAt": "2023-06-14T16:44:37Z",
          "comments": [
            {
              "originalPosition": 78,
              "body": "ok, that's fine.",
              "createdAt": "2023-06-14T16:44:37Z",
              "updatedAt": "2023-06-14T16:44:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YNaRP",
          "commit": {
            "abbreviatedOid": "459b8b9"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-14T16:47:57Z",
          "updatedAt": "2023-06-14T16:47:57Z",
          "comments": [
            {
              "originalPosition": 262,
              "body": "that's fine.",
              "createdAt": "2023-06-14T16:47:57Z",
              "updatedAt": "2023-06-14T16:47:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YNa8H",
          "commit": {
            "abbreviatedOid": "459b8b9"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-14T16:49:32Z",
          "updatedAt": "2023-06-14T16:49:33Z",
          "comments": [
            {
              "originalPosition": 296,
              "body": "ok",
              "createdAt": "2023-06-14T16:49:32Z",
              "updatedAt": "2023-06-14T16:49:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YNbSa",
          "commit": {
            "abbreviatedOid": "459b8b9"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-14T16:50:30Z",
          "updatedAt": "2023-06-14T16:50:31Z",
          "comments": [
            {
              "originalPosition": 467,
              "body": "that makes sense.",
              "createdAt": "2023-06-14T16:50:31Z",
              "updatedAt": "2023-06-14T16:50:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YNcPZ",
          "commit": {
            "abbreviatedOid": "459b8b9"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-14T16:52:36Z",
          "updatedAt": "2023-06-14T16:52:37Z",
          "comments": [
            {
              "originalPosition": 471,
              "body": "makes sense",
              "createdAt": "2023-06-14T16:52:37Z",
              "updatedAt": "2023-06-14T16:52:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YNdUw",
          "commit": {
            "abbreviatedOid": "d73638a"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-14T16:55:38Z",
          "updatedAt": "2023-06-14T16:55:38Z",
          "comments": [
            {
              "originalPosition": 468,
              "body": "ok, i'll think about that",
              "createdAt": "2023-06-14T16:55:38Z",
              "updatedAt": "2023-06-14T16:55:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YNdeC",
          "commit": {
            "abbreviatedOid": "d73638a"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "ready :)",
          "createdAt": "2023-06-14T16:56:01Z",
          "updatedAt": "2023-06-14T16:56:01Z",
          "comments": []
        }
      ]
    },
    {
      "number": 284,
      "id": "PR_kwDOHTmVzM5R9H6f",
      "title": "update sd-jwt-vc example yml",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/284",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "addresses issue #272 .\r\nupdating the spec text and examples in section 4a to align with https://vcstuff.github.io/draft-terbu-sd-jwt-vc/draft-terbu-sd-jwt-vc.html.\r\nalso updating spec text and examples in section 4b to align with vcdm 2.0 changes \r\nnote that some of the yml file chages are duplicated in PR #283. \r\ncc: @awoie",
      "createdAt": "2023-06-02T01:12:15Z",
      "updatedAt": "2023-06-22T16:11:24Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "2054cca94c243b28c6f0c257b915d68ddd24b65b",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "sakurann-vc-ex",
      "headRefOid": "5d8748c948a832d67be3b4696dd3c9ca2acc127f",
      "closedAt": "2023-06-22T16:11:23Z",
      "mergedAt": "2023-06-22T16:11:23Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "e7c3f5fa9b898d20791f9e3666bda8f4111c8172"
      },
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Fixed merge conflict.",
          "createdAt": "2023-06-13T19:22:27Z",
          "updatedAt": "2023-06-13T19:22:27Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Editor's copy with the examples in the appendix can be found here: https://drafts.oauth.net/oauth-selective-disclosure-jwt/sakurann-vc-ex/draft-ietf-oauth-selective-disclosure-jwt.html @tlodderstedt ",
          "createdAt": "2023-06-14T18:41:55Z",
          "updatedAt": "2023-06-14T18:41:55Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "note to self: be careful with the conflicts with [PR #293](https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/293/files#diff-40bc3800dd9a7d4411799637caf0b01f82a01242d57264a2e4beb408c3835704R1359)",
          "createdAt": "2023-06-20T03:44:33Z",
          "updatedAt": "2023-06-20T03:44:33Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "but sd-jwt vc defines a typ value",
          "createdAt": "2023-06-22T15:31:47Z",
          "updatedAt": "2023-06-22T15:31:47Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5X6owN",
          "commit": {
            "abbreviatedOid": "7164712"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-12T13:55:08Z",
          "updatedAt": "2023-06-12T13:55:08Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "```suggestion\r\nVerifiable Credentials with JSON payload based on the SD-JWT format as defined in [@I-D.terbu-sd-jwt-vc].\r\n```",
              "createdAt": "2023-06-12T13:55:08Z",
              "updatedAt": "2023-06-12T13:55:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5X6qtB",
          "commit": {
            "abbreviatedOid": "7164712"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-12T13:58:49Z",
          "updatedAt": "2023-06-12T13:58:49Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "```suggestion\r\nThe example uses a media type `vc+sd-jwt`.\r\n```\r\n\r\nsaying content type might suggest the 'cty' header, which isn't where `vc+sd-jwt` would be used ",
              "createdAt": "2023-06-12T13:58:49Z",
              "updatedAt": "2023-06-12T21:19:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YFvIq",
          "commit": {
            "abbreviatedOid": "3be2073"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-13T19:17:07Z",
          "updatedAt": "2023-06-13T19:17:07Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5YFyLx",
          "commit": {
            "abbreviatedOid": "49cc464"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-13T19:26:47Z",
          "updatedAt": "2023-06-13T19:26:48Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "```suggestion\r\nthat is represented as a W3C Verifiable Credentials Data Model v2.0 [@VC_DATA_v2.0].\r\n```",
              "createdAt": "2023-06-13T19:26:47Z",
              "updatedAt": "2023-06-13T19:26:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YFyYN",
          "commit": {
            "abbreviatedOid": "49cc464"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-13T19:27:24Z",
          "updatedAt": "2023-06-13T19:27:25Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "Trailing whitespaces will kill me some day.",
              "createdAt": "2023-06-13T19:27:24Z",
              "updatedAt": "2023-06-13T19:27:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YFzvb",
          "commit": {
            "abbreviatedOid": "b113aa7"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-13T19:29:47Z",
          "updatedAt": "2023-06-13T19:29:47Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5YN_mY",
          "commit": {
            "abbreviatedOid": "b113aa7"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-14T18:25:13Z",
          "updatedAt": "2023-06-14T18:25:13Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "I suggest to align terminology with the sd-jwt vc draft\r\n\r\n```suggestion\r\nThis example illustrates how to use the artifacts defined in this specification to express\r\n```",
              "createdAt": "2023-06-14T18:25:13Z",
              "updatedAt": "2023-06-14T18:25:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YOBC4",
          "commit": {
            "abbreviatedOid": "b113aa7"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "sorry, cannot review the examples as I don't know the transformation rules to JSON.  ",
          "createdAt": "2023-06-14T18:28:10Z",
          "updatedAt": "2023-06-14T18:28:10Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5Y3ICD",
          "commit": {
            "abbreviatedOid": "9ba651b"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-21T14:08:01Z",
          "updatedAt": "2023-06-21T14:08:01Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "```suggestion\r\nThe payload of a corresponding Key Binding JWT looks as follows:\r\n```",
              "createdAt": "2023-06-21T14:08:01Z",
              "updatedAt": "2023-06-21T14:08:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Y4nyn",
          "commit": {
            "abbreviatedOid": "eadca27"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-21T16:45:31Z",
          "updatedAt": "2023-06-21T16:45:31Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5Y4pZT",
          "commit": {
            "abbreviatedOid": "eadca27"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-21T16:48:49Z",
          "updatedAt": "2023-06-21T16:49:03Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "```suggestion\r\nThe example uses a media type `vc+sd-jwt` as the `typ` JOSE header parameter value.\r\n```\r\nper torsten's review",
              "createdAt": "2023-06-21T16:48:49Z",
              "updatedAt": "2023-06-21T16:49:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Y5cT2",
          "commit": {
            "abbreviatedOid": "eadca27"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-21T18:36:39Z",
          "updatedAt": "2023-06-21T18:36:39Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "The problem with saying that is that the example doesn't actually have a `typ` JOSE header parameter at all. Saying just, \"The example uses a media type `vc+sd-jwt`\" felt less outright wrong. But it's not really correct either. I think these examples might be better off just not saying anything about `typ` or `cty` headers or media types. \r\n\r\n```suggestion\r\n```",
              "createdAt": "2023-06-21T18:36:39Z",
              "updatedAt": "2023-06-21T18:36:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Y5iGQ",
          "commit": {
            "abbreviatedOid": "eadca27"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-21T18:49:01Z",
          "updatedAt": "2023-06-21T18:49:01Z",
          "comments": [
            {
              "originalPosition": 84,
              "body": "The example doesn't actually have a `typ` JOSE header parameter.  And I think `vc+ld+json` would be used in the `cty` header. Anyway, as mentioned in another comment, I think these examples might be better off just not saying anything about typ or cty headers or media types.\r\n\r\n\r\n\r\n```suggestion\r\nthat is represented as a W3C Verifiable Credentials Data Model v2.0 [@VC_DATA_v2.0].\r\n```",
              "createdAt": "2023-06-21T18:49:01Z",
              "updatedAt": "2023-06-21T18:49:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Y5iqG",
          "commit": {
            "abbreviatedOid": "eadca27"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Let's just leave typ and cty headers and media type out of discussion of the examples. ",
          "createdAt": "2023-06-21T18:50:11Z",
          "updatedAt": "2023-06-21T18:50:11Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5ZBNzO",
          "commit": {
            "abbreviatedOid": "eadca27"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-22T15:33:04Z",
          "updatedAt": "2023-06-22T15:33:05Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "i would prefer to keep this because sd-jwt vc mandates using this typ.\r\nI can add a header manually just like for KB JWT - torsten asked about the header too.",
              "createdAt": "2023-06-22T15:33:05Z",
              "updatedAt": "2023-06-22T15:33:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ZBiCU",
          "commit": {
            "abbreviatedOid": "5d8748c"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-22T16:11:12Z",
          "updatedAt": "2023-06-22T16:11:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 285,
      "id": "PR_kwDOHTmVzM5SKzGS",
      "title": "fix: [Hash algs] only RIPEMD versions earlier that 160 are not usable.",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/285",
      "state": "MERGED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "RIPEMD-160 is usable, but not its predecessors. \r\n\r\nFor this reason this PR removes RIPEMD-160 from the list of the weak algs by saying that only  -160 predecessors must not be used.",
      "createdAt": "2023-06-05T08:46:57Z",
      "updatedAt": "2023-06-06T15:01:54Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "332ded8faf20d528c5c05e04cebed28aab1a0d33",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "ripemd-redention",
      "headRefOid": "c0802bfa73e2e03502d489e8382423331d3a4f42",
      "closedAt": "2023-06-06T15:01:54Z",
      "mergedAt": "2023-06-06T15:01:54Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "23752789bc05aaeee51b3a10f08a870d76e4e057"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5XLEJo",
          "commit": {
            "abbreviatedOid": "b485922"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-05T13:16:33Z",
          "updatedAt": "2023-06-05T13:16:34Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I'd suggest that, to the extent possible, this document not try to be an arbitrator of what hash algorithms are insecure. \r\n\r\n```suggestion\r\nFurthermore, the hash algorithms MD2, MD4, MD5, and SHA-1\r\n```",
              "createdAt": "2023-06-05T13:16:33Z",
              "updatedAt": "2023-06-05T13:16:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5XLtkq",
          "commit": {
            "abbreviatedOid": "b485922"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-05T14:30:22Z",
          "updatedAt": "2023-06-05T14:30:22Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Done @bc-pi, thank you",
              "createdAt": "2023-06-05T14:30:22Z",
              "updatedAt": "2023-06-05T14:30:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5XMuJ7",
          "commit": {
            "abbreviatedOid": "c0802bf"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-05T16:35:46Z",
          "updatedAt": "2023-06-05T16:35:46Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5XQmmG",
          "commit": {
            "abbreviatedOid": "c0802bf"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thank you!",
          "createdAt": "2023-06-06T01:12:29Z",
          "updatedAt": "2023-06-06T01:12:29Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5XWK20",
          "commit": {
            "abbreviatedOid": "c0802bf"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-06T15:01:47Z",
          "updatedAt": "2023-06-06T15:01:47Z",
          "comments": []
        }
      ]
    },
    {
      "number": 286,
      "id": "PR_kwDOHTmVzM5SUFkh",
      "title": "use the term Key Binding rather than Holder Binding",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/286",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Change to use Key Binding and Key Binding JWT rather than Holder Binding and Holder Binding JWT. \r\n\r\nfor issue #281",
      "createdAt": "2023-06-06T14:39:17Z",
      "updatedAt": "2023-06-13T13:56:37Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "332ded8faf20d528c5c05e04cebed28aab1a0d33",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "bc/key-rather-than-holder",
      "headRefOid": "e483c2a077a85d3999eab54f7394a0d5e542d34d",
      "closedAt": "2023-06-13T13:56:37Z",
      "mergedAt": "2023-06-13T13:56:37Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "370e96d46d72ec0b36a17c174e724f17372c6b0a"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Did some more work on this based on discussions yesterday and I believe it's now ready for review @Sakurann and @danielfett  ",
          "createdAt": "2023-06-07T21:47:41Z",
          "updatedAt": "2023-06-07T21:47:41Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Editor's copy for this branch: https://drafts.oauth.net/oauth-selective-disclosure-jwt/bc/key-rather-than-holder/draft-ietf-oauth-selective-disclosure-jwt.html ",
          "createdAt": "2023-06-07T22:33:42Z",
          "updatedAt": "2023-06-08T15:52:46Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I realized/noticed that there were still things like `holder_binding` in yaml and `hb_` in file names.  So I changed `holder_binding` to `key_binding` and `hb_` to `kb_` and `holder binding` to `key binding` throughout the sd-jwt lib to try and have code, comments, and generated files reflect calling it key binding rather than holder binding. And made the corresponding changes here. Including changes to [.github/workflows/ghpages.yml](https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/286/files#diff-076ad51c27087e3391c9a23989681aa90a4a8c2b8f97393633f0bfdca33fd9d0) which needs to be undone around merge time and doesn't feel right but not sure how else to do it. \r\n\r\n",
          "createdAt": "2023-06-08T22:21:48Z",
          "updatedAt": "2023-06-08T22:38:11Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5X-U0L",
          "commit": {
            "abbreviatedOid": "e483c2a"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks Brian, this looks good. I believe this is the right direction. ",
          "createdAt": "2023-06-12T23:23:20Z",
          "updatedAt": "2023-06-12T23:23:20Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5YDOMk",
          "commit": {
            "abbreviatedOid": "e483c2a"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-13T13:53:16Z",
          "updatedAt": "2023-06-13T13:53:16Z",
          "comments": []
        }
      ]
    },
    {
      "number": 287,
      "id": "PR_kwDOHTmVzM5SY5Lf",
      "title": "Clarify usage of _sd_alg to fix #266",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/287",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-06-07T09:14:58Z",
      "updatedAt": "2023-06-14T07:28:53Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "23752789bc05aaeee51b3a10f08a870d76e4e057",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/fix-266",
      "headRefOid": "e23bdbb446bb13d57cb627bc1a32e96b5538fff0",
      "closedAt": "2023-06-14T07:28:52Z",
      "mergedAt": "2023-06-14T07:28:52Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "72aa1150199a36c2695a06547ecbc1afdb328294"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Text looks good but it's going to clash with the array spec work https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/283/files#diff-40bc3800dd9a7d4411799637caf0b01f82a01242d57264a2e4beb408c3835704R513-R515 ",
          "createdAt": "2023-06-07T14:06:27Z",
          "updatedAt": "2023-06-12T19:27:30Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "> Text looks good but it's going to clash with the array spec work https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/283/files#diff-40bc3800dd9a7d4411799637caf0b01f82a01242d57264a2e4beb408c3835704R513-R515\r\n\r\nIt's a small change, we can sort that out when merging either.",
          "createdAt": "2023-06-13T16:04:45Z",
          "updatedAt": "2023-06-13T16:04:45Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5XeSE7",
          "commit": {
            "abbreviatedOid": "6de1cdf"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-07T12:42:41Z",
          "updatedAt": "2023-06-07T12:42:41Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5X9BVV",
          "commit": {
            "abbreviatedOid": "6de1cdf"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "let's be more clear what is mandatory ",
          "createdAt": "2023-06-12T18:59:10Z",
          "updatedAt": "2023-06-12T18:59:26Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nthe digests. When used, this claim MUST appear at the top level of the SD-JWT payload. It\r\nMUST NOT be used in any object nested within the payload. If the  `_sd_alg`\r\nclaim is not present at the top level, a default value of `sha-256` MUST be used.\r\n```",
              "createdAt": "2023-06-12T18:59:10Z",
              "updatedAt": "2023-06-12T18:59:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YHTPc",
          "commit": {
            "abbreviatedOid": "e23bdbb"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-14T01:43:49Z",
          "updatedAt": "2023-06-14T01:43:49Z",
          "comments": []
        }
      ]
    },
    {
      "number": 288,
      "id": "PR_kwDOHTmVzM5SeEIX",
      "title": "fixing indentation",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/288",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-06-08T01:54:43Z",
      "updatedAt": "2023-06-08T01:56:29Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "23752789bc05aaeee51b3a10f08a870d76e4e057",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "editorial",
      "headRefOid": "617c7f46cfd101b2911a33172297ebde8b27cfb9",
      "closedAt": "2023-06-08T01:56:28Z",
      "mergedAt": "2023-06-08T01:56:28Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "b391823e02dd0d7b7ec762c401ffa9e863d2e0a7"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 289,
      "id": "PR_kwDOHTmVzM5S3IgY",
      "title": "JSON Serialization Spec",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/289",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "<del>Note: This pulls in the branch \"danielfett/json-serialization\" from danielfett/sd-jwt. </del>  <i>Nope, not required anymore.</i>\r\n\r\nEditor's copy here: https://drafts.oauth.net/oauth-selective-disclosure-jwt/danielfett/json-serialization/",
      "createdAt": "2023-06-13T09:12:59Z",
      "updatedAt": "2023-06-14T17:14:14Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "b716075bb7ea142b3e31ca592f0c9f4a3cc041a9",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/json-serialization",
      "headRefOid": "5c1943ad33602402242ce794f53d95a34ed12ed2",
      "closedAt": "2023-06-14T17:14:14Z",
      "mergedAt": "2023-06-14T17:14:14Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "b08b927488336d670b822b38f409ef7f3c5ff796"
      },
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Thanks for writing the text, Brian! I feel like this is almost all we need to say. We only might want to add\r\n\r\n- a note somewhere in Section 1 (maybe 1.1?) where we say that this feature exists, and\r\n- a sentence saying \"Verification of the JSON serialized SD-JWT follows the same rules defined in Section 6, except that the SD-JWT does not need to be split into components, but disclosures and (if applicable) a key binding JWT can be found in the respective members of the JSON object.\"",
          "createdAt": "2023-06-14T12:41:39Z",
          "updatedAt": "2023-06-14T12:41:39Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> Thanks for writing the text, Brian! I feel like this is almost all we need to say. We only might want to add\r\n> \r\n>   a note somewhere in Section 1 (maybe 1.1?) where we say that this feature exists, and\r\n\r\nI think it's okay without such a note. It's a top level section and in the TOC and can be linked directly. \r\n\r\nAlso, looking at sec 1 / 1.1, I don't see an obvious clean place/way to say it. But if you've got a specific suggestion, feel free to add it to the PR. :) \r\n\r\n>   a sentence saying \"Verification of the JSON serialized SD-JWT follows the same rules defined in Section 6, except that the SD-JWT does not need to be split into components, but disclosures and (if applicable) a key binding JWT can be found in the respective members of the JSON object.\"\r\n\r\nGood point, I added the sentence about verification with [5c1943a](https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/289/commits/5c1943ad33602402242ce794f53d95a34ed12ed2) \r\n",
          "createdAt": "2023-06-14T14:02:58Z",
          "updatedAt": "2023-06-14T14:02:58Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5YDa1o",
          "commit": {
            "abbreviatedOid": "8ba0d2c"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-13T14:14:58Z",
          "updatedAt": "2023-06-13T14:14:58Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "```suggestion\r\nkey_binding: True\r\n```",
              "createdAt": "2023-06-13T14:14:58Z",
              "updatedAt": "2023-06-13T14:14:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YHSqU",
          "commit": {
            "abbreviatedOid": "a073cd8"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM. ",
          "createdAt": "2023-06-14T01:40:37Z",
          "updatedAt": "2023-06-14T01:42:20Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "```suggestion\r\nto Section 7.2 of [@!RFC7515]. The disclosures (both for issuance and presentation) MUST be included in the\r\n```",
              "createdAt": "2023-06-14T01:40:37Z",
              "updatedAt": "2023-06-14T01:42:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YHdHe",
          "commit": {
            "abbreviatedOid": "a073cd8"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-14T02:41:40Z",
          "updatedAt": "2023-06-14T02:41:41Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "I was intentionally avoiding RFC 2119 key words like MUST here because it seemed unnecessary and potentially limiting. ",
              "createdAt": "2023-06-14T02:41:40Z",
              "updatedAt": "2023-06-14T02:41:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YLKMO",
          "commit": {
            "abbreviatedOid": "4a71708"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-14T12:33:39Z",
          "updatedAt": "2023-06-14T12:33:40Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\n```",
              "createdAt": "2023-06-14T12:33:40Z",
              "updatedAt": "2023-06-14T12:33:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YLKbf",
          "commit": {
            "abbreviatedOid": "4a71708"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-14T12:34:11Z",
          "updatedAt": "2023-06-14T12:34:11Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I added this just to show that even the sentences I wrote were just placeholders. I think we can remove this for now.",
              "createdAt": "2023-06-14T12:34:11Z",
              "updatedAt": "2023-06-14T12:34:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YLK-C",
          "commit": {
            "abbreviatedOid": "4a71708"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-14T12:35:18Z",
          "updatedAt": "2023-06-14T12:35:19Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Do you have any specific use cases in mind where this might be limiting?",
              "createdAt": "2023-06-14T12:35:18Z",
              "updatedAt": "2023-06-14T12:35:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YLLSh",
          "commit": {
            "abbreviatedOid": "4a71708"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-14T12:35:34Z",
          "updatedAt": "2023-06-14T12:35:35Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "```suggestion\r\nvalue of the `disclosures` member is an array of strings where each element is an individual Disclosure\r\n```",
              "createdAt": "2023-06-14T12:35:35Z",
              "updatedAt": "2023-06-14T12:35:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YLL5h",
          "commit": {
            "abbreviatedOid": "4a71708"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-14T12:36:25Z",
          "updatedAt": "2023-06-14T12:36:25Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "```suggestion\r\nas described in (#creating_disclosures). The Issuer includes a Disclosure for each selectively\r\ndisclosable claim of the SD-JWT payload, whereas the Holder includes only the Disclosures\r\nselected for the given presentation. Additionally, for presentation with a Key Binding, the Holder adds\r\n```",
              "createdAt": "2023-06-14T12:36:25Z",
              "updatedAt": "2023-06-14T12:36:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YLPP8",
          "commit": {
            "abbreviatedOid": "4a71708"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-14T12:42:55Z",
          "updatedAt": "2023-06-14T12:42:56Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I left it in for similar reasons but can remove at this point. ",
              "createdAt": "2023-06-14T12:42:55Z",
              "updatedAt": "2023-06-14T12:42:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YLSmf",
          "commit": {
            "abbreviatedOid": "a073cd8"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-14T12:48:10Z",
          "updatedAt": "2023-06-14T12:48:10Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "A profile or something might want to base64url-encode the JWS JSON part and add the disclosures `~` separated to the end.  I don't like that. And definitely don't think this spec should describe it. But didn't want to preclude it. ",
              "createdAt": "2023-06-14T12:48:10Z",
              "updatedAt": "2023-06-14T12:48:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YLUhg",
          "commit": {
            "abbreviatedOid": "a073cd8"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-14T12:50:07Z",
          "updatedAt": "2023-06-14T12:50:08Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "SHOULD this be a SHOULD then?",
              "createdAt": "2023-06-14T12:50:08Z",
              "updatedAt": "2023-06-14T12:50:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YLi-V",
          "commit": {
            "abbreviatedOid": "a073cd8"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-14T13:15:59Z",
          "updatedAt": "2023-06-14T13:16:00Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "I really think that not having RFC 2119 keywords here is most appropriate. It just says \"if you're doing this, this is how you do it\". ",
              "createdAt": "2023-06-14T13:15:59Z",
              "updatedAt": "2023-06-14T13:16:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YM_OC",
          "commit": {
            "abbreviatedOid": "5c1943a"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-14T15:47:21Z",
          "updatedAt": "2023-06-14T15:47:21Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "\"optional\" or \"OPTIONAL\"?",
              "createdAt": "2023-06-14T15:47:21Z",
              "updatedAt": "2023-06-14T15:47:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YNic_",
          "commit": {
            "abbreviatedOid": "5c1943a"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-14T17:08:17Z",
          "updatedAt": "2023-06-14T17:08:18Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "let's keep as-is and see if the topic arises again.",
              "createdAt": "2023-06-14T17:08:18Z",
              "updatedAt": "2023-06-14T17:08:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YNif2",
          "commit": {
            "abbreviatedOid": "5c1943a"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-14T17:08:25Z",
          "updatedAt": "2023-06-14T17:08:28Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "see below",
              "createdAt": "2023-06-14T17:08:25Z",
              "updatedAt": "2023-06-14T17:08:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YNiyw",
          "commit": {
            "abbreviatedOid": "5c1943a"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-14T17:09:04Z",
          "updatedAt": "2023-06-14T17:09:04Z",
          "comments": []
        }
      ]
    },
    {
      "number": 292,
      "id": "PR_kwDOHTmVzM5S7DL1",
      "title": "Add numbers and booleans to example to fix Issue #268",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/292",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "I used the claims `phone_number_verified` and `updated_at` from OpenID Connect Core.\r\n\r\nRendered version: https://drafts.oauth.net/oauth-selective-disclosure-jwt/danielfett/fix-268/draft-ietf-oauth-selective-disclosure-jwt.html#section-5.2",
      "createdAt": "2023-06-13T19:43:44Z",
      "updatedAt": "2023-06-14T17:16:13Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "b08b927488336d670b822b38f409ef7f3c5ff796",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/fix-268",
      "headRefOid": "9f64b76fc46da1b2c2e60fd3f0817ff608f61d55",
      "closedAt": "2023-06-14T17:16:13Z",
      "mergedAt": "2023-06-14T17:16:13Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "f76e7ab2cb7186f2f98ec911871671877708251d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5YGdNo",
          "commit": {
            "abbreviatedOid": "0c7729d"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-13T21:36:50Z",
          "updatedAt": "2023-06-13T21:36:50Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5YNkoQ",
          "commit": {
            "abbreviatedOid": "0c7729d"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-14T17:13:56Z",
          "updatedAt": "2023-06-14T17:13:56Z",
          "comments": []
        }
      ]
    },
    {
      "number": 293,
      "id": "PR_kwDOHTmVzM5TCT_P",
      "title": "Simplification and consolidation of SD-JWT terminology and format",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/293",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": " for #254 \r\n\r\nThe terms \"Combined Format for Issuance\" and \"Combined Format for Presentation'' go away and the whole structure, issued or presented, can be called an SD-JWT. To align the two formats, the last Disclosure will always be followed by a `~` (tilde) character (currently the Combined Format for Issuance does not have the trailing tilde). When key binding is required for presentation, a key binding JWT will be appended to the end of the whole thing after the trailing tilde. \r\n\r\nNo changes being made to [Sec 6. Verification and Processing](https://drafts.oauth.net/oauth-selective-disclosure-jwt/bc-tilde-and-terms/draft-ietf-oauth-selective-disclosure-jwt.html#name-verification-and-processing) in this PR due to expected changes coming from PR #294. \r\n\r\n\r\nEditor's copy: https://drafts.oauth.net/oauth-selective-disclosure-jwt/bc-tilde-and-terms/draft-ietf-oauth-selective-disclosure-jwt.html\r\n",
      "createdAt": "2023-06-14T21:37:40Z",
      "updatedAt": "2023-06-20T14:37:29Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "f0bc7d5d338eee34d7684bfaac6aecdfc7d8efac",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "bc-tilde-and-terms",
      "headRefOid": "f37c44ccf76de3b51637732264160098fb4cb190",
      "closedAt": "2023-06-20T14:37:28Z",
      "mergedAt": "2023-06-20T14:37:28Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "c6a27373dee13cc7c3f70a8b7fd374e62306f5a0"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5YmsZS",
          "commit": {
            "abbreviatedOid": "869e169"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "Thanks for preparing this! I left a few remarks.",
          "createdAt": "2023-06-19T16:15:12Z",
          "updatedAt": "2023-06-19T16:25:10Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "```suggestion\r\nIn an SD-JWT, claims can be hidden, but cryptographically\r\n```\r\nIn preparation for potentially calling the first part Issuer-Signed JWT or something similar.",
              "createdAt": "2023-06-19T16:15:12Z",
              "updatedAt": "2023-06-19T16:25:10Z"
            },
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nthe Holder, the Issuer includes the cleartext counterparts of all hidden\r\nclaims, the so-called Disclosures, outside the signed part of the SD-JWT.\r\n```",
              "createdAt": "2023-06-19T16:16:35Z",
              "updatedAt": "2023-06-19T16:25:10Z"
            },
            {
              "originalPosition": 24,
              "body": "```suggestion\r\n - a format for data associated with the JWT that enables selectively disclosing those claims,\r\n```",
              "createdAt": "2023-06-19T16:17:01Z",
              "updatedAt": "2023-06-19T16:25:10Z"
            },
            {
              "originalPosition": 38,
              "body": "```suggestion\r\n:  A composite structure, consisting of an Issuer-signed JWT (JWS, [@!RFC7515]) and Disclosures,\r\n  that supports selective disclosure as defined in this document and can contain both regular claims and digests of selectively-disclosable claims.\r\n```",
              "createdAt": "2023-06-19T16:18:06Z",
              "updatedAt": "2023-06-19T16:25:10Z"
            },
            {
              "originalPosition": 50,
              "body": "```suggestion\r\n:  An entity that requests, checks, and extracts the claims from an SD-JWT with its respective Disclosures.\r\n```",
              "createdAt": "2023-06-19T16:18:36Z",
              "updatedAt": "2023-06-19T16:25:10Z"
            },
            {
              "originalPosition": 159,
              "body": "I propose to call this section something like simply \"SD-JWT\" or \"SD-JWT Structure\" and the to describe in one section both issuance and presentation. I would hope that the following structure works:\r\n\r\n- An SD-JWT is structured like this: `<Issuer-signed JWT>~<Disclosure 1>~<Disclosure 2>~...~<Disclosure M>~<optional Key Binding JWT>`\r\n- In issuance, no KB JWT, but all disclosures\r\n- Here is an example for issuance:\r\n- In presentation, maybe KB JWT, but only selected disclosures.\r\n- Here is an example for presentation:\r\n\r\nWDYT?",
              "createdAt": "2023-06-19T16:22:55Z",
              "updatedAt": "2023-06-19T16:25:10Z"
            },
            {
              "originalPosition": 159,
              "body": "(Maybe both examples pushed towards the end of that section.)",
              "createdAt": "2023-06-19T16:23:32Z",
              "updatedAt": "2023-06-19T16:25:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Ym0D6",
          "commit": {
            "abbreviatedOid": "fe13837"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-19T16:45:24Z",
          "updatedAt": "2023-06-19T16:45:24Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "```suggestion\r\nclaims, the so-called Disclosures, outside the signed part of the SD-JWT.\r\n```",
              "createdAt": "2023-06-19T16:45:24Z",
              "updatedAt": "2023-06-19T16:45:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Ym1hG",
          "commit": {
            "abbreviatedOid": "869e169"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-19T16:51:05Z",
          "updatedAt": "2023-06-19T16:51:05Z",
          "comments": [
            {
              "originalPosition": 159,
              "body": "> WDYT?\r\n\r\nThat was kinda what I was envisioning going into the editing but I got a little hesitant on making the bigger change of combing sections.  But I think what you're proposing is probably better so I'll take a pass at it. \r\n\r\n",
              "createdAt": "2023-06-19T16:51:05Z",
              "updatedAt": "2023-06-19T16:51:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YnffQ",
          "commit": {
            "abbreviatedOid": "869e169"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-19T19:09:01Z",
          "updatedAt": "2023-06-19T19:09:01Z",
          "comments": [
            {
              "originalPosition": 159,
              "body": "Tried to do that in 7ec2dba3b84418d55ecb12aabd18de6d7cdf6394 ",
              "createdAt": "2023-06-19T19:09:01Z",
              "updatedAt": "2023-06-19T19:09:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YpGOs",
          "commit": {
            "abbreviatedOid": "7ec2dba"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-20T01:45:42Z",
          "updatedAt": "2023-06-20T01:45:42Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "```suggestion\r\n - facilities for binding the Issuer-signed JWT to a key and associated data to prove possession thereof, and\r\n```\r\nwhat does `facilities` mean in this context?",
              "createdAt": "2023-06-20T01:45:42Z",
              "updatedAt": "2023-06-20T01:45:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YpGwM",
          "commit": {
            "abbreviatedOid": "7ec2dba"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-20T01:49:39Z",
          "updatedAt": "2023-06-20T01:49:39Z",
          "comments": [
            {
              "originalPosition": 96,
              "body": "I do not understand `can be omitted ... but not modified` part... was it meant to convey something like below?\r\n\r\n```suggestion\r\nAn SD-JWT, at its core, is a digitally signed JSON document containing digests over the selectively disclosable claims with the Disclosures outside the document. Disclosures can be omitted without breaking the signature, and modifying them can be detected. Selectively disclosable claims can be individual object properties (key-value pairs) or array elements.\r\n```",
              "createdAt": "2023-06-20T01:49:39Z",
              "updatedAt": "2023-06-20T01:50:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YpT6I",
          "commit": {
            "abbreviatedOid": "7ec2dba"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-20T03:14:46Z",
          "updatedAt": "2023-06-20T03:45:10Z",
          "comments": [
            {
              "originalPosition": 134,
              "body": "```suggestion\r\nThis section defines data formats for SD-JWT including the Issuer-signed JWT content, Disclosures, and Key Binding JWT.\r\n```\r\nGuess no reason to be plural?",
              "createdAt": "2023-06-20T03:14:46Z",
              "updatedAt": "2023-06-20T03:45:10Z"
            },
            {
              "originalPosition": 166,
              "body": "were there too many characters for one line..?",
              "createdAt": "2023-06-20T03:17:30Z",
              "updatedAt": "2023-06-20T03:45:10Z"
            },
            {
              "originalPosition": 165,
              "body": "it shows as `two dots &#168; placed over the letter` is there any way to change that..? (this is not the change introduced in this PR)",
              "createdAt": "2023-06-20T03:18:07Z",
              "updatedAt": "2023-06-20T03:45:10Z"
            },
            {
              "originalPosition": 182,
              "body": "```suggestion\r\nFor embedding the Disclosures in the SD-JWT, the Disclosures are hashed using the hash algorithm specified in the `_sd_alg` claim described in (#hash_function_claim). The resulting digest is then included in the payload of the Issuer-signed JWT instead of the original claim value, as described next.\r\n```",
              "createdAt": "2023-06-20T03:18:31Z",
              "updatedAt": "2023-06-20T03:45:10Z"
            },
            {
              "originalPosition": 137,
              "body": "```suggestion\r\n## Issuer-signed JWT Payload\r\n```\r\nWouldn't this be more accurate..?",
              "createdAt": "2023-06-20T03:20:39Z",
              "updatedAt": "2023-06-20T03:45:10Z"
            },
            {
              "originalPosition": 313,
              "body": "```suggestion\r\n* The Disclosures\r\n```",
              "createdAt": "2023-06-20T03:21:19Z",
              "updatedAt": "2023-06-20T03:45:10Z"
            },
            {
              "originalPosition": 322,
              "body": "```suggestion\r\nThe values MUST be separated by the tilde in this order:\r\n1. The Issuer-signed JWT\r\n2. The Disclosures\r\n3. The optional Key Binding JWT\r\n\r\n```",
              "createdAt": "2023-06-20T03:22:04Z",
              "updatedAt": "2023-06-20T03:45:10Z"
            },
            {
              "originalPosition": 325,
              "body": "```suggestion\r\nThe Disclosures are linked to the Issuer-signed JWT payload through the\r\n```",
              "createdAt": "2023-06-20T03:39:12Z",
              "updatedAt": "2023-06-20T03:45:10Z"
            },
            {
              "originalPosition": 358,
              "body": "```suggestion\r\nOtherwise, the processed Issuer-signed JWT payload can be passed to the application to be used for the intended purpose.\r\n```",
              "createdAt": "2023-06-20T03:39:32Z",
              "updatedAt": "2023-06-20T03:45:10Z"
            },
            {
              "originalPosition": 199,
              "body": "```suggestion\r\nAn Issuer MAY add additional digests to the Issuer-signed JWT payload that are not associated with\r\n```",
              "createdAt": "2023-06-20T03:39:45Z",
              "updatedAt": "2023-06-20T03:45:10Z"
            },
            {
              "originalPosition": 364,
              "body": "```suggestion\r\nIn some applications or transport protocols, it is desirable to put an SD-JWT into an outer JWT container. For example, an implementation may envelope multiple credentials and presentations, independent of their format, in a JWT to enable application-layer encryption during transport.\r\n```",
              "createdAt": "2023-06-20T03:41:09Z",
              "updatedAt": "2023-06-20T03:45:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YsdJ5",
          "commit": {
            "abbreviatedOid": "7ec2dba"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-20T12:35:43Z",
          "updatedAt": "2023-06-20T12:35:44Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "\"facilities\" is meant to mean like \"ways of doing\" or \"mechanisms for\". Is there a different word or phrasing that would read better? \r\n\r\nThese 3 bullets start with calling it the \"Issuer-signed JWT\" and then just use \"the JWT\" to be less wordy in the known context. So I'd like to keep that as-is. ",
              "createdAt": "2023-06-20T12:35:44Z",
              "updatedAt": "2023-06-20T12:49:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YsiHR",
          "commit": {
            "abbreviatedOid": "7ec2dba"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-20T12:45:48Z",
          "updatedAt": "2023-06-20T12:45:49Z",
          "comments": [
            {
              "originalPosition": 166,
              "body": "Yeah and I got distracted by it working on this unrelated PR. Sorry, I probably should have done it as a separate thing. ",
              "createdAt": "2023-06-20T12:45:48Z",
              "updatedAt": "2023-06-20T12:45:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Yslw5",
          "commit": {
            "abbreviatedOid": "028abbf"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-20T12:53:42Z",
          "updatedAt": "2023-06-20T12:53:42Z",
          "comments": [
            {
              "originalPosition": 165,
              "body": "Created Issue #299 to look into that one. ",
              "createdAt": "2023-06-20T12:53:42Z",
              "updatedAt": "2023-06-20T12:57:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Ysmth",
          "commit": {
            "abbreviatedOid": "028abbf"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-20T12:55:42Z",
          "updatedAt": "2023-06-20T12:55:42Z",
          "comments": [
            {
              "originalPosition": 137,
              "body": "I think they are basically synonymous. And prefer SD-JWT Payload here. ",
              "createdAt": "2023-06-20T12:55:42Z",
              "updatedAt": "2023-06-20T12:55:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Yspnu",
          "commit": {
            "abbreviatedOid": "028abbf"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-20T13:01:37Z",
          "updatedAt": "2023-06-20T13:01:38Z",
          "comments": [
            {
              "originalPosition": 182,
              "body": "I believe \"SD-JWT payload\" is accurate (enough) and okay here. ",
              "createdAt": "2023-06-20T13:01:37Z",
              "updatedAt": "2023-06-20T13:01:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Ysq-G",
          "commit": {
            "abbreviatedOid": "028abbf"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-20T13:04:06Z",
          "updatedAt": "2023-06-20T13:04:07Z",
          "comments": [
            {
              "originalPosition": 199,
              "body": "IMHO \"SD-JWT payload\" is okay here. \"Issuer-signed JWT\" is okay too but I'd like to not use that too much and so only when the distinction is needed.",
              "createdAt": "2023-06-20T13:04:06Z",
              "updatedAt": "2023-06-20T13:04:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YswvO",
          "commit": {
            "abbreviatedOid": "9a0524e"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-20T13:15:34Z",
          "updatedAt": "2023-06-20T13:15:35Z",
          "comments": [
            {
              "originalPosition": 322,
              "body": "I prefer the text to the bullets/numbers here. Basically the same bullets are already above. ",
              "createdAt": "2023-06-20T13:15:34Z",
              "updatedAt": "2023-06-20T13:15:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Ysw1c",
          "commit": {
            "abbreviatedOid": "9a0524e"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-20T13:15:46Z",
          "updatedAt": "2023-06-20T13:15:47Z",
          "comments": [
            {
              "originalPosition": 325,
              "body": "I believe \"SD-JWT payload\" is accurate (enough) and okay here.",
              "createdAt": "2023-06-20T13:15:46Z",
              "updatedAt": "2023-06-20T13:15:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Ysw5k",
          "commit": {
            "abbreviatedOid": "9a0524e"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-20T13:15:54Z",
          "updatedAt": "2023-06-20T13:15:55Z",
          "comments": [
            {
              "originalPosition": 358,
              "body": "I believe \"SD-JWT payload\" is accurate (enough) and okay here.",
              "createdAt": "2023-06-20T13:15:54Z",
              "updatedAt": "2023-06-20T13:15:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YtV3M",
          "commit": {
            "abbreviatedOid": "9a0524e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-20T14:21:59Z",
          "updatedAt": "2023-06-20T14:23:17Z",
          "comments": [
            {
              "originalPosition": 165,
              "body": "thanks!",
              "createdAt": "2023-06-20T14:21:59Z",
              "updatedAt": "2023-06-20T14:23:17Z"
            },
            {
              "originalPosition": 166,
              "body": "got it - thanks!",
              "createdAt": "2023-06-20T14:22:17Z",
              "updatedAt": "2023-06-20T14:23:17Z"
            },
            {
              "originalPosition": 322,
              "body": "ok",
              "createdAt": "2023-06-20T14:23:07Z",
              "updatedAt": "2023-06-20T14:23:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YtXr_",
          "commit": {
            "abbreviatedOid": "9a0524e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-20T14:25:17Z",
          "updatedAt": "2023-06-20T14:25:17Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "```suggestion\r\nhas to verify that all disclosed claim values were part of the original\r\nIssuer-signed JWT. The Verifier will not, however, learn any claim\r\n```",
              "createdAt": "2023-06-20T14:25:17Z",
              "updatedAt": "2023-06-20T14:25:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YtZP1",
          "commit": {
            "abbreviatedOid": "7ec2dba"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-20T14:28:10Z",
          "updatedAt": "2023-06-20T14:28:10Z",
          "comments": [
            {
              "originalPosition": 137,
              "body": "ok..",
              "createdAt": "2023-06-20T14:28:10Z",
              "updatedAt": "2023-06-20T14:28:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YtZXS",
          "commit": {
            "abbreviatedOid": "9a0524e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-20T14:28:23Z",
          "updatedAt": "2023-06-20T14:28:23Z",
          "comments": [
            {
              "originalPosition": 182,
              "body": "ok..",
              "createdAt": "2023-06-20T14:28:23Z",
              "updatedAt": "2023-06-20T14:28:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YtZm6",
          "commit": {
            "abbreviatedOid": "9a0524e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-20T14:28:50Z",
          "updatedAt": "2023-06-20T14:28:50Z",
          "comments": [
            {
              "originalPosition": 199,
              "body": "ok..",
              "createdAt": "2023-06-20T14:28:50Z",
              "updatedAt": "2023-06-20T14:28:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YtZ9r",
          "commit": {
            "abbreviatedOid": "9a0524e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-20T14:29:25Z",
          "updatedAt": "2023-06-20T14:29:25Z",
          "comments": [
            {
              "originalPosition": 325,
              "body": "ok..",
              "createdAt": "2023-06-20T14:29:25Z",
              "updatedAt": "2023-06-20T14:29:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YtaBS",
          "commit": {
            "abbreviatedOid": "9a0524e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-20T14:29:31Z",
          "updatedAt": "2023-06-20T14:29:32Z",
          "comments": [
            {
              "originalPosition": 358,
              "body": "ok..",
              "createdAt": "2023-06-20T14:29:31Z",
              "updatedAt": "2023-06-20T14:29:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Ytar1",
          "commit": {
            "abbreviatedOid": "f37c44c"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-20T14:30:41Z",
          "updatedAt": "2023-06-20T14:30:41Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "ok, cool.",
              "createdAt": "2023-06-20T14:30:41Z",
              "updatedAt": "2023-06-20T14:30:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Ytavs",
          "commit": {
            "abbreviatedOid": "f37c44c"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-20T14:30:47Z",
          "updatedAt": "2023-06-20T14:30:47Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5YteiY",
          "commit": {
            "abbreviatedOid": "f37c44c"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-20T14:37:20Z",
          "updatedAt": "2023-06-20T14:37:20Z",
          "comments": []
        }
      ]
    },
    {
      "number": 294,
      "id": "PR_kwDOHTmVzM5TChvG",
      "title": "merge processing rules for the wallet and the verifier",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/294",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "changes.\r\n- created a common sd-jwt verification section\r\n- wallet processing section talks only about presentation creation\r\n- verifier processing section talks only about key binding JWT processing and refers to a common sd-jwt verification section\r\n\r\nNote that the terminology is new - based on the PR that @bc-pi is doing for issue #254 (probably not touching these sections in your PR might be the best to minimize conflict, Brian, or I can push later to your branch - wanted to do this PR while I had the idea fresh in my head). I used `issuer-signed JWT` as a placeholder. ",
      "createdAt": "2023-06-14T22:35:31Z",
      "updatedAt": "2023-06-20T15:47:52Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "c6a27373dee13cc7c3f70a8b7fd374e62306f5a0",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "consolidating-verification",
      "headRefOid": "dafd10a4fd80ac2354917348c894451580d75ec8",
      "closedAt": "2023-06-20T15:47:52Z",
      "mergedAt": "2023-06-20T15:47:51Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "59c347371321472ffb70adb33f4bfc30a1aeb3f3"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "The direction of this looks good. Thanks for putting together the PR! I made just a few cleanup type comments/suggestions.  Some do touch on the terminology, but otherwise think I can avoid this section in the in-progress PR #293",
          "createdAt": "2023-06-15T17:36:13Z",
          "updatedAt": "2023-06-15T17:36:13Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I do think a document history bullet should be added - \"Consolidate processing rules for Holder and Verifier\"",
          "createdAt": "2023-06-15T19:35:19Z",
          "updatedAt": "2023-06-15T19:35:19Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "As discussed on a recent call - merging this now and closing the associated issues. @danielfett intends to look at it in the main branch and propose additional changes in a new PR, if there are opportunities for improvement. \r\n",
          "createdAt": "2023-06-20T15:47:36Z",
          "updatedAt": "2023-06-20T15:47:36Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5YPTQQ",
          "commit": {
            "abbreviatedOid": "fe8695f"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-14T22:36:20Z",
          "updatedAt": "2023-06-14T22:36:20Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "this line now applies to the wallets too and thereby addresses issue #280 ",
              "createdAt": "2023-06-14T22:36:20Z",
              "updatedAt": "2023-06-14T22:36:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YTfcS",
          "commit": {
            "abbreviatedOid": "fe8695f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-15T12:55:43Z",
          "updatedAt": "2023-06-15T12:55:44Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "This draft doesn't use the term Wallet anywhere else. Change to Holder for consistency. \r\n```suggestion\r\nUpon receiving an SD-JWT, the Holders and the Verifiers MUST ensure that\r\n```",
              "createdAt": "2023-06-15T12:55:44Z",
              "updatedAt": "2023-06-15T12:58:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YTxzC",
          "commit": {
            "abbreviatedOid": "fe8695f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-15T13:28:38Z",
          "updatedAt": "2023-06-15T13:28:38Z",
          "comments": [
            {
              "originalPosition": 87,
              "body": "Try and align with the coming terminology consolidation.  \r\n```suggestion\r\n 3. Assemble the SD-JWT for Presentation, including the selected Disclosures and, if applicable, the Key Binding JWT.\r\n```",
              "createdAt": "2023-06-15T13:28:38Z",
              "updatedAt": "2023-06-15T13:28:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YT6Bd",
          "commit": {
            "abbreviatedOid": "fe8695f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-15T13:42:09Z",
          "updatedAt": "2023-06-15T13:42:09Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "There are four instances of \"the Verifier MUST reject the Presentation\" that are now in the common verification steps and need to be generalized to not refer to the Verifier.  I think \"the Presentation MUST be rejected\" can work as a replacement. ",
              "createdAt": "2023-06-15T13:42:09Z",
              "updatedAt": "2023-06-15T13:42:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YV3Mt",
          "commit": {
            "abbreviatedOid": "20193b1"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-15T17:54:42Z",
          "updatedAt": "2023-06-15T18:01:19Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "good call. thanks",
              "createdAt": "2023-06-15T17:54:42Z",
              "updatedAt": "2023-06-15T18:01:20Z"
            },
            {
              "originalPosition": 70,
              "body": "good point - will apply.",
              "createdAt": "2023-06-15T17:55:08Z",
              "updatedAt": "2023-06-15T18:01:20Z"
            },
            {
              "originalPosition": 70,
              "body": "changed to `sd-jwt must be rejected` because this section is not only about presentation..",
              "createdAt": "2023-06-15T18:01:16Z",
              "updatedAt": "2023-06-15T18:01:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YWDCm",
          "commit": {
            "abbreviatedOid": "fe8695f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-15T18:29:13Z",
          "updatedAt": "2023-06-15T18:29:13Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "> not only about presentation\r\n\r\nRight! Good point. ",
              "createdAt": "2023-06-15T18:29:13Z",
              "updatedAt": "2023-06-15T18:29:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YmvON",
          "commit": {
            "abbreviatedOid": "30445c3"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "Thanks you for creating the PR! I left a few minor comments.",
          "createdAt": "2023-06-19T16:25:54Z",
          "updatedAt": "2023-06-19T16:31:45Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nUpon receiving an SD-JWT, a Holder or a Verifier MUST ensure that\r\n```",
              "createdAt": "2023-06-19T16:25:55Z",
              "updatedAt": "2023-06-19T16:31:45Z"
            },
            {
              "originalPosition": 14,
              "body": "```suggestion\r\nThe Holder or the Verifier MUST perform the following (or equivalent) steps when receiving\r\n```",
              "createdAt": "2023-06-19T16:26:18Z",
              "updatedAt": "2023-06-19T16:31:45Z"
            },
            {
              "originalPosition": 17,
              "body": "```suggestion\r\n 1. Separate the SD-JWT into the issuer-signed JWT, the Disclosures (if any), and the Key Binding JWT (if present). If a Key Binding JWT is received by a Holder, it MUST be ignored.\r\n```\r\nNot sure if this is the right rule, but we should probably say *something* on this.",
              "createdAt": "2023-06-19T16:27:58Z",
              "updatedAt": "2023-06-19T16:31:46Z"
            },
            {
              "originalPosition": 44,
              "body": "These should be applicable only to the Verifier. If we leave these here it sounds as if the Holder is supposed to modify the signed SD-JWT before passing it on to the Verifier.",
              "createdAt": "2023-06-19T16:30:04Z",
              "updatedAt": "2023-06-19T16:31:46Z"
            },
            {
              "originalPosition": 112,
              "body": "I think a reference to the steps above instead of these two would be sufficient.",
              "createdAt": "2023-06-19T16:31:16Z",
              "updatedAt": "2023-06-19T16:31:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YoYzl",
          "commit": {
            "abbreviatedOid": "30445c3"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-19T22:20:39Z",
          "updatedAt": "2023-06-19T22:20:39Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "We definitely don't want to suggest that the Holder is supposed to modify the signed SD-JWT before passing it on to the Verifier. But these steps are conceptually applicable to the Holder too so it can access the \"processed SD-JWT payload.\" \r\n\r\nThere are also a few steps intertwined above that have \"Insert [... ] a new claim\" or \"Replace the array element\" or \"Remove all\" that would be awkward to pull out into the Verifier only part.   Can we instead somewhere/somehow say that the steps that suggest changing the payload aren't actually touching the SD-JWT payload itself but rather processing the payload content that will be provided to the application? \r\n\r\n",
              "createdAt": "2023-06-19T22:20:39Z",
              "updatedAt": "2023-06-19T22:20:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YpHpz",
          "commit": {
            "abbreviatedOid": "9386c57"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-20T01:56:18Z",
          "updatedAt": "2023-06-20T01:56:18Z",
          "comments": [
            {
              "originalPosition": 112,
              "body": "sorry, could you please clarify - I think it already references the steps above? instead of which two? I am not sure I understand what change you want...",
              "createdAt": "2023-06-20T01:56:18Z",
              "updatedAt": "2023-06-20T01:56:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YpH72",
          "commit": {
            "abbreviatedOid": "3f69394"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "both comments probably need more discussion.",
          "createdAt": "2023-06-20T01:58:19Z",
          "updatedAt": "2023-06-20T01:59:28Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "If the Wallet/Holder is trying to display the claims received in the SD-JWT to the user, it needs to remove all the redundant claims IMO, so I think we should keep these steps here, but probably add a sentence saying that `the Holder MUST pass the issuer-signed JWT unmodified to the Verifier`?",
              "createdAt": "2023-06-20T01:58:19Z",
              "updatedAt": "2023-06-20T01:59:28Z"
            },
            {
              "originalPosition": 17,
              "body": "If the Holder received KB JWT, something is pretty wrong so probably such SD-JWT should be rejected?",
              "createdAt": "2023-06-20T01:59:00Z",
              "updatedAt": "2023-06-20T01:59:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Ys36y",
          "commit": {
            "abbreviatedOid": "0f21512"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-20T13:29:02Z",
          "updatedAt": "2023-06-20T13:29:03Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "```suggestion\r\n 1. Separate the SD-JWT into the issuer-signed JWT, the Disclosures (if any), and the Key Binding JWT (if present). \r\n```\r\nI do think the separation step needs to mention all of the parts. ",
              "createdAt": "2023-06-20T13:29:03Z",
              "updatedAt": "2023-06-20T13:29:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Ys6Xp",
          "commit": {
            "abbreviatedOid": "0f21512"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-20T13:33:34Z",
          "updatedAt": "2023-06-20T13:33:35Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "What a Holder does if it received a KB-JWT could also be covered here. Or elsewhere? Prior comment on the topic got marked as outdated for some reason https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/294#discussion_r1234263941 but I think I'd lean towards a should reject \r\n\r\n```suggestion\r\n 1. Separate the SD-JWT into the issuer-signed JWT, the Disclosures (if any), and the Key Binding JWT (if present). If a Key Binding JWT is received by a Holder, the SD-JWT SHOULD be rejected.\r\n```",
              "createdAt": "2023-06-20T13:33:35Z",
              "updatedAt": "2023-06-20T13:33:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Ys8Z1",
          "commit": {
            "abbreviatedOid": "0f21512"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-20T13:37:25Z",
          "updatedAt": "2023-06-20T13:37:26Z",
          "comments": [
            {
              "originalPosition": 121,
              "body": "I *think* Dr. Fett is suggesting just this: \r\n\r\n```suggestion\r\n 2. Process the SD-JWT as defined in (#sd_jwt_verification).\r\n```",
              "createdAt": "2023-06-20T13:37:25Z",
              "updatedAt": "2023-06-20T13:37:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YtOU9",
          "commit": {
            "abbreviatedOid": "30445c3"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-20T14:08:01Z",
          "updatedAt": "2023-06-20T14:08:01Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "Works for me.",
              "createdAt": "2023-06-20T14:08:01Z",
              "updatedAt": "2023-06-20T14:08:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Ytlwl",
          "commit": {
            "abbreviatedOid": "0f21512"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-20T14:47:49Z",
          "updatedAt": "2023-06-20T14:47:49Z",
          "comments": [
            {
              "originalPosition": 69,
              "body": "```suggestion\r\nIf a Key Binding JWT is received by a Holder, the SD-JWT SHOULD be rejected.\r\n\r\nFor presentation to a Verifier, the Holder MUST perform the following (or equivalent) steps:\r\n```",
              "createdAt": "2023-06-20T14:47:49Z",
              "updatedAt": "2023-06-20T14:47:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YtsDk",
          "commit": {
            "abbreviatedOid": "f46370d"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-20T14:58:07Z",
          "updatedAt": "2023-06-20T14:58:07Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "```suggestion\r\n 1. Separate the SD-JWT into the Issuer-signed JWT, the Disclosures (if any), and the Key Binding JWT (if present). \r\n```",
              "createdAt": "2023-06-20T14:58:07Z",
              "updatedAt": "2023-06-20T14:58:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Ytyq1",
          "commit": {
            "abbreviatedOid": "06afbec"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-20T15:11:01Z",
          "updatedAt": "2023-06-20T15:11:02Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "```suggestion\r\n 1. Separate the SD-JWT into the Issuer-signed JWT, the Disclosures (if any), and the Key Binding JWT (if present).\r\n```\r\ntrailing space ",
              "createdAt": "2023-06-20T15:11:01Z",
              "updatedAt": "2023-06-20T15:11:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Yt1mZ",
          "commit": {
            "abbreviatedOid": "bb3d70d"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-20T15:15:58Z",
          "updatedAt": "2023-06-20T15:15:58Z",
          "comments": [
            {
              "originalPosition": 76,
              "body": "```suggestion\r\n 3. Assemble the SD-JWT for Presentation, including the Issuer-signed JWT, the selected Disclosures and, if applicable, the Key Binding JWT.\r\n```",
              "createdAt": "2023-06-20T15:15:58Z",
              "updatedAt": "2023-06-20T15:15:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Yt2lG",
          "commit": {
            "abbreviatedOid": "dafd10a"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-20T15:18:00Z",
          "updatedAt": "2023-06-20T15:18:00Z",
          "comments": []
        }
      ]
    },
    {
      "number": 296,
      "id": "PR_kwDOHTmVzM5TDxnf",
      "title": "add a section with public keys for validation",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/296",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "addresses Issue #241.",
      "createdAt": "2023-06-15T06:17:48Z",
      "updatedAt": "2023-06-20T16:16:22Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "f0bc7d5d338eee34d7684bfaac6aecdfc7d8efac",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "add-pub-keys",
      "headRefOid": "aa5cc7590e76fdfd62c4dcb42af6dc4de9f57356",
      "closedAt": "2023-06-20T16:16:21Z",
      "mergedAt": "2023-06-20T16:16:21Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "2054cca94c243b28c6f0c257b915d68ddd24b65b"
      },
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "The `w3c-vc` example currently uses a different key. We should call that out or change the example to the default key. I think that having one example with a different key (type) doesn't hurt, so we should call out that this example uses a different key.",
          "createdAt": "2023-06-15T06:47:50Z",
          "updatedAt": "2023-06-15T06:47:50Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> The `w3c-vc` example currently uses a different key. We should call that out or change the example to the default key. I think that having one example with a different key (type) doesn't hurt, so we should call out that this example uses a different key.\r\n\r\nEither way, the holder's public key is already available in the payload of the example SD-JWTs. So it doesn't need to be and shouldn't be included here. ",
          "createdAt": "2023-06-15T12:44:23Z",
          "updatedAt": "2023-06-15T12:44:23Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "w3c-vc uses a different KB JWT key but the same issuer key, correct?",
          "createdAt": "2023-06-20T02:02:58Z",
          "updatedAt": "2023-06-20T02:02:58Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> w3c-vc uses a different KB JWT key but the same issuer key, correct?\r\n\r\nYeah, i believe so. But no signed content is actually shown in that example. That example just shows the payload and disclosure content. \r\n",
          "createdAt": "2023-06-20T11:48:53Z",
          "updatedAt": "2023-06-20T11:48:53Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5YTUAq",
          "commit": {
            "abbreviatedOid": "78880fb"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-06-15T12:32:11Z",
          "updatedAt": "2023-06-15T12:37:26Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "This key doesn't have line wraps within values.\r\n\r\n```suggestion\r\nThe following Elliptic Curve public key, represented in JWK format, can be used to validate the Issuer signatures in the above examples:\r\n```",
              "createdAt": "2023-06-15T12:32:11Z",
              "updatedAt": "2023-06-15T12:37:26Z"
            },
            {
              "originalPosition": 27,
              "body": "The holder public keys can already be found in the example content in the `cnf` claim so don't need to be here.\r\n```suggestion\r\n\r\n```",
              "createdAt": "2023-06-15T12:34:11Z",
              "updatedAt": "2023-06-15T12:37:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YmxD7",
          "commit": {
            "abbreviatedOid": "78880fb"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "LGTM with Brian's proposed changes.",
          "createdAt": "2023-06-19T16:32:56Z",
          "updatedAt": "2023-06-19T16:32:56Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5YpIiz",
          "commit": {
            "abbreviatedOid": "c9b2523"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-20T02:02:17Z",
          "updatedAt": "2023-06-20T02:02:17Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "```suggestion\r\n\r\nThe public key used to validate a Key Binding JWT can be found in the examples as the content of the `cnf` claim.\r\n\r\n```",
              "createdAt": "2023-06-20T02:02:17Z",
              "updatedAt": "2023-06-20T02:02:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YsI7o",
          "commit": {
            "abbreviatedOid": "c9b2523"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-20T11:50:55Z",
          "updatedAt": "2023-06-20T11:50:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 297,
      "id": "PR_kwDOHTmVzM5TYFX_",
      "title": "Capitalize \"Payloads\" in the title",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/297",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-06-19T20:45:42Z",
      "updatedAt": "2023-06-19T21:23:36Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "f0bc7d5d338eee34d7684bfaac6aecdfc7d8efac",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "bc-title-no-cap",
      "headRefOid": "8b2ca045e1c68e535f1fc3f442a8d4907a3f72cf",
      "closedAt": "2023-06-19T21:23:35Z",
      "mergedAt": "2023-06-19T21:23:35Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "5fc50cde9b3dd8510d56822eccfa76e38e2fa4e3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5YoKaQ",
          "commit": {
            "abbreviatedOid": "8b2ca04"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-19T21:06:12Z",
          "updatedAt": "2023-06-19T21:06:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 298,
      "id": "PR_kwDOHTmVzM5TZSLk",
      "title": "add text on post quantum algs",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/298",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "addresses issue #261. \r\n(cc: @OR13)",
      "createdAt": "2023-06-20T03:55:41Z",
      "updatedAt": "2023-06-20T14:36:25Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "5fc50cde9b3dd8510d56822eccfa76e38e2fa4e3",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "post-quantum",
      "headRefOid": "139c8ab420e47b68ee43823b988eedb3ddf36702",
      "closedAt": "2023-06-20T14:36:24Z",
      "mergedAt": "2023-06-20T14:36:24Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "30c7d6b1f3ba7045525d8743f68d3facdb19c4c8"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> Looks good to me with the proposed changes.\r\n\r\nsame",
          "createdAt": "2023-06-20T13:19:19Z",
          "updatedAt": "2023-06-20T13:19:19Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5YsK-e",
          "commit": {
            "abbreviatedOid": "ee3d5bf"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-20T11:55:13Z",
          "updatedAt": "2023-06-20T11:55:13Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5YsZKP",
          "commit": {
            "abbreviatedOid": "ee3d5bf"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-20T12:29:21Z",
          "updatedAt": "2023-06-20T12:29:22Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n## Mandatory Signing of the Issuer-signed JWT\r\n```",
              "createdAt": "2023-06-20T12:29:21Z",
              "updatedAt": "2023-06-20T12:29:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5YsZhw",
          "commit": {
            "abbreviatedOid": "ee3d5bf"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-20T12:30:11Z",
          "updatedAt": "2023-06-20T12:30:11Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "```suggestion\r\nThe Verifier MUST always check the signature of the Issuer-signed JWT to ensure that it\r\nhas not been tampered with since the issuance. The Issuer-signed JWT MUST be rejected if the signature cannot be verified.\r\n```",
              "createdAt": "2023-06-20T12:30:11Z",
              "updatedAt": "2023-06-20T12:31:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Ysahb",
          "commit": {
            "abbreviatedOid": "ee3d5bf"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "Looks good to me with the proposed changes.",
          "createdAt": "2023-06-20T12:31:43Z",
          "updatedAt": "2023-06-20T12:31:43Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5Ytd30",
          "commit": {
            "abbreviatedOid": "139c8ab"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-20T14:36:09Z",
          "updatedAt": "2023-06-20T14:36:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 300,
      "id": "PR_kwDOHTmVzM5TeBBo",
      "title": "Fix Issue #299 by moving to a better example",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/300",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "This solves Issue #299 by moving away from an example that wasn't ideal anyway (it encoded a different bytestring for the value M\u00f6bius).\r\n\r\nThe Disclosure JSON should be:\r\n\r\n`[\"_26bc4LT-ac6q2KI6cBW5es\", \"family_name\", \"M\\u00f6bius\"]`",
      "createdAt": "2023-06-20T19:06:17Z",
      "updatedAt": "2023-06-22T16:21:43Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "e7c3f5fa9b898d20791f9e3666bda8f4111c8172",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/fix-299",
      "headRefOid": "512b69f20e8fd12767555cd2a73fdeef8d6f958b",
      "closedAt": "2023-06-22T16:21:42Z",
      "mergedAt": "2023-06-22T16:21:42Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "81f200a83736f4ff2902ca87f13bda5677c3e396"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5Yv4Hj",
          "commit": {
            "abbreviatedOid": "4434495"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-20T20:11:49Z",
          "updatedAt": "2023-06-20T20:11:49Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5YyWoZ",
          "commit": {
            "abbreviatedOid": "48efde3"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-21T04:12:43Z",
          "updatedAt": "2023-06-21T04:12:43Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n * A different way to encode the unicode umlaut (two dots `\u00a8` placed over the letter):\\\r\n```\r\nfor non english speakers, explanation of what umlaut is, is pretty useful..",
              "createdAt": "2023-06-21T04:12:43Z",
              "updatedAt": "2023-06-21T04:12:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Y6S1r",
          "commit": {
            "abbreviatedOid": "48efde3"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-21T19:25:46Z",
          "updatedAt": "2023-06-21T19:25:47Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "the  \"\\`\u00a8\\`\" is the source of the `&#168` issue though... ",
              "createdAt": "2023-06-21T19:25:46Z",
              "updatedAt": "2023-06-21T19:25:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ZBY6F",
          "commit": {
            "abbreviatedOid": "1caf641"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-22T15:53:54Z",
          "updatedAt": "2023-06-22T15:53:54Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "ah right..",
              "createdAt": "2023-06-22T15:53:54Z",
              "updatedAt": "2023-06-22T15:53:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ZBk8f",
          "commit": {
            "abbreviatedOid": "1caf641"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-22T16:17:22Z",
          "updatedAt": "2023-06-22T16:17:22Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nin the JSON representation and no canonicalization needs be performed before base64url-encoding.\r\n```",
              "createdAt": "2023-06-22T16:17:22Z",
              "updatedAt": "2023-06-22T16:17:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ZBlTQ",
          "commit": {
            "abbreviatedOid": "0e31054"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "might add decoded content later, but ok for now:\r\n\r\n[\"_26bc4LT-ac6q2KI6cBW5es\", \"family_name\", \"M\\u00f6bius\"]\r\n\r\n[\"_26bc4LT-ac6q2KI6cBW5es\",\"family_name\",\"M\u00f6bius\"]\r\n\r\n[\r\n\"_26bc4LT-ac6q2KI6cBW5es\",\r\n\"family_name\",\r\n\"M\u00f6bius\"\r\n]",
          "createdAt": "2023-06-22T16:18:15Z",
          "updatedAt": "2023-06-22T16:18:15Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5ZBmMW",
          "commit": {
            "abbreviatedOid": "a905246"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-22T16:20:29Z",
          "updatedAt": "2023-06-22T16:20:29Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "```suggestion\r\n\r\n```",
              "createdAt": "2023-06-22T16:20:29Z",
              "updatedAt": "2023-06-22T16:20:29Z"
            }
          ]
        }
      ]
    },
    {
      "number": 301,
      "id": "PR_kwDOHTmVzM5Tl7Pw",
      "title": "Title back to \"Selective Disclosure for JWTs (SD-JWT)\"",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/301",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I've seen the \"new\" title from 332ded8faf20d528c5c05e04cebed28aab1a0d33 a few times in context now and it is really awkward. ",
      "createdAt": "2023-06-21T21:04:05Z",
      "updatedAt": "2023-06-22T16:05:57Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "2054cca94c243b28c6f0c257b915d68ddd24b65b",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "deja-vu-all-over-again",
      "headRefOid": "fe10f8b2ac0406555d21a6af380fbd142e700564",
      "closedAt": "2023-06-22T16:05:56Z",
      "mergedAt": "2023-06-22T16:05:56Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "c25076833f9279057b6e528e5ad3a3b09b6f8037"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> as long as the intro text itself stays as we updated it, this makes sense to me.\r\n\r\nyup, that updated intro and abstract text stays \r\n",
          "createdAt": "2023-06-22T16:01:15Z",
          "updatedAt": "2023-06-22T16:01:15Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5ZBM6M",
          "commit": {
            "abbreviatedOid": "fe10f8b"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "as long as the intro text itself stays as we updated it, this makes sense to me.",
          "createdAt": "2023-06-22T15:31:10Z",
          "updatedAt": "2023-06-22T15:31:10Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5ZBfKV",
          "commit": {
            "abbreviatedOid": "fe10f8b"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-22T16:05:06Z",
          "updatedAt": "2023-06-22T16:05:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 302,
      "id": "PR_kwDOHTmVzM5TmeGs",
      "title": "Fix Enveloping section title and remove recommended claim name",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/302",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I noticed that the consolidation of SD-JWT terminology in c6a27373dee13cc7c3f70a8b7fd374e62306f5a0 introduced a mistake in the \"Enveloping\" section title by including the word \"Presentation\" while the section talks about enveloping either issued or presented SD-JWTs. While fixing that, I decided to remove the SHOULD recommending the use of an unregistered claim name `_sd_jwt`.  I also tried to align the example enveloping payload a bit with a move minimal set of claims similar to those used in key binding.   \r\n\r\nI realize I probably should have just fixed the section title and not expanded the scope of the changes. But there I was and these few little changes were so inviting...  \r\n\r\nSee it here: https://drafts.oauth.net/oauth-selective-disclosure-jwt/enveloping-sec-fixup/draft-ietf-oauth-selective-disclosure-jwt.html#section-7",
      "createdAt": "2023-06-21T23:00:04Z",
      "updatedAt": "2023-06-22T16:29:37Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "2054cca94c243b28c6f0c257b915d68ddd24b65b",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "enveloping-sec-fixup",
      "headRefOid": "34f22bccd4199205ac4f98243004b29d71a633ad",
      "closedAt": "2023-06-22T16:29:36Z",
      "mergedAt": "2023-06-22T16:29:36Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "3ce7f92eb9f7e7c4fa1fe378a3c3946335536507"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5ZBfqw",
          "commit": {
            "abbreviatedOid": "ff35e94"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-22T16:06:15Z",
          "updatedAt": "2023-06-22T16:06:15Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5ZBm9K",
          "commit": {
            "abbreviatedOid": "ff35e94"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-22T16:22:26Z",
          "updatedAt": "2023-06-22T16:22:26Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "```suggestion\r\nThe following non-normative example shows an SD-JWT Presentation without a Key Binding JWT enveloped in a JWT payload:\r\n```",
              "createdAt": "2023-06-22T16:22:26Z",
              "updatedAt": "2023-06-22T16:22:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ZBpUr",
          "commit": {
            "abbreviatedOid": "ff35e94"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-22T16:28:31Z",
          "updatedAt": "2023-06-22T16:28:32Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "```suggestion\r\n```",
              "createdAt": "2023-06-22T16:28:31Z",
              "updatedAt": "2023-06-22T16:28:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ZBpcR",
          "commit": {
            "abbreviatedOid": "34f22bc"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-22T16:28:49Z",
          "updatedAt": "2023-06-22T16:28:49Z",
          "comments": []
        }
      ]
    },
    {
      "number": 303,
      "id": "PR_kwDOHTmVzM5Touq2",
      "title": "Move back to main branch of SD-JWT library",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/303",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-06-22T09:33:18Z",
      "updatedAt": "2023-06-22T16:30:24Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "2054cca94c243b28c6f0c257b915d68ddd24b65b",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/back-to-main",
      "headRefOid": "b3ddced0d9728490c516c16eab1665637dff549a",
      "closedAt": "2023-06-22T16:30:23Z",
      "mergedAt": "2023-06-22T16:30:23Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "f77e5ebae48fdecb2973247fe123f28288b1ccf4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5ZALyG",
          "commit": {
            "abbreviatedOid": "b3ddced"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-22T13:39:20Z",
          "updatedAt": "2023-06-22T13:39:20Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5ZBp6o",
          "commit": {
            "abbreviatedOid": "b3ddced"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-22T16:29:59Z",
          "updatedAt": "2023-06-22T16:29:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 304,
      "id": "PR_kwDOHTmVzM5Tslkm",
      "title": "add EUDIW ARF PID spec text example with a yml file",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/304",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #210.\r\n\r\nupdate:\r\n- agreed to replace SD-JWT VC example with PID.\r\n- agreed to have only one sd-jwt vc example, so this will also address #144 and close #233.",
      "createdAt": "2023-06-22T21:48:50Z",
      "updatedAt": "2023-06-30T17:54:16Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "2fc73f5f12604dc6a665d9f329da47327b9948d3",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "sakurann-pid-ex",
      "headRefOid": "832cc256a7b64c4c81a442843ab3803c1cebaf27",
      "closedAt": "2023-06-30T17:54:15Z",
      "mergedAt": "2023-06-30T17:54:15Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "1910d051507e5052369108c1f72906af0bf17f12"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "The [\"build\" is broken](https://github.com/oauth-wg/oauth-selective-disclosure-jwt/actions/runs/5350603690/jobs/9703424502?pr=304) and the editor's draft didn't get generated - https://drafts.oauth.net/oauth-selective-disclosure-jwt/sakurann-pid-ex/draft-ietf-oauth-selective-disclosure-jwt.html 404s",
          "createdAt": "2023-06-23T01:58:44Z",
          "updatedAt": "2023-06-23T22:21:35Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "fixed - thank you, Brian!",
          "createdAt": "2023-06-23T05:37:22Z",
          "updatedAt": "2023-06-23T05:37:22Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "@tlodderstedt Binding design and the usage of biometrics data is based on your original PR 210. Shall we replace 4a example with this one? But if you don\u2019t see the need for this example anymore, I am not going to die on this hill.",
          "createdAt": "2023-06-23T17:08:12Z",
          "updatedAt": "2023-06-23T17:08:12Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Thinking about this just a little more @Sakurann, does this warrant a doc history bullet?  Something like:\r\n\r\n- Replaced the general SD-JWT VC example with one based on Person Identification Data (PID) from the European Digital Identity Wallet Architecture and Reference Framework \r\n\r\nThe history is nice to have and I often use it as a starting place when making \"what's changed from last time\" type slides for f2f meetings. ",
          "createdAt": "2023-06-29T21:01:55Z",
          "updatedAt": "2023-06-29T21:02:12Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm just gonna add the doc history to keep things moving here... and done w/ 08d70d2fbfcb1afce5e2d088cb97934b91ce83a1",
          "createdAt": "2023-06-29T21:09:22Z",
          "updatedAt": "2023-06-29T21:19:04Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "relevant section in the editor's copy preview: https://drafts.oauth.net/oauth-selective-disclosure-jwt/sakurann-pid-ex/draft-ietf-oauth-selective-disclosure-jwt.html#name-example-4a-sd-jwt-based-ver should anyone want to take a look before the coming soon merge @peppelinux @tlodderstedt @ etc ",
          "createdAt": "2023-06-30T01:37:27Z",
          "updatedAt": "2023-06-30T01:44:46Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5ZEQbz",
          "commit": {
            "abbreviatedOid": "bd9a662"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "DISMISSED",
          "body": "needs some fixin'",
          "createdAt": "2023-06-23T02:00:43Z",
          "updatedAt": "2023-06-23T22:19:38Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5ZGbjB",
          "commit": {
            "abbreviatedOid": "cf99ac0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-23T10:06:29Z",
          "updatedAt": "2023-06-23T10:09:08Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "```suggestion\r\nThis example uses the following object as the SD-JWT input claim set:\r\n```",
              "createdAt": "2023-06-23T10:06:29Z",
              "updatedAt": "2023-06-23T10:09:08Z"
            },
            {
              "originalPosition": 43,
              "body": "```suggestion\r\nA presentation of the SD-JWT without a Key Binding JWT that discloses only biometrics based holder binding (`binding` of type `BiometricBinding`), \r\nnationality, place of birth, and the fact that the person is over 18 years old could look as follows:\r\n```",
              "createdAt": "2023-06-23T10:08:39Z",
              "updatedAt": "2023-06-23T10:09:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ZHq_A",
          "commit": {
            "abbreviatedOid": "cf99ac0"
          },
          "author": "tlodderstedt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Couple of remarks:\r\n\r\n- the binding design deviates from the standard design (\"binding\" array with typed entries). What is the rationale for that? I personally would prefer to add biometric binding in parallel to the usual \"cnf\".\r\n- The PID rule book does not defined biometric data yet. I suggest to include this in the example once there is more clarity around that.\r\n- Section A.3. already has a SD-JWT VC example.  I think this example should go into the SD-JWT VC spec as it is another instance of an SD-JWT VC. ",
          "createdAt": "2023-06-23T13:47:09Z",
          "updatedAt": "2023-06-23T13:47:21Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5ZLWVW",
          "commit": {
            "abbreviatedOid": "cf99ac0"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-23T22:41:14Z",
          "updatedAt": "2023-06-23T22:41:14Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "```suggestion\r\nadd_decoy_claims: false\r\n```\r\n\r\nThe nested decoy digests (e.g., https://drafts.oauth.net/oauth-selective-disclosure-jwt/sakurann-pid-ex/draft-ietf-oauth-selective-disclosure-jwt.html#appendix-A.5-9) make the disclosure content hard to follow. We might want to look at what the tooling does for nested decoys but in the meantime just not do decoys in this example. I think they only detract. ",
              "createdAt": "2023-06-23T22:41:14Z",
              "updatedAt": "2023-06-23T22:41:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ZNM11",
          "commit": {
            "abbreviatedOid": "cf99ac0"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-06-24T13:52:58Z",
          "updatedAt": "2023-06-24T14:15:46Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "why without a Key Binding?\r\n\r\nI'm asking since Type1 mandates bindings and biometrics in disclosure have privacy impacts, I suggest to have at least an example with an holder key binding.\r\n\r\nI'm not saying to remove an example with biometrics but to give priority to crypto key binding",
              "createdAt": "2023-06-24T13:52:58Z",
              "updatedAt": "2023-06-24T14:15:46Z"
            },
            {
              "originalPosition": 48,
              "body": "```suggestion\r\nAfter the verification of the data, the Verifier passes\r\nthe following result to the application for further processing:\r\n```",
              "createdAt": "2023-06-24T13:54:21Z",
              "updatedAt": "2023-06-24T14:15:46Z"
            },
            {
              "originalPosition": 48,
              "body": "even if it is not clear to me the meaning of `passes the following result to the application`",
              "createdAt": "2023-06-24T13:55:31Z",
              "updatedAt": "2023-06-24T14:15:46Z"
            },
            {
              "originalPosition": 54,
              "body": "`can be used`\r\n\r\nif it is the way to verify that signature, just say `is used`",
              "createdAt": "2023-06-24T13:56:41Z",
              "updatedAt": "2023-06-24T14:15:46Z"
            },
            {
              "originalPosition": 2,
              "body": "```suggestion\r\n  iss: https://pid-provider.memberstate.example.eu\r\n```",
              "createdAt": "2023-06-24T13:57:09Z",
              "updatedAt": "2023-06-24T14:15:46Z"
            },
            {
              "originalPosition": 22,
              "body": "[ARF PID Rulebook v.1.0.0] specifies \u2018Place of Birth\u2019 as an optional data element in a PID attribute, definfing  the following data elements related to this PID attribute:\r\n\r\n\u2219 birth_place (optional)\r\n\u2219 birth_country (optional)\r\n\u2219 birth_state (optional)\r\n\u2219 birth_city (optional)\r\n\r\nor a JSON object like this\r\n\r\n````\r\n\"place_of_birth\":{\r\n    \"region\":\"MI\",\r\n    \"locality\":\"F205\",\r\n    \"country\": ...,\r\n    \"state\": ...,\r\n    \"city\": ...,\r\n}\r\n````",
              "createdAt": "2023-06-24T14:12:13Z",
              "updatedAt": "2023-06-24T14:15:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Znepe",
          "commit": {
            "abbreviatedOid": "cf99ac0"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-28T16:28:19Z",
          "updatedAt": "2023-06-28T16:28:20Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "ok, changed to disclosing cryptographic key binding :)",
              "createdAt": "2023-06-28T16:28:20Z",
              "updatedAt": "2023-06-28T16:28:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ZnfqV",
          "commit": {
            "abbreviatedOid": "cf99ac0"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-28T16:29:54Z",
          "updatedAt": "2023-06-28T16:29:54Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "i think it assumes that the verifier has two components - the part that parses/validates sd-jwt and the part that uses the validated data - the latter is referred to as application i think...",
              "createdAt": "2023-06-28T16:29:54Z",
              "updatedAt": "2023-06-28T16:29:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Znhm6",
          "commit": {
            "abbreviatedOid": "cf99ac0"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-28T16:35:06Z",
          "updatedAt": "2023-06-28T16:39:55Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "thank you! i think it's simpler to remove..",
              "createdAt": "2023-06-28T16:35:06Z",
              "updatedAt": "2023-06-28T16:39:56Z"
            },
            {
              "originalPosition": 41,
              "body": "ouch.. ok, i filed an issue. https://github.com/danielfett/sd-jwt/issues/13",
              "createdAt": "2023-06-28T16:38:58Z",
              "updatedAt": "2023-06-28T16:39:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ZnlmW",
          "commit": {
            "abbreviatedOid": "cf99ac0"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-28T16:43:48Z",
          "updatedAt": "2023-06-28T16:43:48Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "\"can be used\" is correct in conveying that it... um... can be used. ",
              "createdAt": "2023-06-28T16:43:48Z",
              "updatedAt": "2023-06-28T16:43:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Znmay",
          "commit": {
            "abbreviatedOid": "1dcb6ae"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-28T16:45:42Z",
          "updatedAt": "2023-06-28T16:45:42Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "```suggestion\r\nA presentation of the SD-JWT without a Key Binding JWT that discloses only biometrics based holder binding (`binding` of type `BiometricBinding`),\r\n```",
              "createdAt": "2023-06-28T16:45:42Z",
              "updatedAt": "2023-06-28T16:45:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ZnoI3",
          "commit": {
            "abbreviatedOid": "cf99ac0"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-28T16:49:32Z",
          "updatedAt": "2023-06-28T16:49:32Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "agreed - it is only for those who wish to use this pubkey to validate the examples - we are not forcing anyone to do so :)",
              "createdAt": "2023-06-28T16:49:32Z",
              "updatedAt": "2023-06-28T16:49:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ZoxIn",
          "commit": {
            "abbreviatedOid": "db52a53"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-28T19:39:36Z",
          "updatedAt": "2023-06-28T19:39:36Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "should this file be removed with this change to use arf-pid? also the one in w3c-vc_for_slide_deck?",
              "createdAt": "2023-06-28T19:39:36Z",
              "updatedAt": "2023-06-28T19:39:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ZoxiU",
          "commit": {
            "abbreviatedOid": "db52a53"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-28T19:40:55Z",
          "updatedAt": "2023-06-28T19:40:55Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "maybe... ?\r\n\r\n```suggestion\r\na verifiable credential with a JSON payload as defined in [@I-D.terbu-sd-jwt-vc].\r\n```",
              "createdAt": "2023-06-28T19:40:55Z",
              "updatedAt": "2023-06-28T19:40:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ZoyRi",
          "commit": {
            "abbreviatedOid": "db52a53"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-28T19:43:16Z",
          "updatedAt": "2023-06-28T19:43:17Z",
          "comments": [
            {
              "originalPosition": 75,
              "body": "```suggestion\r\nThe following is how a presentation of the SD-JWT with a Key Binding JWT that discloses only nationality and the fact that the person is over 18 years old could look like:\r\n```",
              "createdAt": "2023-06-28T19:43:16Z",
              "updatedAt": "2023-06-28T19:43:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Zo23_",
          "commit": {
            "abbreviatedOid": "db52a53"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "a couple minor nits and maybe(?) some clean up of unused files but otherwise looks good ",
          "createdAt": "2023-06-28T19:57:51Z",
          "updatedAt": "2023-06-28T19:57:51Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5Zqwgw",
          "commit": {
            "abbreviatedOid": "db52a53"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-28T23:48:59Z",
          "updatedAt": "2023-06-28T23:48:59Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "or was that supposed to be the title of terbu-sd-jwt-vc? It read kinda funny with plurals or lack thereof. Also the title has changed ([see editor's draft](https://vcstuff.github.io/draft-terbu-sd-jwt-vc/draft-terbu-oauth-sd-jwt-vc.html)).  So maybe... ? \r\n```suggestion\r\nSD-JWT-based Verifiable Credentials (SD-JWT VC) as defined in [@I-D.terbu-sd-jwt-vc].\r\n```",
              "createdAt": "2023-06-28T23:48:59Z",
              "updatedAt": "2023-06-28T23:50:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ZqyWl",
          "commit": {
            "abbreviatedOid": "db52a53"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-29T00:02:29Z",
          "updatedAt": "2023-06-29T00:02:30Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "I'd really like to remove unused stuff unless there's some compelling reason to keep it around. ",
              "createdAt": "2023-06-29T00:02:29Z",
              "updatedAt": "2023-06-29T00:02:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Zv1nA",
          "commit": {
            "abbreviatedOid": "db52a53"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-29T16:43:15Z",
          "updatedAt": "2023-06-29T16:43:16Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "or title without the short part here: ... ?\r\n\r\n ```suggestion\r\nSD-JWT-based Verifiable Credentials as defined in [@I-D.terbu-sd-jwt-vc].\r\n```",
              "createdAt": "2023-06-29T16:43:15Z",
              "updatedAt": "2023-06-29T16:43:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Zv_XU",
          "commit": {
            "abbreviatedOid": "cf99ac0"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-29T17:06:56Z",
          "updatedAt": "2023-06-29T17:06:56Z",
          "comments": [
            {
              "originalPosition": 2,
              "body": "memberstate.eu might collide with an existing fqdn\r\n\r\n",
              "createdAt": "2023-06-29T17:06:56Z",
              "updatedAt": "2023-06-29T17:06:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ZxChb",
          "commit": {
            "abbreviatedOid": "f3e18c6"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-29T20:04:27Z",
          "updatedAt": "2023-06-29T20:06:32Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "I like the middle option with the short part (yes, it was intended to be the doc title, thanks for catching!)",
              "createdAt": "2023-06-29T20:04:27Z",
              "updatedAt": "2023-06-29T20:06:32Z"
            },
            {
              "originalPosition": 1,
              "body": "I would like to have a place to have examples that are not referenced in the spec - you think danielfett/sd-jwt is a better option?",
              "createdAt": "2023-06-29T20:06:04Z",
              "updatedAt": "2023-06-29T20:06:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ZxQZ3",
          "commit": {
            "abbreviatedOid": "f3e18c6"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-29T20:36:22Z",
          "updatedAt": "2023-06-29T20:36:22Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "I'm not sure TBH but maybe. They aren't even examples but descriptor files that input into danielfett/sd-jwt tooling to generate examples. So living closer to danielfett/sd-jwt might be a better option. I was just looking to remove unused stuff here to keep this repo more 'clean' and make it easier to maintain. But we can leave it for now in order to move forward w/ getting this example in and publishing. ",
              "createdAt": "2023-06-29T20:36:22Z",
              "updatedAt": "2023-06-29T20:36:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ZxRjM",
          "commit": {
            "abbreviatedOid": "ef14bf8"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-29T20:38:01Z",
          "updatedAt": "2023-06-29T20:38:01Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5ZxoFQ",
          "commit": {
            "abbreviatedOid": "08d70d2"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I think this is ready to merge (for real this time). It's kinda awkward process and numbers wise with Dr. out. And peppelinux is still listed as requesting changes but I think his comments were addressed. But I think it's good to go. ",
          "createdAt": "2023-06-29T21:50:59Z",
          "updatedAt": "2023-06-29T21:53:51Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5ZzIcq",
          "commit": {
            "abbreviatedOid": "08d70d2"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Approved with two pendings suggestioni/change request and a general comment that's not relevant for the revision but Just informative\r\n",
          "createdAt": "2023-06-30T06:16:46Z",
          "updatedAt": "2023-06-30T06:26:52Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nNote: The examples in this document use the `cnf` claim defined in [@RFC7800] to include\r\n```",
              "createdAt": "2023-06-30T06:16:46Z",
              "updatedAt": "2023-06-30T06:25:44Z"
            },
            {
              "originalPosition": 53,
              "body": "Even if It May sounds paradoxal, this links Is not updated, I'll write today asking to update the arf version, since It Is still v1.0.0 while v1.2.0 Is going to be published\r\n\r\nFYI below the fresh meat\r\nhttps://github.com/eu-digital-identity-wallet/eudi-doc-architecture-and-reference-framework/release",
              "createdAt": "2023-06-30T06:22:16Z",
              "updatedAt": "2023-06-30T06:25:44Z"
            },
            {
              "originalPosition": 67,
              "body": "```suggestion\r\nIn this example, an SD-JWT with a complex object is represented. The data\r\n```",
              "createdAt": "2023-06-30T06:23:37Z",
              "updatedAt": "2023-06-30T06:25:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Z3KMp",
          "commit": {
            "abbreviatedOid": "08d70d2"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-30T17:52:59Z",
          "updatedAt": "2023-06-30T17:53:00Z",
          "comments": [
            {
              "originalPosition": 53,
              "body": "nice! thank you!",
              "createdAt": "2023-06-30T17:53:00Z",
              "updatedAt": "2023-06-30T17:53:00Z"
            }
          ]
        }
      ]
    },
    {
      "number": 305,
      "id": "PR_kwDOHTmVzM5TsrjF",
      "title": "add some security considerations text about the scope of the Key Binding JWT",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/305",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "as additional explanation in the draft for #277 \r\n\r\nsee it here https://drafts.oauth.net/oauth-selective-disclosure-jwt/scope-of-kb-jwt/draft-ietf-oauth-selective-disclosure-jwt.html#name-key-binding-jwt-2 ",
      "createdAt": "2023-06-22T22:18:27Z",
      "updatedAt": "2023-06-23T14:41:14Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "f77e5ebae48fdecb2973247fe123f28288b1ccf4",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "scope-of-kb-jwt",
      "headRefOid": "2fdb4bf05dada2a083840510971f6a1657689920",
      "closedAt": "2023-06-23T14:41:13Z",
      "mergedAt": "2023-06-23T14:41:13Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "0ed84dad214976505ae55f750a1f179b32c1c50e"
      },
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "`SD-JWT payload` in this PR might be replaced with `SD-JWT input claim set` depending on how PR #306 goes.",
          "createdAt": "2023-06-23T05:44:09Z",
          "updatedAt": "2023-06-23T05:44:09Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5ZEz_z",
          "commit": {
            "abbreviatedOid": "68cb494"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-23T05:52:02Z",
          "updatedAt": "2023-06-23T05:52:02Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "```suggestion\r\nIssuer provided integrity protection of the SD-JWT input claim set and Disclosures is achieved by the signature on the Issuer-signed JWT that contains SD-JWT input claim set and the digest values of the Disclosures as described in (#sec-is-jwt) and (#sec-disclosures) respectively. The Key Binding JWT, defined in (#kb-jwt), serves exclusively as a mechanism for the Holder to demonstrate possession of the private key corresponding to the public key in the SD-JWT payload. As such, the signature on the Key Binding JWT does not cover other parts of the SD-JWT. In cases where it's desirable for the Holder's signature to convey more than a proof-of-possession, such as signing over the selected Disclosures to prove those were the Disclosures selected, the SD-JWT to be presented can be embedded in another JWT (as described in [Enveloping SD-JWTs](#enveloping)) or otherwise signed by the Holder via the application protocol delivering it.\r\n```\r\n\r\nI would play around with the first sentence a little bit, but otherwise looks good.",
              "createdAt": "2023-06-23T05:52:02Z",
              "updatedAt": "2023-06-23T05:52:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ZGbFu",
          "commit": {
            "abbreviatedOid": "68cb494"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-23T10:05:04Z",
          "updatedAt": "2023-06-23T10:05:05Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "Proposed change on Kristina's proposed change (minus the terminology change):\r\n```suggestion\r\nIssuer provided integrity protection of the SD-JWT payload and Disclosures is achieved by the signature on the Issuer-signed JWT that covers the SD-JWT payload including the digest values of the Disclosures as described in (#sec-is-jwt) and (#sec-disclosures), respectively. The Key Binding JWT, defined in (#kb-jwt), serves exclusively as a mechanism for the Holder to demonstrate possession of the private key corresponding to the public key in the SD-JWT payload. As such, the signature on the Key Binding JWT does not cover other parts of the SD-JWT. In cases where it's desirable for the Holder's signature to convey more than a proof-of-possession, such as signing over the selected Disclosures to prove those were the Disclosures selected, the SD-JWT to be presented can be embedded in another JWT (as described in [Enveloping SD-JWTs](#enveloping)) or otherwise signed by the Holder via the application protocol delivering it.\r\n```",
              "createdAt": "2023-06-23T10:05:04Z",
              "updatedAt": "2023-06-23T14:38:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ZGbQ2",
          "commit": {
            "abbreviatedOid": "68cb494"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Thanks, LGTM, just one editorial comment.",
          "createdAt": "2023-06-23T10:05:37Z",
          "updatedAt": "2023-06-23T10:05:37Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5ZHrWN",
          "commit": {
            "abbreviatedOid": "68cb494"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-23T13:47:58Z",
          "updatedAt": "2023-06-23T13:47:59Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "I'm not onboard with \"SD-JWT payload\" being wholesale replaced \"SD-JWT input claim set\".\r\n\r\nSo please make a suggested change with the editorial improvements you'd like to see that doesn't also change terminology. ",
              "createdAt": "2023-06-23T13:47:58Z",
              "updatedAt": "2023-06-23T13:47:59Z"
            }
          ]
        }
      ]
    },
    {
      "number": 306,
      "id": "PR_kwDOHTmVzM5Ttv0W",
      "title": "replace `payload` with `input claim set`",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/306",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "addressing issue #274.\r\n\r\n- I replaced SD-JWT payload SD-JWT input claim set\r\n- when using the word for the first time, expanded to say `The input claim set to be used as the payload of an Issuer-signed JWT component of an SD-JWT`\r\n- kept `JSON payload` and `JWT payload` terms.",
      "createdAt": "2023-06-23T05:30:12Z",
      "updatedAt": "2023-06-28T17:22:22Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "f77e5ebae48fdecb2973247fe123f28288b1ccf4",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "replace-payload",
      "headRefOid": "7cb9852194c223a55a70351cf42938d896f7b807",
      "closedAt": "2023-06-28T17:22:22Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I thought the intent of #274 was to introduce a proper term for what would be the raw unredacted input into the whole process before SD processing to add `_sd` and `...` with the digest values.  I think payload is fine as we use it and consistent with how JWT/JWS us the term. And don't think \"input claim set\" is a good or accurate replacement for payload. \r\n\r\ni.e. we were looking to have a nice term to distinguish the [\"set of claims that the Issuer is issuing\" ](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-04.html#section-5.2-1)\r\n\r\n```\r\n{\r\n  \"sub\": \"john_doe_42\",\r\n  \"given_name\": \"John\",\r\n  \"family_name\": \"Doe\",\r\n  \"email\": \"johndoe@example.com\",\r\n  \"phone_number\": \"+1-202-555-0101\",\r\n  \"address\": {\r\n    \"street_address\": \"123 Main St\",\r\n    \"locality\": \"Anytown\",\r\n    \"region\": \"Anystate\",\r\n    \"country\": \"US\"\r\n  },\r\n  \"birthdate\": \"1940-01-01\"\r\n}\r\n```\r\n\r\nfrom the actual [\"payload of an SD-JWT\"](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-04.html#section-5.2-3)\r\n\r\n```\r\n{\r\n  \"_sd\": [\r\n    \"5nXy0Z3QiEba1V1lJzeKhAOGQXFlKLIWCLlhf_O-cmo\",\r\n    \"9gZhHAhV7LZnOFZq_q7Fh8rzdqrrNM-hRWsVOlW3nuw\",\r\n    \"S-JPBSkvqliFv1__thuXt3IzX5B_ZXm4W2qs4BoNFrA\",\r\n    \"bviw7pWAkbzI078ZNVa_eMZvk0tdPa5w2o9R3Zycjo4\",\r\n    \"o-LBCDrFF6tC9ew1vAlUmw6Y30CHZF5jOUFhpx5mogI\",\r\n    \"pzkHIM9sv7oZH6YKDsRqNgFGLpEKIj3c5G6UKaTsAjQ\",\r\n    \"rnAzCT6DTy4TsX9QCDv2wwAE4Ze20uRigtVNQkA52X0\"\r\n  ],\r\n  \"iss\": \"https://example.com/issuer\",\r\n  \"iat\": 1516239022,\r\n  \"exp\": 1735689661,\r\n  \"_sd_alg\": \"sha-256\",\r\n  \"cnf\": {\r\n    \"jwk\": {\r\n      \"kty\": \"EC\",\r\n      \"crv\": \"P-256\",\r\n      \"x\": \"TCAER19Zvu3OHF4j4W4vfSVoHIP1ILilDls7vCeGemc\",\r\n      \"y\": \"ZxjiWWbZMQGHVWKVQ4hbSIirsVfuecCE6t4jT9F2HZQ\"\r\n    }\r\n  }\r\n}\r\n```",
          "createdAt": "2023-06-23T13:17:41Z",
          "updatedAt": "2023-06-23T21:05:08Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5ZGXY4",
          "commit": {
            "abbreviatedOid": "a88d259"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Thanks for preparing this. LGTM, just a few editorial nits.",
          "createdAt": "2023-06-23T09:55:06Z",
          "updatedAt": "2023-06-23T10:00:02Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "```suggestion\r\nThe input claim set to be used as the payload of the Issuer-signed JWT component of an SD-JWT is a JSON object that\r\n```",
              "createdAt": "2023-06-23T09:55:06Z",
              "updatedAt": "2023-06-23T10:00:02Z"
            },
            {
              "originalPosition": 12,
              "body": "When ending this sentence with the conjunction \"that\", we need to change the enumeration below into one long sentence - I'll propose changes accordingly.",
              "createdAt": "2023-06-23T09:57:00Z",
              "updatedAt": "2023-06-23T10:00:02Z"
            },
            {
              "originalPosition": 27,
              "body": "```suggestion\r\n 1. MAY contain the `_sd_alg` key described in (#hash_function_claim),\r\n 2. MAY contain one or more digests of Disclosures to enable selective disclosure of the respective claims, created and formatted as described below,\r\n 3. MAY contain one or more decoy digests to obscure the actual number of claims in the SD-JWT, created and formatted as described in (#decoy_digests),\r\n 4. MAY contain one or more non-selectively disclosable claims,\r\n 5. MAY also contain a Holder's public key or a reference thereto, as well as further claims such as `iss`, `iat`, etc. as defined or required by the application using SD-JWTs,\r\n 6. MUST NOT contain the reserved claims `_sd` or `...` except for the purpose of transporting digests as described below, and\r\n 7. MUST NOT contain more than one appearance of the same digest value.\r\n```",
              "createdAt": "2023-06-23T09:57:46Z",
              "updatedAt": "2023-06-23T10:00:02Z"
            },
            {
              "originalPosition": 63,
              "body": "```suggestion\r\nThe following non-normative example shows the input claim set of an SD-JWT for this End-User data:\r\n```",
              "createdAt": "2023-06-23T09:58:25Z",
              "updatedAt": "2023-06-23T10:00:02Z"
            },
            {
              "originalPosition": 232,
              "body": "```suggestion\r\n   * Replaced SD-JWT 'payload' with 'input claim set'\r\n\r\n```",
              "createdAt": "2023-06-23T09:59:35Z",
              "updatedAt": "2023-06-23T10:00:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ZH2qT",
          "commit": {
            "abbreviatedOid": "a88d259"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I may have misunderstood the intent of https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/274 but really don't think replacing \"payload\" with \"input claim set\" is a good direction. ",
          "createdAt": "2023-06-23T14:12:25Z",
          "updatedAt": "2023-06-23T14:12:25Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5ZIBhG",
          "commit": {
            "abbreviatedOid": "a88d259"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "Brian is right, and I completely overlooked that when first reading this. We need a term for the data that is then turned into the SD-JWT, not the content of the Issuer-signed JWT.",
          "createdAt": "2023-06-23T14:35:50Z",
          "updatedAt": "2023-06-23T14:35:50Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5ZnpT9",
          "commit": {
            "abbreviatedOid": "a88d259"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-28T16:51:10Z",
          "updatedAt": "2023-06-28T16:51:10Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "thank you!",
              "createdAt": "2023-06-28T16:51:10Z",
              "updatedAt": "2023-06-28T16:51:10Z"
            }
          ]
        }
      ]
    },
    {
      "number": 307,
      "id": "PR_kwDOHTmVzM5UHESr",
      "title": "Added jwt-sd as an implementation",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/307",
      "state": "MERGED",
      "author": "berendsliedrecht",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Signed-off-by: Berend Sliedrecht <blu3beri@proton.me>\n",
      "createdAt": "2023-06-28T07:17:08Z",
      "updatedAt": "2023-06-28T16:25:04Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "0ed84dad214976505ae55f750a1f179b32c1c50e",
      "headRepository": "berendsliedrecht/oauth-selective-disclosure-jwt",
      "headRefName": "add-implementation",
      "headRefOid": "efe4a17723d5f9ca43785a7403e89a78beb1688a",
      "closedAt": "2023-06-28T16:25:03Z",
      "mergedAt": "2023-06-28T16:25:03Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "75182386a4c8f458700fff11544cb099646cfc52"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5Zjz9k",
          "commit": {
            "abbreviatedOid": "efe4a17"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-28T08:27:24Z",
          "updatedAt": "2023-06-28T08:27:24Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5Zls0_",
          "commit": {
            "abbreviatedOid": "efe4a17"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-28T13:11:05Z",
          "updatedAt": "2023-06-28T13:11:05Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5ZndRZ",
          "commit": {
            "abbreviatedOid": "efe4a17"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-28T16:24:58Z",
          "updatedAt": "2023-06-28T16:24:58Z",
          "comments": []
        }
      ]
    },
    {
      "number": 308,
      "id": "PR_kwDOHTmVzM5UKjkD",
      "title": "differentiate input claim set from the payload and clean up example structure",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/308",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "replaces #306, addressing issue #274\r\nI also cleaned up example structure, so that it is the same and uses the same language across multiple examples.",
      "createdAt": "2023-06-28T17:21:40Z",
      "updatedAt": "2023-06-28T18:16:26Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "75182386a4c8f458700fff11544cb099646cfc52",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "replace-payload-2",
      "headRefOid": "ad4b889d9175189fd26102b79792d8b12686cc08",
      "closedAt": "2023-06-28T18:16:25Z",
      "mergedAt": "2023-06-28T18:16:25Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "f59e0f5ff56cb3f53a0973bd21a42b91f55867db"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5Zn9mD",
          "commit": {
            "abbreviatedOid": "c9d9f51"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-28T17:38:31Z",
          "updatedAt": "2023-06-28T17:38:31Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "there exists no other SD-JWT that could be considered to be more simple than this? :) \r\n\r\n```suggestion\r\nIn this example, a simple SD-JWT is demonstrated.\r\n```",
              "createdAt": "2023-06-28T17:38:31Z",
              "updatedAt": "2023-06-28T17:38:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Zn_KT",
          "commit": {
            "abbreviatedOid": "c9d9f51"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-28T17:41:48Z",
          "updatedAt": "2023-06-28T17:41:48Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "demonstrated -> demostrated\r\n\r\nor represented?",
              "createdAt": "2023-06-28T17:41:48Z",
              "updatedAt": "2023-06-28T17:42:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ZoKko",
          "commit": {
            "abbreviatedOid": "c9d9f51"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-28T18:13:58Z",
          "updatedAt": "2023-06-28T18:13:58Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "\"demostrated\" is not a word and \"demonstrated\" is what was intended ",
              "createdAt": "2023-06-28T18:13:58Z",
              "updatedAt": "2023-06-28T18:13:58Z"
            }
          ]
        }
      ]
    },
    {
      "number": 309,
      "id": "PR_kwDOHTmVzM5UKtXj",
      "title": "enhance JWE section",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/309",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "address #295. cc @alenhorvat, @mtaimela.",
      "createdAt": "2023-06-28T17:51:36Z",
      "updatedAt": "2023-06-28T18:26:58Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "75182386a4c8f458700fff11544cb099646cfc52",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "encryption",
      "headRefOid": "a33d0f63440a43b3a450eb15447b196cdf981669",
      "closedAt": "2023-06-28T18:26:57Z",
      "mergedAt": "2023-06-28T18:26:57Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "2fc73f5f12604dc6a665d9f329da47327b9948d3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5ZoE2Y",
          "commit": {
            "abbreviatedOid": "7a955d5"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-28T17:57:57Z",
          "updatedAt": "2023-06-28T17:57:58Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nEspecially, when an SD-JWT is transmitted via a URL and information may be stored/cached in the browser or end up in web server logs, the SD-JWT SHOULD be encrypted using JWE.\r\n```",
              "createdAt": "2023-06-28T17:57:57Z",
              "updatedAt": "2023-06-28T17:57:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ZoO2J",
          "commit": {
            "abbreviatedOid": "a33d0f6"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-28T18:26:50Z",
          "updatedAt": "2023-06-28T18:26:50Z",
          "comments": []
        }
      ]
    },
    {
      "number": 310,
      "id": "PR_kwDOHTmVzM5UXZ_C",
      "title": "Overlooked doc history items for -05",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/310",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-06-30T21:25:12Z",
      "updatedAt": "2023-06-30T22:45:00Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "1910d051507e5052369108c1f72906af0bf17f12",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "bc-doc-hist-for-05",
      "headRefOid": "506b4fd78e5560d59d9cb5224615ae573dde48cd",
      "closedAt": "2023-06-30T21:26:45Z",
      "mergedAt": "2023-06-30T21:26:45Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "142c5788cf9c2c856ff99e2edd6ba33928b8090a"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 314,
      "id": "PR_kwDOHTmVzM5Uj7Ud",
      "title": "Fix minor issues in some examples",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/314",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Omit `_sd_alg` from the verified payload contents for #313 \r\n\r\nOmit `iss`, `exp`, and `iat` from the VCDM example for #312\r\n\r\nHave the issuer (iss) and verifier (aud) be distinct domains in the examples for #311\r\n\r\n\r\nEditor's Copy Preview: https://drafts.oauth.net/oauth-selective-disclosure-jwt/examples-need-some-fixin/draft-ietf-oauth-selective-disclosure-jwt.html",
      "createdAt": "2023-07-03T21:45:21Z",
      "updatedAt": "2023-07-28T08:49:16Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "142c5788cf9c2c856ff99e2edd6ba33928b8090a",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "examples-need-some-fixin",
      "headRefOid": "28997b5dfc135ab73a223a125dc4d9d6305d64eb",
      "closedAt": "2023-07-28T08:49:16Z",
      "mergedAt": "2023-07-28T08:49:16Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "b5875fa808c3ea99925a1f5639e63e17561e6ff8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5aVbDb",
          "commit": {
            "abbreviatedOid": "3ac1fb1"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-06T00:46:47Z",
          "updatedAt": "2023-07-06T00:46:47Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5atpPq",
          "commit": {
            "abbreviatedOid": "3ac1fb1"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-10T12:01:00Z",
          "updatedAt": "2023-07-10T12:01:00Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5cZHpE",
          "commit": {
            "abbreviatedOid": "bfbea5a"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-27T15:03:42Z",
          "updatedAt": "2023-07-27T15:03:43Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\n        python3 -m pip install git+https://github.com/danielfett/sd-jwt.git\r\n```\r\n\r\nthe fork was merged ",
              "createdAt": "2023-07-27T15:03:43Z",
              "updatedAt": "2023-07-27T15:03:43Z"
            }
          ]
        }
      ]
    },
    {
      "number": 318,
      "id": "PR_kwDOHTmVzM5W3s0V",
      "title": "consistency around terminology random",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/318",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "first pass at addressing Issue #316 and #319.",
      "createdAt": "2023-08-01T06:00:37Z",
      "updatedAt": "2023-08-29T15:42:05Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "b5875fa808c3ea99925a1f5639e63e17561e6ff8",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "sakurann-din-comments",
      "headRefOid": "f8b9feeb5535c8704acb208f3e03b840691bc871",
      "closedAt": "2023-08-29T15:42:04Z",
      "mergedAt": "2023-08-29T15:42:04Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "3d62de451a6b76a56e9eb129406b66dbffe8a1e7"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Does this touch all the mentions of random in https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/316 and convey what the feedback was looking for? I'm honestly not sure. But I also think it doesn't really need changes in that area so I'm not too worried about it. So why am I writing this note? Good question. Just trying to \"contribute\" I guess.  ",
          "createdAt": "2023-08-03T14:11:28Z",
          "updatedAt": "2023-08-03T14:11:28Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5cwiQ_",
          "commit": {
            "abbreviatedOid": "526b198"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-01T06:10:30Z",
          "updatedAt": "2023-08-01T06:10:31Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "feedback received: \r\n> \"It is out of the scope of this document to describe how the Holder key pair is established. For example, the Holder MAY provide a key pair to the Issuer,\u2026\" Requiring the holder to provide also the private key to the issuer appears not to be a good example.\r\n\r\nsuggestion was \"the Holder MAY provide a public key to the Issuer and prove possession of the corresponding private key\" but I slightly played with the words.",
              "createdAt": "2023-08-01T06:10:31Z",
              "updatedAt": "2023-08-01T06:10:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5cwjPJ",
          "commit": {
            "abbreviatedOid": "1e1d937"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-01T06:14:17Z",
          "updatedAt": "2023-08-01T06:14:17Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "this one might be controversial...\r\n\r\noriginal feedback received was:\r\n\r\n> According to clause 5.1 the Disclosures and the Key Binding JWT are both optional in an SD-JWT.\r\n>\r\n> Clause 5.11 explicitly specifies the serialized format of an SD-JWT if the Key Binding JWT is absent:\r\n\"In the case that there is no Key Binding JWT, the last\r\nelement MUST be an empty string and the last separating tilde character MUST NOT be omitted.\"\r\n>\r\n> Clause 5.11 does not explicitly specify the serialized format of an SD-JWT if the Disclosures are absent.\r\n>\r\n> Please specify explicitly the serialized format of an SD-JWT if the Disclosures are absent.\r\n>\r\n> Please indicate in the item list (\"An SD-JWT is composed of the following\u2026\") that the Disclosures are optional (as already done for the Key Binding JWT).",
              "createdAt": "2023-08-01T06:14:17Z",
              "updatedAt": "2023-08-01T06:14:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5c-v6U",
          "commit": {
            "abbreviatedOid": "427272b"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-02T23:07:27Z",
          "updatedAt": "2023-08-02T23:07:27Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "I don't totally love the suggested wording below but I think it's a \"more correct\" explanation of the content of the example. The text that was there previously doesn't seem quite right and JWT->JWS makes it maybe less correct. \r\n\r\n```suggestion\r\nThe following non-normative example shows the claims of an SD-JWT Presentation enveloped in a JWT:\r\n```\r\n\r\n",
              "createdAt": "2023-08-02T23:07:27Z",
              "updatedAt": "2023-08-02T23:07:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5c-wfv",
          "commit": {
            "abbreviatedOid": "427272b"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-02T23:11:25Z",
          "updatedAt": "2023-08-02T23:11:25Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "I'd interpreted \"The Disclosures\" to mean zero or more. So to me the optionality was implied.  But this seems fine too. ",
              "createdAt": "2023-08-02T23:11:25Z",
              "updatedAt": "2023-08-02T23:11:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5c-w6G",
          "commit": {
            "abbreviatedOid": "427272b"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-02T23:13:44Z",
          "updatedAt": "2023-08-02T23:13:44Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "IMHO JWT payload is fine and conveys more meaning. \r\n```suggestion\r\n   2. The claim name, or key, as it would be used in a regular JWT payload. The value MUST be a string.\r\n```",
              "createdAt": "2023-08-02T23:13:44Z",
              "updatedAt": "2023-08-02T23:13:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5c-w8E",
          "commit": {
            "abbreviatedOid": "427272b"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-02T23:13:56Z",
          "updatedAt": "2023-08-02T23:13:57Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "```suggestion\r\n   3. The claim value, as it would be used in a regular JWT payload. The value MAY be of any type that is allowed in JSON, including numbers, strings, booleans, arrays, and objects.\r\n```",
              "createdAt": "2023-08-02T23:13:56Z",
              "updatedAt": "2023-08-02T23:13:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5dDQcK",
          "commit": {
            "abbreviatedOid": "427272b"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-03T13:42:55Z",
          "updatedAt": "2023-08-03T13:42:56Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "```suggestion\r\n* in the JWS header,\r\n```",
              "createdAt": "2023-08-03T13:42:55Z",
              "updatedAt": "2023-08-03T13:42:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5dDRUd",
          "commit": {
            "abbreviatedOid": "427272b"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-03T13:44:38Z",
          "updatedAt": "2023-08-03T13:44:38Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "```suggestion\r\n* in the JWT Claims Set,\r\n```",
              "createdAt": "2023-08-03T13:44:38Z",
              "updatedAt": "2023-08-03T13:44:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5dDTGq",
          "commit": {
            "abbreviatedOid": "427272b"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-03T13:47:59Z",
          "updatedAt": "2023-08-03T13:47:59Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "a JWS payload \"can contain an arbitrary sequence of octets\" while JWT conveys JSON and claims. True that JWT RFC itself doesn't use payload but its well understood and other specs (such as DPoP) do use JWT payload. ",
              "createdAt": "2023-08-03T13:47:59Z",
              "updatedAt": "2023-08-03T14:02:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5dDhUW",
          "commit": {
            "abbreviatedOid": "427272b"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "requesting changes for some nits but overall direction seems good ",
          "createdAt": "2023-08-03T14:13:59Z",
          "updatedAt": "2023-08-03T14:13:59Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5dDhoK",
          "commit": {
            "abbreviatedOid": "427272b"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-03T14:14:35Z",
          "updatedAt": "2023-08-03T14:14:36Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "or this would be okay by me too \r\n```suggestion\r\n* in the JWT payload,\r\n```",
              "createdAt": "2023-08-03T14:14:35Z",
              "updatedAt": "2023-08-03T14:14:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5dVudZ",
          "commit": {
            "abbreviatedOid": "427272b"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-07T18:51:33Z",
          "updatedAt": "2023-08-07T18:51:33Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "yeah. I agree that JWT payload is pretty well understood.",
              "createdAt": "2023-08-07T18:51:33Z",
              "updatedAt": "2023-08-07T18:51:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5dVvD7",
          "commit": {
            "abbreviatedOid": "427272b"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-07T18:53:35Z",
          "updatedAt": "2023-08-07T18:53:35Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "maybe make it simpler? `the claims of an SD-JWT presentation` took me a bit of time to understand.\r\n\r\n```suggestion\r\nThe following non-normative example shows an SD-JWT Presentation enveloped in a JWT:\r\n```",
              "createdAt": "2023-08-07T18:53:35Z",
              "updatedAt": "2023-08-07T18:53:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5dVxHC",
          "commit": {
            "abbreviatedOid": "ffc73cc"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-07T18:59:30Z",
          "updatedAt": "2023-08-07T18:59:31Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "per RFC, it's JOSE header.. https://www.rfc-editor.org/rfc/rfc7515#section-2\r\nper DPoP/convention, JWT header might be ok too..",
              "createdAt": "2023-08-07T18:59:30Z",
              "updatedAt": "2023-08-07T18:59:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5dVzrC",
          "commit": {
            "abbreviatedOid": "427272b"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-07T19:07:32Z",
          "updatedAt": "2023-08-07T19:07:32Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "That works. It's really showing the claims/payload of that JWT in which the SD-JWT is enveloped. But that's hard to describe. And what I'd suggested is pretty bad now that I read it again. ",
              "createdAt": "2023-08-07T19:07:32Z",
              "updatedAt": "2023-08-07T19:07:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5dV0Do",
          "commit": {
            "abbreviatedOid": "f191842"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-07T19:08:48Z",
          "updatedAt": "2023-08-07T19:08:48Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "yeah, probably any of them would be ok actually ",
              "createdAt": "2023-08-07T19:08:48Z",
              "updatedAt": "2023-08-07T19:08:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5dV7z4",
          "commit": {
            "abbreviatedOid": "f191842"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-07T19:27:16Z",
          "updatedAt": "2023-08-07T19:27:17Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "```suggestion\r\n* in the JWT header,\r\n```",
              "createdAt": "2023-08-07T19:27:16Z",
              "updatedAt": "2023-08-07T19:27:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5dV8pw",
          "commit": {
            "abbreviatedOid": "f191842"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-07T19:29:47Z",
          "updatedAt": "2023-08-07T19:29:48Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "yeah, let's stick to `JWT payload`.",
              "createdAt": "2023-08-07T19:29:47Z",
              "updatedAt": "2023-08-07T19:29:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5dV_Ig",
          "commit": {
            "abbreviatedOid": "31bc9bb"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-07T19:38:18Z",
          "updatedAt": "2023-08-07T19:38:18Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "there are other instances where we use `JOSE header`. so let's decide in this issue comment on the term and i will change everywhere accordignly, if needed.",
              "createdAt": "2023-08-07T19:38:18Z",
              "updatedAt": "2023-08-07T19:38:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5dWHWe",
          "commit": {
            "abbreviatedOid": "427272b"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-07T20:06:32Z",
          "updatedAt": "2023-08-07T20:06:32Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "let's just keep `JOSE header` here",
              "createdAt": "2023-08-07T20:06:32Z",
              "updatedAt": "2023-08-07T20:10:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5eIoIe",
          "commit": {
            "abbreviatedOid": "31bc9bb"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Approved with the proposed changes.",
          "createdAt": "2023-08-15T19:56:47Z",
          "updatedAt": "2023-08-15T20:00:14Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "```suggestion\r\n* zero or more Disclosures\r\n```",
              "createdAt": "2023-08-15T19:56:47Z",
              "updatedAt": "2023-08-15T20:00:14Z"
            },
            {
              "originalPosition": 81,
              "body": "```suggestion\r\nOther specifications or profiles of this specification may define alternative formats for transporting an SD-JWT that envelope multiple such objects into one object and provide Key Binding using means other than the Key Binding JWT.\r\n```",
              "createdAt": "2023-08-15T19:58:58Z",
              "updatedAt": "2023-08-15T20:00:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5eiLd5",
          "commit": {
            "abbreviatedOid": "1e1d937"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-21T00:58:19Z",
          "updatedAt": "2023-08-21T00:58:20Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "I like the Dr.'s suggestion above of \"zero or more Disclosures\" ",
              "createdAt": "2023-08-21T00:58:19Z",
              "updatedAt": "2023-08-21T00:58:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5faY41",
          "commit": {
            "abbreviatedOid": "f8b9fee"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-08-29T15:41:49Z",
          "updatedAt": "2023-08-29T15:41:49Z",
          "comments": []
        }
      ]
    },
    {
      "number": 321,
      "id": "PR_kwDOHTmVzM5XZnDp",
      "title": "Update library repository to OWF URL",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/321",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-08-08T06:54:49Z",
      "updatedAt": "2023-10-27T10:06:03Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "b5875fa808c3ea99925a1f5639e63e17561e6ff8",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/update-library-repository",
      "headRefOid": "7e671d4bb744e48bee1ec170dd05e9ddc3c6eeb2",
      "closedAt": "2023-08-24T08:10:27Z",
      "mergedAt": "2023-08-24T08:10:27Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "d5068348ba3660e0a264ef128583f635e3053d40"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5ddPeh",
          "commit": {
            "abbreviatedOid": "7e671d4"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-08-08T18:58:53Z",
          "updatedAt": "2023-08-08T18:58:53Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5eiKse",
          "commit": {
            "abbreviatedOid": "7e671d4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-08-21T00:53:39Z",
          "updatedAt": "2023-08-21T00:53:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 323,
      "id": "PR_kwDOHTmVzM5XgiTM",
      "title": "Define KB JWT",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/323",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Noticed that the term was not explicitly defined so far.",
      "createdAt": "2023-08-09T08:06:58Z",
      "updatedAt": "2023-10-27T10:06:00Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "b5875fa808c3ea99925a1f5639e63e17561e6ff8",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/define-key-binding-jwt",
      "headRefOid": "b8748829310dd712bd1d6283ec8e0c04bafd4f14",
      "closedAt": "2023-08-28T10:58:19Z",
      "mergedAt": "2023-08-28T10:58:19Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "775801cdce9399db10b7a2219ce9f7f41e77f1c0"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5eiK1d",
          "commit": {
            "abbreviatedOid": "b874882"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-08-21T00:55:08Z",
          "updatedAt": "2023-08-21T00:55:08Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5fFmrx",
          "commit": {
            "abbreviatedOid": "b874882"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-08-25T09:21:02Z",
          "updatedAt": "2023-08-25T09:21:02Z",
          "comments": []
        }
      ]
    },
    {
      "number": 334,
      "id": "PR_kwDOHTmVzM5Y7LxZ",
      "title": "Ensure claims that control validity are checked after decoding payload",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/334",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "This fixes Issue #333.",
      "createdAt": "2023-08-28T11:26:50Z",
      "updatedAt": "2023-10-27T10:05:53Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "775801cdce9399db10b7a2219ce9f7f41e77f1c0",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/claim-validation-after-processing",
      "headRefOid": "f7e8753d6a21c9ab09cf1d4b9e131bee8568b156",
      "closedAt": "2023-08-29T15:50:36Z",
      "mergedAt": "2023-08-29T15:50:36Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "98e46f09b6530c0897aa6202e467c43cc1028c9e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5fUHn9",
          "commit": {
            "abbreviatedOid": "17c25e6"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-28T21:04:23Z",
          "updatedAt": "2023-08-28T21:04:24Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "```suggestion\r\nare usually included in plaintext in the SD-JWT payload, but MAY be\r\n```\r\n",
              "createdAt": "2023-08-28T21:04:23Z",
              "updatedAt": "2023-08-28T21:04:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5fUIL_",
          "commit": {
            "abbreviatedOid": "17c25e6"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-28T21:06:08Z",
          "updatedAt": "2023-08-28T21:06:08Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "```suggestion\r\n 4. Check that the SD-JWT is valid using claims such as `nbf`, `iat`, and `exp` in the processed payload. If a required validity-controlling claim is missing (see (#sd-validity-claims)), the SD-JWT MUST be rejected.\r\n```",
              "createdAt": "2023-08-28T21:06:08Z",
              "updatedAt": "2023-08-28T21:06:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5faafh",
          "commit": {
            "abbreviatedOid": "f7e8753"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-08-29T15:45:01Z",
          "updatedAt": "2023-08-29T15:45:01Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5facIN",
          "commit": {
            "abbreviatedOid": "f7e8753"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-08-29T15:48:29Z",
          "updatedAt": "2023-08-29T15:48:29Z",
          "comments": []
        }
      ]
    },
    {
      "number": 335,
      "id": "PR_kwDOHTmVzM5Y7Ojo",
      "title": "Clarification on allowed claim names",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/335",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "This fixes Issue #332.",
      "createdAt": "2023-08-28T11:35:03Z",
      "updatedAt": "2023-10-27T10:05:50Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "98e46f09b6530c0897aa6202e467c43cc1028c9e",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/disallow__sd_claim_name_in_disclosure",
      "headRefOid": "3fa73c7ae2404d97c2f971fcce47936b078dcd26",
      "closedAt": "2023-08-29T16:09:08Z",
      "mergedAt": "2023-08-29T16:09:08Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "09a1d0b0a4568069ee22f33ca942c19babb90e00"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5fUF7g",
          "commit": {
            "abbreviatedOid": "c83b1e7"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-08-28T20:59:00Z",
          "updatedAt": "2023-08-28T20:59:00Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5fafn4",
          "commit": {
            "abbreviatedOid": "c83b1e7"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-08-29T15:54:47Z",
          "updatedAt": "2023-08-29T15:54:47Z",
          "comments": []
        }
      ]
    },
    {
      "number": 336,
      "id": "PR_kwDOHTmVzM5Y7ReU",
      "title": "Improved wording around storing artifacts",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/336",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Fixes Issue #331 ",
      "createdAt": "2023-08-28T11:43:31Z",
      "updatedAt": "2023-10-27T10:05:46Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "09a1d0b0a4568069ee22f33ca942c19babb90e00",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/should-not-store-private-info",
      "headRefOid": "f79600474461277a957fdad4027039f7fd9850ae",
      "closedAt": "2023-09-08T15:00:56Z",
      "mergedAt": "2023-09-08T15:00:56Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "3cd9ff82b562d47b3baae67eb75eb32c1da4aeed"
      },
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "@peppelinux Can you please take a look whether this addresses all your concerns?",
          "createdAt": "2023-08-29T15:57:54Z",
          "updatedAt": "2023-08-29T15:57:54Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5fUEtF",
          "commit": {
            "abbreviatedOid": "4abdc52"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-08-28T20:55:09Z",
          "updatedAt": "2023-08-28T20:55:09Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5fahQR",
          "commit": {
            "abbreviatedOid": "4abdc52"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-08-29T15:58:13Z",
          "updatedAt": "2023-08-29T15:58:13Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5ga5jj",
          "commit": {
            "abbreviatedOid": "4abdc52"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-08T14:51:06Z",
          "updatedAt": "2023-09-08T14:51:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 338,
      "id": "PR_kwDOHTmVzM5Z0Zo0",
      "title": "Clean up Example 4a by not including decoys to fix issue #337",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/338",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "https://drafts.oauth.net/oauth-selective-disclosure-jwt/bc-fix-ex-4a/draft-ietf-oauth-selective-disclosure-jwt.html#appendix-A.3 ",
      "createdAt": "2023-09-07T21:17:24Z",
      "updatedAt": "2023-10-02T15:46:51Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "09a1d0b0a4568069ee22f33ca942c19babb90e00",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "bc-fix-ex-4a",
      "headRefOid": "98ed00a014009e6b6525b18d4e2b473bdab3be21",
      "closedAt": "2023-10-02T15:46:51Z",
      "mergedAt": "2023-10-02T15:46:51Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "6159c903711e6cc467624013ade55736dd3f1ab4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5gX78T",
          "commit": {
            "abbreviatedOid": "98ed00a"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-08T07:43:53Z",
          "updatedAt": "2023-09-08T07:43:53Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5garNx",
          "commit": {
            "abbreviatedOid": "98ed00a"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-08T14:23:07Z",
          "updatedAt": "2023-09-08T14:23:07Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "Note that this was pointing to the wrong file... ",
              "createdAt": "2023-09-08T14:23:07Z",
              "updatedAt": "2023-09-08T14:23:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5h8o_y",
          "commit": {
            "abbreviatedOid": "98ed00a"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-26T03:39:51Z",
          "updatedAt": "2023-09-26T03:39:51Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "why pointing to a correct file not an option?",
              "createdAt": "2023-09-26T03:39:51Z",
              "updatedAt": "2023-09-26T03:39:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5iAxJq",
          "commit": {
            "abbreviatedOid": "98ed00a"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-26T14:04:34Z",
          "updatedAt": "2023-09-26T14:04:34Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "This example doesn't use decoys anymore (probably shouldn't have in the first place) so there's no decoy digests file content to point to. #337 was extremely confusing to get to the bottom of due in large part to including the decoy_digests.md from a different example. \r\n",
              "createdAt": "2023-09-26T14:04:34Z",
              "updatedAt": "2023-09-26T14:04:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ihfXk",
          "commit": {
            "abbreviatedOid": "98ed00a"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I don't know why but I think we should have more examples, but not going to go against these changes.",
          "createdAt": "2023-10-02T15:05:19Z",
          "updatedAt": "2023-10-02T15:05:19Z",
          "comments": []
        }
      ]
    },
    {
      "number": 339,
      "id": "PR_kwDOHTmVzM5Z0i4x",
      "title": "Add cnf claim to Example 4b (per issue #320)",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/339",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "https://drafts.oauth.net/oauth-selective-disclosure-jwt/bc-cnf-to-ex4b/draft-ietf-oauth-selective-disclosure-jwt.html#appendix-A.4 \r\n\r\nper issue #320",
      "createdAt": "2023-09-07T22:08:00Z",
      "updatedAt": "2023-10-02T15:42:52Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "09a1d0b0a4568069ee22f33ca942c19babb90e00",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "bc-cnf-to-ex4b",
      "headRefOid": "9ee09f993cc3ceda6f155b756acd0770c37bae5f",
      "closedAt": "2023-10-02T15:42:52Z",
      "mergedAt": "2023-10-02T15:42:52Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "45c292f28543d125106f9b0ad0166fbed8a335e5"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> description of example 4b also needs to be updated to say the example contains key binding\r\n\r\nIt does already say \"Key Binding is applied using the Holder's public key passed in a cnf claim in the SD-JWT\" right there at https://datatracker.ietf.org/doc/html/draft-ietf-oauth-selective-disclosure-jwt-05#appendix-A.4 which is, I think, part of why Orie filed #320 asking that the example content reflect that statement by having a cnf.  ",
          "createdAt": "2023-09-26T14:09:46Z",
          "updatedAt": "2023-09-26T14:09:46Z"
        },
        {
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Also for context, we are trying to use whatever examples you folks define in the official WG test suite:\r\n\r\nhttps://github.com/w3c/vc-jose-cose-test-suite/blob/main/testcases/secured-vc-jwt-sd/spec.yaml",
          "createdAt": "2023-09-28T18:46:45Z",
          "updatedAt": "2023-09-28T18:46:45Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5gX8Cx",
          "commit": {
            "abbreviatedOid": "9ee09f9"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-08T07:44:10Z",
          "updatedAt": "2023-09-08T07:44:10Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5glRzO",
          "commit": {
            "abbreviatedOid": "9ee09f9"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-11T16:23:36Z",
          "updatedAt": "2023-09-11T16:23:36Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5h8oif",
          "commit": {
            "abbreviatedOid": "9ee09f9"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "description of example 4b also needs to be updated to say the example contains key binding",
          "createdAt": "2023-09-26T03:36:49Z",
          "updatedAt": "2023-09-26T03:36:49Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5ihxhD",
          "commit": {
            "abbreviatedOid": "9ee09f9"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I might have misunderstood, sorry",
          "createdAt": "2023-10-02T15:42:09Z",
          "updatedAt": "2023-10-02T15:42:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 340,
      "id": "PR_kwDOHTmVzM5Z2Ude",
      "title": "Improve wording around design choices",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/340",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "In response to Issue #337:\r\n\r\n* Changed some words to ensure that the examples are not understood as an exhaustive list of possible structures\r\n* Added note on non-normativity of examples\r\n* Removed the word Option in the section titles and the numbers to avoid the notion of an exhaustive list of options",
      "createdAt": "2023-09-08T07:41:42Z",
      "updatedAt": "2023-10-27T10:05:44Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "09a1d0b0a4568069ee22f33ca942c19babb90e00",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/clarification-on-options",
      "headRefOid": "b1aad047a99054b042fa01d815f6db6dda6211aa",
      "closedAt": "2023-10-02T15:48:20Z",
      "mergedAt": "2023-10-02T15:48:20Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "fcc29853f5f605cfbd03c0b75ee805f8c71841a4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5gauo7",
          "commit": {
            "abbreviatedOid": "d437859"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-08T14:29:30Z",
          "updatedAt": "2023-09-08T14:29:30Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5h8uhG",
          "commit": {
            "abbreviatedOid": "d437859"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-26T04:16:30Z",
          "updatedAt": "2023-09-26T04:16:30Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "```suggestion\r\nImportant: The following examples of the structures are non-normative and are not intended to\r\n```",
              "createdAt": "2023-09-26T04:16:30Z",
              "updatedAt": "2023-09-26T04:16:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ih0VC",
          "commit": {
            "abbreviatedOid": "b1aad04"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-02T15:47:01Z",
          "updatedAt": "2023-10-02T15:47:01Z",
          "comments": []
        }
      ]
    },
    {
      "number": 343,
      "id": "PR_kwDOHTmVzM5bPeP0",
      "title": "Add Typescript sd-jwt implementation maintained by Meeco",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/343",
      "state": "MERGED",
      "author": "javereec",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I think the title says it all.",
      "createdAt": "2023-09-26T14:54:14Z",
      "updatedAt": "2023-10-02T15:40:56Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "3cd9ff82b562d47b3baae67eb75eb32c1da4aeed",
      "headRepository": "Meeco/oauth-selective-disclosure-jwt",
      "headRefName": "master",
      "headRefOid": "539dcae875382b2803ade48f9c94f636c7350ef1",
      "closedAt": "2023-10-02T15:40:56Z",
      "mergedAt": "2023-10-02T15:40:56Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "d3402fd10dc8d4c8edc60a9979eb2afcf4eef0be"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5iBp5m",
          "commit": {
            "abbreviatedOid": "539dcae"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-26T15:34:50Z",
          "updatedAt": "2023-09-26T15:34:50Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5ihw0Y",
          "commit": {
            "abbreviatedOid": "539dcae"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-02T15:40:41Z",
          "updatedAt": "2023-10-02T15:40:41Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5ihw4h",
          "commit": {
            "abbreviatedOid": "539dcae"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-02T15:40:50Z",
          "updatedAt": "2023-10-02T15:40:50Z",
          "comments": []
        }
      ]
    },
    {
      "number": 344,
      "id": "PR_kwDOHTmVzM5bdXDh",
      "title": "updates to enveloping and JSON serialization",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/344",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "-Update JSON Serialization to remove the kb_jwt member and allow for the disclosures to be conveyed elsewhere\r\n-Expand the Enveloping SD-JWTs section to also discuss enveloping JSON serialized SD-JWTs\r\n-Swap Enveloping SD-JWTs and JSON Serialization sections \r\n\r\nEditor's Copy from this PR:\r\nhttps://drafts.oauth.net/oauth-selective-disclosure-jwt/bc/enveloping-n-serialization/draft-ietf-oauth-selective-disclosure-jwt.html#name-jws-json-serialization\r\nhttps://drafts.oauth.net/oauth-selective-disclosure-jwt/bc/enveloping-n-serialization/draft-ietf-oauth-selective-disclosure-jwt.html#name-enveloping-sd-jwts",
      "createdAt": "2023-09-28T15:27:52Z",
      "updatedAt": "2023-10-16T15:15:26Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "3cd9ff82b562d47b3baae67eb75eb32c1da4aeed",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "bc/enveloping-n-serialization",
      "headRefOid": "40a76e52eccd64bdbf3973dd63da1988f0294c2c",
      "closedAt": "2023-10-16T15:15:26Z",
      "mergedAt": "2023-10-16T15:15:26Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "f7fdcf0d35b02f6d1f6e9dbfc98eec56fa842a2d"
      },
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this also addresses #325 ",
          "createdAt": "2023-10-02T16:12:58Z",
          "updatedAt": "2023-10-02T16:12:58Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5iVZAO",
          "commit": {
            "abbreviatedOid": "40a76e5"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-28T22:07:58Z",
          "updatedAt": "2023-09-28T22:07:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5iZx4d",
          "commit": {
            "abbreviatedOid": "40a76e5"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-29T14:41:01Z",
          "updatedAt": "2023-09-29T14:41:02Z",
          "comments": [
            {
              "originalPosition": 102,
              "body": "I don't really love showing the disclosures outside the JSON serialized SD-JWT object like this but being able to do so seemed like a primary concern of the ebsi etc feedback so having such an example felt like it'd be useful in allaying those concerns. ",
              "createdAt": "2023-09-29T14:41:02Z",
              "updatedAt": "2023-09-29T14:41:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5iby8y",
          "commit": {
            "abbreviatedOid": "40a76e5"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-29T20:43:35Z",
          "updatedAt": "2023-09-29T20:43:35Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "We might want to change the way the python lib does key_binding with json serialization_format, if this PR goes in and sticks, but for now I just flipped this to false. ",
              "createdAt": "2023-09-29T20:43:35Z",
              "updatedAt": "2023-09-29T20:43:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ieMSu",
          "commit": {
            "abbreviatedOid": "40a76e5"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Right now everything is optional. I would be open to clarifying that a lot is optional for JSON serialization but mandatory for compact serialization (conditional to the discussion with VC-jose-COSE authors I guess)",
          "createdAt": "2023-10-02T04:08:27Z",
          "updatedAt": "2023-10-02T04:14:45Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "```suggestion\nto Section 7.2 of [@!RFC7515]. The disclosures (both for issuance and presentation) MAY be included in the\n```\nSHOULD feels too strong based on what we discussed?",
              "createdAt": "2023-10-02T04:08:28Z",
              "updatedAt": "2023-10-02T04:14:45Z"
            },
            {
              "originalPosition": 44,
              "body": "Maybe something like \"should be defined by the profile of this specification\" would be more actionable?",
              "createdAt": "2023-10-02T04:09:49Z",
              "updatedAt": "2023-10-02T04:14:45Z"
            },
            {
              "originalPosition": 70,
              "body": "If W3C VC-jose-cose spec adopts kb-jwt appended using ~, I would be open to mandating that as a way to do KB with compact serialization (cc @OR13 )",
              "createdAt": "2023-10-02T04:13:30Z",
              "updatedAt": "2023-10-02T04:14:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5iesDQ",
          "commit": {
            "abbreviatedOid": "40a76e5"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-02T07:18:02Z",
          "updatedAt": "2023-10-02T07:18:02Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5ihZhy",
          "commit": {
            "abbreviatedOid": "40a76e5"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-02T14:52:56Z",
          "updatedAt": "2023-10-02T14:54:44Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "If they define something that is outside of this specification, it is not a profile. I think the current wording is fine.",
              "createdAt": "2023-10-02T14:52:56Z",
              "updatedAt": "2023-10-02T14:54:44Z"
            },
            {
              "originalPosition": 32,
              "body": "SHOULD also doesn't work with the MAY below. I think MAY is fine.",
              "createdAt": "2023-10-02T14:53:12Z",
              "updatedAt": "2023-10-02T14:54:44Z"
            },
            {
              "originalPosition": 66,
              "body": "Do we need this section at all?",
              "createdAt": "2023-10-02T14:54:20Z",
              "updatedAt": "2023-10-02T14:54:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ihiQc",
          "commit": {
            "abbreviatedOid": "40a76e5"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-02T15:11:44Z",
          "updatedAt": "2023-10-02T15:11:44Z",
          "comments": [
            {
              "originalPosition": 66,
              "body": "nvm, let's keep this section",
              "createdAt": "2023-10-02T15:11:44Z",
              "updatedAt": "2023-10-02T15:11:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ihrze",
          "commit": {
            "abbreviatedOid": "40a76e5"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-02T15:29:03Z",
          "updatedAt": "2023-10-02T15:29:03Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "Keeping SHOULD for now to lean towards being opinionated.",
              "createdAt": "2023-10-02T15:29:03Z",
              "updatedAt": "2023-10-02T15:29:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ihswR",
          "commit": {
            "abbreviatedOid": "40a76e5"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-02T15:31:12Z",
          "updatedAt": "2023-10-02T15:31:12Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "right, there might be a third option in addition to two of those that we have outlined..",
              "createdAt": "2023-10-02T15:31:12Z",
              "updatedAt": "2023-10-02T15:31:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ihs4l",
          "commit": {
            "abbreviatedOid": "40a76e5"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-02T15:31:30Z",
          "updatedAt": "2023-10-02T15:31:31Z",
          "comments": [
            {
              "originalPosition": 66,
              "body": "keeping...",
              "createdAt": "2023-10-02T15:31:30Z",
              "updatedAt": "2023-10-02T15:31:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ihtas",
          "commit": {
            "abbreviatedOid": "40a76e5"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-02T15:32:43Z",
          "updatedAt": "2023-10-02T15:32:43Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "I retract my comment because Brian reminded me that we wanted this optionality to envelope not only for w3c, but also for the cases when the same KB JWT is used for the multiple issuer signed JWTs and that makes sense",
              "createdAt": "2023-10-02T15:32:43Z",
              "updatedAt": "2023-10-02T15:36:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ihvfR",
          "commit": {
            "abbreviatedOid": "40a76e5"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-02T15:37:28Z",
          "updatedAt": "2023-10-02T15:37:28Z",
          "comments": [
            {
              "originalPosition": 102,
              "body": "Worth having the example for now. ",
              "createdAt": "2023-10-02T15:37:28Z",
              "updatedAt": "2023-10-02T15:37:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ihvmp",
          "commit": {
            "abbreviatedOid": "40a76e5"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-02T15:37:45Z",
          "updatedAt": "2023-10-02T15:37:46Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "noted ",
              "createdAt": "2023-10-02T15:37:46Z",
              "updatedAt": "2023-10-02T15:37:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5imAlo",
          "commit": {
            "abbreviatedOid": "40a76e5"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-03T02:22:38Z",
          "updatedAt": "2023-10-03T02:22:38Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5kJwV0",
          "commit": {
            "abbreviatedOid": "40a76e5"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-16T15:15:13Z",
          "updatedAt": "2023-10-16T15:15:13Z",
          "comments": []
        }
      ]
    },
    {
      "number": 347,
      "id": "PR_kwDOHTmVzM5b5Rux",
      "title": "Improve structure of specification",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/347",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "To fix Issue #290, this PR reorganizes what was previously section 5 as follows:\r\n\r\n![Screenshot_20231004_144710](https://github.com/oauth-wg/oauth-selective-disclosure-jwt/assets/89476/0c3fab16-e957-4ff3-acc0-3cd0691903e4)\r\n",
      "createdAt": "2023-10-04T12:27:14Z",
      "updatedAt": "2023-10-27T10:05:30Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "f7fdcf0d35b02f6d1f6e9dbfc98eec56fa842a2d",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/fix-290-new-structure",
      "headRefOid": "9410a896efdd3c96ab397165ae4df5e4b0a39249",
      "closedAt": "2023-10-23T15:13:19Z",
      "mergedAt": "2023-10-23T15:13:19Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "4b9a228b32dde8516bb9e0f814508fe5ca92cd8a"
      },
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Note: I also changed the story in Section 5 from a bottom-up to a top-down approach (structure of compact serialization SD-JWT first, then going into the details).",
          "createdAt": "2023-10-04T14:42:41Z",
          "updatedAt": "2023-10-04T14:42:41Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "> The Decoy Digests, Hash Function Claim, Holder Public Key Claim subsections feel a bit out of place in section 7. What would you think about moving them to subsections under 5.1. Issuer-signed JWT Payload?\r\n\r\n+1 to this",
          "createdAt": "2023-10-05T20:49:55Z",
          "updatedAt": "2023-10-05T20:49:55Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I made the additional changes proposed by Brian, with the following deltas:\r\n\r\n* I moved the section \"Decoy Digests\" to be the last subsection of \"5.2 Disclosures\". It did not make sense in 5.1 as not all concepts were introduced there yet.\r\n* I slightly reformatted the list of requirements on the SD-JWT payload in Section 5.1.\r\n* I noticed that the note on line breaks in the examples is not in the correct place and moved it towards the beginning of Section 6 (Example 1).\r\n\r\nEditor's copy link: https://drafts.oauth.net/oauth-selective-disclosure-jwt/danielfett/fix-290-new-structure/draft-ietf-oauth-selective-disclosure-jwt.html",
          "createdAt": "2023-10-17T12:54:38Z",
          "updatedAt": "2023-10-17T12:55:22Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> I moved the section \"Decoy Digests\" to be the last subsection of \"5.2 Disclosures\". It did not make sense in 5.1 as not all concepts were introduced there yet. \r\n\r\nThat makes sense and is better than what I'd suggested. ",
          "createdAt": "2023-10-17T13:34:58Z",
          "updatedAt": "2023-10-17T13:34:58Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5i2SXB",
          "commit": {
            "abbreviatedOid": "b674a2f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-04T20:06:43Z",
          "updatedAt": "2023-10-04T20:06:44Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "```suggestion\r\n<Issuer-signed JWT>~<Disclosure 1>~<Disclosure 2>~...~<Disclosure N>~<optional KB-JWT>\r\n\r\n```\r\n\r\nadding a newline so (hopefully) the horizontal scrollbar in the HTML output doesn't cover up the content ",
              "createdAt": "2023-10-04T20:06:43Z",
              "updatedAt": "2023-10-04T20:06:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5i2acz",
          "commit": {
            "abbreviatedOid": "b674a2f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-04T20:29:01Z",
          "updatedAt": "2023-10-04T20:29:01Z",
          "comments": [
            {
              "originalPosition": 149,
              "body": "With the other examples gone from this section - this one feels a bit out of place. And not needed. \r\n```suggestion\r\n```",
              "createdAt": "2023-10-04T20:29:01Z",
              "updatedAt": "2023-10-04T20:29:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5i2s7G",
          "commit": {
            "abbreviatedOid": "0fa6127"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "This looks pretty good and does generally improve the structure. \r\nThe Decoy Digests, Hash Function Claim, Holder Public Key Claim subsections feel a bit out of place in section 7.  What would you think about moving them to subsections under 5.1.  Issuer-signed JWT Payload? The ToC might look something like this:\r\n\r\n![Screenshot 2023-10-04 at 3 08 50 PM](https://github.com/oauth-wg/oauth-selective-disclosure-jwt/assets/71398439/2990ded2-aba3-4559-bd28-e7b902a63477)\r\n\r\n\r\n",
          "createdAt": "2023-10-04T21:18:22Z",
          "updatedAt": "2023-10-04T21:18:22Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5i-KbN",
          "commit": {
            "abbreviatedOid": "0fa6127"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I'd like to see a few more subsections moved https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/347#pullrequestreview-1658506950 and one minor example removed https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/347/files#r1346423276 but otherwise this looks good. ",
          "createdAt": "2023-10-05T18:21:32Z",
          "updatedAt": "2023-10-05T18:21:32Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5i-8St",
          "commit": {
            "abbreviatedOid": "0fa6127"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-05T20:37:20Z",
          "updatedAt": "2023-10-05T20:37:20Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "```suggestion\r\nThe Disclosures are linked to the Issuer-signed JWT by including\r\nDisclosure digest values therein.\r\n```",
              "createdAt": "2023-10-05T20:37:20Z",
              "updatedAt": "2023-10-05T20:37:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5i-9Qy",
          "commit": {
            "abbreviatedOid": "0fa6127"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-05T20:38:53Z",
          "updatedAt": "2023-10-05T20:38:54Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "```suggestion\r\nWhen issuing to a Holder, the Issuer includes all the relevant Disclosures in the SD-JWT.\r\n\r\nWhen presenting to a Verifier, the Holder sends only the selected set of the Disclosures in the SD-JWT.\r\n```\r\nconsistency here felt better?",
              "createdAt": "2023-10-05T20:38:54Z",
              "updatedAt": "2023-10-05T20:38:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5i--Fv",
          "commit": {
            "abbreviatedOid": "0fa6127"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-05T20:40:48Z",
          "updatedAt": "2023-10-05T20:40:48Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "```suggestion\r\nnone, parts of, or all Disclosures. For data that the Holder does not want to reveal\r\n```\r\n`parts of ` feels a little off, but `all` is part of `multiple`..",
              "createdAt": "2023-10-05T20:40:48Z",
              "updatedAt": "2023-10-05T20:40:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5i--sC",
          "commit": {
            "abbreviatedOid": "0fa6127"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-05T20:42:41Z",
          "updatedAt": "2023-10-05T20:42:41Z",
          "comments": [
            {
              "originalPosition": 99,
              "body": "```suggestion\r\nFor selectively disclosable claims, the digests of the Disclosures are embedded into the Issuer-signed JWT instead of the claims themselves. The precise way of embedding depends on whether a claim is an object property (key-value pair) or an array element.\r\n```",
              "createdAt": "2023-10-05T20:42:41Z",
              "updatedAt": "2023-10-05T20:42:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5i-_Wx",
          "commit": {
            "abbreviatedOid": "0fa6127"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-05T20:44:51Z",
          "updatedAt": "2023-10-05T20:44:51Z",
          "comments": [
            {
              "originalPosition": 149,
              "body": "should this example be re-added to another section? it was added because people wanted to see an example of a KB-JWT header..",
              "createdAt": "2023-10-05T20:44:51Z",
              "updatedAt": "2023-10-05T20:44:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5i_AbB",
          "commit": {
            "abbreviatedOid": "0fa6127"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-05T20:47:11Z",
          "updatedAt": "2023-10-05T20:47:11Z",
          "comments": [
            {
              "originalPosition": 205,
              "body": "it almost feels like `# Advanced Features` ",
              "createdAt": "2023-10-05T20:47:11Z",
              "updatedAt": "2023-10-05T20:47:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5i_Ce3",
          "commit": {
            "abbreviatedOid": "0fa6127"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "reads so much better and flows more naturally - agree with Brian's suggested subsections 5.1.1~5.1.3. also made few suggestions",
          "createdAt": "2023-10-05T20:50:57Z",
          "updatedAt": "2023-10-05T20:50:57Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5i_Ee7",
          "commit": {
            "abbreviatedOid": "0fa6127"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-05T20:56:44Z",
          "updatedAt": "2023-10-05T20:56:44Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "`some` ?",
              "createdAt": "2023-10-05T20:56:44Z",
              "updatedAt": "2023-10-06T14:37:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5jBa1-",
          "commit": {
            "abbreviatedOid": "0fa6127"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-06T07:56:07Z",
          "updatedAt": "2023-10-06T07:56:08Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "Agree with the first part, not with the second. WDYT?\r\n```suggestion\r\nThe Disclosures are linked to the Issuer-signed JWT through the\r\ndigest values included therein.\r\n```",
              "createdAt": "2023-10-06T07:56:07Z",
              "updatedAt": "2023-10-06T07:56:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5jBboo",
          "commit": {
            "abbreviatedOid": "0fa6127"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-06T07:58:08Z",
          "updatedAt": "2023-10-06T07:58:08Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "```suggestion\r\nnone, some, or all Disclosures. For data that the Holder does not want to reveal\r\n```\r\nWDYT?",
              "createdAt": "2023-10-06T07:58:08Z",
              "updatedAt": "2023-10-06T07:58:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5jEEys",
          "commit": {
            "abbreviatedOid": "9aed42b"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-06T14:38:09Z",
          "updatedAt": "2023-10-06T14:38:10Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "WFM ",
              "createdAt": "2023-10-06T14:38:10Z",
              "updatedAt": "2023-10-06T14:38:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5kJzwa",
          "commit": {
            "abbreviatedOid": "0fa6127"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-16T15:19:25Z",
          "updatedAt": "2023-10-16T15:19:26Z",
          "comments": [
            {
              "originalPosition": 205,
              "body": "Since the new Section 7 will only contain the section \"Nested Data in SD-JWTs\", this section title will be removed anyway.",
              "createdAt": "2023-10-16T15:19:26Z",
              "updatedAt": "2023-10-16T15:19:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5kJ3lB",
          "commit": {
            "abbreviatedOid": "56cc146"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-16T15:24:43Z",
          "updatedAt": "2023-10-16T15:24:43Z",
          "comments": [
            {
              "originalPosition": 149,
              "body": "I agree that removing makes most sense. We're not showing any other headers in the document, there is nothing surprising in this header, and people can still decode the KB-JWT if they like to see a header.",
              "createdAt": "2023-10-16T15:24:43Z",
              "updatedAt": "2023-10-16T15:24:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5kUQCi",
          "commit": {
            "abbreviatedOid": "9410a89"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-17T18:01:59Z",
          "updatedAt": "2023-10-17T18:01:59Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5kevQS",
          "commit": {
            "abbreviatedOid": "9410a89"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-18T18:00:46Z",
          "updatedAt": "2023-10-18T18:00:46Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5k5qMX",
          "commit": {
            "abbreviatedOid": "9410a89"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-23T15:11:46Z",
          "updatedAt": "2023-10-23T15:11:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 348,
      "id": "PR_kwDOHTmVzM5b9GYU",
      "title": "Added JWT claims registration requests to IANA",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/348",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Added JWT claims registration requests to IANA (to fix issue #315)\r\n\r\nhttps://drafts.oauth.net/oauth-selective-disclosure-jwt/bc-IANA-JWT/draft-ietf-oauth-selective-disclosure-jwt.html#name-json-web-token-claims-regis",
      "createdAt": "2023-10-05T01:37:23Z",
      "updatedAt": "2023-10-16T15:09:52Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "fcc29853f5f605cfbd03c0b75ee805f8c71841a4",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "bc-IANA-JWT",
      "headRefOid": "10609e47c4dd94101e0408cfcb82fec5ac623b01",
      "closedAt": "2023-10-16T15:09:52Z",
      "mergedAt": "2023-10-16T15:09:52Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "904544670b0b68b5e6286fbbca5db5b5218bfbe3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5i-sSD",
          "commit": {
            "abbreviatedOid": "d1ade89"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-05T19:50:22Z",
          "updatedAt": "2023-10-05T19:50:23Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "do we need these headers `Object Property Disclosure Digests:`, `Array Element Disclosure Digest:`, `Disclosure Digest Hash Function:`..? they are the same as `claim description` values rn.",
              "createdAt": "2023-10-05T19:50:22Z",
              "updatedAt": "2023-10-05T19:50:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5i-tK9",
          "commit": {
            "abbreviatedOid": "d1ade89"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-05T19:53:04Z",
          "updatedAt": "2023-10-05T19:53:05Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "```suggestion\r\n*  Claim Description: Digests of Disclosures for object properties\r\n```\r\nI don't know... i could not understand `Object property disclosure digests`",
              "createdAt": "2023-10-05T19:53:04Z",
              "updatedAt": "2023-10-05T19:54:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5i-tw9",
          "commit": {
            "abbreviatedOid": "d1ade89"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-05T19:54:45Z",
          "updatedAt": "2023-10-05T19:54:46Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "```suggestion\r\n*  Claim Description: Digests of Disclosures for array elements\r\n```\r\nsame as above, i could not understand.. but maybe that's only me and what i am suggesting does not follow the convention..",
              "createdAt": "2023-10-05T19:54:46Z",
              "updatedAt": "2023-10-05T19:55:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5i-uNp",
          "commit": {
            "abbreviatedOid": "d1ade89"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "made suggestions to the claim descriptions as i was confused..",
          "createdAt": "2023-10-05T19:56:03Z",
          "updatedAt": "2023-10-05T19:56:03Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5i-ztF",
          "commit": {
            "abbreviatedOid": "d1ade89"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-05T20:12:03Z",
          "updatedAt": "2023-10-05T20:12:03Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "They are there to breakup the sets of bullets for each claim that run together without something. And I honestly don't know how else to do it with the markdown to xml to html/txt/etc tool chain in place. \r\n\r\nSo we kinda need something but it doesn't have to be these exactly. ",
              "createdAt": "2023-10-05T20:12:03Z",
              "updatedAt": "2023-10-05T20:12:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5i-z8r",
          "commit": {
            "abbreviatedOid": "d1ade89"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-05T20:12:47Z",
          "updatedAt": "2023-10-05T20:12:48Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "sure, if that's more understandable ",
              "createdAt": "2023-10-05T20:12:47Z",
              "updatedAt": "2023-10-05T20:12:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5i-0oF",
          "commit": {
            "abbreviatedOid": "d1ade89"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-05T20:14:48Z",
          "updatedAt": "2023-10-05T20:14:49Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "ok but it would be singular ",
              "createdAt": "2023-10-05T20:14:48Z",
              "updatedAt": "2023-10-05T20:14:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5i-07U",
          "commit": {
            "abbreviatedOid": "d1ade89"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-05T20:15:42Z",
          "updatedAt": "2023-10-05T20:15:42Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "so how about this?\r\n```suggestion\r\n*  Claim Description: Digest of the Disclosure for an array element\r\n```",
              "createdAt": "2023-10-05T20:15:42Z",
              "updatedAt": "2023-10-05T20:15:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5i_DSj",
          "commit": {
            "abbreviatedOid": "d1ade89"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-05T20:53:15Z",
          "updatedAt": "2023-10-05T20:53:15Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "I just saw this example https://www.rfc-editor.org/rfc/rfc7515#section-9.1.2, but yeah.\r\nmaybe use claim names as the `breakups`? ",
              "createdAt": "2023-10-05T20:53:15Z",
              "updatedAt": "2023-10-05T20:53:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5i_M-e",
          "commit": {
            "abbreviatedOid": "d1ade89"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-05T21:09:58Z",
          "updatedAt": "2023-10-05T21:09:59Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "actually, maybe `<br/>` can be used to breakup with no text needed .... ",
              "createdAt": "2023-10-05T21:09:58Z",
              "updatedAt": "2023-10-05T21:09:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5i_Pze",
          "commit": {
            "abbreviatedOid": "d1ade89"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-05T21:15:53Z",
          "updatedAt": "2023-10-05T21:15:53Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "that seems to work ok",
              "createdAt": "2023-10-05T21:15:53Z",
              "updatedAt": "2023-10-05T21:15:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5jbcaY",
          "commit": {
            "abbreviatedOid": "10609e4"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-10T15:40:46Z",
          "updatedAt": "2023-10-10T15:40:46Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5kJHAn",
          "commit": {
            "abbreviatedOid": "10609e4"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-16T14:20:12Z",
          "updatedAt": "2023-10-16T14:20:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 349,
      "id": "PR_kwDOHTmVzM5cDdR0",
      "title": "Request a media type for the JSON Serialization",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/349",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "for #327 \r\n\r\nsee https://drafts.oauth.net/oauth-selective-disclosure-jwt/bc/json-serialization-media-type-req/draft-ietf-oauth-selective-disclosure-jwt.html#name-media-type-registration",
      "createdAt": "2023-10-05T21:43:16Z",
      "updatedAt": "2023-10-16T15:08:29Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "fcc29853f5f605cfbd03c0b75ee805f8c71841a4",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "bc/json-serialization-media-type-req",
      "headRefOid": "a45bff26e416140fbb454d881dd2d846590ec08e",
      "closedAt": "2023-10-16T15:08:29Z",
      "mergedAt": "2023-10-16T15:08:29Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "bda84fc9430110238082799e849217beb13bb240"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5jQCYb",
          "commit": {
            "abbreviatedOid": "a45bff2"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-09T19:29:29Z",
          "updatedAt": "2023-10-09T19:29:29Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5jbdU9",
          "commit": {
            "abbreviatedOid": "a45bff2"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-10T15:42:37Z",
          "updatedAt": "2023-10-10T15:42:37Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5jbhsa",
          "commit": {
            "abbreviatedOid": "a45bff2"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-10T15:50:32Z",
          "updatedAt": "2023-10-10T15:50:33Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "to be consistent and bring clarity, we could change line 1125 to `To indicate that the content is a JWS compact serialized SD-JWT:` but Brian convinced me that no need because we do not really use the term compact serialized in the text and it is kind of obvious without the text changes I considered.",
              "createdAt": "2023-10-10T15:50:32Z",
              "updatedAt": "2023-10-10T15:50:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5kJGbP",
          "commit": {
            "abbreviatedOid": "a45bff2"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-16T14:19:06Z",
          "updatedAt": "2023-10-16T14:19:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 350,
      "id": "PR_kwDOHTmVzM5cJPPc",
      "title": "Improve wording (maybe) of one sentence ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/350",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "based roughly on feedback from Anders to draft-ietf-oauth-selective-disclosure-jwt at ietf.org\r\n\r\n\r\n",
      "createdAt": "2023-10-06T19:39:07Z",
      "updatedAt": "2023-10-17T17:57:53Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "fcc29853f5f605cfbd03c0b75ee805f8c71841a4",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "bc/wording-nit-from-anders",
      "headRefOid": "ed05318745210e2588a14f034ab22ed7de5ef254",
      "closedAt": "2023-10-16T15:07:14Z",
      "mergedAt": "2023-10-16T15:07:14Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "04448c0fbc4fe9e6bc57624c85fb8c3a29251306"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5jblAu",
          "commit": {
            "abbreviatedOid": "ed05318"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-10T15:57:11Z",
          "updatedAt": "2023-10-10T15:57:11Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5kJF-1",
          "commit": {
            "abbreviatedOid": "ed05318"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-16T14:18:15Z",
          "updatedAt": "2023-10-16T14:18:15Z",
          "comments": []
        }
      ]
    },
    {
      "number": 351,
      "id": "PR_kwDOHTmVzM5dApv2",
      "title": "Update affiliation",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/351",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-10-17T12:23:39Z",
      "updatedAt": "2023-10-27T10:05:32Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "f7fdcf0d35b02f6d1f6e9dbfc98eec56fa842a2d",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/update-affiliation",
      "headRefOid": "cc02c33445b5269431133fa92f5b4d8c00756f56",
      "closedAt": "2023-10-23T04:34:25Z",
      "mergedAt": "2023-10-23T04:34:25Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "dc4bba3fc79faafc54b8d6c20a4f64e636ce72c7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5kRIpr",
          "commit": {
            "abbreviatedOid": "cc02c33"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-17T12:39:54Z",
          "updatedAt": "2023-10-17T12:39:54Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5kevAA",
          "commit": {
            "abbreviatedOid": "cc02c33"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-18T18:00:09Z",
          "updatedAt": "2023-10-18T18:00:09Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5k1UKS",
          "commit": {
            "abbreviatedOid": "cc02c33"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-23T04:34:17Z",
          "updatedAt": "2023-10-23T04:34:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 353,
      "id": "PR_kwDOHTmVzM5dBqub",
      "title": "Add text on hash in KB-JWT",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/353",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Fixes Issue #346 \r\n\r\nLet's discuss whether we want to make the hash REQUIRED, OPTIONAL or RECOMMENDED. Current text is for REQUIRED. I'm leaning towards that in order to reduce optionality. It also means that there will be less situations where a Verifier accidentally accepts a KB-JWT without the hash (and we don't need to discuss mitigations against that).",
      "createdAt": "2023-10-17T14:33:38Z",
      "updatedAt": "2023-10-27T10:06:10Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "4b9a228b32dde8516bb9e0f814508fe5ca92cd8a",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/hash-in-kb-jwt",
      "headRefOid": "7b63d5623ad0a1281e50b4a11b29c1e22d09cbd2",
      "closedAt": "2023-10-23T16:08:10Z",
      "mergedAt": "2023-10-23T16:08:10Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "2b687565a18992fad305ff710aaabca43f9a3cce"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "ugh, sorry about the trailing whitespace! ",
          "createdAt": "2023-10-18T14:36:09Z",
          "updatedAt": "2023-10-18T14:36:09Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5kT215",
          "commit": {
            "abbreviatedOid": "dd39b7f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-17T17:07:22Z",
          "updatedAt": "2023-10-17T17:07:23Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "The hash isn't provided by the Verifier so suggest breaking the hash part out of the sentence that starts \"This document contains some data provided by the Verifier\".  Also be a bit more specific that it's integrity of the data that the holder sent to the Verifier.  Something like: \r\n\r\n```suggestion\r\nits private key. This document contains some data provided by the Verifier, such\r\nas a nonce, to ensure the freshness of the signature, and an audience value to\r\nindicate the intended audience for the document. It also includes a hash that ensures the\r\nintegrity of the data sent from the Holder to the Verifier. Details of the format of Key Binding JWTs are\r\n```",
              "createdAt": "2023-10-17T17:07:22Z",
              "updatedAt": "2023-10-17T17:07:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5kUGiX",
          "commit": {
            "abbreviatedOid": "dd39b7f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-17T17:40:10Z",
          "updatedAt": "2023-10-17T17:40:10Z",
          "comments": [
            {
              "originalPosition": 97,
              "body": "I am sorry for getting hung up on this one but I do worry that talking about \"an attacker that can intercept the Presentation\" here might cause a lot of questions/consternation/concern from readers and reviewers. So here's an attempt at saying more or less the same thing but with fewer words and no specific mention of an attacker. \r\n\r\n```suggestion\r\nin the Issuer-signed JWT. However, without enforcing a Key Binding JWT as\r\ndefined in (#kb-jwt), the integrity of the selected set of Disclosures the \r\nHolder elected to send is not ensured.\r\n```",
              "createdAt": "2023-10-17T17:40:10Z",
              "updatedAt": "2023-10-17T17:40:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5kUNrN",
          "commit": {
            "abbreviatedOid": "dd39b7f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Overall this looks good. Thanks! And `REQUIRED` seems right. I even manually checked one example `_sd_hash` value and got a matching value, which is good :) \r\nI'm \"requesting changes\" just for a couple of minor(ish) text suggestions. One of which was already mentioned in slack. ",
          "createdAt": "2023-10-17T17:56:00Z",
          "updatedAt": "2023-10-17T17:56:00Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5kZWK3",
          "commit": {
            "abbreviatedOid": "dd39b7f"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-18T07:59:35Z",
          "updatedAt": "2023-10-18T07:59:36Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "But the audience value is also not \"provided\" by the Verifier... so....\r\n```suggestion\r\nits private key. This document usually contains a nonce to ensure the freshness of the signature, an audience value to\r\nindicate the intended audience for the document, and a hash that ensures the\r\nintegrity of the data sent to the Verifier. Details of the format of Key Binding JWTs are\r\n```",
              "createdAt": "2023-10-18T07:59:35Z",
              "updatedAt": "2023-10-18T07:59:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5kZYEC",
          "commit": {
            "abbreviatedOid": "dd39b7f"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-18T08:01:37Z",
          "updatedAt": "2023-10-18T08:01:37Z",
          "comments": [
            {
              "originalPosition": 97,
              "body": "elected or selected?",
              "createdAt": "2023-10-18T08:01:37Z",
              "updatedAt": "2023-10-18T08:01:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5kcbHH",
          "commit": {
            "abbreviatedOid": "dd39b7f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-18T13:59:34Z",
          "updatedAt": "2023-10-18T13:59:34Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "Yeah, the audience value isn't \"provided\" by the Verifier exactly but it could be from the verifier's metadata or HTTPS cert or something so does kinda come from the verifier. Also \"provided\" was used in the text prior to this PR so I was just keeping with that. But you are right (as you usually are!). Here's some proposed text riffing on your text that drops \"usually\" because the KB-JWT is defined to have these things and is a bit more specific that it's integrity of the data that the holder sent to the Verifier.\r\n\r\n```suggestion\r\nits private key. This document contains a nonce to ensure the freshness of the signature, an audience value to\r\nindicate the intended audience for the document, and a hash that ensures the\r\nintegrity of the data sent from the Holder to the Verifier. Details of the format of Key Binding JWTs are\r\n```",
              "createdAt": "2023-10-18T13:59:34Z",
              "updatedAt": "2023-10-18T13:59:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5kcc-y",
          "commit": {
            "abbreviatedOid": "dd39b7f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-18T14:02:41Z",
          "updatedAt": "2023-10-18T14:02:42Z",
          "comments": [
            {
              "originalPosition": 97,
              "body": "The word \"selected\" was already in the sentence earlier so I went with \"elected\" for word choice variety. But \"selected\" would be fine, if you think it's better/clearer?   ",
              "createdAt": "2023-10-18T14:02:41Z",
              "updatedAt": "2023-10-18T14:02:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5kckB6",
          "commit": {
            "abbreviatedOid": "dd39b7f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-18T14:13:48Z",
          "updatedAt": "2023-10-18T14:13:48Z",
          "comments": [
            {
              "originalPosition": 97,
              "body": "or ... change so that \"selected\" is used just once? \r\n\r\n```suggestion\r\nin the Issuer-signed JWT. However, without enforcing a Key Binding JWT as\r\ndefined in (#kb-jwt), the integrity of the set of Disclosures the \r\nHolder selected to send is not ensured.\r\n```",
              "createdAt": "2023-10-18T14:13:48Z",
              "updatedAt": "2023-10-18T14:13:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5kcve1",
          "commit": {
            "abbreviatedOid": "0a33c6a"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-18T14:29:58Z",
          "updatedAt": "2023-10-18T14:29:59Z",
          "comments": [
            {
              "originalPosition": 95,
              "body": "```suggestion\r\nIn a Presentation, the Issuer-signed JWT is integrity-protected by the Issuer's\r\nsignature, and the Disclosures are integrity-protected by the digests included\r\nin the Issuer-signed JWT. However, without enforcing a Key Binding JWT as\r\ndefined in (#kb-jwt), the integrity of the set of Disclosures the\r\nHolder selected to send is not ensured.\r\n\r\n```",
              "createdAt": "2023-10-18T14:29:58Z",
              "updatedAt": "2023-10-18T14:29:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5kdB0V",
          "commit": {
            "abbreviatedOid": "8eae783"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-18T15:00:38Z",
          "updatedAt": "2023-10-18T15:00:38Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5keuLm",
          "commit": {
            "abbreviatedOid": "8eae783"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-18T17:58:07Z",
          "updatedAt": "2023-10-18T17:58:07Z",
          "comments": [
            {
              "originalPosition": 94,
              "body": "```suggestion\r\nHolder disclosed is not ensured.\r\n```",
              "createdAt": "2023-10-18T17:58:07Z",
              "updatedAt": "2023-10-18T17:58:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5keu1T",
          "commit": {
            "abbreviatedOid": "8eae783"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-18T17:59:43Z",
          "updatedAt": "2023-10-18T17:59:43Z",
          "comments": [
            {
              "originalPosition": 94,
              "body": "I might rework the phrasing of this section,\r\n\r\nThe specific set of disclosures presented MAY be integrity protected through the use of a hash or other means, etc... it reads a bit awkward as is ",
              "createdAt": "2023-10-18T17:59:43Z",
              "updatedAt": "2023-10-18T17:59:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5keu7c",
          "commit": {
            "abbreviatedOid": "8eae783"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-18T17:59:56Z",
          "updatedAt": "2023-10-18T17:59:56Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5k5DHM",
          "commit": {
            "abbreviatedOid": "712a042"
          },
          "author": "jogu",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T14:09:15Z",
          "updatedAt": "2023-10-23T14:11:13Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "I think (but am not entirely sure) that \"Presentation\" includes the key binding jwt, but I think the hash should exclude the key binding jwt? ('Presentation' doesn't seem to be a defined term, I opened https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/356 )",
              "createdAt": "2023-10-23T14:09:15Z",
              "updatedAt": "2023-10-23T14:11:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5k5Qfn",
          "commit": {
            "abbreviatedOid": "712a042"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T14:32:11Z",
          "updatedAt": "2023-10-23T14:32:11Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "```suggestion\r\n### Integrity Protection of the Presentation {#integrity-protection-of-the-presentation}\r\n```",
              "createdAt": "2023-10-23T14:32:11Z",
              "updatedAt": "2023-10-23T14:32:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5k5Q0w",
          "commit": {
            "abbreviatedOid": "712a042"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T14:32:44Z",
          "updatedAt": "2023-10-23T14:32:45Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "Good catch, thanks!\r\n```suggestion\r\n       8. Calculate the digest over the Issuer-signed JWT and Disclosures as defined in (#integrity-protection-of-the-presentation) and verify that it matches the value of the `_sd_hash` claim in the Key Binding JWT.\r\n```",
              "createdAt": "2023-10-23T14:32:45Z",
              "updatedAt": "2023-10-23T14:32:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5k5lbO",
          "commit": {
            "abbreviatedOid": "712a042"
          },
          "author": "jogu",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T15:03:56Z",
          "updatedAt": "2023-10-23T15:03:56Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "Suggestion looks good to me.",
              "createdAt": "2023-10-23T15:03:56Z",
              "updatedAt": "2023-10-23T15:03:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5k5wdW",
          "commit": {
            "abbreviatedOid": "712a042"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T15:21:09Z",
          "updatedAt": "2023-10-23T15:21:10Z",
          "comments": [
            {
              "originalPosition": 93,
              "body": "```suggestion\r\nin the Issuer-signed JWT. However, without enforcing the digest\r\nover the Issuer-signed JWT and Disclosures as defined in (#integrity-protection-of-the-presentation)\r\nin the Key Binding JWT as defined in (#kb-jwt), the integrity of the set of Disclosures the\r\n```",
              "createdAt": "2023-10-23T15:21:09Z",
              "updatedAt": "2023-10-23T15:21:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5k5bpS",
          "commit": {
            "abbreviatedOid": "c171f30"
          },
          "author": "balanza",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T14:49:17Z",
          "updatedAt": "2023-10-23T15:28:17Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Maybe you want to avoid this repository to rely on personal forks?",
              "createdAt": "2023-10-23T14:49:17Z",
              "updatedAt": "2023-10-23T15:28:17Z"
            },
            {
              "originalPosition": 5,
              "body": "Maybe you want to avoid this repository to rely on personal forks?\r\n\r\n(same as above)",
              "createdAt": "2023-10-23T14:49:44Z",
              "updatedAt": "2023-10-23T15:28:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5k51FY",
          "commit": {
            "abbreviatedOid": "c171f30"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T15:29:25Z",
          "updatedAt": "2023-10-23T15:29:26Z",
          "comments": [
            {
              "originalPosition": 94,
              "body": "```suggestion\r\nin the Issuer-signed JWT. If used, the KB-JWT, besides proving Key Binding, protects the integrity of the\r\nset of Disclosures the Holder disclosed.\r\n```",
              "createdAt": "2023-10-23T15:29:25Z",
              "updatedAt": "2023-10-23T15:29:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5k52gv",
          "commit": {
            "abbreviatedOid": "e4a1574"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-23T15:32:12Z",
          "updatedAt": "2023-10-23T15:32:12Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5k52lk",
          "commit": {
            "abbreviatedOid": "e4a1574"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T15:32:22Z",
          "updatedAt": "2023-10-23T15:32:22Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "This is the branch (not a personal fork) where this feature was developed. The reference to the branch will be removed again as soon as the feature has been merged to main.",
              "createdAt": "2023-10-23T15:32:22Z",
              "updatedAt": "2023-10-23T15:32:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5k52oX",
          "commit": {
            "abbreviatedOid": "e4a1574"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T15:32:28Z",
          "updatedAt": "2023-10-23T15:32:28Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "as above",
              "createdAt": "2023-10-23T15:32:28Z",
              "updatedAt": "2023-10-23T15:32:28Z"
            }
          ]
        }
      ]
    },
    {
      "number": 354,
      "id": "PR_kwDOHTmVzM5dCBWx",
      "title": "Rewrite unlinkability considerations",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/354",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [
        "danielfett"
      ],
      "labels": [],
      "body": "Addresses Issue #342 \r\n\r\nInstead of just adding text re the key binding keys, I rewrote the whole section, as the previous one was more of a placeholder.",
      "createdAt": "2023-10-17T15:21:29Z",
      "updatedAt": "2024-02-13T16:39:32Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "c6bebaa649fe9d3974ca0cdc002da42341ebfd74",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/fix-342-batch-key-correllation",
      "headRefOid": "3fbe94182b9107281c1d1e5ea490ba9038c0c39d",
      "closedAt": "2024-02-13T16:39:32Z",
      "mergedAt": "2024-02-13T16:39:32Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "b3816fa9628e2a94deaa0ea744132914103c21d7"
      },
      "comments": [
        {
          "author": "Denisthemalice",
          "authorAssociation": "NONE",
          "body": "Instead of one section (12.4) about \"Unlinkability\", there should be two sections:\r\n\r\n\"Unlinkability between Verifiers\" means that two Verifiers when colluding, should not be able to know whether two digital presentations are presented by the same user.\r\n\r\n\"Untrackability by an issuer\" means that an Issuer should not be able to know to which Verifier a digital presentation will be or has been presented by a user.\r\n\r\nNote:  In the second case, there is no need to have a collusion between an Issuer and a Verifier.\r\n",
          "createdAt": "2024-02-09T09:18:53Z",
          "updatedAt": "2024-02-09T09:18:53Z"
        },
        {
          "author": "Denisthemalice",
          "authorAssociation": "NONE",
          "body": "\r\nInstead of one section about \"Unlinkability\", there should be two sections:\r\n\r\n\"**Unlinkability between Verifiers**\" means that two Verifiers when colluding, should not be able to know whether two digital presentations are presented by the same user.\r\n\r\n\"**Untrackability by an issuer**\" means that an Issuer should not be able to know to which Verifier a digital presentation will be or has been presented by a user.\r\n\r\nNote:  In the second case, there is no need to have a collusion between an Issuer and a Verifier.\r\n",
          "createdAt": "2024-02-09T09:21:03Z",
          "updatedAt": "2024-02-09T09:21:03Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "For the sake of having a starting point, the authors decided to merge this pull request to have a starting point in the document. The current text seems to be a rough consensus. We are open to modifying the text later on, as already mentioned above.",
          "createdAt": "2024-02-13T16:39:20Z",
          "updatedAt": "2024-02-13T16:39:20Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5kUSO7",
          "commit": {
            "abbreviatedOid": "52c9f95"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-17T18:06:06Z",
          "updatedAt": "2023-10-17T18:06:06Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5kesQG",
          "commit": {
            "abbreviatedOid": "52c9f95"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-18T17:53:06Z",
          "updatedAt": "2023-10-18T17:53:07Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "```suggestion\r\nIn both cases, unlinkability is limited to cases where the\r\n```",
              "createdAt": "2023-10-18T17:53:06Z",
              "updatedAt": "2023-10-18T17:53:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5kes3C",
          "commit": {
            "abbreviatedOid": "52c9f95"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-18T17:54:42Z",
          "updatedAt": "2023-10-18T17:54:42Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "```suggestion\r\nIssuer/Verifier unlinkability cannot be achieved with SD-JWT, as the issued\r\n```",
              "createdAt": "2023-10-18T17:54:42Z",
              "updatedAt": "2023-10-18T17:54:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ketO7",
          "commit": {
            "abbreviatedOid": "52c9f95"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-18T17:55:38Z",
          "updatedAt": "2023-10-18T17:55:38Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5koijE",
          "commit": {
            "abbreviatedOid": "7950076"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-19T17:59:43Z",
          "updatedAt": "2023-10-19T17:59:43Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "```suggestion\r\n  not be able to tell that a user that has received a credential from the Issuer\r\n```",
              "createdAt": "2023-10-19T17:59:43Z",
              "updatedAt": "2023-10-19T17:59:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5k0mk7",
          "commit": {
            "abbreviatedOid": "12d6a6c"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I do not agree with some of the text, especially around issuer/verifier ublinkability",
          "createdAt": "2023-10-22T23:12:00Z",
          "updatedAt": "2023-10-22T23:28:09Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "```suggestion\n- Issuer/Verifier unlinkability: An Issuer colluding with a Verifier should\n  not be able to tell to which Verifier a user has presented a credential issued from this Issuer.\n```\n",
              "createdAt": "2023-10-22T23:12:01Z",
              "updatedAt": "2023-10-22T23:28:10Z"
            },
            {
              "originalPosition": 31,
              "body": "I don't understand this. Three party model in itself allows to realize issuer/verifier unlinkability. Are you trying to say that when the issuer directly forwards to the verifier it is not achieved? But in that case no need for sd-jwt.\n\n```suggestion\n```\n",
              "createdAt": "2023-10-22T23:14:57Z",
              "updatedAt": "2023-10-22T23:28:10Z"
            },
            {
              "originalPosition": 23,
              "body": "Really? There can be multiple same people with the same birthday. In which case, if the holder discloses only the birthdate to the verifier, the issuer/verifier unlinkability is possible.",
              "createdAt": "2023-10-22T23:26:28Z",
              "updatedAt": "2023-10-22T23:28:10Z"
            },
            {
              "originalPosition": 33,
              "body": "```suggestion\nVerifier/Verifier unlinkablility can be achieved using batch issuance. A batch\n```\n",
              "createdAt": "2023-10-22T23:26:59Z",
              "updatedAt": "2023-10-22T23:28:10Z"
            },
            {
              "originalPosition": 14,
              "body": "Is it really sessions..?",
              "createdAt": "2023-10-22T23:27:32Z",
              "updatedAt": "2023-10-22T23:28:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5k28ev",
          "commit": {
            "abbreviatedOid": "12d6a6c"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T09:43:48Z",
          "updatedAt": "2023-10-23T09:43:48Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "Yes, but in that case, the information was obviously not enough to identify the user.",
              "createdAt": "2023-10-23T09:43:48Z",
              "updatedAt": "2023-10-23T09:43:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5k29Ak",
          "commit": {
            "abbreviatedOid": "12d6a6c"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T09:45:02Z",
          "updatedAt": "2023-10-23T09:45:02Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "The three party model does not realize issuer/verifier unlinkability (per the definition above, it assumes colluding issuers and verifiers). This is one of the major differences between salted-hash based approaches and other approaches using more advanced cryptography.",
              "createdAt": "2023-10-23T09:45:02Z",
              "updatedAt": "2023-10-23T09:45:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5k29KB",
          "commit": {
            "abbreviatedOid": "12d6a6c"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T09:45:23Z",
          "updatedAt": "2023-10-23T09:45:23Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "I'd like to keep this as-is.",
              "createdAt": "2023-10-23T09:45:23Z",
              "updatedAt": "2023-10-23T09:45:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5k2-hR",
          "commit": {
            "abbreviatedOid": "12d6a6c"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T09:48:27Z",
          "updatedAt": "2023-10-23T09:48:27Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "You're right, 'sessions' is not a concept we have used previously. How about this?\r\n```suggestion\r\nUnlinkability is a property that prevents an adversary from associating credential\r\npresentations in certain ways. Two types of unlinkability are often considered:\r\n```",
              "createdAt": "2023-10-23T09:48:27Z",
              "updatedAt": "2023-10-23T09:48:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5k2_Y0",
          "commit": {
            "abbreviatedOid": "12d6a6c"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T09:50:06Z",
          "updatedAt": "2023-10-23T09:50:07Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "In the proposed text, the Verifier must collude with multiple Verifiers. I think my original definition describes a stronger security property. Here's an attempt to make it more readable:\r\n\r\n```suggestion\r\n- Issuer/Verifier unlinkability: An Issuer colluding with a Verifier should\r\n  not be able to tell that a user has presented a credential from the Issuer\r\n  to this Verifier.\r\n```",
              "createdAt": "2023-10-23T09:50:06Z",
              "updatedAt": "2023-10-23T09:50:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5k3Xd-",
          "commit": {
            "abbreviatedOid": "12d6a6c"
          },
          "author": "Denisthemalice",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T10:45:19Z",
          "updatedAt": "2023-10-23T10:45:19Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "Issuer/Verifier unlinkability: \r\n\r\nThe basic property should not include the wording \"colluding with a Verifier\".\r\n\r\nProposal: An Issuer should not be able to know to which Verifier data derived from a credential issued by the Issuer has been presented to the Verifier.",
              "createdAt": "2023-10-23T10:45:19Z",
              "updatedAt": "2023-10-23T10:45:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5k5_wn",
          "commit": {
            "abbreviatedOid": "12d6a6c"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T15:50:29Z",
          "updatedAt": "2023-10-23T15:50:30Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "`from associating credential presentations of the same user to know about the behavior of that user beyond that user's consent`?\r\nProbably some sentence is needed on why associating is a problem - ie adversary being able to know more about the user than it is supposed to, I think?",
              "createdAt": "2023-10-23T15:50:29Z",
              "updatedAt": "2023-10-23T15:50:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5k6AnD",
          "commit": {
            "abbreviatedOid": "12d6a6c"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T15:52:17Z",
          "updatedAt": "2023-10-23T15:52:17Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "I think your argument is that the example I give above still does not prevent issuer/verifier unlinkability in sd-jwt because the user's public key becomes the correlation factor, which I think needs to be explicitly stated",
              "createdAt": "2023-10-23T15:52:17Z",
              "updatedAt": "2023-10-23T15:52:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5lnUJU",
          "commit": {
            "abbreviatedOid": "12d6a6c"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-30T18:16:27Z",
          "updatedAt": "2023-10-30T18:16:28Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "mechanically I think there are 2 things that are trying to fit into a single sentence about \"Issuer/Verifier unlinkability\" here:\r\n\r\n1. phone home / issuer's learning when a specific credential is presented (this is timing of presentation, assumes presentations leak information about credentials)\r\n2. tracking / fingerprinting of the subject by the issuer.\r\n\r\nThe first is mitigated partially by heard privacy.\r\nThe second requires the issuer not to assign or hide correlation capable identifiers.... and even the signature is such an identifier.\r\n\r\nI suggest starting by just writing out the behaviors you want to see, and don't want to see... and then don't give the same name to multiple behaviors.\r\n\r\n ",
              "createdAt": "2023-10-30T18:16:27Z",
              "updatedAt": "2023-10-30T18:17:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5lndcy",
          "commit": {
            "abbreviatedOid": "12d6a6c"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-30T18:40:14Z",
          "updatedAt": "2023-10-30T18:40:15Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "imo the threat is about distinguishability, it has to do with the anonymity set of the data subject... You might find t-closenss / or similar concepts helpful. https://en.wikipedia.org/wiki/T-closeness\r\n\r\nIssuer / Verifier: Issuers are distinguishable, Subjects are distinguishable (signature correlation), Holders are not distinguishable (batch issuance).\r\n\r\nVerifier / Verifier: Issuers are distinguishable, Subjects are not distinguishable (linked secret), Holders are not distinguishable (zkp).\r\n\r\nIn all cases, we assume multiple verifiers process presentations and are compromised, and then we evaluate the damage done to data subjects.\r\n\r\n",
              "createdAt": "2023-10-30T18:40:14Z",
              "updatedAt": "2023-10-30T18:40:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5lnhE7",
          "commit": {
            "abbreviatedOid": "12d6a6c"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-30T18:47:03Z",
          "updatedAt": "2023-10-30T18:47:03Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": ".... what I said above is not right... I think \"Issuer / Verifier\" unlinkability is a bad name... I think the security property we care about there is timing / metadata analysis.",
              "createdAt": "2023-10-30T18:47:03Z",
              "updatedAt": "2023-10-30T18:47:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5lnkb8",
          "commit": {
            "abbreviatedOid": "12d6a6c"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-30T18:56:07Z",
          "updatedAt": "2023-10-30T18:56:07Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "![Screen Shot 2023-10-30 at 1 53 04 PM](https://github.com/oauth-wg/oauth-selective-disclosure-jwt/assets/8295856/9f03157d-d735-4012-bafb-9338f9a96cd4)\r\n\r\nNot sure if this helps, but the reason Issuer / Verifier Unlinkability is not achievable is the signature on the credential... batch issuance does not solve this, it just makes the attacker count unique signatures that are observed in issuers and verifiers.\r\n\r\n",
              "createdAt": "2023-10-30T18:56:07Z",
              "updatedAt": "2023-10-30T18:56:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5lnlct",
          "commit": {
            "abbreviatedOid": "12d6a6c"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-30T18:58:39Z",
          "updatedAt": "2023-10-30T18:58:39Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "I think these labels are possibly the wrong words to be using especially because \"verifier / verifier\" unlinkability seems stronger than issuer / verifier.... but is actually not.\r\n\r\n",
              "createdAt": "2023-10-30T18:58:39Z",
              "updatedAt": "2023-10-30T18:58:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5lnmCd",
          "commit": {
            "abbreviatedOid": "12d6a6c"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-30T19:00:03Z",
          "updatedAt": "2023-10-30T19:00:03Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "Its possible that \"single use unlinkability\" and \"multiple use unlinkability\" might be better.",
              "createdAt": "2023-10-30T19:00:03Z",
              "updatedAt": "2023-10-30T19:00:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5lnnnL",
          "commit": {
            "abbreviatedOid": "12d6a6c"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-30T19:04:12Z",
          "updatedAt": "2023-10-30T19:04:12Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "The privacy pass architecture uses this language:\r\n\r\n>  These proofs, or tokens, are\r\n>  private in the sense that a given token cannot be linked to the\r\n>  protocol interaction where that token was initially issued.\r\n   \r\n- https://datatracker.ietf.org/doc/draft-ietf-privacypass-architecture/",
              "createdAt": "2023-10-30T19:04:12Z",
              "updatedAt": "2023-10-30T19:04:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5qNRRP",
          "commit": {
            "abbreviatedOid": "12d6a6c"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-14T13:53:34Z",
          "updatedAt": "2023-12-14T13:53:35Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "No, what I want to say is: The amount of information that can identify a user varies depending on context knowledge and the set of users that exist. If I'm looking at a club with 12 members all having a different birthdates, the birthdate is sufficient identifying information. If there would be a specific credential for sitting US presidents, unlinkability cannot be achieved at all, even if only the credential type is shared.\r\n\r\nSo the point is: For batch issuance, even if all keys and so on are fresh for each credential, there is an upper limit on the grade of unlinkability achievable, and it depends on the dataset shared and context knowledge etc.",
              "createdAt": "2023-12-14T13:53:35Z",
              "updatedAt": "2023-12-14T13:53:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5qNSEf",
          "commit": {
            "abbreviatedOid": "12d6a6c"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-14T13:55:07Z",
          "updatedAt": "2023-12-14T13:55:07Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "```suggestion\r\nIssuer/Verifier unlinkability cannot be achieved in salted-hash based approaches to credentials, such as SD-JWT, as the issued\r\ncredential is directly forwarded to the Verifier.\r\n```",
              "createdAt": "2023-12-14T13:55:07Z",
              "updatedAt": "2023-12-14T13:55:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5qN_Lu",
          "commit": {
            "abbreviatedOid": "d4431fd"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-14T15:16:04Z",
          "updatedAt": "2023-12-14T15:16:10Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "The difference is effectively whether the Verifier is cooperating with the attacker or whether it is just following protocol; I'll split this up accordingly.",
              "createdAt": "2023-12-14T15:16:04Z",
              "updatedAt": "2023-12-14T15:16:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5qOOhs",
          "commit": {
            "abbreviatedOid": "d4431fd"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-14T15:45:29Z",
          "updatedAt": "2023-12-14T15:45:30Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "@OR13  I'll make a bigger change to this PR hopefully addressing some of your comments, but certainly not everything. I propose that we try to get to an \"acceptable\" description first, get that merged, and then dig into the details in a separate issue.",
              "createdAt": "2023-12-14T15:45:30Z",
              "updatedAt": "2023-12-14T15:45:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5qQkVc",
          "commit": {
            "abbreviatedOid": "d352b26"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-14T20:56:42Z",
          "updatedAt": "2023-12-14T20:56:43Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "This sentence doesn't feel quite right/natural to me. Though I'm not sure this suggestion is particularly great either: \r\n\r\n```suggestion\r\nUnlinkability is a property whereby adversaries are prevented from correlating\r\ncredential presentations of the same user (beyond the user's consent).\r\n```",
              "createdAt": "2023-12-14T20:56:42Z",
              "updatedAt": "2023-12-14T20:56:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5qRYkt",
          "commit": {
            "abbreviatedOid": "d352b26"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-15T00:01:54Z",
          "updatedAt": "2023-12-15T00:01:54Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "```suggestion\r\n * Issuer/Verifier Unlinkability (Honest Verifier): An Issuer of a credential\r\n   should not be able to know that a user presented the credential to a certain\r\n   Verifier (that is behaving according to protocol).\r\n```\r\n\r\nIn order of priority the Issuer must not know nothing about the use of the credential, therefore It would not be able to tell this information to anybody",
              "createdAt": "2023-12-15T00:01:54Z",
              "updatedAt": "2023-12-15T00:03:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5qRZPo",
          "commit": {
            "abbreviatedOid": "d352b26"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-12-15T00:05:59Z",
          "updatedAt": "2023-12-15T00:11:56Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "@danielfett this is quite similar, or equivalent, to the previous one. If the concrete information is in the brackets probably we might try a rewording without the brackets, WDYT?",
              "createdAt": "2023-12-15T00:06:00Z",
              "updatedAt": "2023-12-15T00:11:56Z"
            },
            {
              "originalPosition": 40,
              "body": "```suggestion\r\nUnlinkability applies only when the disclosed claims do not hold any information that could directly or indirectly lead to the identification of the user. For\r\n```",
              "createdAt": "2023-12-15T00:07:48Z",
              "updatedAt": "2023-12-15T00:11:56Z"
            },
            {
              "originalPosition": 45,
              "body": "```suggestion\r\ndiscloses a birthdate to one Verifier and a postal code to another Verifier, the two Verifiers should not be able to determine that they were interacting with the same user.\r\n```",
              "createdAt": "2023-12-15T00:09:29Z",
              "updatedAt": "2023-12-15T00:11:56Z"
            },
            {
              "originalPosition": 56,
              "body": "I didn't fully get this, or probably we might try to simplify this text",
              "createdAt": "2023-12-15T00:11:28Z",
              "updatedAt": "2023-12-15T00:11:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5qUlo6",
          "commit": {
            "abbreviatedOid": "5114d21"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-15T12:08:29Z",
          "updatedAt": "2023-12-15T12:08:29Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "You're right, let's try to remove the brackets.",
              "createdAt": "2023-12-15T12:08:29Z",
              "updatedAt": "2023-12-15T12:08:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5qUmNm",
          "commit": {
            "abbreviatedOid": "5114d21"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-15T12:09:04Z",
          "updatedAt": "2023-12-15T12:09:05Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "```suggestion\r\n * Issuer/Verifier Unlinkability (Honest Verifier): An Issuer of a credential\r\n   should not be able to know that a user presented the credential to a certain\r\n   Verifier that is behaving according to protocol.\r\n * Issuer/Verifier Unlinkability (Colluding/Compromised Verifier): An Issuer of a\r\n   credential should not be able to tell that a user presented the credential to\r\n   a certain Verifier, even if the Verifier colludes with the Issuer or becomes\r\n   compromised and leaks stored credentials from presentations.\r\n```",
              "createdAt": "2023-12-15T12:09:05Z",
              "updatedAt": "2023-12-15T12:09:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5qUpX_",
          "commit": {
            "abbreviatedOid": "e043300"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-15T12:13:23Z",
          "updatedAt": "2023-12-15T12:13:23Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "How about this?\r\n```suggestion\r\nContrary to that, Issuer/Verifier unlinkability with an honest Verifier can generally be achieved.\r\nHowever, a callback from the Verifier to the Issuer, for example, for a revocation\r\ncheck, can reveal information about the use of the credential to the Verifier. Therefore,\r\nsuch callbacks SHOULD be avoided, or, if that is not possible, MUST be done in a\r\nprivacy-preserving way where details about the credential are not revealed to\r\nthe Issuer. (Even then, timing of such requests might remain as a side-channel.)\r\n```",
              "createdAt": "2023-12-15T12:13:23Z",
              "updatedAt": "2023-12-15T12:13:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5qUpsr",
          "commit": {
            "abbreviatedOid": "e043300"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-15T12:13:53Z",
          "updatedAt": "2023-12-15T12:13:53Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "@peppelinux ",
              "createdAt": "2023-12-15T12:13:53Z",
              "updatedAt": "2023-12-15T12:13:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5qUqOT",
          "commit": {
            "abbreviatedOid": "e043300"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-15T12:14:40Z",
          "updatedAt": "2023-12-15T12:14:40Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "I like the 'limited' wording a bit more, it shows that there is an upper bound.",
              "createdAt": "2023-12-15T12:14:40Z",
              "updatedAt": "2023-12-15T12:14:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5qVZw9",
          "commit": {
            "abbreviatedOid": "e043300"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "@danielfett I share my last comments that I'm sure that you'll consider \r\n\r\napproved, thank you!",
          "createdAt": "2023-12-15T13:21:41Z",
          "updatedAt": "2023-12-15T13:31:47Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "```suggestion\r\nUnlinkability is a property that prevents adversaries from correlating credential presentations of the same user beyond the user's consent.\r\n```",
              "createdAt": "2023-12-15T13:21:41Z",
              "updatedAt": "2023-12-15T13:31:47Z"
            },
            {
              "originalPosition": 41,
              "body": "```suggestion\r\nexample, when a taxpayer identification number is contained in the disclosed claims, the Issuer and\r\n```",
              "createdAt": "2023-12-15T13:26:26Z",
              "updatedAt": "2023-12-15T13:31:47Z"
            },
            {
              "originalPosition": 54,
              "body": "looks good, and I would also contribute with the followings\r\n\r\n`However, a callback from the Verifier to the Issuer, for example, for a revocation\r\ncheck, can reveal information about the use of the credential to the Verifier.` -> `A callback from the Verifier to the Issuer, such as a revocation check, could potentially disclose information about the credential's usage to the Verifier.`\r\n\r\nand also\r\n\r\n`Therefore,\r\nsuch callbacks SHOULD be avoided, or, if that is not possible, MUST be done in a\r\nprivacy-preserving way where details about the credential are not revealed to\r\nthe Issuer. (Even then, timing of such requests might remain as a side-channel.)` -> `Therefore, such callbacks SHOULD be avoided. If they are unavoidable, they MUST be executed in a manner that preserves privacy and does not disclose details about the credential to the Issuer. However, it's important to note that the timing of such requests could potentially serve as a side-channel.`\r\n",
              "createdAt": "2023-12-15T13:30:23Z",
              "updatedAt": "2023-12-15T13:31:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5qWZZN",
          "commit": {
            "abbreviatedOid": "e043300"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-15T14:48:27Z",
          "updatedAt": "2023-12-15T14:48:27Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "```suggestion\r\nContrary to that, Issuer/Verifier unlinkability with an honest Verifier can generally be achieved.\r\nHowever, a callback from the Verifier to the Issuer, such as a revocation check, could potentially\r\ndisclose information about the credential's usage to the Verifier. Therefore, such callbacks\r\nSHOULD be avoided. Where they are unavoidable, they MUST be executed in a manner that\r\npreserves privacy and does not disclose details about the credential to the Issuer. It is\r\nimportant to note that the timing of such requests could potentially serve as a side-channel.\r\n```",
              "createdAt": "2023-12-15T14:48:27Z",
              "updatedAt": "2023-12-15T14:48:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5qWacT",
          "commit": {
            "abbreviatedOid": "e043300"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-15T14:49:50Z",
          "updatedAt": "2023-12-15T14:49:50Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "How about this?\r\n```suggestion\r\nUnlinkability is a property whereby adversaries are prevented from correlating\r\ncredential presentations of the same user beyond the user's consent.\r\n```",
              "createdAt": "2023-12-15T14:49:50Z",
              "updatedAt": "2023-12-15T14:49:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5qWj0c",
          "commit": {
            "abbreviatedOid": "62b81f9"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-15T15:02:08Z",
          "updatedAt": "2023-12-15T15:02:08Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "likewise, dont worry and go ahead while you can :-)",
              "createdAt": "2023-12-15T15:02:08Z",
              "updatedAt": "2023-12-15T15:02:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5qY-sO",
          "commit": {
            "abbreviatedOid": "12d6a6c"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-15T21:12:13Z",
          "updatedAt": "2023-12-15T21:12:13Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "hey Dan, I don't love \"to tell\" and the concept of the speaking machines :-)\r\n\r\nWDYT about this\r\n\r\n````\r\nIssuer/Verifier unlinkability: If an Issuer and a Verifier were to collude, \r\nthey should not be able to determine that a user has presented \r\na credential from the Issuer to that Verifier.\r\n````",
              "createdAt": "2023-12-15T21:12:13Z",
              "updatedAt": "2023-12-15T21:12:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5q6tGX",
          "commit": {
            "abbreviatedOid": "5c22e9f"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-21T23:11:14Z",
          "updatedAt": "2023-12-21T23:11:14Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "```suggestion\r\nIssuer/Verifier unlinkability with a colluding or compromised Verifier cannot be\r\nachieved in salted-hash based selective disclosure approaches to credentials, such as SD-JWT, as the\r\nissued credential with the Issuer's signature is directly forwarded to the Verifier, who can forward it to\r\nthe Issuer, if the Issuer is malicious.\r\n```\r\n\r\nforwarding to the malicious Issuer part felt a little abrupt on the first read.",
              "createdAt": "2023-12-21T23:11:14Z",
              "updatedAt": "2023-12-21T23:11:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5q6uPA",
          "commit": {
            "abbreviatedOid": "5c22e9f"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-21T23:19:47Z",
          "updatedAt": "2023-12-21T23:19:47Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "```suggestion\r\nWithout unlinkability, an adversary might be able to learn more about the user than the user\r\nintended to disclose, for example:\r\n```",
              "createdAt": "2023-12-21T23:19:47Z",
              "updatedAt": "2023-12-21T23:19:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5q6ubJ",
          "commit": {
            "abbreviatedOid": "5c22e9f"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "thank you! feels much clearer. \r\ncould we include somewhere that issuer's signature can be used as a correlating factor?",
          "createdAt": "2023-12-21T23:21:12Z",
          "updatedAt": "2023-12-21T23:27:12Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "```suggestion\r\n * Issuer/Verifier Unlinkability (Honest Verifier): An Issuer of a credential\r\n   should not be able to know that a user presented the credential to a certain\r\n   Verifier that is behaving according to a protocol.\r\n```\r\nwhat is meant by protocol, here..?",
              "createdAt": "2023-12-21T23:21:12Z",
              "updatedAt": "2023-12-21T23:27:12Z"
            },
            {
              "originalPosition": 55,
              "body": "```suggestion\r\nContrary to that, Issuer/Verifier unlinkability with an honest Verifier can generally be achieved.\r\nHowever, a callback from the Verifier to the Issuer, such as a revocation check, could potentially\r\ndisclose information about the credential's usage to the Issuer. Therefore, such callbacks\r\nSHOULD be avoided. Where they are unavoidable, they MUST be executed in a manner that\r\npreserves privacy and does not disclose details about the credential to the Issuer. It is\r\nimportant to note that the timing of such requests could potentially serve as a side-channel.\r\n```",
              "createdAt": "2023-12-21T23:24:55Z",
              "updatedAt": "2023-12-21T23:27:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5r-r3K",
          "commit": {
            "abbreviatedOid": "e79074d"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-09T16:57:37Z",
          "updatedAt": "2024-01-09T16:57:37Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "```suggestion\r\n * Issuer/Verifier Unlinkability (Honest Verifier): An Issuer of a credential\r\n   should not be able to know that a user presented the credential to a certain\r\n   Verifier that is not behaving maliciously.\r\n```",
              "createdAt": "2024-01-09T16:57:37Z",
              "updatedAt": "2024-01-09T16:57:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5r-szo",
          "commit": {
            "abbreviatedOid": "eeb902e"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-09T16:59:26Z",
          "updatedAt": "2024-01-09T16:59:26Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "```suggestion\r\nIssuer/Verifier unlinkability with a colluding or compromised Verifier cannot be\r\nachieved in salted-hash based selective disclosure approaches, such as SD-JWT, as the\r\nissued credential with the Issuer's signature is directly forwarded to the Verifier, who can forward it to\r\nthe Issuer.\r\n```",
              "createdAt": "2024-01-09T16:59:26Z",
              "updatedAt": "2024-01-09T17:01:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5va-mj",
          "commit": {
            "abbreviatedOid": "bf228ac"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-08T06:17:58Z",
          "updatedAt": "2024-02-08T06:17:58Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "during OID4VCI privacy considerations discussion @jogu talked about the same verifier correlating the user across multiple presentations.",
              "createdAt": "2024-02-08T06:17:58Z",
              "updatedAt": "2024-02-08T06:17:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5va_Pe",
          "commit": {
            "abbreviatedOid": "bf228ac"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-08T06:20:27Z",
          "updatedAt": "2024-02-08T06:23:32Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "```suggestion\r\nissued credential with the Issuer's signature is directly presented to the Verifier, who can forward it to\r\n```\r\nthe first `directly presented/forwarded` is upon user consent from the wallet to the verifier, right? if so, presented feels more natural than forwarding..?",
              "createdAt": "2024-02-08T06:20:27Z",
              "updatedAt": "2024-02-08T06:23:32Z"
            },
            {
              "originalPosition": 53,
              "body": "I am not sure I am ok with `SHOULD be avoided`, given that there are ways to abstract from the issuer who is calling its status endpoint for example.\r\n\r\n```suggestion\r\ndisclose information about the credential's usage to the Issuer.\r\nWhere such callbacks are necessary, they MUST be executed in a manner that\r\n```",
              "createdAt": "2024-02-08T06:22:42Z",
              "updatedAt": "2024-02-08T06:23:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5viJqp",
          "commit": {
            "abbreviatedOid": "a1cbe27"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-08T20:42:52Z",
          "updatedAt": "2024-02-08T20:42:52Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "```suggestion\r\nVerifier/Verifier unlinkablility and presentation unlinkablility can be achieved using batch issuance: A batch\r\n```\r\n\r\nNow that https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/354/commits/a1cbe276fcd1b5d85ac00a8985e3fd0fb7039f13 introduced presentation unlinkability and the flow of this whole section (where the unlinkablility types are first described and then later discussed) it seems like it warrants a mention here. WDYT?",
              "createdAt": "2024-02-08T20:42:52Z",
              "updatedAt": "2024-02-08T20:54:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5vkbYt",
          "commit": {
            "abbreviatedOid": "9db3040"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-09T07:49:25Z",
          "updatedAt": "2024-02-09T07:49:25Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "This is solved now.",
              "createdAt": "2024-02-09T07:49:25Z",
              "updatedAt": "2024-02-09T07:49:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5vmiCz",
          "commit": {
            "abbreviatedOid": "3fbe941"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-09T13:20:36Z",
          "updatedAt": "2024-02-09T13:20:36Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5v9won",
          "commit": {
            "abbreviatedOid": "3fbe941"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-13T16:38:20Z",
          "updatedAt": "2024-02-13T16:38:20Z",
          "comments": []
        }
      ]
    },
    {
      "number": 361,
      "id": "PR_kwDOHTmVzM5d9GHq",
      "title": "Reset branch for example generation",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/361",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-10-27T10:01:14Z",
      "updatedAt": "2023-11-27T14:29:01Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "2b687565a18992fad305ff710aaabca43f9a3cce",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/reset-branch",
      "headRefOid": "de222e32d9fa6dac776963cb5e45d2ef898358b7",
      "closedAt": "2023-11-27T14:29:01Z",
      "mergedAt": "2023-11-27T14:29:01Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "3e30ae7492f9bf1834fe7cfc49c5880e97ff77e3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5ldkiB",
          "commit": {
            "abbreviatedOid": "de222e3"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "see that https://github.com/openwallet-foundation-labs/sd-jwt-python/pull/8 was merged so this seems good ",
          "createdAt": "2023-10-27T17:28:00Z",
          "updatedAt": "2023-10-27T18:39:29Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5nw6SA",
          "commit": {
            "abbreviatedOid": "de222e3"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-20T23:40:14Z",
          "updatedAt": "2023-11-20T23:40:14Z",
          "comments": []
        }
      ]
    },
    {
      "number": 362,
      "id": "PR_kwDOHTmVzM5eO1Sd",
      "title": "Update change controller for the Structured Syntax Suffix registration",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/362",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Update change controller for the Structured Syntax Suffix registration from IESG to IETF per IANA suggestion",
      "createdAt": "2023-10-31T13:11:54Z",
      "updatedAt": "2023-11-14T15:57:09Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "63c4ed6f39abc55f9a9c8c5ce6c9adaa9f71f0bc",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "iana-iesg-to-ietf",
      "headRefOid": "8c19857d9af0eeb9f732c5879d47fd40d979aaba",
      "closedAt": "2023-11-14T15:57:03Z",
      "mergedAt": "2023-11-14T15:57:03Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "e9a5fe053edff904c5f99ccfec9502346f639154"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5lu56P",
          "commit": {
            "abbreviatedOid": "e830c7d"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-31T16:45:13Z",
          "updatedAt": "2023-11-14T15:40:05Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5l_Hy6",
          "commit": {
            "abbreviatedOid": "071f5a4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-02T18:57:20Z",
          "updatedAt": "2023-11-02T18:57:20Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Well, that didn't work. Apparently I don't understand the github workflow/action build process well enough. ",
              "createdAt": "2023-11-02T18:57:20Z",
              "updatedAt": "2023-11-02T18:57:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5mAbrD",
          "commit": {
            "abbreviatedOid": "071f5a4"
          },
          "author": "c2bo",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-02T23:11:54Z",
          "updatedAt": "2023-11-02T23:11:54Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "The dependencies (like mmark) seem to be installed in the docker container of the github action -> You would need to modify the action version to switch to an older mmark version from what I understand?",
              "createdAt": "2023-11-02T23:11:54Z",
              "updatedAt": "2023-11-02T23:11:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5mAkmY",
          "commit": {
            "abbreviatedOid": "071f5a4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-02T23:46:17Z",
          "updatedAt": "2023-11-02T23:46:17Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Maybe? I'm honestly not sure how to do that or even which action or how/if its versioned. \r\n\r\nhttps://github.com/martinthomson/i-d-template/pull/412/files is the change to action/Dockerfile in the martinthomson/i-d-template FWIW. \r\n\r\nI was just trying for quick workaround here though. And chasing down the main issue later. But maybe a quick workaround isn't doable. ",
              "createdAt": "2023-11-02T23:46:17Z",
              "updatedAt": "2023-11-02T23:46:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5mFFCC",
          "commit": {
            "abbreviatedOid": "071f5a4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-03T12:49:35Z",
          "updatedAt": "2023-11-03T12:49:35Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "I think you're right and I just need to figure out how to do that. Going to take this out in the meantime tho. ",
              "createdAt": "2023-11-03T12:49:35Z",
              "updatedAt": "2023-11-03T12:49:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5mFW3m",
          "commit": {
            "abbreviatedOid": "071f5a4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-03T13:29:11Z",
          "updatedAt": "2023-11-03T13:29:11Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "I clearly have no idea what I'm doing ... :( ",
              "createdAt": "2023-11-03T13:29:11Z",
              "updatedAt": "2023-11-03T13:29:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5mFaO-",
          "commit": {
            "abbreviatedOid": "6a13197"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-03T13:36:11Z",
          "updatedAt": "2023-11-03T13:36:11Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "that doesn't work as i'd naively hoped either ",
              "createdAt": "2023-11-03T13:36:11Z",
              "updatedAt": "2023-11-03T13:36:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5mKeld",
          "commit": {
            "abbreviatedOid": "e830c7d"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-05T17:15:35Z",
          "updatedAt": "2023-11-14T15:40:05Z",
          "comments": []
        }
      ]
    },
    {
      "number": 364,
      "id": "PR_kwDOHTmVzM5ejDN5",
      "title": "redo some list indentations to work with mmark 2.2.40",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/364",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "These are two lists that had indentation changed and I think they look ok:\r\n\r\nhttps://drafts.oauth.net/oauth-selective-disclosure-jwt/mmark-40-lists/draft-ietf-oauth-selective-disclosure-jwt.html#name-verification-and-processing \r\n\r\nhttps://drafts.oauth.net/oauth-selective-disclosure-jwt/mmark-40-lists/draft-ietf-oauth-selective-disclosure-jwt.html#name-verification-by-the-verifie",
      "createdAt": "2023-11-03T15:02:58Z",
      "updatedAt": "2023-11-14T03:14:52Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "2b687565a18992fad305ff710aaabca43f9a3cce",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "mmark-40-lists",
      "headRefOid": "e005a846f0275c6a3339825314f0845b5ed28c4a",
      "closedAt": "2023-11-14T03:14:52Z",
      "mergedAt": "2023-11-14T03:14:52Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "63c4ed6f39abc55f9a9c8c5ce6c9adaa9f71f0bc"
      },
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Excellent, thank you for cleaning this up!",
          "createdAt": "2023-11-05T17:13:58Z",
          "updatedAt": "2023-11-05T17:13:58Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5mKeif",
          "commit": {
            "abbreviatedOid": "e005a84"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-05T17:14:12Z",
          "updatedAt": "2023-11-05T17:14:12Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5nCZur",
          "commit": {
            "abbreviatedOid": "e005a84"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-14T03:14:46Z",
          "updatedAt": "2023-11-14T03:14:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 377,
      "id": "PR_kwDOHTmVzM5fiHT5",
      "title": "rework considerations on the choice of hash algorithm ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/377",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "for #366 and #359 based largely on text suggested on list by Neil Madden \r\n",
      "createdAt": "2023-11-15T15:46:39Z",
      "updatedAt": "2023-11-27T16:19:39Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "e9a5fe053edff904c5f99ccfec9502346f639154",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "rehashing-hash",
      "headRefOid": "44aa9b7984e4fe8aa3c53cb1c75be3e43036f577",
      "closedAt": "2023-11-27T16:19:39Z",
      "mergedAt": "2023-11-27T16:19:39Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "34a5cc8a7ce30472d765c9e95759ced3170f7cdb"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5nw75I",
          "commit": {
            "abbreviatedOid": "90c11c9"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-20T23:49:41Z",
          "updatedAt": "2023-11-20T23:49:42Z",
          "comments": [
            {
              "originalPosition": 76,
              "body": "`claim name-value pair` is somewhat confusing and is not used elsewhere in the spec for this purpose.\r\n\r\n```suggestion\r\nthe hash function MUST ensure that it is infeasible to calculate any portion of the three elements\r\n(salt, claim name, claim value) that results in a particular digest. This implies the hash function MUST\r\n```",
              "createdAt": "2023-11-20T23:49:41Z",
              "updatedAt": "2023-11-27T16:13:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5nw8Lk",
          "commit": {
            "abbreviatedOid": "90c11c9"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-20T23:51:17Z",
          "updatedAt": "2023-11-20T23:51:18Z",
          "comments": [
            {
              "originalPosition": 83,
              "body": "```suggestion\r\nresistant. That is, for any combination of salt, claim name and claim value, it is infeasible to find a different combination of salt,\r\nclaim name and claim value that result in the same digest.\r\n```",
              "createdAt": "2023-11-20T23:51:17Z",
              "updatedAt": "2023-11-21T00:00:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5nw9ZK",
          "commit": {
            "abbreviatedOid": "90c11c9"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-20T23:58:11Z",
          "updatedAt": "2023-11-20T23:58:11Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "```suggestion\r\nTo ensure privacy of claims that are selectively disclosable, but are not being disclosed in a given presentation,\r\n```",
              "createdAt": "2023-11-20T23:58:11Z",
              "updatedAt": "2023-11-20T23:58:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5nw991",
          "commit": {
            "abbreviatedOid": "90c11c9"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-21T00:01:32Z",
          "updatedAt": "2023-11-21T00:01:32Z",
          "comments": [
            {
              "originalPosition": 88,
              "body": "`, which is surprising` felt out of place, at least to me.\r\n`Where there is a concern, ` of what?\r\n\r\n```suggestion\r\nsame hash value. In which case, the signature over the SD-JWT would not then commit the Issuer to the contents of the\r\nJWT. The collision resistance of the hash function used to generate digests SHOULD\r\n```",
              "createdAt": "2023-11-21T00:01:32Z",
              "updatedAt": "2023-11-21T00:56:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5nxH4l",
          "commit": {
            "abbreviatedOid": "90c11c9"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "made suggestions",
          "createdAt": "2023-11-21T00:56:22Z",
          "updatedAt": "2023-11-21T00:56:22Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5oV53G",
          "commit": {
            "abbreviatedOid": "90c11c9"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "Thank you, LGTM with Kristina's proposed changes.",
          "createdAt": "2023-11-27T14:28:40Z",
          "updatedAt": "2023-11-27T14:28:40Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5oW6WT",
          "commit": {
            "abbreviatedOid": "90c11c9"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-27T16:16:27Z",
          "updatedAt": "2023-11-27T16:16:27Z",
          "comments": [
            {
              "originalPosition": 76,
              "body": "```suggestion\r\nthe hash function MUST ensure that it is infeasible to calculate any portion of the three elements\r\n(salt, claim name, claim value) from a particular digest. This implies the hash function MUST\r\n```",
              "createdAt": "2023-11-27T16:16:27Z",
              "updatedAt": "2023-11-27T16:16:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5oW7lT",
          "commit": {
            "abbreviatedOid": "44aa9b7"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-27T16:18:56Z",
          "updatedAt": "2023-11-27T16:18:56Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5oW72Q",
          "commit": {
            "abbreviatedOid": "44aa9b7"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-27T16:19:28Z",
          "updatedAt": "2023-11-27T16:19:28Z",
          "comments": []
        }
      ]
    },
    {
      "number": 378,
      "id": "PR_kwDOHTmVzM5fjm0A",
      "title": "Reference RFC4086 in security considerations about salt entropy ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/378",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "for #360",
      "createdAt": "2023-11-15T20:00:15Z",
      "updatedAt": "2023-11-27T14:26:29Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "e9a5fe053edff904c5f99ccfec9502346f639154",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "ref-RFC4086",
      "headRefOid": "6754066fe7b8f25e029dd2036f18c2a3a2f354ac",
      "closedAt": "2023-11-27T14:26:29Z",
      "mergedAt": "2023-11-27T14:26:29Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "a0bac88fc3d9e7d2c6b4c41924e011ef619922e5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5nxH-S",
          "commit": {
            "abbreviatedOid": "6754066"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-21T00:56:51Z",
          "updatedAt": "2023-11-21T00:56:51Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5oV4VM",
          "commit": {
            "abbreviatedOid": "6754066"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-27T14:26:20Z",
          "updatedAt": "2023-11-27T14:26:20Z",
          "comments": []
        }
      ]
    },
    {
      "number": 380,
      "id": "PR_kwDOHTmVzM5fkfhH",
      "title": "Strengthen security considerations around validity claims not being selectively disclosable",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/380",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Strengthen security considerations around claims controlling the validity of the SD-JWT not being selectively disclosable\r\n\r\nto fix #367",
      "createdAt": "2023-11-15T23:09:52Z",
      "updatedAt": "2023-12-11T16:25:02Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "f2f1eca7b3fa58a6eaa0175df9dd79d7b03fa009",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "stronger-claims-of-validity",
      "headRefOid": "d459abea84fa835f188bd9bc3c04789e97b57d4a",
      "closedAt": "2023-12-11T16:25:01Z",
      "mergedAt": "2023-12-11T16:25:01Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "57d6a3d1a44c93d9085bcb63cded8d71b6c3ef5d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5nxJYt",
          "commit": {
            "abbreviatedOid": "84c4949"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-21T01:03:46Z",
          "updatedAt": "2023-11-21T01:03:47Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "why? \r\nIssuer might be using claims other than `cnf` to do key binding?",
              "createdAt": "2023-11-21T01:03:47Z",
              "updatedAt": "2023-11-21T01:03:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5nxJtG",
          "commit": {
            "abbreviatedOid": "84c4949"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-21T01:05:34Z",
          "updatedAt": "2023-11-21T01:05:34Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "I am not sure about the format of this... SD-JWT is payload agnostic, so there is no guarantee the payload uses JWT claims (though it is of course a convention) - for example, W3C VCDM might use their own claims (`issuer`, `validFrom`, etc.)",
              "createdAt": "2023-11-21T01:05:34Z",
              "updatedAt": "2023-11-21T01:05:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5oV1xQ",
          "commit": {
            "abbreviatedOid": "84c4949"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "Overall this looks good to me, thanks for preparing. I think the list of claims should be introduced as \"typical\" or we should not that it is relevant specifically for JWT-based payloads.",
          "createdAt": "2023-11-27T14:21:53Z",
          "updatedAt": "2023-11-27T14:25:58Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nThe exact list of such claims will depend on the application\r\nand SHOULD be listed by any application-specific profile of SD-JWT.\r\n```",
              "createdAt": "2023-11-27T14:21:54Z",
              "updatedAt": "2023-11-27T14:25:58Z"
            },
            {
              "originalPosition": 19,
              "body": "Maybe an explicit reference to this being the default JWT claims would make this clear.",
              "createdAt": "2023-11-27T14:23:02Z",
              "updatedAt": "2023-11-27T14:25:58Z"
            },
            {
              "originalPosition": 15,
              "body": "```suggestion\r\n* `aud` (Audience), although issuers may want to allow individual entries in the array to be selectively disclosable\r\n```\r\nUppercase MAY? Not sure...",
              "createdAt": "2023-11-27T14:23:23Z",
              "updatedAt": "2023-11-27T14:25:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ogrPQ",
          "commit": {
            "abbreviatedOid": "84c4949"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-28T16:47:57Z",
          "updatedAt": "2023-11-28T16:47:58Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "normative MAY followed by \"want to\" would be an awkward phrasing but maybe just \"although issuers MAY allow individual entries in the array to be selectively disclosable\" ?",
              "createdAt": "2023-11-28T16:47:57Z",
              "updatedAt": "2023-11-28T16:48:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5pO1dq",
          "commit": {
            "abbreviatedOid": "0c34bd5"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-05T16:05:41Z",
          "updatedAt": "2023-12-05T16:07:38Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Maybe we should be more specific here:\r\n```suggestion\r\nAn Issuer MUST NOT allow any content to be selectively disclosable that is critical for evaluating the\r\nSD-JWT's authenticity or validity.\r\n```\r\n(Not sure if `authenticity or validity` captures all things we might want to say here.)",
              "createdAt": "2023-12-05T16:05:41Z",
              "updatedAt": "2023-12-05T16:07:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5pP4lM",
          "commit": {
            "abbreviatedOid": "0c34bd5"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-05T17:50:07Z",
          "updatedAt": "2023-12-05T17:50:07Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "I think it probably captures enough.",
              "createdAt": "2023-12-05T17:50:07Z",
              "updatedAt": "2023-12-05T17:50:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5pZxCd",
          "commit": {
            "abbreviatedOid": "2f14e2a"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-06T18:34:13Z",
          "updatedAt": "2023-12-06T18:34:14Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "```suggestion\r\nThe following is a list of registered JWT claim names that SHOULD be considered as\r\n```",
              "createdAt": "2023-12-06T18:34:13Z",
              "updatedAt": "2023-12-06T18:34:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5pZ9e6",
          "commit": {
            "abbreviatedOid": "2f14e2a"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-06T18:54:27Z",
          "updatedAt": "2023-12-06T18:54:28Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "sorry, the flows of the sentences in this paragraph are confusing to me.. \r\nas it flows right now, if issuer will typically put in the plaintext, why verifier cannot rely on that?\r\nI think the sentence about the malicious holder should be moved to the next paragraph that is a security consideration for the verifiers not to \"fail open\"..\r\nI also disagree that \"the onus is on the holder\". If security critical claims are made selectively disclosable, unless the  wallet does additional validations upon issuance, the wallet would not know and Holder would disclose only within the limits of what verifier is requesting.\r\n\r\n```suggestion\r\nIssuers will typically include claims controlling the validity of the SD-JWT\r\nin plaintext in the SD-JWT payload, but there is no guarantee they would do so. This means Verifiers cannot\r\nreliably depend on that and need to operate as though security-critical claims might be\r\nselectively disclosable.\r\n\r\nA malicious Holder may try to hide, for example, an expiration time (`exp`)\r\nin order to get a Verifier that \"fails open\" to accept an expired SD-JWT.\r\nVerifiers, therefore, MUST ensure that all claims they deem necessary for checking\r\nthe validity of an SD-JWT in the given context are present (or disclosed, respectively) during\r\nvalidation of the SD-JWT. This is implemented in the last\r\nstep of the verification defined in (#sd_jwt_verification).\r\n```",
              "createdAt": "2023-12-06T18:54:27Z",
              "updatedAt": "2023-12-07T00:11:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5pbn9Z",
          "commit": {
            "abbreviatedOid": "2a3b1cf"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-06T23:47:04Z",
          "updatedAt": "2023-12-06T23:47:04Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "Your suggested text reads much better and I think we can do without the malicious holder example now. ",
              "createdAt": "2023-12-06T23:47:04Z",
              "updatedAt": "2023-12-06T23:47:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5p1O85",
          "commit": {
            "abbreviatedOid": "d459abe"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-11T16:11:16Z",
          "updatedAt": "2023-12-11T16:11:16Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "there is `therefore` on line 1011, and 1015 now. I am not too strongly opinionated but we might want to improve this..\r\n\r\nmaybe something like `Therefore, Verifiers ...` -> `This means the Verifiers`.",
              "createdAt": "2023-12-11T16:11:16Z",
              "updatedAt": "2023-12-11T16:11:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5p1O-w",
          "commit": {
            "abbreviatedOid": "d459abe"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-12-11T16:11:19Z",
          "updatedAt": "2023-12-11T16:11:19Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5p1Ufx",
          "commit": {
            "abbreviatedOid": "d459abe"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-12-11T16:21:43Z",
          "updatedAt": "2023-12-11T16:21:43Z",
          "comments": []
        }
      ]
    },
    {
      "number": 386,
      "id": "PR_kwDOHTmVzM5gtBAQ",
      "title": "reorder steps in Processing by the Holder",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/386",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": " to fix #382",
      "createdAt": "2023-11-29T18:59:31Z",
      "updatedAt": "2023-12-11T16:31:55Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "f2f1eca7b3fa58a6eaa0175df9dd79d7b03fa009",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "reorder-holder-steps-382",
      "headRefOid": "f333ee0835a5c1e58a85be3bc413484b5b23212b",
      "closedAt": "2023-12-11T16:31:55Z",
      "mergedAt": "2023-12-11T16:31:55Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "5eb5883d6bbdb1a091f5982dd9c0e6bf88982dd7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5pO0CB",
          "commit": {
            "abbreviatedOid": "1d88fcf"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-12-05T16:03:39Z",
          "updatedAt": "2023-12-05T17:48:56Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5p1YHL",
          "commit": {
            "abbreviatedOid": "1d88fcf"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-11T16:27:10Z",
          "updatedAt": "2023-12-11T16:27:11Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\n 2. Assemble the SD-JWT for presentation, including the Issuer-signed JWT and the selected Disclosures.\r\n```\r\npresentation is not a defined term - this feels like remainings from old terminology",
              "createdAt": "2023-12-11T16:27:10Z",
              "updatedAt": "2023-12-11T16:27:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5p1YX5",
          "commit": {
            "abbreviatedOid": "1d88fcf"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-11T16:27:40Z",
          "updatedAt": "2023-12-11T16:27:41Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\n 3. If Key Binding is required, create a Key Binding JWT and add it to the SD-JWT for presentation.\r\n 4. Send the SD-JWT for presentation to the Verifier.\r\n```",
              "createdAt": "2023-12-11T16:27:40Z",
              "updatedAt": "2023-12-11T16:27:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5p1ZOX",
          "commit": {
            "abbreviatedOid": "1d88fcf"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-12-11T16:29:20Z",
          "updatedAt": "2023-12-11T16:29:20Z",
          "comments": []
        }
      ]
    },
    {
      "number": 387,
      "id": "PR_kwDOHTmVzM5g1Rev",
      "title": "_sd_hash now with fewer underscores",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/387",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Remove initial underscore on `_sd_hash` for #371\r\n\r\nI do think this change is appropriate but think we should publish a -07 soon if we proceed with it. ",
      "createdAt": "2023-11-30T22:41:30Z",
      "updatedAt": "2023-12-05T17:27:37Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "34a5cc8a7ce30472d765c9e95759ced3170f7cdb",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "371-drop-underscore",
      "headRefOid": "0e1bad4b833fc4f530aaf195caac14c8901e3da7",
      "closedAt": "2023-12-05T17:27:37Z",
      "mergedAt": "2023-12-05T17:27:37Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "7d350e99ace65251e75d8a195ef1446839a2f2eb"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5pHdrF",
          "commit": {
            "abbreviatedOid": "93ec8b2"
          },
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-12-04T22:29:43Z",
          "updatedAt": "2023-12-04T22:29:43Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5pOzs7",
          "commit": {
            "abbreviatedOid": "93ec8b2"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-12-05T16:03:11Z",
          "updatedAt": "2023-12-05T16:03:11Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5pPmPK",
          "commit": {
            "abbreviatedOid": "93ec8b2"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-12-05T17:15:24Z",
          "updatedAt": "2023-12-05T17:15:24Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5pPs39",
          "commit": {
            "abbreviatedOid": "93ec8b2"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-05T17:26:16Z",
          "updatedAt": "2023-12-05T17:26:16Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\n        python3 -m pip install git+https://github.com/openwallet-foundation-labs/sd-jwt-python.git\r\n```",
              "createdAt": "2023-12-05T17:26:16Z",
              "updatedAt": "2023-12-05T17:26:16Z"
            }
          ]
        }
      ]
    },
    {
      "number": 388,
      "id": "PR_kwDOHTmVzM5g1p80",
      "title": "better describe and illustrate the tilde separated format",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/388",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "In an attempt at addressing https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/184 \r\n\r\nsee it live here https://drafts.oauth.net/oauth-selective-disclosure-jwt/tilde-is-as-tilde-does/draft-ietf-oauth-selective-disclosure-jwt.html#name-sd-jwt-data-formats ",
      "createdAt": "2023-12-01T00:07:00Z",
      "updatedAt": "2023-12-05T17:46:49Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "7d350e99ace65251e75d8a195ef1446839a2f2eb",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "tilde-is-as-tilde-does",
      "headRefOid": "19737858aa1233151b18baf2e4ce4155ea3d4bc5",
      "closedAt": "2023-12-05T17:46:49Z",
      "mergedAt": "2023-12-05T17:46:49Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "f2f1eca7b3fa58a6eaa0175df9dd79d7b03fa009"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5pOyxP",
          "commit": {
            "abbreviatedOid": "c2bb631"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Approved with a minor editorial fix.",
          "createdAt": "2023-12-05T16:01:32Z",
          "updatedAt": "2023-12-05T16:02:51Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nThe Issuer-signed JWT, Disclosures, and Key Binding JWT are explained in\r\n(#iss-signed-jwt), (#creating_disclosures), and (#kb-jwt) respectively.\r\n```",
              "createdAt": "2023-12-05T16:01:32Z",
              "updatedAt": "2023-12-05T16:02:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5pPtz0",
          "commit": {
            "abbreviatedOid": "597abd5"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-12-05T17:27:54Z",
          "updatedAt": "2023-12-05T17:27:54Z",
          "comments": []
        }
      ]
    },
    {
      "number": 390,
      "id": "PR_kwDOHTmVzM5g78xp",
      "title": "Clarifications on duplicate digests and unused disclosures",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/390",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Clarify validation around no duplicate digests in the payload (directly or recursively) and no unused disclosures at the end of processing (to fix #373 & #355)",
      "createdAt": "2023-12-01T21:13:36Z",
      "updatedAt": "2023-12-11T16:36:05Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "f2f1eca7b3fa58a6eaa0175df9dd79d7b03fa009",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "disclosures-n-digests",
      "headRefOid": "ee54182d2793dd7c09b66ee4a5c6e170a13ec3d3",
      "closedAt": "2023-12-11T16:36:05Z",
      "mergedAt": "2023-12-11T16:36:05Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "27b95a7beae65b4b67b6f6407e24e24899c5db1c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5pOwjM",
          "commit": {
            "abbreviatedOid": "1d48ee9"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-12-05T15:59:39Z",
          "updatedAt": "2023-12-05T15:59:39Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5p1TiA",
          "commit": {
            "abbreviatedOid": "339604d"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-11T16:19:44Z",
          "updatedAt": "2023-12-11T16:19:45Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n * all Disclosures are valid and correspond to a respective digest value in the Issuer-signed JWT (directly in the payload or recursively included in other Disclosures).\r\n```",
              "createdAt": "2023-12-11T16:19:44Z",
              "updatedAt": "2023-12-11T16:34:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5p1Xcw",
          "commit": {
            "abbreviatedOid": "339604d"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-12-11T16:26:01Z",
          "updatedAt": "2023-12-11T16:26:01Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5p1YjS",
          "commit": {
            "abbreviatedOid": "339604d"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-11T16:28:02Z",
          "updatedAt": "2023-12-11T16:28:02Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I don't think 'the respective' works well here, as what is the respective digest is not known before the check.",
              "createdAt": "2023-12-11T16:28:02Z",
              "updatedAt": "2023-12-11T16:28:02Z"
            }
          ]
        }
      ]
    },
    {
      "number": 394,
      "id": "PR_kwDOHTmVzM5hPKYA",
      "title": "Distinguish SD-JWT from SD-JWT+KB",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/394",
      "state": "MERGED",
      "author": "bifurcation",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This PR limits the scope of the term \"SD-JWT\" so that it refers only to an Issuer-signed JWT and a set of disclosures.  We introduce the term \"Fnord\" to refer to an SD-JWT with key binding.  As a bonus, we are able to clean up stale uses of Presentation, which mostly, but not always align with Fnord.\r\n\r\n\"[Fnord](https://en.wikipedia.org/wiki/Fnord)\" is deliberately nonsensical, of course.  We should replace this with a more intuitive word.  We could reintroduce \"Presentation\" for this, with the allowance that one might \"present\" either a Presentation or an SD-JWT.  Or we could pick another term, suggestions welcome.\r\n\r\nI have tried to be fairly minimal in the changes here.  In particular, I have not changed any of the algorithms, though I suspect they would be clearer if a bit more separate.  I have rewritten a few paragraphs, especially close to the top and in the Security Considerations.\r\n\r\nFixes #374\r\nFixes #392 ",
      "createdAt": "2023-12-05T23:02:33Z",
      "updatedAt": "2024-08-13T22:06:26Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "aa212faf5f2f9b053b0f4a3483e839aadd7792c9",
      "headRepository": "bifurcation/oauth-selective-disclosure-jwt",
      "headRefName": "fnord",
      "headRefOid": "deaabdd5133a1a222eda31663937652ea81a5d93",
      "closedAt": "2024-06-12T08:35:34Z",
      "mergedAt": "2024-06-12T08:35:34Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "9641acbb09e5561dcaf537b5a825186dec4b1129"
      },
      "comments": [
        {
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Its very confusing when communicating regarding SD-JWT.\r\n\r\nYou really can't ever use the term by itself.\r\n\r\nYou must use the term with:\r\n\r\n\"Issuer Signed SD-JWT\" and \"Holder Disclosed SD-JWT\".\r\n\r\nIf you don't make this clear, its easy to imagine scenarios where implementers accidentally disclose more than they should.\r\n\r\n",
          "createdAt": "2023-12-06T14:30:35Z",
          "updatedAt": "2023-12-06T14:30:35Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I find it immensely challenging to read and review this PR with `Fnord` being used as a term. please replace it with some specific term that we can bikeshed. ",
          "createdAt": "2023-12-23T01:11:47Z",
          "updatedAt": "2023-12-23T01:11:47Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "@bifurcation can you please replace `Fnord` with `SD-JWT/KB`, which is a short form for `SD-JWT with Key Binding` (`SD-JWT+KB` could have worked too, but we were just worried it will be confused with media types, etc.), so that reviewing is easier.",
          "createdAt": "2024-02-08T17:58:56Z",
          "updatedAt": "2024-02-08T18:00:09Z"
        },
        {
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@Sakurann - Changed to `SD-JWT-KB`, since the `SD-JWT/KB` looked weird to me (division seemed like the wrong metaphor) and `SD-JWT~KB` seemed a little too cute.  Also merged `master` while I was at it.",
          "createdAt": "2024-02-08T20:22:46Z",
          "updatedAt": "2024-02-08T20:22:46Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this PR as-is now also addresses #356 ",
          "createdAt": "2024-02-13T16:58:47Z",
          "updatedAt": "2024-02-13T16:58:47Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "> @Sakurann - Changed to `SD-JWT-KB`, since the `SD-JWT/KB` looked weird to me (division seemed like the wrong metaphor) and `SD-JWT~KB` seemed a little too cute. Also merged `master` while I was at it.\r\n\r\nI think I like the aesthethics of `SD-JWT+KB` or `SD-JWT/KB` or `SD-JWT|KB` more than `SD-JWT-KB`.",
          "createdAt": "2024-02-20T16:51:00Z",
          "updatedAt": "2024-02-20T16:51:00Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> > @Sakurann - Changed to `SD-JWT-KB`, since the `SD-JWT/KB` looked weird to me (division seemed like the wrong metaphor) and `SD-JWT~KB` seemed a little too cute. Also merged `master` while I was at it.\r\n> \r\n> I think I like the aesthethics of `SD-JWT+KB` or `SD-JWT/KB` or `SD-JWT|KB` more than `SD-JWT-KB`.\r\n\r\nI think aesthethics is spelled aesthetics but otherwise agree (I'm usually the one misspelling things so happy not to be this time...). \r\n\r\nI'd lean towards `SD-JWT+KB` (but did smile at `SD-JWT~KB` despite being a little too cute).",
          "createdAt": "2024-02-26T21:33:33Z",
          "updatedAt": "2024-02-26T23:40:57Z"
        },
        {
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@selfissued - The point of this PR is that Key Binding isn't just an optional feature -- it's a feature that causes a security failure if you forget to check that it's enabled.  Just like it's a basic security principle that one API endpoint should never accept both signed and unsigned data (because of the trivial downgrade risk, see `\"alg\": \"none\"`), there should never be a verification process that will accept both SD-JWT and SD-JWT-KB.  Thus, we should talk about them as separate things.",
          "createdAt": "2024-03-21T07:20:52Z",
          "updatedAt": "2024-03-21T07:21:29Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Note for posterity that the meeting notes https://notes.ietf.org/notes-ietf-119-oauth# have some more of the discussion around this and related topics that happened on the Wednesday of IETF 119. Although I don't think there's anything particularity novel there that's not been expressed in this PR or the linked issue(s).  \r\n\r\n",
          "createdAt": "2024-03-21T09:11:33Z",
          "updatedAt": "2024-03-21T09:11:33Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "> @selfissued - The point of this PR is that Key Binding isn't just an optional feature -- it's a feature that causes a security failure if you forget to check that it's enabled. Just like it's a basic security principle that one API endpoint should never accept both signed and unsigned data (because of the trivial downgrade risk, see \"alg\": \"none\"), there should never be a verification process that will accept both SD-JWT and SD-JWT-KB. Thus, we should talk about them as separate things.\r\n\r\n@bifurcation, I believe you're missing my point.  To correctly accept a key-bound SD-JWT, the recipient MUST have code that:\r\n\r\n1. Verifies that a key binding is present in the SD-JWT.\r\n2. Verifies the key binding signature.\r\n\r\nOnly then can the recipient know that the SD-JWT is key bound.\r\n\r\nIntroducing a separate media type asserting that the SD-JWT is key bound *doesn't* remove the need for the recipient to verify the presence and signature of the key binding as above, if it wants a key-bound SD-JWT.  If anything, introducing a key-bound-SD-JWT media type could *increase* the probability that recipients would be lazy thinking that \"The media type says it's key-bound so that must be true.\" and not do steps 1 and 2 above - which is what actually needs to be done to securely accept a key-bound SD-JWT.\r\n\r\nIntroducing a separate media type doesn't help from a security perspective, and in practice, it may hurt.  For that reason, I am opposed to introducing a separate media type.\r\n\r\n...\r\n\r\nFor what it's worth, @ve7jtb made similar comments at the microphone during the OAuth WG meeting at IETF 119 in Brisbane.",
          "createdAt": "2024-04-02T18:06:18Z",
          "updatedAt": "2024-04-02T18:06:18Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "@selfissued, would removing the `application/sd-jwt-kb' media type from this PR sufficiently alleviate your concern? Or is it more than that?\r\n\r\n(note, I'm hopeful you and @danielfett / @Sakurann can discuss this further in person at OSW and/or IIW soon but I'm unfortunately not going to be at either so just trying to nudge the conversation)  \r\n",
          "createdAt": "2024-04-05T22:16:50Z",
          "updatedAt": "2024-04-15T15:34:54Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "> Edit: I still think we should call it \"SD-JWT+KB\", which nicely captures that the KB is an \"add-on\".\r\n\r\nI would appreciate if the PR could change SD-JWT-KB to SD-JWT+KB.\r\n",
          "createdAt": "2024-04-15T15:35:02Z",
          "updatedAt": "2024-04-15T15:35:02Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> > Edit: I still think we should call it \"SD-JWT+KB\", which nicely captures that the KB is an \"add-on\".\r\n> \r\n> I would appreciate if the PR could change SD-JWT-KB to SD-JWT+KB.\r\n\r\nHe did ask nicely. ",
          "createdAt": "2024-04-29T03:50:44Z",
          "updatedAt": "2024-04-29T03:50:44Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "> @selfissued, would removing the `application/sd-jwt-kb' media type from this PR sufficiently alleviate your concern? Or is it more than that?\r\n\r\nYes, my objection is to having two media types.  Once the extra media type is removed, I should be fine with the updated description.",
          "createdAt": "2024-04-29T17:06:45Z",
          "updatedAt": "2024-04-29T17:06:45Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I am ok with changing SD-JWT-KB to SD-JWT+KB",
          "createdAt": "2024-04-30T15:19:55Z",
          "updatedAt": "2024-04-30T15:19:55Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> > @selfissued, would removing the `application/sd-jwt-kb' media type from this PR sufficiently alleviate your concern? Or is it more than that?\r\n> \r\n> Yes, my objection is to having two media types. Once the extra media type is removed, I should be fine with the updated description.\r\n\r\nThe extra media type removed with 98383e665a17fff50654a0a096eaf5e8cfe001dc, which I'm perfectly okay with and coming around to even thinking is the right thing. But I am struck by the irony of doing this on the same day you've (I know, on behalf of the WG) [requested registration](https://mailarchive.ietf.org/arch/msg/media-types/_pmQrj8nkW25FOqIXmPa1wyzizU/) of: \r\n\r\napplication/vc+ld+json \r\napplication/vp+ld+json\r\napplication/vc+ld+json+jwt\r\napplication/vp+ld+json+jwt\r\napplication/vc+ld+json+sd-jwt\r\napplication/vp+ld+json+sd-jwt\r\napplication/vc+ld+json+cose\r\napplication/vp+ld+json+cose\r\n+ld+json+jwt\r\n+json+jwt\r\n+ld+json+sd-jwt\r\n+json+sd-jwt\r\n+ld+json+cose\r\n+json+cose\r\n\r\n",
          "createdAt": "2024-05-03T17:24:08Z",
          "updatedAt": "2024-05-03T17:41:18Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> > Edit: I still think we should call it \"SD-JWT+KB\", which nicely captures that the KB is an \"add-on\".\r\n> \r\n> I would appreciate if the PR could change SD-JWT-KB to SD-JWT+KB.\r\n\r\n92d20f848299bb2d93f99d4d392f663341e08c9d made that change ",
          "createdAt": "2024-05-03T18:32:07Z",
          "updatedAt": "2024-05-03T18:32:07Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> Not entirely sure about the SD-JWT-KB vs SD-JWT+KB part. Should the kb-jwt then also be renamed to kb+jwt (even outside the typ)?\r\n\r\nI'm gonna say no. ",
          "createdAt": "2024-05-03T18:51:15Z",
          "updatedAt": "2024-05-03T18:51:15Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "@bifurcation and @danielfett and @Sakurann to hopefully do a re-review soon(ish) and get this one merged soon(ish) ",
          "createdAt": "2024-05-15T15:52:58Z",
          "updatedAt": "2024-05-15T15:52:58Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Thank you, Richard \"fnord\" Barnes",
          "createdAt": "2024-06-12T08:35:19Z",
          "updatedAt": "2024-06-12T08:35:19Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> Thank you, Richard \"fnord\" Barnes\r\n\r\nIt's the little things that keep me going ",
          "createdAt": "2024-06-12T13:17:42Z",
          "updatedAt": "2024-06-12T13:17:42Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5pR7hs",
          "commit": {
            "abbreviatedOid": "d150ec2"
          },
          "author": "martinthomson",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-05T23:46:20Z",
          "updatedAt": "2023-12-05T23:46:21Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "```suggestion\r\nthe verifier that they hold the private key associated with the SD-JWT.\r\n```\r\n\r\nNot sure about phrasing, but this seems more natural to me.",
              "createdAt": "2023-12-05T23:46:20Z",
              "updatedAt": "2023-12-05T23:46:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5pXXt1",
          "commit": {
            "abbreviatedOid": "d150ec2"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-06T14:34:28Z",
          "updatedAt": "2023-12-06T14:34:28Z",
          "comments": [
            {
              "originalPosition": 86,
              "body": "In the case that Fnord always requires a key binding token, you are assured that a Fnord never ends in a `~`.\r\n\r\nIn the case that a Fnord does not force key binding, sometimes you end with a `~` sometimes you don't.\r\n\r\nI would say that unlike a `SD-JWT` a `Fnord` always has key binding, that way you can rely on the binding property in profiles that need to build on the assumption that it is present.",
              "createdAt": "2023-12-06T14:34:28Z",
              "updatedAt": "2023-12-06T14:34:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5pXZ8h",
          "commit": {
            "abbreviatedOid": "d150ec2"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-06T14:38:17Z",
          "updatedAt": "2023-12-06T14:38:17Z",
          "comments": [
            {
              "originalPosition": 170,
              "body": "Perhaps intermediate definitions are also helpful here:\r\n\r\nIssuer signed SD-JWT: `<Issuer-signed JWT>~<Disclosure 1>~<Disclosure 2>~...~<Disclosure N>`\r\nHolder disclosed SD-JWT: `<Issuer-signed JWT>~<Disclosure 1>`\r\nHolder <disclosed | presented | redacted> Fnord: `<Issuer-signed JWT>~<Disclosure 1>~<KB-JWT>`",
              "createdAt": "2023-12-06T14:38:17Z",
              "updatedAt": "2023-12-06T14:38:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5pXaxk",
          "commit": {
            "abbreviatedOid": "d150ec2"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I think the terminology direction is good, details will need to be sorted out.\r\n\r\nI will add a wrinkle, that \"presentation\" is sorta \"owned\" by W3C, and it means something every different.\r\n\r\n- https://www.w3.org/2017/vc/WG/Meetings/Minutes/2023-12-05-vcwg-special\r\n\r\nIn W3C terms a \"presentation\" is a special kind of RDF Graph Fragment, with or without integrity.\r\n\r\nYou can make \"integrity protected\" \"presentations\" with an SD-JWT.... and they look like this today:\r\n\r\n- https://w3c.github.io/vc-jose-cose/#securing-json-ld-verifiable-presentations-with-jose\r\n\r\nI'd recommend choosing another word than presentation at this point, it will be safer than trying to square terms with W3C.\r\n\r\nHere are some alternatives to \"presentation disclosures with integrity and key binding\" to consider:\r\n\r\n- https://www.merriam-webster.com/thesaurus/declare\r\n- https://www.merriam-webster.com/thesaurus/impart\r\n- https://www.merriam-webster.com/thesaurus/offer\r\n- https://www.merriam-webster.com/dictionary/confer\r\n- https://www.merriam-webster.com/thesaurus/uncloak\r\n- https://www.merriam-webster.com/thesaurus/reveal\r\n",
          "createdAt": "2023-12-06T14:39:47Z",
          "updatedAt": "2023-12-06T14:48:29Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5pXgcO",
          "commit": {
            "abbreviatedOid": "d150ec2"
          },
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-06T14:46:38Z",
          "updatedAt": "2023-12-06T14:46:38Z",
          "comments": [
            {
              "originalPosition": 86,
              "body": "Yes, that is the intent.  The syntactic stuff is below.",
              "createdAt": "2023-12-06T14:46:38Z",
              "updatedAt": "2023-12-06T14:46:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5pXh2w",
          "commit": {
            "abbreviatedOid": "d150ec2"
          },
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-06T14:48:59Z",
          "updatedAt": "2023-12-06T14:48:59Z",
          "comments": [
            {
              "originalPosition": 170,
              "body": "The issue we're trying to address here is the ambiguity between whether there is key _binding_, not anything about _disclosure_.\r\n\r\nIt's a good point, though, that the SD-JWT in a Fnord MUST have _visible_ key binding information (e.g., `cnf`).  If that claim is selectively disclosable, it MUST be disclosed when used in a Fnord.",
              "createdAt": "2023-12-06T14:48:59Z",
              "updatedAt": "2023-12-06T14:48:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5vqRZu",
          "commit": {
            "abbreviatedOid": "f96695e"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-10T00:20:56Z",
          "updatedAt": "2024-02-10T00:26:49Z",
          "comments": [
            {
              "originalPosition": 97,
              "body": "```suggestion\r\n    including selected Disclosures\r\n```",
              "createdAt": "2024-02-10T00:20:56Z",
              "updatedAt": "2024-02-10T00:26:49Z"
            },
            {
              "originalPosition": 94,
              "body": "this read kinda awkward to me and I think things can be general in a flow diagram like this \r\n```suggestion\r\n           Presents SD-JWT-KB\r\n```",
              "createdAt": "2024-02-10T00:26:35Z",
              "updatedAt": "2024-02-10T00:26:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5vqbsI",
          "commit": {
            "abbreviatedOid": "dbce481"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-10T04:18:58Z",
          "updatedAt": "2024-02-10T04:18:58Z",
          "comments": [
            {
              "originalPosition": 94,
              "body": "wait, what the... why can't I commit this suggestion anymore? ",
              "createdAt": "2024-02-10T04:18:58Z",
              "updatedAt": "2024-02-10T04:18:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5vqbs9",
          "commit": {
            "abbreviatedOid": "f96695e"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-10T04:19:29Z",
          "updatedAt": "2024-02-10T04:19:30Z",
          "comments": [
            {
              "originalPosition": 94,
              "body": "```suggestion\r\n           Presents SD-JWT-KB\r\n```",
              "createdAt": "2024-02-10T04:19:30Z",
              "updatedAt": "2024-02-10T04:19:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5vqbuU",
          "commit": {
            "abbreviatedOid": "f96695e"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-10T04:20:28Z",
          "updatedAt": "2024-02-10T04:20:29Z",
          "comments": [
            {
              "originalPosition": 94,
              "body": "```suggestion\r\n           Presents SD-JWT~KB\r\n```",
              "createdAt": "2024-02-10T04:20:28Z",
              "updatedAt": "2024-02-10T04:20:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5vrkVJ",
          "commit": {
            "abbreviatedOid": "ea2500e"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-10T14:01:36Z",
          "updatedAt": "2024-02-10T14:01:36Z",
          "comments": [
            {
              "originalPosition": 218,
              "body": "changing the ref broken the build  \r\n```suggestion\r\n### Binding to an SD-JWT {#integrity-protection-of-the-presentation}\r\n```",
              "createdAt": "2024-02-10T14:01:36Z",
              "updatedAt": "2024-02-10T14:01:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5v00_Q",
          "commit": {
            "abbreviatedOid": "f96695e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-12T20:06:17Z",
          "updatedAt": "2024-02-12T20:06:17Z",
          "comments": [
            {
              "originalPosition": 94,
              "body": "I don't know how to solve it, just know it happened to me before too...",
              "createdAt": "2024-02-12T20:06:17Z",
              "updatedAt": "2024-02-12T20:06:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5v1au_",
          "commit": {
            "abbreviatedOid": "f96695e"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-12T20:57:34Z",
          "updatedAt": "2024-02-12T20:57:35Z",
          "comments": [
            {
              "originalPosition": 94,
              "body": "I *think* what happened is that I committed a different related nearby suggestion (that the UI wouldn't let me do in one shot) that basically put the PR into a state of having no changes near here and thus talking this area out of the scope of suggestible changes that github will let you make in the UI. If that jumble of words even makes any sense. I \"solved\" it by making the changes locally and pushing to Richard's branch with 2db05069e9d8cb749142a30a4285a416fbdfc88a and then ea2500ec6ac09aba9c2988078df708f1fb1369a8 which is probably a breach of some etiquette but was the best I could manage as the situation unfolded. ",
              "createdAt": "2024-02-12T20:57:35Z",
              "updatedAt": "2024-02-12T20:57:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5v1fpx",
          "commit": {
            "abbreviatedOid": "2f918e9"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-12T21:04:16Z",
          "updatedAt": "2024-02-12T21:04:17Z",
          "comments": [
            {
              "originalPosition": 170,
              "body": ">  that the SD-JWT in a Fnord MUST have visible key binding information (e.g., cnf). If that claim is selectively disclosable, it MUST be disclosed when used in a Fnord.\r\n\r\nThe WG draft (published a few days after that comment) has language to that effect https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-07.html#name-selectively-disclosable-val ",
              "createdAt": "2024-02-12T21:04:17Z",
              "updatedAt": "2024-02-12T21:04:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5v2LzU",
          "commit": {
            "abbreviatedOid": "d150ec2"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-12T22:27:09Z",
          "updatedAt": "2024-02-12T22:27:09Z",
          "comments": [
            {
              "originalPosition": 170,
              "body": "also current line 170 of the PR has \"To be compatible with Key Binding, an SD-JWT MUST contain\r\n  the public key corresponding to the private key controlled by the Holder (or a reference to this public key).\"",
              "createdAt": "2024-02-12T22:27:09Z",
              "updatedAt": "2024-02-12T22:27:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5v2Nw7",
          "commit": {
            "abbreviatedOid": "2f918e9"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-12T22:33:43Z",
          "updatedAt": "2024-02-12T22:35:19Z",
          "comments": [
            {
              "originalPosition": 249,
              "body": "```suggestion\r\ntilde-separated parts, with the Issuer-signed JWT as shown above in the beginning,\r\n```",
              "createdAt": "2024-02-12T22:33:43Z",
              "updatedAt": "2024-02-12T22:35:19Z"
            },
            {
              "originalPosition": 176,
              "body": "\"~-separated\" looks rather funky when reading it - I think using the word tilde here would be more good \r\n\r\n```suggestion\r\ntilde-separated component is empty.  A Verifier that expects an SD-JWT-KB MUST verify\r\nthat its final tilde-separated component is a valid KB-JWT.\r\n```",
              "createdAt": "2024-02-12T22:35:11Z",
              "updatedAt": "2024-02-12T22:35:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5v2QWf",
          "commit": {
            "abbreviatedOid": "2f918e9"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-12T22:40:47Z",
          "updatedAt": "2024-02-12T22:40:48Z",
          "comments": [
            {
              "originalPosition": 234,
              "body": "seem to  be too many words in this sentence - does this still say what you wanted to say? \r\n```suggestion\r\nThe Verifier MUST ensure that the key with which it validates the signature on\r\nthe Key Binding JWT is the key specified in the SD-JWT as the Holder's\r\n```",
              "createdAt": "2024-02-12T22:40:47Z",
              "updatedAt": "2024-02-12T22:40:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5v2UDI",
          "commit": {
            "abbreviatedOid": "2f918e9"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-12T22:51:44Z",
          "updatedAt": "2024-02-12T22:51:44Z",
          "comments": [
            {
              "originalPosition": 258,
              "body": "the SD-JWT from (#issuance) includes many more Disclosures than the example in this section. So this sentence isn't quite right and could be confusing/misleading. Meanwhile I don't think what it's trying to say is needed right here. So:\r\n\r\n```suggestion\r\n```",
              "createdAt": "2024-02-12T22:51:44Z",
              "updatedAt": "2024-02-12T22:51:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5v2UYp",
          "commit": {
            "abbreviatedOid": "2f918e9"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-12T22:52:58Z",
          "updatedAt": "2024-02-12T22:52:58Z",
          "comments": [
            {
              "originalPosition": 276,
              "body": "```suggestion\r\nThe Issuer MUST provide the Holder an SD-JWT, not an SD-JWT-KB.  If the Holder\r\n```",
              "createdAt": "2024-02-12T22:52:58Z",
              "updatedAt": "2024-02-12T22:52:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5v2WB8",
          "commit": {
            "abbreviatedOid": "2f918e9"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-12T22:59:28Z",
          "updatedAt": "2024-02-12T22:59:28Z",
          "comments": [
            {
              "originalPosition": 267,
              "body": "this is now a bit awkward as it kinda implies that, if it were an SD-JWT-KB, that it's already been separated into SD-JWT and KB parts. Which is different than prior to the PR. ",
              "createdAt": "2024-02-12T22:59:28Z",
              "updatedAt": "2024-02-12T22:59:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5v2X6N",
          "commit": {
            "abbreviatedOid": "2f918e9"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-12T23:07:16Z",
          "updatedAt": "2024-02-12T23:07:16Z",
          "comments": [
            {
              "originalPosition": 286,
              "body": "it's a little abrupt/disjoint that if this condition is met, send the SD-JWT to the Verifier and end, otherwise do the next steps. But the next steps are listed regardless. I dunno, can this bit be reworked / reflowed somehow?   ",
              "createdAt": "2024-02-12T23:07:16Z",
              "updatedAt": "2024-02-15T22:29:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5v2g6W",
          "commit": {
            "abbreviatedOid": "2f918e9"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-12T23:39:16Z",
          "updatedAt": "2024-02-12T23:39:16Z",
          "comments": [
            {
              "originalPosition": 451,
              "body": "Probably makes sense to add this but I am really not looking forward to folks wanting to have `sd-jwt-kb` as the value of `typ` header in the SD-JWT itself... ",
              "createdAt": "2024-02-12T23:39:16Z",
              "updatedAt": "2024-02-12T23:39:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5v2hsf",
          "commit": {
            "abbreviatedOid": "2f918e9"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-12T23:40:20Z",
          "updatedAt": "2024-02-12T23:40:20Z",
          "comments": [
            {
              "originalPosition": 513,
              "body": "somewhere down below there should be a document history bullet added for this ",
              "createdAt": "2024-02-12T23:40:20Z",
              "updatedAt": "2024-02-12T23:40:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5v2mOw",
          "commit": {
            "abbreviatedOid": "2f918e9"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-12T23:57:38Z",
          "updatedAt": "2024-02-12T23:57:38Z",
          "comments": [
            {
              "originalPosition": 310,
              "body": "steps 4.1 should come before steps in lines 808 and 809 (there are two steps 2 btw). in other words, the verifier need to know what mechanism it is using for key binding before rejecting because there is no KB JWT",
              "createdAt": "2024-02-12T23:57:38Z",
              "updatedAt": "2024-02-12T23:57:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5v2mXe",
          "commit": {
            "abbreviatedOid": "2f918e9"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-12T23:58:17Z",
          "updatedAt": "2024-02-12T23:58:17Z",
          "comments": [
            {
              "originalPosition": 267,
              "body": "> it kinda implies that, if it were an SD-JWT-KB, that it's already been separated into SD-JWT and KB parts.\r\n\r\nI am not sure it does. this section is being clear that it applies only to the verification of sd-jwt and not sd-jwt-kb. if this is still a concern, making sure verification by the verifier is probably a better section to claritfy this?",
              "createdAt": "2024-02-12T23:58:17Z",
              "updatedAt": "2024-02-12T23:58:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5v3O7w",
          "commit": {
            "abbreviatedOid": "2f918e9"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-13T01:52:35Z",
          "updatedAt": "2024-02-13T01:52:35Z",
          "comments": [
            {
              "originalPosition": 267,
              "body": "Well it's a change from what was here before where this section was about general verification of the sd-jwt, which could have kb or not, and the process starts with splitting it up into the component parts. Maybe it doesn't matter though.",
              "createdAt": "2024-02-13T01:52:35Z",
              "updatedAt": "2024-02-13T01:52:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5waFHx",
          "commit": {
            "abbreviatedOid": "2f918e9"
          },
          "author": "c2bo",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-16T19:42:31Z",
          "updatedAt": "2024-02-16T19:42:32Z",
          "comments": [
            {
              "originalPosition": 129,
              "body": "```suggestion\r\n * verifies the signature on the KB-JWT using the public key included in the SD-JWT, if an SD-JWT-KB was provided and the Verifier's policy requires Key Binding\r\n```\r\nI was also wondering if it should explicitly say \"included (or referenced)\" here as well  - similar to line 171?",
              "createdAt": "2024-02-16T19:42:32Z",
              "updatedAt": "2024-02-16T20:07:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5wbNTv",
          "commit": {
            "abbreviatedOid": "2f918e9"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-16T22:39:47Z",
          "updatedAt": "2024-02-16T22:39:48Z",
          "comments": [
            {
              "originalPosition": 129,
              "body": "> I was also wondering if it should explicitly say \"included (or referenced)\" here as well - similar to line 171?\r\n\r\nprobably yeah... \r\n```suggestion\r\n * verifies the signature on the KB-JWT using the public key included (or referenced) in the SD-JWT, if an SD-JWT-KB was provided and the Verifier's policy requires Key Binding\r\n```",
              "createdAt": "2024-02-16T22:39:48Z",
              "updatedAt": "2024-02-16T22:40:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5woX4D",
          "commit": {
            "abbreviatedOid": "2f918e9"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-20T07:08:11Z",
          "updatedAt": "2024-02-20T07:08:11Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "```suggestion\r\nformat for SD-JWTs with Key Binding (SD-JWT-KB).  By optionally sending an SD-JWT-KB to a\r\n```\r\nI think the nuance of `specifies an _optional_ mechanism for key binding` of the original text should be reflected better",
              "createdAt": "2024-02-20T07:08:11Z",
              "updatedAt": "2024-02-20T07:08:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5woYmi",
          "commit": {
            "abbreviatedOid": "2f918e9"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-20T07:10:35Z",
          "updatedAt": "2024-02-20T07:10:36Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "```suggestion\r\nFor SD-JWTs where the issuer is binding as SD-JWT to a public key associated to the\r\nHolder (e.g., using the `cnf` claim [@?RFC7800]), this document also defines a\r\n```",
              "createdAt": "2024-02-20T07:10:35Z",
              "updatedAt": "2024-02-20T07:10:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5woY31",
          "commit": {
            "abbreviatedOid": "2f918e9"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-20T07:11:29Z",
          "updatedAt": "2024-02-20T07:11:30Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "```suggestion\r\nassociated to the SD-JWT. The strength of the binding is conditional upon the trust\r\nin the protection of the private key of the key pair an SD-JWT is bound to.\r\n```\r\nThis sentence seems to have been removed, while I think it is beneficial to keep it?",
              "createdAt": "2024-02-20T07:11:30Z",
              "updatedAt": "2024-02-20T07:11:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5woZpe",
          "commit": {
            "abbreviatedOid": "2f918e9"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-20T07:14:00Z",
          "updatedAt": "2024-02-20T07:14:01Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "```suggestion\r\n* SD-JWT is a composite structure issued by the issuer that consists of the following:\r\n```",
              "createdAt": "2024-02-20T07:14:00Z",
              "updatedAt": "2024-02-20T07:14:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5woaCA",
          "commit": {
            "abbreviatedOid": "2f918e9"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-20T07:15:13Z",
          "updatedAt": "2024-02-20T07:15:14Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "```suggestion\r\n* SD-JWT-KB: A composite structure that is presented to the verifier that consists of the following:\r\n```",
              "createdAt": "2024-02-20T07:15:13Z",
              "updatedAt": "2024-02-20T07:15:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5woaz4",
          "commit": {
            "abbreviatedOid": "2f918e9"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-20T07:17:40Z",
          "updatedAt": "2024-02-20T07:17:40Z",
          "comments": [
            {
              "originalPosition": 56,
              "body": "```suggestion\r\nclaims as well as claims that are always disclosed.\r\n```\r\nI think there is a way to blind only the object? like address: { _sd: [] } ?",
              "createdAt": "2024-02-20T07:17:40Z",
              "updatedAt": "2024-02-20T07:17:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5wobLD",
          "commit": {
            "abbreviatedOid": "2f918e9"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-20T07:18:47Z",
          "updatedAt": "2024-02-20T07:18:47Z",
          "comments": [
            {
              "originalPosition": 76,
              "body": "```suggestion\r\n  control over the same private key during the issuance and presentation. To be compatible with Key Binding, an SD-JWT needs to contain\r\n```\r\nnot sure it is appropriate to have MUST in a term definition?",
              "createdAt": "2024-02-20T07:18:47Z",
              "updatedAt": "2024-02-20T07:18:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5wobVG",
          "commit": {
            "abbreviatedOid": "2f918e9"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "overall like the direction; made some suggestions that would love to see reflected. still reviewing",
          "createdAt": "2024-02-20T07:19:16Z",
          "updatedAt": "2024-02-20T07:28:01Z",
          "comments": [
            {
              "originalPosition": 87,
              "body": "```suggestion\r\n: A composite structure, comprising an SD-JWT and a Key Binding JWT tied to that SD-JWT.\r\n```\r\nnot sure what `covering the SD-JWT` is supposed to mean..",
              "createdAt": "2024-02-20T07:19:16Z",
              "updatedAt": "2024-03-04T03:18:21Z"
            },
            {
              "originalPosition": 56,
              "body": "I would remove \"The payload of an SD-JWT can contain a combination of selectively disclosable claims as well as claims that are always disclosed.\" too. I think it is duplicative of the definition of SD-JWT itself.",
              "createdAt": "2024-02-20T07:20:39Z",
              "updatedAt": "2024-02-20T07:28:02Z"
            },
            {
              "originalPosition": 215,
              "body": "```suggestion\r\n    * `sd_hash`: REQUIRED. The base64url-encoded hash value over the Issuer-signed JWT and the selected Disclosures as defined below.\r\n```\r\nwe should probably unify to use either `hash value` or `hash digest`..",
              "createdAt": "2024-02-20T07:22:59Z",
              "updatedAt": "2024-02-20T07:28:02Z"
            },
            {
              "originalPosition": 237,
              "body": "what is \"`cnf` value of type `jkt`\" (i don't think it is defined in rfc7800?) and why is it used as a main example?",
              "createdAt": "2024-02-20T07:24:36Z",
              "updatedAt": "2024-02-20T07:28:02Z"
            },
            {
              "originalPosition": 258,
              "body": "is there a place where we can move this paragraph to? instead of deleting it",
              "createdAt": "2024-02-20T07:25:21Z",
              "updatedAt": "2024-02-20T07:28:02Z"
            },
            {
              "originalPosition": 451,
              "body": "when is this media type intended to be used? when sending sd-jwt-kb in an http request? not sure I support defining this...",
              "createdAt": "2024-02-20T07:27:12Z",
              "updatedAt": "2024-02-20T07:28:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5wwYAc",
          "commit": {
            "abbreviatedOid": "2f918e9"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-20T22:47:33Z",
          "updatedAt": "2024-02-20T22:47:33Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "\"is binding as SD-JWT to a\" should be \"is binding an SD-JWT to a\"? \r\n\r\n```suggestion\r\nFor SD-JWTs where the issuer is binding an SD-JWT to a public key associated to the\r\nHolder (e.g., using the `cnf` claim [@?RFC7800]), this document also defines a\r\n```",
              "createdAt": "2024-02-20T22:47:33Z",
              "updatedAt": "2024-02-26T21:18:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5xBLz6",
          "commit": {
            "abbreviatedOid": "2f918e9"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-22T15:21:03Z",
          "updatedAt": "2024-02-22T15:21:03Z",
          "comments": [
            {
              "originalPosition": 237,
              "body": "it lets you use a thumbprint to resolve a public key, instead of sending the public key by value. there is an analog in COSE.",
              "createdAt": "2024-02-22T15:21:03Z",
              "updatedAt": "2024-02-22T15:21:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5xBnC2",
          "commit": {
            "abbreviatedOid": "2f918e9"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-22T16:04:44Z",
          "updatedAt": "2024-02-22T16:04:44Z",
          "comments": [
            {
              "originalPosition": 237,
              "body": "It was defined (and registered) by DPoP https://www.rfc-editor.org/rfc/rfc9449.html#section-6.1 FWIW. But to @Sakurann's implied point, it's probably not appropriate as the main example in this draft. Or necessarily appropriate/needed as an example at all in this draft. I think the `jwk` confirmation method should be encouraged as much as possible in the SD-JWT context. ",
              "createdAt": "2024-02-22T16:04:44Z",
              "updatedAt": "2024-02-22T16:04:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5xXrq9",
          "commit": {
            "abbreviatedOid": "2f918e9"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-26T21:16:08Z",
          "updatedAt": "2024-02-26T21:16:09Z",
          "comments": [
            {
              "originalPosition": 258,
              "body": "The suggestion to delete was b/c of it being not quite right. This tries to fix that. \r\n```suggestion\r\nIf the Verifier did not require Key Binding, then the Holder could have\r\npresented the SD-JWT with selected Disclosures directly, instead of encapsulating it in\r\nan SD-JWT-KB.\r\n\r\n```",
              "createdAt": "2024-02-26T21:16:08Z",
              "updatedAt": "2024-02-26T21:16:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5xuOpK",
          "commit": {
            "abbreviatedOid": "2f918e9"
          },
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-29T05:12:08Z",
          "updatedAt": "2024-02-29T05:20:11Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "I personally don't think this sentence is that helpful.  It is universally true of any system that relies on cryptographic keys, and doesn't need to be restated here.  But if folks are keen, it seems harmless.",
              "createdAt": "2024-02-29T05:12:08Z",
              "updatedAt": "2024-02-29T05:20:11Z"
            },
            {
              "originalPosition": 47,
              "body": "I would generally prefer that the `SD-JWT` and `SD-JWT-KB` entries be grammatically parallel, but I don't feel strongly.",
              "createdAt": "2024-02-29T05:13:28Z",
              "updatedAt": "2024-02-29T05:20:11Z"
            },
            {
              "originalPosition": 56,
              "body": "That's different.  What you're describing is hiding the fields within the object vs. hiding the field itself.  You're not actually hiding the `address` field, you're hiding fields within that object.  Even if you hide all the fields, you still reveal that it's an object.\r\n\r\nThere is no syntax here by which you can reveal that there is a field with a given name in an object without revealing anything about the contents of that field.",
              "createdAt": "2024-02-29T05:18:26Z",
              "updatedAt": "2024-02-29T05:20:11Z"
            },
            {
              "originalPosition": 76,
              "body": "```suggestion\r\n  control over the same private key during the issuance and presentation. To be compatible with Key Binding, an SD-JWT contains\r\n```",
              "createdAt": "2024-02-29T05:20:01Z",
              "updatedAt": "2024-02-29T05:20:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5xuVNm",
          "commit": {
            "abbreviatedOid": "fef3db5"
          },
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-29T05:21:48Z",
          "updatedAt": "2024-02-29T15:40:11Z",
          "comments": [
            {
              "originalPosition": 87,
              "body": "It means that the `sd_hash` of the key binding JWT matches the SD-JWT.  Maybe we should define this as a term?",
              "createdAt": "2024-02-29T05:21:48Z",
              "updatedAt": "2024-02-29T15:40:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5xzHQd",
          "commit": {
            "abbreviatedOid": "b94409d"
          },
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "OK, I just pushed a commit that I think addresses all the comments here.",
          "createdAt": "2024-02-29T15:41:15Z",
          "updatedAt": "2024-02-29T16:00:49Z",
          "comments": [
            {
              "originalPosition": 56,
              "body": "This text is from pre-existing bullets, but I agree it's not super necessary.",
              "createdAt": "2024-02-29T15:41:15Z",
              "updatedAt": "2024-02-29T16:00:49Z"
            },
            {
              "originalPosition": 87,
              "body": "Actually, it is defined, in the definition of \"Key Binding JWT\"",
              "createdAt": "2024-02-29T15:42:36Z",
              "updatedAt": "2024-02-29T16:00:49Z"
            },
            {
              "originalPosition": 267,
              "body": "I added a comment above to mention that the SD-JWT may have come out of an SD-JWT-KB. \r\n",
              "createdAt": "2024-02-29T15:52:12Z",
              "updatedAt": "2024-02-29T16:00:49Z"
            },
            {
              "originalPosition": 286,
              "body": "Refactored to make the two cases parallel.",
              "createdAt": "2024-02-29T15:53:24Z",
              "updatedAt": "2024-02-29T16:00:49Z"
            },
            {
              "originalPosition": 310,
              "body": "I would actually prefer to just scrap 4.1.  If folks want to use some other KB method, they need to update their processing accordingly.",
              "createdAt": "2024-02-29T15:55:09Z",
              "updatedAt": "2024-02-29T16:00:49Z"
            },
            {
              "originalPosition": 451,
              "body": "Yes, this would indicate that you're talking about an SD-JWT-KB, and a plain SD-JWT is unacceptable.  For example, you could use it in an HTTP Accept header.  I don't feel super strongly about this, though.",
              "createdAt": "2024-02-29T15:58:07Z",
              "updatedAt": "2024-02-29T16:00:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5x9hPd",
          "commit": {
            "abbreviatedOid": "0b7c5ce"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-01T20:24:47Z",
          "updatedAt": "2024-03-01T20:24:47Z",
          "comments": [
            {
              "originalPosition": 87,
              "body": "It's not my most favorite term but the \"Key Binding JWT\" definition right above does indeed say 'A Key Binding JWT is said to \"cover\" a particular SD-JWT if its payload includes a hash of the in its `sd_hash` claim.' ",
              "createdAt": "2024-03-01T20:24:47Z",
              "updatedAt": "2024-03-01T20:24:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5x9lsx",
          "commit": {
            "abbreviatedOid": "0b7c5ce"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-01T20:37:52Z",
          "updatedAt": "2024-03-01T20:37:52Z",
          "comments": [
            {
              "originalPosition": 234,
              "body": "these 4 lines now just aren't quite right (if jwk or jwk...) - here's an attempt to fix by shortening and simplifying: \r\n\r\n```suggestion\r\nkey.  For example, if the SD-JWT contains a `cnf` value with a `jwk` member, the\r\ncould parse the provided JWK and use it to verify the Key Binding JWT.\r\n```",
              "createdAt": "2024-03-01T20:37:52Z",
              "updatedAt": "2024-03-01T20:37:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5x9mf6",
          "commit": {
            "abbreviatedOid": "0b7c5ce"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-01T20:40:35Z",
          "updatedAt": "2024-03-01T20:40:36Z",
          "comments": [
            {
              "originalPosition": 266,
              "body": "```suggestion\r\nUpon receiving an SD-JWT, either directly or as a component of an SD-JWT-KB, a Holder\r\n```",
              "createdAt": "2024-03-01T20:40:35Z",
              "updatedAt": "2024-03-01T20:41:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5x9oCj",
          "commit": {
            "abbreviatedOid": "0b7c5ce"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-01T20:42:55Z",
          "updatedAt": "2024-03-01T20:42:56Z",
          "comments": [
            {
              "originalPosition": 267,
              "body": "Thanks, I made a minor suggestion to that wording but otherwise think it's good enough to allay my concern here. ",
              "createdAt": "2024-03-01T20:42:55Z",
              "updatedAt": "2024-03-01T20:42:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5x9pMf",
          "commit": {
            "abbreviatedOid": "0b7c5ce"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-01T20:44:51Z",
          "updatedAt": "2024-03-01T20:44:51Z",
          "comments": [
            {
              "originalPosition": 513,
              "body": "thanks @bifurcation - I now see a document history bullet somewhere down below for this change \r\n",
              "createdAt": "2024-03-01T20:44:51Z",
              "updatedAt": "2024-03-01T20:44:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5yCtqP",
          "commit": {
            "abbreviatedOid": "0b7c5ce"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-04T03:18:07Z",
          "updatedAt": "2024-03-04T03:18:07Z",
          "comments": [
            {
              "originalPosition": 87,
              "body": "it's not intuitive, at least to me... Can we simply say `tied to that SD-JWT` (I modified the suggestion above)",
              "createdAt": "2024-03-04T03:18:07Z",
              "updatedAt": "2024-03-04T03:18:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5yCtte",
          "commit": {
            "abbreviatedOid": "0b7c5ce"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-04T03:18:29Z",
          "updatedAt": "2024-03-04T03:18:29Z",
          "comments": [
            {
              "originalPosition": 75,
              "body": "```suggestion\r\n   said to be \"tied to\" a particular SD-JWT if its payload includes a hash of the\r\n```\r\nif suggestion in the comment below gets accepted",
              "createdAt": "2024-03-04T03:18:29Z",
              "updatedAt": "2024-03-12T17:18:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5yCt9B",
          "commit": {
            "abbreviatedOid": "0b7c5ce"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-04T03:20:17Z",
          "updatedAt": "2024-03-04T03:20:18Z",
          "comments": [
            {
              "originalPosition": 451,
              "body": "maybe we can add this in a separate PR..?",
              "createdAt": "2024-03-04T03:20:17Z",
              "updatedAt": "2024-03-04T03:20:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5yCuIC",
          "commit": {
            "abbreviatedOid": "0b7c5ce"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-04T03:21:36Z",
          "updatedAt": "2024-03-04T03:21:36Z",
          "comments": [
            {
              "originalPosition": 404,
              "body": "I had to google \"malleable\", but guess that's only me..?",
              "createdAt": "2024-03-04T03:21:36Z",
              "updatedAt": "2024-03-04T03:21:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5yGVbQ",
          "commit": {
            "abbreviatedOid": "0b7c5ce"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-04T13:03:22Z",
          "updatedAt": "2024-03-04T13:03:22Z",
          "comments": [
            {
              "originalPosition": 87,
              "body": "There are several other uses of cover or covering the SD-JWT in this PR FWIW that would also need to be modified.",
              "createdAt": "2024-03-04T13:03:22Z",
              "updatedAt": "2024-03-04T13:15:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5yHzV3",
          "commit": {
            "abbreviatedOid": "0b7c5ce"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-04T15:39:24Z",
          "updatedAt": "2024-03-04T15:39:24Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5yH2-l",
          "commit": {
            "abbreviatedOid": "0b7c5ce"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-04T15:45:33Z",
          "updatedAt": "2024-03-04T15:45:34Z",
          "comments": [
            {
              "originalPosition": 404,
              "body": "Integrity is probably a more well known term",
              "createdAt": "2024-03-04T15:45:33Z",
              "updatedAt": "2024-03-04T15:45:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5yH3OO",
          "commit": {
            "abbreviatedOid": "0b7c5ce"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-04T15:45:58Z",
          "updatedAt": "2024-03-04T15:45:58Z",
          "comments": [
            {
              "originalPosition": 75,
              "body": "\"protect\" ? \"assure\" ?",
              "createdAt": "2024-03-04T15:45:58Z",
              "updatedAt": "2024-03-04T15:45:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5yI3z3",
          "commit": {
            "abbreviatedOid": "74f7b5a"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-04T17:44:05Z",
          "updatedAt": "2024-03-04T17:44:05Z",
          "comments": [
            {
              "originalPosition": 516,
              "body": "```suggestion\r\n   * Be more explicit that the VCDM and SD-JWT VC examples are only illustrative and do not define anything\r\n```",
              "createdAt": "2024-03-04T17:44:05Z",
              "updatedAt": "2024-03-04T17:44:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5yI-Qh",
          "commit": {
            "abbreviatedOid": "e5329f7"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-04T17:57:21Z",
          "updatedAt": "2024-03-04T17:57:22Z",
          "comments": [
            {
              "originalPosition": 333,
              "body": "ref is broken \r\n```suggestion\r\n    1. Determine the public key for the Holder from the SD-JWT (see (#key_binding)).\r\n```",
              "createdAt": "2024-03-04T17:57:22Z",
              "updatedAt": "2024-03-04T17:57:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5zIhDx",
          "commit": {
            "abbreviatedOid": "950bdd3"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-12T16:40:44Z",
          "updatedAt": "2024-03-12T16:40:44Z",
          "comments": [
            {
              "originalPosition": 451,
              "body": "@bifurcation Please add a note under the first paragraph of \"Media Type Registration\" saying:\r\n\r\n> Note: For the media type value used in the `typ` header in the Issuer-signed JWT itself, see (#explicit_typing).\r\n\r\n(That's Section 10.12)",
              "createdAt": "2024-03-12T16:40:44Z",
              "updatedAt": "2024-03-12T16:53:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5zJFiI",
          "commit": {
            "abbreviatedOid": "950bdd3"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-12T17:22:45Z",
          "updatedAt": "2024-03-12T17:22:45Z",
          "comments": [
            {
              "originalPosition": 443,
              "body": "empty parts aren't applicable with sd-jwt-kb \r\n\r\n```suggestion\r\n* Encoding considerations: binary; application/sd-jwt-kb values are a series of base64url-encoded values separated by period ('.') or tilde ('~') characters.\r\n```",
              "createdAt": "2024-03-12T17:22:45Z",
              "updatedAt": "2024-03-12T21:57:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5zJL3L",
          "commit": {
            "abbreviatedOid": "950bdd3"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-12T17:29:45Z",
          "updatedAt": "2024-03-12T17:29:45Z",
          "comments": [
            {
              "originalPosition": 87,
              "body": "Editors discussed this on a call and agree that we prefer saying \"tied to\". I'll make the corresponding comments/suggestions. ",
              "createdAt": "2024-03-12T17:29:45Z",
              "updatedAt": "2024-03-12T17:29:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5zJMw8",
          "commit": {
            "abbreviatedOid": "950bdd3"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-12T17:30:31Z",
          "updatedAt": "2024-03-12T17:55:49Z",
          "comments": [
            {
              "originalPosition": 185,
              "body": "```suggestion\r\nAn SD-JWT-KB without Disclosures:\r\n```",
              "createdAt": "2024-03-12T17:30:55Z",
              "updatedAt": "2024-03-12T17:55:49Z"
            },
            {
              "originalPosition": 188,
              "body": "```suggestion\r\nAn SD-JWT-KB with Disclosures:\r\n```",
              "createdAt": "2024-03-12T17:31:10Z",
              "updatedAt": "2024-03-12T17:55:49Z"
            },
            {
              "originalPosition": 219,
              "body": "```suggestion\r\nThe hash value in the `sd_hash` claim binds the KB-JWT to the specific SD-JWT.\r\nThe `sd_hash` value MUST be taken over the US-ASCII bytes of the\r\n```",
              "createdAt": "2024-03-12T17:42:42Z",
              "updatedAt": "2024-03-12T17:55:49Z"
            },
            {
              "originalPosition": 296,
              "body": "```suggestion\r\n    1. Create a Key Binding JWT tied to the SD-JWT.\r\n```",
              "createdAt": "2024-03-12T17:43:03Z",
              "updatedAt": "2024-03-12T17:55:49Z"
            },
            {
              "originalPosition": 105,
              "body": "```suggestion\r\nWhen a Verifier requires Key Binding, the Holder presents an SD-JWT-KB, which includes the\r\nrelevant SD-JWT.  The SD-JWT-KB encodes the SD-JWT as well as a Key Binding JWT.\r\n```",
              "createdAt": "2024-03-12T17:47:58Z",
              "updatedAt": "2024-03-12T17:55:49Z"
            },
            {
              "originalPosition": 428,
              "body": "```suggestion\r\n*  Claim Description: Digest of the SD-JWT tied to the KB-JWT \r\n```",
              "createdAt": "2024-03-12T17:50:51Z",
              "updatedAt": "2024-03-12T17:55:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5zJjGK",
          "commit": {
            "abbreviatedOid": "2f918e9"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-12T17:56:16Z",
          "updatedAt": "2024-03-12T17:56:16Z",
          "comments": [
            {
              "originalPosition": 87,
              "body": "Those corresponding comments/suggestions aren't quite as straightforward as I'd expected. But it's done. ",
              "createdAt": "2024-03-12T17:56:16Z",
              "updatedAt": "2024-03-12T17:56:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5zM-qy",
          "commit": {
            "abbreviatedOid": "950bdd3"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-12T22:00:13Z",
          "updatedAt": "2024-03-12T22:00:14Z",
          "comments": [
            {
              "originalPosition": 49,
              "body": "```suggestion\r\n  - A format extending the SD-JWT format for the combind transport of the SD-JWT\r\n```",
              "createdAt": "2024-03-12T22:00:14Z",
              "updatedAt": "2024-03-12T22:00:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5zNEEI",
          "commit": {
            "abbreviatedOid": "950bdd3"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-12T22:09:17Z",
          "updatedAt": "2024-03-12T22:09:17Z",
          "comments": [
            {
              "originalPosition": 76,
              "body": "```suggestion\r\nSD-JWT in its `sd_hash` claim.\r\n```",
              "createdAt": "2024-03-12T22:09:17Z",
              "updatedAt": "2024-03-12T22:09:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5zNYSE",
          "commit": {
            "abbreviatedOid": "950bdd3"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-12T22:45:40Z",
          "updatedAt": "2024-03-12T22:45:40Z",
          "comments": [
            {
              "originalPosition": 404,
              "body": "During a call earlier today @danielfett said he'd suggest changes to rework the text in this section to avoid the use of \"malleable\" and rather talk about what integrity is and is not provided in each case.  \r\n\r\nIn the meantime, this would update the subsection title accordingly (and would work with the current text too): \r\n\r\n```suggestion\r\n## Integrity of SD-JWTs and SD-JWT-KBs\r\n```",
              "createdAt": "2024-03-12T22:45:40Z",
              "updatedAt": "2024-03-12T22:52:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5zNguZ",
          "commit": {
            "abbreviatedOid": "950bdd3"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-12T23:18:59Z",
          "updatedAt": "2024-03-12T23:19:00Z",
          "comments": [
            {
              "originalPosition": 419,
              "body": "Here is an attempt at suggested changes to rework the text in this section to avoid the use of \"malleable\" and instead talk about more about integrity. I'd be happy to have @danielfett suggest a better alternative but wanted to put something out there:\r\n\r\n```suggestion\r\nWith an SD-JWT, the Issuer-signed JWT is integrity-protected by the Issuer's\r\nsignature, and the values of the Disclosures are integrity-protected by the digests\r\nincluded therein. The specific set of Disclosures, however,\r\nis not integrity-protected - the SD-JWT can be modified by adding or\r\nremoving Disclosures and still be valid.\r\n\r\nWith an SD-JWT-KB, the set of selected Disclosures is integrity-protected.   \r\nThe signature in the Key Binding JWT covers a\r\nspecific SD-JWT, with a specific Issuer-signed JWT and a specific set of\r\nDisclosures.  Thus, the signature on the Key Binding JWT, in addition to proving\r\nKey Binding, also assures the authenticity and integrity of the set of\r\nDisclosures the Holder disclosed.  The set of Disclosures in an SD-JWT-KB is the set\r\nthat the Holder intended to send; no intermediate party has added, removed, or\r\nmodified the list of Disclosures.\r\n```",
              "createdAt": "2024-03-12T23:19:00Z",
              "updatedAt": "2024-03-12T23:19:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5zPvrg",
          "commit": {
            "abbreviatedOid": "950bdd3"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-13T09:02:40Z",
          "updatedAt": "2024-03-13T09:02:41Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "It would be better to focus on the fact that the SD-JWT-KB can be used for proving something instead of focusing on the binding in the first sentence.\r\n```suggestion\r\nThis document also defines a format for SD-JWTs with Key Binding (SD-JWT-KB).\r\nBy optionally sending an SD-JWT-KB to a\r\nVerifier, the Holder can prove to the verifier that they hold the private key\r\nassociated to the SD-JWT (e.g., using the `cnf` claim [@?RFC7800]). The strength of the binding is conditional upon the trust\r\n```",
              "createdAt": "2024-03-13T09:02:41Z",
              "updatedAt": "2024-03-13T09:02:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5zPx_l",
          "commit": {
            "abbreviatedOid": "950bdd3"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-13T09:07:17Z",
          "updatedAt": "2024-03-13T09:07:17Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "```suggestion\r\n1. SD-JWT is a composite structure issued by the Issuer that consists of the following:\r\n```",
              "createdAt": "2024-03-13T09:07:17Z",
              "updatedAt": "2024-03-13T09:07:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5zP4SN",
          "commit": {
            "abbreviatedOid": "950bdd3"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "I suggested some changes, but overall I'm quite happy with the PR as it is now. Thanks @bifurcation!\r\n\r\nEdit: I still think we should call it \"SD-JWT+KB\", which nicely captures that the KB is an \"add-on\".",
          "createdAt": "2024-03-13T09:19:07Z",
          "updatedAt": "2024-03-13T10:01:05Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "I'm aware that the proposed change is mostly re-using old text, but with the recent changes around JWS JSON-serialization, I propose to reword as follows:\r\n\r\n```suggestion\r\n  - A format for enabling selective disclosure in nested JSON data structures,\r\n    supporting selectively disclosable object properties (name-value pairs) and array elements\r\n  - A format for encoding the selectively disclosable data items\r\n  - A format extending the JWS Compact Serialization, allowing for the combined\r\n    transport of the Issuer-signed JSON data structure and the disclosable data items\r\n  - An alternate format extending the JWS JSON Serialization, also allowing for\r\n    transport of the Issuer-signed JSON data structure and disclosure data\r\n```",
              "createdAt": "2024-03-13T09:19:07Z",
              "updatedAt": "2024-03-13T09:56:14Z"
            },
            {
              "originalPosition": 50,
              "body": "```suggestion\r\n2. SD-JWT-KB is a composite structure that is presented to the verifier that consists of the following:\r\n  - A facility for associating an SD-JWT to a key pair\r\n  - A format for a Key Binding JWT (KB-JWT) that proves possession of the private key of\r\n    the associated key pair\r\n  - A format extending the SD-JWT format for the combined transport of the SD-JWT\r\n    and the KB-JWT\r\n```",
              "createdAt": "2024-03-13T09:21:28Z",
              "updatedAt": "2024-03-13T09:56:14Z"
            },
            {
              "originalPosition": 122,
              "body": "```suggestion\r\n * receives either an SD-JWT or an SD-JWT-KB from the Holder,\r\n * verifies the signature on the SD-JWT (or the the SD-JWT inside the SD-JWT-KB) using the Issuer's public key, and\r\n * verifies the signature on the KB-JWT using the public key included (or referenced) in the SD-JWT, if the Verifier's policy requires Key Binding.\r\n```\r\nSuggest to remove the \"if an SD-JWT-KB was provided\" part as it may be misleading.",
              "createdAt": "2024-03-13T09:29:07Z",
              "updatedAt": "2024-03-13T09:56:14Z"
            },
            {
              "originalPosition": 130,
              "body": "```suggestion\r\nAn SD-JWT is composed of\r\n```",
              "createdAt": "2024-03-13T09:32:36Z",
              "updatedAt": "2024-03-13T09:56:14Z"
            },
            {
              "originalPosition": 136,
              "body": "```suggestion\r\nAn SD-JWT-KB is composed of\r\n```",
              "createdAt": "2024-03-13T09:32:47Z",
              "updatedAt": "2024-03-13T09:56:14Z"
            },
            {
              "originalPosition": 142,
              "body": "```suggestion\r\n* an SD-JWT, and\r\n* a Key Binding JWT.\r\n```",
              "createdAt": "2024-03-13T09:33:12Z",
              "updatedAt": "2024-03-13T09:56:14Z"
            },
            {
              "originalPosition": 110,
              "body": "```suggestion\r\nThe Key Binding JWT encodes a signature by the Holder's private key over\r\n\r\n* a hash of the SD-JWT,\r\n* a nonce to ensure the freshness of the signature, and\r\n* an audience value to indicate the intended audience for the document.\r\n```",
              "createdAt": "2024-03-13T09:33:38Z",
              "updatedAt": "2024-03-13T09:56:14Z"
            },
            {
              "originalPosition": 167,
              "body": "```suggestion\r\non an SD-JWT.  A Verifier that expects an SD-JWT MUST verify that the final\r\n```",
              "createdAt": "2024-03-13T09:37:10Z",
              "updatedAt": "2024-03-13T09:56:14Z"
            },
            {
              "originalPosition": 75,
              "body": "```suggestion\r\n:  A JWT for proving Key Binding as defined in (#kb-jwt).  A Key Binding JWT is\r\n   said to \"be tied to\" a particular SD-JWT if its payload includes a hash of the\r\n```",
              "createdAt": "2024-03-13T09:37:55Z",
              "updatedAt": "2024-03-13T09:56:14Z"
            },
            {
              "originalPosition": 199,
              "body": "```suggestion\r\nThis section defines the Key Binding JWT, which encodes a\r\nsignature over an SD-JWT by the Holder's private key.\r\n```",
              "createdAt": "2024-03-13T09:39:15Z",
              "updatedAt": "2024-03-13T09:56:14Z"
            },
            {
              "originalPosition": 202,
              "body": "```suggestion\r\nThe Key Binding JWT MUST be a JWT according to [@!RFC7519] and its payload MUST contain the following elements:\r\n```",
              "createdAt": "2024-03-13T09:40:00Z",
              "updatedAt": "2024-03-13T09:56:14Z"
            },
            {
              "originalPosition": 297,
              "body": "```suggestion\r\n    2. Assemble the SD-JWT-KB by concatenating the SD-JWT and the Key Binding JWT.\r\n```",
              "createdAt": "2024-03-13T09:43:44Z",
              "updatedAt": "2024-03-13T09:56:14Z"
            },
            {
              "originalPosition": 304,
              "body": "We avoided normative language here in this \"summary\" in order to not duplicate the normative requirement defined below.\r\n```suggestion\r\nan SD-JWT-KB, in addition to the checks outlined in (#sd_jwt_verification), Verifiers need to ensure that\r\n```",
              "createdAt": "2024-03-13T09:45:09Z",
              "updatedAt": "2024-03-13T09:56:14Z"
            },
            {
              "originalPosition": 308,
              "body": "```suggestion\r\n * if Key Binding is required, then the Holder has provided an SD-JWT-KB, and \r\n * the Key Binding JWT is signed by the Holder and valid.\r\n```",
              "createdAt": "2024-03-13T09:46:04Z",
              "updatedAt": "2024-03-13T09:56:14Z"
            },
            {
              "originalPosition": 382,
              "body": "As above, we should not duplicate the normative language.\r\n```suggestion\r\nan invalid Key Binding JWT, then the Verifier will reject the presentation\r\nwhen following the verification steps described in (#verifier_verification).\r\n```",
              "createdAt": "2024-03-13T09:50:10Z",
              "updatedAt": "2024-03-13T09:56:14Z"
            },
            {
              "originalPosition": 393,
              "body": "```suggestion\r\nAny entity in possession of an SD-JWT (including an SD-JWT extracted from an SD-JWT-KB) can forward it to any third party\r\nthat does not enforce Key Binding.\r\n```",
              "createdAt": "2024-03-13T09:52:07Z",
              "updatedAt": "2024-03-13T09:56:14Z"
            },
            {
              "originalPosition": 419,
              "body": "This is perfect, thanks @bc-pi!",
              "createdAt": "2024-03-13T09:53:17Z",
              "updatedAt": "2024-03-13T09:56:14Z"
            },
            {
              "originalPosition": 428,
              "body": "The other way round?\r\n```suggestion\r\n*  Claim Description: Digest of the SD-JWT to which the KB-JWT is tied\r\n```",
              "createdAt": "2024-03-13T09:54:05Z",
              "updatedAt": "2024-03-13T09:56:14Z"
            },
            {
              "originalPosition": 487,
              "body": "```suggestion\r\nThe following is how an SD-JWT-KB that discloses only nationality and the fact that the person is over 18 years old could look like:\r\n```",
              "createdAt": "2024-03-13T09:55:24Z",
              "updatedAt": "2024-03-13T09:56:14Z"
            },
            {
              "originalPosition": 496,
              "body": "```suggestion\r\nThe following is how an SD-JWT-KB that discloses only `type`, `medicinalProductName`, `atcCode` of the vaccine, `type` of the `recipient`, `type`, `order` and `dateOfVaccination` could look like:\r\n```",
              "createdAt": "2024-03-13T09:55:39Z",
              "updatedAt": "2024-03-13T09:56:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5zUKS5",
          "commit": {
            "abbreviatedOid": "950bdd3"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-13T16:27:51Z",
          "updatedAt": "2024-03-13T16:27:51Z",
          "comments": [
            {
              "originalPosition": 428,
              "body": "> The other way round? \r\n\r\nyeah, I think you are right (removing my backwards suggestion)",
              "createdAt": "2024-03-13T16:27:51Z",
              "updatedAt": "2024-03-13T16:29:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5zYA90",
          "commit": {
            "abbreviatedOid": "950bdd3"
          },
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-14T04:35:26Z",
          "updatedAt": "2024-03-14T04:35:26Z",
          "comments": [
            {
              "originalPosition": 87,
              "body": "I don't love \"tied to\", but I can live with it.",
              "createdAt": "2024-03-14T04:35:26Z",
              "updatedAt": "2024-03-14T04:35:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5zYBwv",
          "commit": {
            "abbreviatedOid": "950bdd3"
          },
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-14T04:39:41Z",
          "updatedAt": "2024-03-14T04:39:41Z",
          "comments": [
            {
              "originalPosition": 404,
              "body": "I hesitate to make this change, because \"Integrity\" is about what can't be changed, and this section is about what *can* be changed.",
              "createdAt": "2024-03-14T04:39:41Z",
              "updatedAt": "2024-03-14T04:39:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5zb4Le",
          "commit": {
            "abbreviatedOid": "950bdd3"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-14T13:18:22Z",
          "updatedAt": "2024-03-14T13:18:22Z",
          "comments": [
            {
              "originalPosition": 404,
              "body": "This and the proposed changes below say essentially the same thing. But just re-framed using \"Integrity\" and talking about what can't be changed, which also then describes what can be changed. I belive it's a more productive way to present the concepts. And it avoids the word \"malleable\" which @Sakurann (and the editors) didn't believe was particularly appropriate. ",
              "createdAt": "2024-03-14T13:18:22Z",
              "updatedAt": "2024-03-14T13:18:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ztx19",
          "commit": {
            "abbreviatedOid": "707d3d0"
          },
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-17T06:11:44Z",
          "updatedAt": "2024-03-17T06:11:44Z",
          "comments": [
            {
              "originalPosition": 419,
              "body": "Yep, this looks great.  Frames with integrity, but still articulates that things can be changed.  Thanks for drafting @bc-pi ",
              "createdAt": "2024-03-17T06:11:44Z",
              "updatedAt": "2024-03-17T06:11:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ztx6k",
          "commit": {
            "abbreviatedOid": "1188d83"
          },
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-17T06:14:10Z",
          "updatedAt": "2024-03-17T06:14:10Z",
          "comments": [
            {
              "originalPosition": 451,
              "body": "Done!",
              "createdAt": "2024-03-17T06:14:10Z",
              "updatedAt": "2024-03-17T06:14:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ztyQt",
          "commit": {
            "abbreviatedOid": "fce03b4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-17T06:28:23Z",
          "updatedAt": "2024-03-17T06:28:24Z",
          "comments": [
            {
              "originalPosition": 433,
              "body": "tick tick\r\n\r\n```suggestion\r\nNote: For the media type value used in the `typ` header in the Issuer-signed JWT\r\n```",
              "createdAt": "2024-03-17T06:28:24Z",
              "updatedAt": "2024-03-17T06:28:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ztyS_",
          "commit": {
            "abbreviatedOid": "0b7c5ce"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-17T06:30:14Z",
          "updatedAt": "2024-03-17T06:30:14Z",
          "comments": [
            {
              "originalPosition": 404,
              "body": "unresolving to try and make this subsection title malleable again and line up with the now integrity framed text below\r\n```suggestion\r\n## Integrity of SD-JWTs and SD-JWT-KBs\r\n```",
              "createdAt": "2024-03-17T06:30:14Z",
              "updatedAt": "2024-03-17T06:32:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM50FzQj",
          "commit": {
            "abbreviatedOid": "c3522b2"
          },
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "The presence or absence of a key binding doesn't make it a different data structure.  Rather, it's an instance of use or non-use of an optional feature.\r\n\r\nWe shouldn't bifurcate the data structure by using a different media type depending upon whether the optional feature is used or not.",
          "createdAt": "2024-03-20T00:18:58Z",
          "updatedAt": "2024-03-20T00:18:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM50Wfdl",
          "commit": {
            "abbreviatedOid": "1cea1ba"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-21T12:21:21Z",
          "updatedAt": "2024-03-21T12:21:21Z",
          "comments": [
            {
              "originalPosition": 302,
              "body": "```suggestion\r\n * if Key Binding is required, then the Holder has provided an SD-JWT-KB, and\r\n```",
              "createdAt": "2024-03-21T12:21:21Z",
              "updatedAt": "2024-03-21T12:21:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM50WhAw",
          "commit": {
            "abbreviatedOid": "960c9a0"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-21T12:24:28Z",
          "updatedAt": "2024-03-21T12:24:28Z",
          "comments": [
            {
              "originalPosition": 409,
              "body": "```suggestion\r\nWith an SD-JWT-KB, the set of selected Disclosures is integrity-protected.\r\n```",
              "createdAt": "2024-03-21T12:24:28Z",
              "updatedAt": "2024-03-21T12:24:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM51bK_X",
          "commit": {
            "abbreviatedOid": "3732e67"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-30T20:49:07Z",
          "updatedAt": "2024-03-30T20:49:07Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM55g5Fn",
          "commit": {
            "abbreviatedOid": "292ed55"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-03T17:13:35Z",
          "updatedAt": "2024-05-03T17:13:36Z",
          "comments": [
            {
              "originalPosition": 466,
              "body": "remove the `application/sd-jwt-kb` media type per request by @selfissued and rough consensus of editors and a few others that it's not needed  \r\n```suggestion\r\n```",
              "createdAt": "2024-05-03T17:13:35Z",
              "updatedAt": "2024-05-03T17:13:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM55ha8t",
          "commit": {
            "abbreviatedOid": "92d20f8"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-03T18:39:32Z",
          "updatedAt": "2024-05-03T18:39:33Z",
          "comments": [
            {
              "originalPosition": 71,
              "body": "```suggestion\r\n   said to \"be tied to\" a particular SD-JWT when its payload includes a hash of the\r\n   SD-JWT in its `sd_hash` claim.\r\n```",
              "createdAt": "2024-05-03T18:39:32Z",
              "updatedAt": "2024-05-03T18:39:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM55hc2W",
          "commit": {
            "abbreviatedOid": "50a16e2"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-03T18:43:57Z",
          "updatedAt": "2024-05-03T18:43:57Z",
          "comments": [
            {
              "originalPosition": 227,
              "body": "```suggestion\r\nVerifier could parse the provided JWK and use it to verify the Key Binding JWT.\r\n```",
              "createdAt": "2024-05-03T18:43:57Z",
              "updatedAt": "2024-05-03T18:43:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM55hcIX",
          "commit": {
            "abbreviatedOid": "50a16e2"
          },
          "author": "c2bo",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Not entirely sure about the SD-JWT-KB vs SD-JWT+KB part. Should the kb-jwt then also be renamed to kb+jwt (even outside the typ)?",
          "createdAt": "2024-05-03T18:42:02Z",
          "updatedAt": "2024-05-03T18:45:36Z",
          "comments": [
            {
              "originalPosition": 363,
              "body": "```suggestion\r\n * whether the Holder has provided an SD-JWT+KB or a bare SD-JWT, since otherwise an\r\n   attacker could strip the KB-JWT from an SD-JWT+KB and present the resulting\r\n```",
              "createdAt": "2024-05-03T18:42:02Z",
              "updatedAt": "2024-05-03T18:45:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM55hedj",
          "commit": {
            "abbreviatedOid": "74f36b9"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "pining for the fnords [edit: this was my comment on submitting approval]",
          "createdAt": "2024-05-03T18:48:46Z",
          "updatedAt": "2024-05-03T19:22:25Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM55hucu",
          "commit": {
            "abbreviatedOid": "ce414e2"
          },
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-03T19:34:07Z",
          "updatedAt": "2024-05-03T19:34:08Z",
          "comments": [
            {
              "originalPosition": 65,
              "body": "```suggestion\r\n  control over the same private key during the issuance and presentation. When utilizing Key Binding, an SD-JWT contains\r\n```",
              "createdAt": "2024-05-03T19:34:08Z",
              "updatedAt": "2024-05-03T19:34:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM55huyo",
          "commit": {
            "abbreviatedOid": "ce414e2"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-03T19:35:14Z",
          "updatedAt": "2024-05-03T19:35:15Z",
          "comments": [
            {
              "originalPosition": 65,
              "body": "wfm ",
              "createdAt": "2024-05-03T19:35:15Z",
              "updatedAt": "2024-05-03T19:35:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM55hw0l",
          "commit": {
            "abbreviatedOid": "ce414e2"
          },
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-03T19:41:19Z",
          "updatedAt": "2024-05-03T19:41:20Z",
          "comments": [
            {
              "originalPosition": 324,
              "body": "```suggestion\r\n2. If Key Binding is required and the Holder has provided an SD-JWT without Key Binding, the Verifier MUST reject the presentation.\r\n```",
              "createdAt": "2024-05-03T19:41:19Z",
              "updatedAt": "2024-05-03T19:41:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM55hypA",
          "commit": {
            "abbreviatedOid": "0de80de"
          },
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks for the updates.\r\n\r\nI'd appreciate it if you'd merge my other suggestion, which is a clarification.",
          "createdAt": "2024-05-03T19:47:13Z",
          "updatedAt": "2024-05-03T19:47:13Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM55hzUc",
          "commit": {
            "abbreviatedOid": "ce414e2"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-03T19:49:27Z",
          "updatedAt": "2024-05-03T19:49:27Z",
          "comments": [
            {
              "originalPosition": 324,
              "body": "I think the author of the PR would say that an SD-JWT is now without Key Binding by definition and that might suggest otherwise. How about this as a compromise on clarification? \r\n```suggestion\r\n2. If Key Binding is required and the Holder has provided an SD-JWT (without Key Binding), the Verifier MUST reject the presentation.\r\n```",
              "createdAt": "2024-05-03T19:49:27Z",
              "updatedAt": "2024-05-03T19:49:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM57UDiv",
          "commit": {
            "abbreviatedOid": "0e7a10a"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-21T14:45:40Z",
          "updatedAt": "2024-05-21T14:45:41Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "I'm not sure I'm quite happy with the wording here. We say \"... is a composite structure (...) that consists of the following:\". I'd then expect to see a list of exactly the things making up the SD-JWT, but I find a list of various formats and alternative formats we define in this spec. What about this?\r\n\r\n```suggestion\r\n1. SD-JWT is a composite structure enabling selective disclosure of its contents. The definition in this document comprises the following:\r\n```\r\n\r\nSame applies below for SD-JWT+KB",
              "createdAt": "2024-05-21T14:45:40Z",
              "updatedAt": "2024-05-21T14:45:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM57ULnH",
          "commit": {
            "abbreviatedOid": "0e7a10a"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "I left some editorial suggestions.\r\n\r\nI'll note that we need to make a few changes to the section on JWS JSON Serialization as well, but I filed a separate issue for that: https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/426",
          "createdAt": "2024-05-21T14:58:30Z",
          "updatedAt": "2024-05-21T15:14:43Z",
          "comments": [
            {
              "originalPosition": 65,
              "body": "```suggestion\r\n  control over a private key during the presentation. When utilizing Key Binding, an SD-JWT contains\r\n```\r\nThe 'during issuance' part depends on the issuance protocol.",
              "createdAt": "2024-05-21T14:58:30Z",
              "updatedAt": "2024-05-21T15:14:43Z"
            },
            {
              "originalPosition": 100,
              "body": "```suggestion\r\nWhen a Verifier requires Key Binding, the Holder presents an SD-JWT+KB, consisting of an SD-JWT as well as a Key Binding JWT tied to that SD-JWT.\r\n```",
              "createdAt": "2024-05-21T15:01:05Z",
              "updatedAt": "2024-05-21T15:14:43Z"
            },
            {
              "originalPosition": 117,
              "body": "```suggestion\r\n * verifies the signature on the SD-JWT (or the the SD-JWT inside the SD-JWT+KB) using the Issuer's public key,\r\n * verifies the signature on the KB-JWT using the public key included (or referenced) in the SD-JWT, if the Verifier's policy requires Key Binding, and\r\n```",
              "createdAt": "2024-05-21T15:02:46Z",
              "updatedAt": "2024-05-21T15:14:43Z"
            },
            {
              "originalPosition": 180,
              "body": "The text for these examples should be outside the ```-part. (Can't add a suggestion here, needs to be fixed in the PR.)",
              "createdAt": "2024-05-21T15:05:01Z",
              "updatedAt": "2024-05-21T15:14:43Z"
            },
            {
              "originalPosition": 279,
              "body": "```suggestion\r\nreceives an SD-JWT+KB, it SHOULD be rejected.\r\n```\r\n...to make clear that it's not the issuer that should be rejected.",
              "createdAt": "2024-05-21T15:08:37Z",
              "updatedAt": "2024-05-21T15:14:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM57VyQi",
          "commit": {
            "abbreviatedOid": "0e7a10a"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "comments on comments (am I doing this right?) ",
          "createdAt": "2024-05-21T18:18:19Z",
          "updatedAt": "2024-05-21T18:25:35Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "I think I agree with @danielfett here. ",
              "createdAt": "2024-05-21T18:18:19Z",
              "updatedAt": "2024-05-21T18:25:35Z"
            },
            {
              "originalPosition": 65,
              "body": "That might well be true but note that (I'm pretty sure anyway) you wrote that \"control over the same private key during the issuance and presentation\" text in the first place in an earlier version of this here draft. ",
              "createdAt": "2024-05-21T18:21:28Z",
              "updatedAt": "2024-05-21T18:25:35Z"
            },
            {
              "originalPosition": 100,
              "body": "wfm ",
              "createdAt": "2024-05-21T18:21:53Z",
              "updatedAt": "2024-05-21T18:25:35Z"
            },
            {
              "originalPosition": 180,
              "body": "FWIW that whole thing is currently enclosed in a figure (see https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-08.html#section-5-11) and in the interest of moving along this PR from last year, maybe that change could be addressed in a separate PR or issue? ",
              "createdAt": "2024-05-21T18:24:36Z",
              "updatedAt": "2024-05-21T18:25:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM57aADi",
          "commit": {
            "abbreviatedOid": "0e7a10a"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-22T07:52:58Z",
          "updatedAt": "2024-05-22T07:52:58Z",
          "comments": [
            {
              "originalPosition": 65,
              "body": "Noted, but it would be good to change that anyway.",
              "createdAt": "2024-05-22T07:52:58Z",
              "updatedAt": "2024-05-22T07:52:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM57esCr",
          "commit": {
            "abbreviatedOid": "0e7a10a"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-22T15:34:38Z",
          "updatedAt": "2024-05-22T15:34:38Z",
          "comments": [
            {
              "originalPosition": 180,
              "body": "created issue #428 so will \"resolve\" this conversation here ",
              "createdAt": "2024-05-22T15:34:38Z",
              "updatedAt": "2024-05-22T15:34:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM58_Hbv",
          "commit": {
            "abbreviatedOid": "0e7a10a"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-04T16:44:16Z",
          "updatedAt": "2024-06-04T16:44:17Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "```suggestion\r\nVerifier, the Holder can prove to the Verifier that they hold the private key\r\n```",
              "createdAt": "2024-06-04T16:44:17Z",
              "updatedAt": "2024-06-04T16:44:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM58_IYQ",
          "commit": {
            "abbreviatedOid": "0e7a10a"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-04T16:46:22Z",
          "updatedAt": "2024-06-04T16:46:23Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "but than maybe makes sense to also clarify line 130 to something like `2. SD-JWT+KB is a composite structure enabling cryptographic key binding when presented to the verifier. The definition in this document comprises of the following:`",
              "createdAt": "2024-06-04T16:46:22Z",
              "updatedAt": "2024-06-04T16:46:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM59EcUj",
          "commit": {
            "abbreviatedOid": "322d9c5"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-05T07:51:43Z",
          "updatedAt": "2024-06-05T07:51:44Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "```suggestion\r\n2. SD-JWT+KB is a composite structure enabling cryptographic key binding when presented to the Verifier. The definition in this document comprises the following:\r\n```",
              "createdAt": "2024-06-05T07:51:43Z",
              "updatedAt": "2024-06-05T07:51:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM59Ec18",
          "commit": {
            "abbreviatedOid": "322d9c5"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-05T07:52:35Z",
          "updatedAt": "2024-06-05T07:52:35Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "Yes, as noted in my comment :-) Applied your suggesting with small changes.",
              "createdAt": "2024-06-05T07:52:35Z",
              "updatedAt": "2024-06-05T07:52:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM59Enq8",
          "commit": {
            "abbreviatedOid": "0e7a10a"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-05T08:12:24Z",
          "updatedAt": "2024-06-05T08:12:24Z",
          "comments": [
            {
              "originalPosition": 65,
              "body": "> The 'during issuance' part depends on the issuance protocol.\r\n\r\ncould you elaborate? with authenticated channel, there is no need for KB-JWT and even if it is there it is still `the same private key during the (synchronously happening) issuance and presentation`\r\n\r\ni just find the current text pretty crear..",
              "createdAt": "2024-06-05T08:12:24Z",
              "updatedAt": "2024-06-05T08:12:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM59EoNQ",
          "commit": {
            "abbreviatedOid": "0e7a10a"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-05T08:13:23Z",
          "updatedAt": "2024-06-05T08:13:23Z",
          "comments": [
            {
              "originalPosition": 65,
              "body": "@danielfett i am not sure i prefer a new wording...",
              "createdAt": "2024-06-05T08:13:23Z",
              "updatedAt": "2024-06-05T08:13:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM59GFhv",
          "commit": {
            "abbreviatedOid": "0e7a10a"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-05T10:39:48Z",
          "updatedAt": "2024-06-05T10:39:48Z",
          "comments": [
            {
              "originalPosition": 65,
              "body": "It is good practice, but not a requirement, that the wallet creates the keys and proofs control during issuance. The issuer could create the keys or an issuance protocol could skip the \"proof key control\" part for whatever reason. Therefore, the only place where the control is always proven is during presentation. @Sakurann ",
              "createdAt": "2024-06-05T10:39:48Z",
              "updatedAt": "2024-06-05T10:39:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5957IU",
          "commit": {
            "abbreviatedOid": "deaabdd"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-12T08:35:09Z",
          "updatedAt": "2024-06-12T08:35:09Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6FUQjt",
          "commit": {
            "abbreviatedOid": "d150ec2"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-13T22:06:26Z",
          "updatedAt": "2024-08-13T22:06:26Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "closing the loop on this one with PR #450",
              "createdAt": "2024-08-13T22:06:26Z",
              "updatedAt": "2024-08-13T22:06:26Z"
            }
          ]
        }
      ]
    },
    {
      "number": 396,
      "id": "PR_kwDOHTmVzM5htStn",
      "title": "Fix Issue #365",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/396",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-12-11T17:18:17Z",
      "updatedAt": "2023-12-11T17:27:30Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "27b95a7beae65b4b67b6f6407e24e24899c5db1c",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/fix-365",
      "headRefOid": "3d34d39c4ab1ad94114ad5a1656073efee37b30d",
      "closedAt": "2023-12-11T17:27:30Z",
      "mergedAt": "2023-12-11T17:27:30Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "bc5da6bf899130574ed9866913831d5c3d7429e4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5p11XD",
          "commit": {
            "abbreviatedOid": "e7ef268"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-12-11T17:21:06Z",
          "updatedAt": "2023-12-11T17:21:06Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5p14r-",
          "commit": {
            "abbreviatedOid": "3d34d39"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-12-11T17:27:16Z",
          "updatedAt": "2023-12-11T17:27:16Z",
          "comments": []
        }
      ]
    },
    {
      "number": 397,
      "id": "PR_kwDOHTmVzM5h1wJE",
      "title": "Items from Jeffrey Yasskin's review",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/397",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "which can be found at #389 ",
      "createdAt": "2023-12-12T22:17:32Z",
      "updatedAt": "2024-02-08T17:29:19Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "091f42f8003c45c22eda005f286be6a86b6e9a30",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "yasskin-asking",
      "headRefOid": "11c2b68c8ab01fee93a986e549726d6834904b94",
      "closedAt": "2024-02-08T17:29:19Z",
      "mergedAt": "2024-02-08T17:29:19Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "c6bebaa649fe9d3974ca0cdc002da42341ebfd74"
      },
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I think the following change might be cleaner per `\"Check that the Key Binding JWT is valid in all other respects\" should call a particular algorithm from the other specs that it cites.` in Jefferey's review.\r\n\r\n\"9. Check that the Key Binding JWT is valid in all other respects, per [@!RFC7519] and [@!RFC8725].\"\r\n-> \r\n\"9. Check that the Key Binding JWT is a valid JWT in all other respects, per [@!RFC7519] and [@!RFC8725].\"\r\n",
          "createdAt": "2023-12-21T23:31:49Z",
          "updatedAt": "2023-12-21T23:31:49Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> I think the following change might be cleaner per `\"Check that the Key Binding JWT is valid in all other respects\" should call a particular algorithm from the other specs that it cites.` in Jefferey's review.\r\n> \r\n> \"9. Check that the Key Binding JWT is valid in all other respects, per [@!RFC7519] and [@!RFC8725].\" -> \"9. Check that the Key Binding JWT is a valid JWT in all other respects, per [@!RFC7519] and [@!RFC8725].\"\r\n\r\nSure, that's done in 4442c3a06767498ee24154024d8dff987325b08f ",
          "createdAt": "2023-12-22T13:26:06Z",
          "updatedAt": "2023-12-22T13:26:06Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5q638Y",
          "commit": {
            "abbreviatedOid": "a474e2b"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-22T00:40:04Z",
          "updatedAt": "2023-12-22T00:40:04Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "as Brian said [here](https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/389#issuecomment-1858648845)\r\n\r\n> This draft intentionally doesn't prescribe how keys are distributed, identified, selected, trusted, etc. any more than JWT/JWS do (e.g. https://datatracker.ietf.org/doc/html/rfc7515#section-6, https://datatracker.ietf.org/doc/html/rfc7515#appendix-D, etc) so I think this is redundant and using `cnf` in examples is sufficient.\r\n\r\n```suggestion\r\n```",
              "createdAt": "2023-12-22T00:40:04Z",
              "updatedAt": "2023-12-22T00:40:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5q9was",
          "commit": {
            "abbreviatedOid": "4442c3a"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-22T14:36:42Z",
          "updatedAt": "2023-12-22T14:36:42Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I believe this is a useful area to provide a little more guidance that was previously lacking. ",
              "createdAt": "2023-12-22T14:36:42Z",
              "updatedAt": "2023-12-22T14:36:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5r3BDl",
          "commit": {
            "abbreviatedOid": "4442c3a"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-08T16:41:14Z",
          "updatedAt": "2024-01-08T16:41:14Z",
          "comments": [
            {
              "originalPosition": 112,
              "body": "This looks like it needs more indentation.",
              "createdAt": "2024-01-08T16:41:14Z",
              "updatedAt": "2024-01-08T16:41:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5r3BLE",
          "commit": {
            "abbreviatedOid": "dc14f00"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Thanks for creating the PR!",
          "createdAt": "2024-01-08T16:41:28Z",
          "updatedAt": "2024-01-08T20:37:46Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5r3GiM",
          "commit": {
            "abbreviatedOid": "4442c3a"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-08T16:53:18Z",
          "updatedAt": "2024-01-08T16:53:19Z",
          "comments": [
            {
              "originalPosition": 112,
              "body": "The resultant output is okay https://drafts.oauth.net/oauth-selective-disclosure-jwt/yasskin-asking/draft-ietf-oauth-selective-disclosure-jwt.html#name-document-history ",
              "createdAt": "2024-01-08T16:53:19Z",
              "updatedAt": "2024-01-08T16:53:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5r-iFU",
          "commit": {
            "abbreviatedOid": "dc14f00"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-09T16:37:45Z",
          "updatedAt": "2024-01-09T16:37:45Z",
          "comments": [
            {
              "originalPosition": 112,
              "body": "I didn't expect that, but in that case this is not an issue, thanks!",
              "createdAt": "2024-01-09T16:37:45Z",
              "updatedAt": "2024-01-09T16:37:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5r-moe",
          "commit": {
            "abbreviatedOid": "dc14f00"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-09T16:46:51Z",
          "updatedAt": "2024-01-09T16:46:51Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nThe `jwk` member of the `cnf` claim as defined in Section 3.2 of [@!RFC7800] is\r\nsuggested for doing so, however, other means can be used.\r\n```",
              "createdAt": "2024-01-09T16:46:51Z",
              "updatedAt": "2024-01-09T16:46:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5r_G6j",
          "commit": {
            "abbreviatedOid": "a474e2b"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-09T17:55:46Z",
          "updatedAt": "2024-01-09T17:55:46Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "The text with that guidance has been changed to not use rfc2119 uppercase key words. ",
              "createdAt": "2024-01-09T17:55:46Z",
              "updatedAt": "2024-01-09T17:55:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5va8Gi",
          "commit": {
            "abbreviatedOid": "11c2b68"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-08T06:06:13Z",
          "updatedAt": "2024-02-08T06:06:14Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "```suggestion\r\nNote: The examples throughout this document use the `cnf` claim ([@RFC7800]) to include\r\n```\r\nwas there anything wrong with referencing RFC7800..?",
              "createdAt": "2024-02-08T06:06:13Z",
              "updatedAt": "2024-02-08T06:06:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5va-EW",
          "commit": {
            "abbreviatedOid": "11c2b68"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "one nit, otherwise looks good - thank you, Brian!",
          "createdAt": "2024-02-08T06:15:38Z",
          "updatedAt": "2024-02-08T06:15:38Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5vex63",
          "commit": {
            "abbreviatedOid": "11c2b68"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-08T14:18:21Z",
          "updatedAt": "2024-02-08T14:18:22Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "There's a RFC7800 reference just a few lines before this in the same short subsection. ",
              "createdAt": "2024-02-08T14:18:21Z",
              "updatedAt": "2024-02-08T14:18:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5vgtch",
          "commit": {
            "abbreviatedOid": "11c2b68"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-08T17:29:07Z",
          "updatedAt": "2024-02-08T17:29:07Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "\"fine\" ",
              "createdAt": "2024-02-08T17:29:07Z",
              "updatedAt": "2024-02-08T17:29:08Z"
            }
          ]
        }
      ]
    },
    {
      "number": 398,
      "id": "PR_kwDOHTmVzM5h9NbB",
      "title": "Update draft-ietf-oauth-selective-disclosure-jwt.md",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/398",
      "state": "CLOSED",
      "author": "francis-pouatcha",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Fixed wrong value of base63URL String",
      "createdAt": "2023-12-14T03:15:41Z",
      "updatedAt": "2023-12-14T03:26:40Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "bc5da6bf899130574ed9866913831d5c3d7429e4",
      "headRepository": "francis-pouatcha/oauth-selective-disclosure-jwt",
      "headRefName": "patch-1",
      "headRefOid": "1f0664f972f64aa381f66e3dd9e44a9b566dc6d1",
      "closedAt": "2023-12-14T03:26:25Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 399,
      "id": "PR_kwDOHTmVzM5irzf3",
      "title": "Added another Go implementation",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/399",
      "state": "MERGED",
      "author": "MichaelFraser99",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-12-22T21:36:51Z",
      "updatedAt": "2023-12-29T16:21:34Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "bc5da6bf899130574ed9866913831d5c3d7429e4",
      "headRepository": "MichaelFraser99/oauth-selective-disclosure-jwt",
      "headRefName": "patch-1",
      "headRefOid": "d924036214fc0c17488b5c51446b37b9381bb347",
      "closedAt": "2023-12-29T15:14:43Z",
      "mergedAt": "2023-12-29T15:14:43Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "091f42f8003c45c22eda005f286be6a86b6e9a30"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5rANIl",
          "commit": {
            "abbreviatedOid": "d924036"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-12-22T21:38:39Z",
          "updatedAt": "2023-12-22T21:38:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 400,
      "id": "PR_kwDOHTmVzM5mx6fb",
      "title": "Do not disallow HMAC any longer.",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/400",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "This addresses Issue #369. The rest of the text still refers to asymmetric signatures, but technically, an HMAC is now allowed.",
      "createdAt": "2024-02-13T17:38:26Z",
      "updatedAt": "2024-02-20T16:38:31Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "b3816fa9628e2a94deaa0ea744132914103c21d7",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/fix-369",
      "headRefOid": "2699e007b02119df53f0852c31cc2000dfe45f9e",
      "closedAt": "2024-02-20T16:38:31Z",
      "mergedAt": "2024-02-20T16:38:31Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "8fc13974a52ee50c97ca0c045686f267ebc2be17"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> Just noting that an MAC issuer key is usually not referred to as a private key. Maybe put private in brackets, but I'm unsure.\r\n\r\nThe scope of this PR was intentionally to only remove the explicit prohibition on MAC. Not to explain how it might work or adjust other language about asymmetric signatures or private keys or similar. Just remove the explicit prohibition so that, should some deployment/ecosystem/jurisdiction need to MAC for whatever reason, it's not directly going against a normative must. ",
          "createdAt": "2024-02-13T23:43:56Z",
          "updatedAt": "2024-02-19T13:38:10Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5v_k9E",
          "commit": {
            "abbreviatedOid": "2699e00"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-13T21:19:07Z",
          "updatedAt": "2024-02-13T21:19:07Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5v_20s",
          "commit": {
            "abbreviatedOid": "2699e00"
          },
          "author": "paulbastian",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "Just noting that an MAC issuer key is usually not referred to as a private key. Maybe put private in brackets, but I'm unsure.",
          "createdAt": "2024-02-13T22:00:28Z",
          "updatedAt": "2024-02-13T22:00:28Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5wCtkk",
          "commit": {
            "abbreviatedOid": "2699e00"
          },
          "author": "paulbastian",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-14T09:20:31Z",
          "updatedAt": "2024-02-14T09:20:31Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5woVof",
          "commit": {
            "abbreviatedOid": "2699e00"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-20T07:00:52Z",
          "updatedAt": "2024-02-20T07:00:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 401,
      "id": "PR_kwDOHTmVzM5nJIcz",
      "title": "Move 'Improve unlinkability considerations' doc history entry to the correct draft (-08)",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/401",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-02-16T23:30:46Z",
      "updatedAt": "2024-02-20T16:44:51Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "b3816fa9628e2a94deaa0ea744132914103c21d7",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "fix-doc-history-miss-by-dr",
      "headRefOid": "9773f9f287ef016fa0c80201c9f0bac159ad3ec7",
      "closedAt": "2024-02-20T16:44:50Z",
      "mergedAt": "2024-02-20T16:44:50Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "95a749f776abcc01d11fffcb623908c3c21a4b2c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5wbqCG",
          "commit": {
            "abbreviatedOid": "9773f9f"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-17T01:30:51Z",
          "updatedAt": "2024-02-17T01:30:51Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5wtZJO",
          "commit": {
            "abbreviatedOid": "9773f9f"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-20T16:44:43Z",
          "updatedAt": "2024-02-20T16:44:43Z",
          "comments": []
        }
      ]
    },
    {
      "number": 402,
      "id": "PR_kwDOHTmVzM5nW3pq",
      "title": "changed the section title to \"Key Binding\"",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/402",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #352.",
      "createdAt": "2024-02-20T06:59:27Z",
      "updatedAt": "2024-02-20T16:47:42Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "95a749f776abcc01d11fffcb623908c3c21a4b2c",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "rename-section",
      "headRefOid": "c11be08d96d50b0620432e593e92d759a60b96ad",
      "closedAt": "2024-02-20T16:47:42Z",
      "mergedAt": "2024-02-20T16:47:42Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "fc36fd86ce101c5f003ac977f78a23bd79fa634c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5wtaWX",
          "commit": {
            "abbreviatedOid": "c11be08"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-20T16:46:34Z",
          "updatedAt": "2024-02-20T16:46:47Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5wtapX",
          "commit": {
            "abbreviatedOid": "c11be08"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-20T16:47:08Z",
          "updatedAt": "2024-02-20T16:47:08Z",
          "comments": []
        }
      ]
    },
    {
      "number": 404,
      "id": "PR_kwDOHTmVzM5ndFaV",
      "title": "Remove mention of unspecified key binding methods",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/404",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Remove mention of unspecified key binding methods and the Enveloping SD-JWTs section (issue #383)\r\n\r\nEditor's copy preview of this PR: https://drafts.oauth.net/oauth-selective-disclosure-jwt/remove-mention-of-unspecified-key-binding-methods/draft-ietf-oauth-selective-disclosure-jwt.html",
      "createdAt": "2024-02-20T23:48:22Z",
      "updatedAt": "2024-02-27T17:26:57Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "fc36fd86ce101c5f003ac977f78a23bd79fa634c",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "remove-mention-of-unspecified-key-binding-methods",
      "headRefOid": "4db52a2363147492652ed6a7f7744876b38fe285",
      "closedAt": "2024-02-27T17:26:57Z",
      "mergedAt": "2024-02-27T17:26:57Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "894905aa7985a3e7e7636ff740a8b8fbd9fd111f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5xcSWJ",
          "commit": {
            "abbreviatedOid": "ac34352"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-27T11:25:15Z",
          "updatedAt": "2024-02-27T11:25:15Z",
          "comments": [
            {
              "originalPosition": 52,
              "body": "```suggestion\r\nexcept that the SD-JWT does not need to be split into component parts and the disclosures\r\n```",
              "createdAt": "2024-02-27T11:25:15Z",
              "updatedAt": "2024-02-27T11:25:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5xcSdu",
          "commit": {
            "abbreviatedOid": "ac34352"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Thank you, approved with one nit.",
          "createdAt": "2024-02-27T11:25:31Z",
          "updatedAt": "2024-02-27T11:25:31Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5xgBJ1",
          "commit": {
            "abbreviatedOid": "4db52a2"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-27T17:11:33Z",
          "updatedAt": "2024-02-27T17:11:33Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "```suggestion\r\n3. If Key Binding JWT is required:\r\n```\r\n\r\nif Key Binding is required, but can be provided using means other than KB JWT, the current 3.1 is too strict",
              "createdAt": "2024-02-27T17:11:33Z",
              "updatedAt": "2024-02-27T17:11:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5xgMlB",
          "commit": {
            "abbreviatedOid": "4db52a2"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "noting that this change solidifies that to be compliant to the sd-jwt spec, one must use kb jwt for key binding, more than merely removing a note that key binding can be provided using means other than kb jwt.",
          "createdAt": "2024-02-27T17:21:55Z",
          "updatedAt": "2024-02-27T17:21:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 405,
      "id": "PR_kwDOHTmVzM5n9vZ6",
      "title": "be more explicit that VC examples do not define anything",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/405",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "be more explicit that the VCDM and SD-JWT VC examples are only illustrative and do not define anything (for #341)\r\n\r\npreview links to the two relevant appendix parts: \r\nhttps://drafts.oauth.net/oauth-selective-disclosure-jwt/examples-are-only-examples/draft-ietf-oauth-selective-disclosure-jwt.html#appendix-A\r\n\r\nhttps://drafts.oauth.net/oauth-selective-disclosure-jwt/examples-are-only-examples/draft-ietf-oauth-selective-disclosure-jwt.html#appendix-A.4\r\n",
      "createdAt": "2024-02-26T20:47:27Z",
      "updatedAt": "2024-02-29T13:08:47Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "894905aa7985a3e7e7636ff740a8b8fbd9fd111f",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "examples-are-only-examples",
      "headRefOid": "01495b4e900cc132cc8452bca9a0176d18a1c3d6",
      "closedAt": "2024-02-29T13:08:47Z",
      "mergedAt": "2024-02-29T13:08:47Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "e13ecce1ba7ddb835d7b9a38372ec2afba59ba84"
      },
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "discussed to add a sentence at line 1513 that data structure and claim names are hypothetical. @sakurann to do",
          "createdAt": "2024-02-27T17:00:15Z",
          "updatedAt": "2024-02-27T17:01:16Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> discussed to add a sentence at line 1513 that data structure and claim names are hypothetical. @Sakurann to do\r\n\r\nPerspective text from SD-JWT VC that tries to say similar things:\r\n> Important: The following examples are not normative and provided for\r\n> ~~illustration~~ illustrative purposes only. In particular, neither the structure of the claims\r\n> nor the selection of selectively disclosable claims are normative.",
          "createdAt": "2024-02-27T18:00:11Z",
          "updatedAt": "2024-02-27T18:35:58Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> > discussed to add a sentence at line 1513 that data structure and claim names are hypothetical. @Sakurann to do\r\n> \r\n> Perspective text from SD-JWT VC that tries to say similar things:\r\n> \r\n> > Important: The following examples are not normative and provided for\r\n> > ~illustration~ illustrative purposes only. In particular, neither the structure of the claims\r\n> > nor the selection of selectively disclosable claims are normative.\r\n\r\nI added that text at start of the whole examples appendix 0bd026ba5f802a79c790822f875ea348647fb11c\r\n\r\nAnd updated the text at the start of the VCDM example along the lines of @Sakurann's suggestion 30c847c605fd06064ade786ff9c3f134b9ff32af \r\n\r\nI think this one is ready for review again. ",
          "createdAt": "2024-02-28T19:57:50Z",
          "updatedAt": "2024-02-28T19:57:50Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "The only changes Dr. @danielfett hasn't seen since he approved are text he wrote/suggested borrowed from SD-JWT VC so I think it's ok to go ahead and merge. ",
          "createdAt": "2024-02-29T13:06:47Z",
          "updatedAt": "2024-02-29T13:06:47Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5xcRzE",
          "commit": {
            "abbreviatedOid": "667adf6"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-27T11:24:04Z",
          "updatedAt": "2024-02-27T11:24:04Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5xfrmE",
          "commit": {
            "abbreviatedOid": "667adf6"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-27T16:43:55Z",
          "updatedAt": "2024-02-27T16:43:55Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "I think the language should align with another example.\r\n\r\n```suggestion\r\nThis is a non-normative example how the artifacts defined in this specification\r\ncould be used to express a W3C Verifiable Credentials Data Model v2.0 [@VC_DATA_v2.0] payload.\r\n```",
              "createdAt": "2024-02-27T16:43:55Z",
              "updatedAt": "2024-02-27T16:45:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5xfroF",
          "commit": {
            "abbreviatedOid": "667adf6"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-27T16:43:57Z",
          "updatedAt": "2024-02-27T16:43:57Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "`hypothetical` feels too strong to me.\r\n\r\n```suggestion\r\nThis is a non-normative example how the artifacts defined in this specification\r\ncould be used to express an SD-JWT-based Verifiable Credential [@I-D.ietf-oauth-sd-jwt-vc] with\r\nPerson Identification Data (PID) defined in [@EUDIW.ARF].\r\n```",
              "createdAt": "2024-02-27T16:43:57Z",
              "updatedAt": "2024-02-27T16:44:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5xfxqC",
          "commit": {
            "abbreviatedOid": "667adf6"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-27T16:50:30Z",
          "updatedAt": "2024-02-27T16:50:30Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "or something like this:\r\n\r\n```suggestion\r\nThis example shows how the artifacts defined in this specification could be used to represent\r\nSD-JWT-based Verifiable Credentials (SD-JWT VC) as defined in [@I-D.ietf-oauth-sd-jwt-vc].\r\n```",
              "createdAt": "2024-02-27T16:50:30Z",
              "updatedAt": "2024-02-27T16:54:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5xf5Aw",
          "commit": {
            "abbreviatedOid": "667adf6"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-27T16:59:22Z",
          "updatedAt": "2024-02-27T16:59:23Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "ok, so I think editors discussed to merge #407 first, and not cover in this PR?",
              "createdAt": "2024-02-27T16:59:23Z",
              "updatedAt": "2024-02-27T16:59:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5xgt_S",
          "commit": {
            "abbreviatedOid": "ff541be"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-27T18:02:57Z",
          "updatedAt": "2024-02-27T18:02:57Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "I just happened to notice this was in the wrong draft revision when resolving conflicts merging in master ",
              "createdAt": "2024-02-27T18:02:57Z",
              "updatedAt": "2024-02-27T18:02:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5xg0HR",
          "commit": {
            "abbreviatedOid": "667adf6"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-27T18:11:14Z",
          "updatedAt": "2024-02-27T18:11:15Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "#407 was merged and addresses this part ",
              "createdAt": "2024-02-27T18:11:14Z",
              "updatedAt": "2024-02-27T18:11:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5xg18Z",
          "commit": {
            "abbreviatedOid": "ff541be"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-27T18:13:38Z",
          "updatedAt": "2024-02-27T18:13:38Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "Thanks, I seem to be bad at putting changelog entries in the right place.",
              "createdAt": "2024-02-27T18:13:38Z",
              "updatedAt": "2024-02-27T18:13:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5xg6Mv",
          "commit": {
            "abbreviatedOid": "667adf6"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-27T18:19:17Z",
          "updatedAt": "2024-02-27T18:19:18Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "riffing on @Sakurann's suggestion \r\n```suggestion\r\nThis non-normative example illustrates how the artifacts defined in this specification\r\ncould be used to express a W3C Verifiable Credentials Data Model v2.0 [@VC_DATA_v2.0] payload.\r\n```",
              "createdAt": "2024-02-27T18:19:17Z",
              "updatedAt": "2024-02-28T16:40:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5xhCrf",
          "commit": {
            "abbreviatedOid": "ff541be"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-27T18:29:06Z",
          "updatedAt": "2024-02-27T18:29:06Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "Maybe because I indented -08 differently than the others? It's my fault... ",
              "createdAt": "2024-02-27T18:29:06Z",
              "updatedAt": "2024-02-27T18:29:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5xs_Mv",
          "commit": {
            "abbreviatedOid": "0bd026b"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "minor suggestion, but LGTM - thank you.",
          "createdAt": "2024-02-28T23:05:47Z",
          "updatedAt": "2024-02-28T23:05:47Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5xs_WC",
          "commit": {
            "abbreviatedOid": "0bd026b"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-28T23:06:25Z",
          "updatedAt": "2024-02-28T23:06:26Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nnor the selection of selectively disclosable claims is normative.\r\n```\r\n\r\nneither ... or ... is ... . I think",
              "createdAt": "2024-02-28T23:06:25Z",
              "updatedAt": "2024-02-28T23:06:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5xtaGO",
          "commit": {
            "abbreviatedOid": "5402c1d"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-29T00:50:09Z",
          "updatedAt": "2024-02-29T00:50:09Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nImportant: The following examples are not normative and are provided for\r\n```",
              "createdAt": "2024-02-29T00:50:09Z",
              "updatedAt": "2024-02-29T00:50:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5xtaq8",
          "commit": {
            "abbreviatedOid": "0bd026b"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-29T00:51:09Z",
          "updatedAt": "2024-02-29T00:51:10Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "is it is ",
              "createdAt": "2024-02-29T00:51:09Z",
              "updatedAt": "2024-02-29T00:51:10Z"
            }
          ]
        }
      ]
    },
    {
      "number": 406,
      "id": "PR_kwDOHTmVzM5oDE6h",
      "title": "doc: add owf sd-jwt typescript package",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/406",
      "state": "MERGED",
      "author": "lukasjhan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Hello guys, I am currently working on a Typescript implementation of SD-JWT at Open Wallet Foundation.\r\nI want to post a link to my library here\r\n\r\nAdditionally, \r\n\r\n- Our homepage: https://sdjwt.js.org \r\n- Debugging website: https://sdjwt.co\r\n\r\nIf it looks good to add the homepage and debugging site as well, please let me know and I will edit it. :)\r\n\r\nThank you.",
      "createdAt": "2024-02-27T13:50:14Z",
      "updatedAt": "2024-02-27T17:11:11Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "fc36fd86ce101c5f003ac977f78a23bd79fa634c",
      "headRepository": "lukasjhan/oauth-selective-disclosure-jwt",
      "headRefName": "doc/owf-sd-jwt",
      "headRefOid": "cdea39bbba295f1b072748ee6274763aa816d1d5",
      "closedAt": "2024-02-27T17:11:11Z",
      "mergedAt": "2024-02-27T17:11:10Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "1e4e78feae2bfdbc43086d289fe6bc61eeb02bd3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5xfZwF",
          "commit": {
            "abbreviatedOid": "cdea39b"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-27T16:25:00Z",
          "updatedAt": "2024-02-27T16:25:00Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5xfa8k",
          "commit": {
            "abbreviatedOid": "cdea39b"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "thank you! I think you should add your debugging page next to your GH repo page. also, great domains :)",
          "createdAt": "2024-02-27T16:26:42Z",
          "updatedAt": "2024-02-27T16:26:42Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5xfd9O",
          "commit": {
            "abbreviatedOid": "cdea39b"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-27T16:30:37Z",
          "updatedAt": "2024-02-27T16:30:37Z",
          "comments": []
        }
      ]
    },
    {
      "number": 407,
      "id": "PR_kwDOHTmVzM5oEb4z",
      "title": "Update PID example",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/407",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Update the PID example to what our current thinking for the design is. Conflicts with PR #405, but that should be easy to resolve (just use the change from this PR).\r\n\r\nLink for all the link afficionados: https://drafts.oauth.net/oauth-selective-disclosure-jwt/danielfett/update-pid-example/draft-ietf-oauth-selective-disclosure-jwt.html#name-example-4a-sd-jwt-based-ver",
      "createdAt": "2024-02-27T16:24:39Z",
      "updatedAt": "2024-02-27T17:57:30Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "fc36fd86ce101c5f003ac977f78a23bd79fa634c",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/update-pid-example",
      "headRefOid": "98fb1a5b686efa5d5b1f3c165af033270f02b9b0",
      "closedAt": "2024-02-27T17:10:06Z",
      "mergedAt": "2024-02-27T17:10:06Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "4342a53680c2f5c70c5d4cc103cbd0005222a92e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5xf27Y",
          "commit": {
            "abbreviatedOid": "2ac9367"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-27T16:56:25Z",
          "updatedAt": "2024-02-27T16:56:25Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nThis example shows how the artifacts defined in this specification could be\r\nused in the context of SD-JWT-based Verifiable\r\nCredentials (SD-JWT VC) [@I-D.ietf-oauth-sd-jwt-vc] to represent the concept of\r\na Person Identification Data (PID) [@EUDIW.ARF] using the data of\r\na German citizen.\r\n```",
              "createdAt": "2024-02-27T16:56:25Z",
              "updatedAt": "2024-02-27T17:08:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5xf_zu",
          "commit": {
            "abbreviatedOid": "2ac9367"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-27T17:09:30Z",
          "updatedAt": "2024-02-27T17:09:30Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5xgAG-",
          "commit": {
            "abbreviatedOid": "98fb1a5"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-27T17:10:00Z",
          "updatedAt": "2024-02-27T17:10:00Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5xgpo2",
          "commit": {
            "abbreviatedOid": "98fb1a5"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-27T17:57:23Z",
          "updatedAt": "2024-02-27T17:57:30Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "wait... you keep putting these in the wrong draft # ",
              "createdAt": "2024-02-27T17:57:23Z",
              "updatedAt": "2024-02-27T17:57:30Z"
            }
          ]
        }
      ]
    },
    {
      "number": 408,
      "id": "PR_kwDOHTmVzM5oF2Hh",
      "title": "Fix the PID example",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/408",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Remove `vct#integrity` that is not yet defined and remove the disclosure of the age which for whatever reason didn't work.",
      "createdAt": "2024-02-27T19:22:53Z",
      "updatedAt": "2024-03-04T15:19:39Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "894905aa7985a3e7e7636ff740a8b8fbd9fd111f",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/fix-pid-example",
      "headRefOid": "17aa50a3f78dfaa1348eb1e5a4272ce2d534454b",
      "closedAt": "2024-03-04T15:19:38Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "#411 is better than this :-)",
          "createdAt": "2024-03-04T15:19:38Z",
          "updatedAt": "2024-03-04T15:19:38Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5xi1pc",
          "commit": {
            "abbreviatedOid": "17aa50a"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "~~Looks okay to address the immediate issues now.~~",
          "createdAt": "2024-02-27T22:45:06Z",
          "updatedAt": "2024-02-29T17:36:02Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "We should probably chase this down sometime sooner rather than later (some issue with the yaml or a bug in the library maybe?). ",
              "createdAt": "2024-02-27T22:45:06Z",
              "updatedAt": "2024-02-27T22:46:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5xnlpA",
          "commit": {
            "abbreviatedOid": "17aa50a"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-28T12:57:07Z",
          "updatedAt": "2024-02-28T12:57:08Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "created \"disclosing age_equal_or_over not working\" #409 to track it",
              "createdAt": "2024-02-28T12:57:07Z",
              "updatedAt": "2024-02-28T12:57:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5x0JDP",
          "commit": {
            "abbreviatedOid": "17aa50a"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/411 changes the quoting in the yaml so the age_equal_or_over 18 works, which i think is preferable to this ",
          "createdAt": "2024-02-29T17:38:43Z",
          "updatedAt": "2024-02-29T17:38:43Z",
          "comments": []
        }
      ]
    },
    {
      "number": 410,
      "id": "PR_kwDOHTmVzM5oO0fQ",
      "title": "more consistent treatment of a Disclosure vs its contents",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/410",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Editorial updates for more consistent treatment of a Disclosure vs the contents of a Disclosure (to fix #358 Confusing terminology)\r\n\r\nEditor's draft PR preview: https://drafts.oauth.net/oauth-selective-disclosure-jwt/somewhat-less-confusing-terminology/draft-ietf-oauth-selective-disclosure-jwt.html",
      "createdAt": "2024-02-28T23:52:40Z",
      "updatedAt": "2024-03-04T16:13:10Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "e13ecce1ba7ddb835d7b9a38372ec2afba59ba84",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "somewhat-less-confusing-terminology",
      "headRefOid": "1f5d02c098e9edfe048fed8ffcb9e8e50425947c",
      "closedAt": "2024-03-04T16:13:10Z",
      "mergedAt": "2024-03-04T16:13:10Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "d2d76798327b2652f8083b32ccf61d21ef76bd70"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5yCogj",
          "commit": {
            "abbreviatedOid": "1f5d02c"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-04T02:52:32Z",
          "updatedAt": "2024-03-04T02:52:33Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "```suggestion\r\nThe digest MUST be taken over the Disclosure, i.e., the US-ASCII bytes of the base64url-encoded value. This follows the convention in JWS [@!RFC7515] and JWE [@RFC7516]. The bytes of the digest MUST then be base64url-encoded.\r\n```",
              "createdAt": "2024-03-04T02:52:32Z",
              "updatedAt": "2024-03-04T16:10:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5yCoqk",
          "commit": {
            "abbreviatedOid": "1f5d02c"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "made one suggestion, but overall, looks good to me! thank you!",
          "createdAt": "2024-03-04T02:53:35Z",
          "updatedAt": "2024-03-04T02:53:35Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5yHodK",
          "commit": {
            "abbreviatedOid": "1f5d02c"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Looks good to me, thank you!",
          "createdAt": "2024-03-04T15:21:06Z",
          "updatedAt": "2024-03-04T15:21:06Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5yHpFz",
          "commit": {
            "abbreviatedOid": "1f5d02c"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-04T15:22:12Z",
          "updatedAt": "2024-03-04T15:22:12Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "\"i.e.\" would work slightly better than the \"which is\" in this case, but I'm also fine with the original wording.",
              "createdAt": "2024-03-04T15:22:12Z",
              "updatedAt": "2024-03-04T15:22:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5yIG-g",
          "commit": {
            "abbreviatedOid": "1f5d02c"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-04T16:12:37Z",
          "updatedAt": "2024-03-04T16:12:37Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "ok w/ not changing ",
              "createdAt": "2024-03-04T16:12:37Z",
              "updatedAt": "2024-03-04T16:12:37Z"
            }
          ]
        }
      ]
    },
    {
      "number": 411,
      "id": "PR_kwDOHTmVzM5oUmgR",
      "title": "Fix PID example's age disclosure",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/411",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fix the disclosure of the age >= 18 in the PID example (something with type conversion and quoting in the yaml) and remove the not yet defined vct#integrity\r\n\r\nfixes issue #409\r\n\r\nalternative to PR #408 \r\n\r\n\r\nhttps://drafts.oauth.net/oauth-selective-disclosure-jwt/fix-age-in-pid-example/draft-ietf-oauth-selective-disclosure-jwt.html#appendix-A.3-57 does now have ~ `\"age_equal_or_over\": {\"18\": true} ` show up\r\n\r\n",
      "createdAt": "2024-02-29T17:35:03Z",
      "updatedAt": "2024-03-04T15:19:03Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "e13ecce1ba7ddb835d7b9a38372ec2afba59ba84",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "fix-age-in-pid-example",
      "headRefOid": "d8b5930acaefe4471adcb169e5ce73473720de4c",
      "closedAt": "2024-03-04T15:19:03Z",
      "mergedAt": "2024-03-04T15:19:03Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "53822424dbaab149e847bc7d7110a5ed6e8a79fc"
      },
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I wouldn't have expected that this fixes anything, but TIL I guess?",
          "createdAt": "2024-03-04T15:18:42Z",
          "updatedAt": "2024-03-04T15:18:42Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5yCsiP",
          "commit": {
            "abbreviatedOid": "d8b5930"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-04T03:09:45Z",
          "updatedAt": "2024-03-04T03:09:45Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5yHnI4",
          "commit": {
            "abbreviatedOid": "d8b5930"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Thanks for fixing this!",
          "createdAt": "2024-03-04T15:18:56Z",
          "updatedAt": "2024-03-04T15:18:56Z",
          "comments": []
        }
      ]
    },
    {
      "number": 412,
      "id": "PR_kwDOHTmVzM5oncqB",
      "title": "Tidy up the -08 Document History",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/412",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-03-04T17:09:29Z",
      "updatedAt": "2024-03-04T17:11:47Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "d2d76798327b2652f8083b32ccf61d21ef76bd70",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "tidy-08-history",
      "headRefOid": "cfd1ad7720a6480c468a0f0ee6e1d8acd8195e9f",
      "closedAt": "2024-03-04T17:11:47Z",
      "mergedAt": "2024-03-04T17:11:47Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "a6b8fe9493c075c5ff143230fc0020d805897929"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 413,
      "id": "PR_kwDOHTmVzM5onivt",
      "title": "Just add -09 to the Document History to help future PRs remember",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/413",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-03-04T17:25:05Z",
      "updatedAt": "2024-03-04T17:27:13Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "a6b8fe9493c075c5ff143230fc0020d805897929",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "starting-09",
      "headRefOid": "7187ec242db185b87c79e8983f9c4b758c230c0d",
      "closedAt": "2024-03-04T17:27:13Z",
      "mergedAt": "2024-03-04T17:27:13Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "7dd0444e630ecbdf9e65a5f6c839ec3bcc515a9e"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 414,
      "id": "PR_kwDOHTmVzM5pEG3E",
      "title": "Rework JSON Serialization section",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/414",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "This addresses Issue #403 and #392 \r\n\r\nUses [this](https://github.com/openwallet-foundation-labs/sd-jwt-python/pull/19) new branch in sd-jwt-python.\r\n\r\nRendered version: https://drafts.oauth.net/oauth-selective-disclosure-jwt/danielfett/new-json-serialization/draft-ietf-oauth-selective-disclosure-jwt.html",
      "createdAt": "2024-03-08T10:09:19Z",
      "updatedAt": "2024-05-15T14:27:58Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "3de100505ecfd85ba238d2f017959620f8170658",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/new-json-serialization",
      "headRefOid": "8f21518b1f60fab0a552afc687a1807d1824ce50",
      "closedAt": "2024-05-15T14:27:58Z",
      "mergedAt": "2024-05-15T14:27:58Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "aa212faf5f2f9b053b0f4a3483e839aadd7792c9"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "This one needs a doc history entry under -09 :) ",
          "createdAt": "2024-03-09T00:21:14Z",
          "updatedAt": "2024-03-09T00:21:14Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "> This one needs a doc history entry under -09 :)\r\n\r\nAdded!",
          "createdAt": "2024-03-11T08:53:43Z",
          "updatedAt": "2024-03-11T08:53:43Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5yw4v3",
          "commit": {
            "abbreviatedOid": "aeb2ad8"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-08T17:28:09Z",
          "updatedAt": "2024-03-08T17:28:09Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "My first read of this last sentence had me thinking it was only about using the first signature value for constructing the \"Issuer-signed JWT\" part for input to the `sd_hash`. \r\n\r\nBut I think it's also trying to say that, in the case of multiple signatures in the general serialization, the `disclosures` can only show up (and be used for constructing the `sd_hash` input) in the `header` of first of the `signatures` array.  And that the `kb_jwt` has to be there too.\r\n\r\nAnd now I see that is what is said in the General JSON Serialization subsection below. Sorry!\r\n\r\nBut a bit more clarity here might still be good? I don't know that this is that much better but maybe:\r\n\r\n```suggestion\r\none is used for the Disclosures and Key Binding JWT. \r\n```\r\n\r\nSide note: using only the first one feels kinda icky TBH and the general issue was one reason I'd tried to avoid using the unprotected header for the SD-JWT pieces. But it seems a pragmatic way to do this given all the factors and constraints involved.",
              "createdAt": "2024-03-08T17:28:09Z",
              "updatedAt": "2024-03-08T17:36:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5y3wyr",
          "commit": {
            "abbreviatedOid": "aeb2ad8"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-11T08:50:15Z",
          "updatedAt": "2024-03-11T08:50:15Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "Thanks, I think the clarification is useful! If we can come up with a better way than just using the first disclosure, I would be open to that.",
              "createdAt": "2024-03-11T08:50:15Z",
              "updatedAt": "2024-03-11T08:50:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5y54vX",
          "commit": {
            "abbreviatedOid": "aeb2ad8"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-11T13:06:56Z",
          "updatedAt": "2024-03-11T13:06:56Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "Yeah, with the General JSON Serialization and wanting to use the unprotected headers for JAdES, I think that going with the first signature element is probably the most reasonable thing to do.",
              "createdAt": "2024-03-11T13:06:56Z",
              "updatedAt": "2024-03-11T13:06:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM55GGfH",
          "commit": {
            "abbreviatedOid": "812f334"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-30T14:57:32Z",
          "updatedAt": "2024-04-30T14:57:32Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "disclosures and paylaod need to be base64 url encoded before being concatenated with `.`, no?",
              "createdAt": "2024-04-30T14:57:32Z",
              "updatedAt": "2024-04-30T14:57:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM55GJow",
          "commit": {
            "abbreviatedOid": "812f334"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-30T15:00:50Z",
          "updatedAt": "2024-04-30T15:00:50Z",
          "comments": [
            {
              "originalPosition": 79,
              "body": "Disclosures can be found in the unprotected header, no? I am probably just not reading this right..",
              "createdAt": "2024-04-30T15:00:50Z",
              "updatedAt": "2024-04-30T15:00:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM55GVyZ",
          "commit": {
            "abbreviatedOid": "812f334"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-30T15:12:06Z",
          "updatedAt": "2024-04-30T15:12:06Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "ok, I read unprotected header instead of protected header, all good.",
              "createdAt": "2024-04-30T15:12:06Z",
              "updatedAt": "2024-04-30T15:12:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM55GWeC",
          "commit": {
            "abbreviatedOid": "812f334"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-30T15:13:20Z",
          "updatedAt": "2024-04-30T15:13:21Z",
          "comments": [
            {
              "originalPosition": 79,
              "body": "```suggestion\r\n   can be found in the respective member of the JSON object in the unprotected header.\r\n```\r\nsomething like this?\r\n",
              "createdAt": "2024-04-30T15:13:21Z",
              "updatedAt": "2024-04-30T15:13:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM55GWxi",
          "commit": {
            "abbreviatedOid": "812f334"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-30T15:13:52Z",
          "updatedAt": "2024-04-30T15:13:52Z",
          "comments": [
            {
              "originalPosition": 79,
              "body": "```suggestion\r\n   can be found in the `disclosures` member of the unprotected header.\r\n```",
              "createdAt": "2024-04-30T15:13:52Z",
              "updatedAt": "2024-04-30T15:13:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM55GXHx",
          "commit": {
            "abbreviatedOid": "cc1f562"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-04-30T15:14:17Z",
          "updatedAt": "2024-04-30T15:14:17Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM55GXac",
          "commit": {
            "abbreviatedOid": "cc1f562"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-30T15:14:36Z",
          "updatedAt": "2024-04-30T15:14:37Z",
          "comments": [
            {
              "originalPosition": 75,
              "body": "```suggestion\r\nVerification of the JWS JSON serialized SD-JWT follows the rules defined in\r\n```",
              "createdAt": "2024-04-30T15:14:36Z",
              "updatedAt": "2024-04-30T15:14:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM55GZqM",
          "commit": {
            "abbreviatedOid": "57f0284"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-04-30T15:17:19Z",
          "updatedAt": "2024-04-30T15:17:19Z",
          "comments": []
        }
      ]
    },
    {
      "number": 415,
      "id": "PR_kwDOHTmVzM5pN_ky",
      "title": "Add Kotlin & Swift implementations from EUDIW",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/415",
      "state": "MERGED",
      "author": "babisRoutis",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This PR updates the README to add two implementations of the SD-JWT specification from [EUDIW](https://github.com/eu-digital-identity-wallet).\r\n\r\n* Kotlin: [eudi-lib-jvm-sdjwt (EU Digital Identity Wallet)](https://github.com/eu-digital-identity-wallet/eudi-lib-jvm-sdjwt-kt)\r\n * Swift: [eudi-lib-sdjwt-swift (EU Digital Identity Wallet)](https://github.com/eu-digital-identity-wallet/eudi-lib-sdjwt-swift)\r\n",
      "createdAt": "2024-03-11T09:38:49Z",
      "updatedAt": "2024-03-12T10:10:42Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "7dd0444e630ecbdf9e65a5f6c839ec3bcc515a9e",
      "headRepository": "babisRoutis/oauth-selective-disclosure-jwt",
      "headRefName": "add-eudiw-impl",
      "headRefOid": "1144c74ce200e96499b287b706aab4bc76c56e81",
      "closedAt": "2024-03-11T15:07:22Z",
      "mergedAt": "2024-03-11T15:07:22Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "f4acb369884de2872acf4f89bae188f9dbecce7a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5y55hE",
          "commit": {
            "abbreviatedOid": "1144c74"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-11T13:08:31Z",
          "updatedAt": "2024-03-11T13:08:31Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5y6hs-",
          "commit": {
            "abbreviatedOid": "1144c74"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-11T14:11:40Z",
          "updatedAt": "2024-03-11T14:11:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 420,
      "id": "PR_kwDOHTmVzM5qTlin",
      "title": "Add specificity around handling of disclosure resulting in an empty object",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/420",
      "state": "MERGED",
      "author": "MichaelFraser99",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "relates to issue: https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/418",
      "createdAt": "2024-03-21T04:43:27Z",
      "updatedAt": "2024-04-02T15:45:00Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "f4acb369884de2872acf4f89bae188f9dbecce7a",
      "headRepository": "MichaelFraser99/oauth-selective-disclosure-jwt",
      "headRefName": "master",
      "headRefOid": "5c63f8aaa2811cc419a6a600543b3176ff171e37",
      "closedAt": "2024-04-02T15:45:00Z",
      "mergedAt": "2024-04-02T15:45:00Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "9308455ecf0cbf851b4ee5bde15ab0e5c0858d3e"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @MichaelFraser99. LGTM ",
          "createdAt": "2024-03-21T05:21:56Z",
          "updatedAt": "2024-03-21T05:21:56Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM50RpAa",
          "commit": {
            "abbreviatedOid": "5c63f8a"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-21T05:21:32Z",
          "updatedAt": "2024-03-21T05:21:32Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM51qwg6",
          "commit": {
            "abbreviatedOid": "5c63f8a"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-04-02T15:08:40Z",
          "updatedAt": "2024-04-02T15:08:40Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM51rHNM",
          "commit": {
            "abbreviatedOid": "5c63f8a"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-04-02T15:44:47Z",
          "updatedAt": "2024-04-02T15:44:47Z",
          "comments": []
        }
      ]
    },
    {
      "number": 421,
      "id": "PR_kwDOHTmVzM5qllw3",
      "title": "better explain what salt does",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/421",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "\r\n   * Attempt to better explain how salt in the Disclosure makes guessing the preimage of the digest infeasible\r\n   * Consolidate salt entropy and length security consideration subsections",
      "createdAt": "2024-03-24T15:33:14Z",
      "updatedAt": "2024-04-02T21:25:05Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "f4acb369884de2872acf4f89bae188f9dbecce7a",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "why-salt",
      "headRefOid": "f0464a004a7ad2ab284f127522a2a62a8f2374bc",
      "closedAt": "2024-04-02T21:25:05Z",
      "mergedAt": "2024-04-02T21:25:05Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "d342443cb47aa4de08335ee06ddb59a62b365d06"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM51qubk",
          "commit": {
            "abbreviatedOid": "f0464a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-04-02T15:07:04Z",
          "updatedAt": "2024-04-02T15:07:04Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM51uO4D",
          "commit": {
            "abbreviatedOid": "f0464a0"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-04-02T21:23:00Z",
          "updatedAt": "2024-04-02T21:23:00Z",
          "comments": []
        }
      ]
    },
    {
      "number": 422,
      "id": "PR_kwDOHTmVzM5s5UaE",
      "title": "Update Rust option in the Implementations list",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/422",
      "state": "MERGED",
      "author": "jovfer",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Replace old Rust implementation reference (draft v2) with the latest one in OWF.",
      "createdAt": "2024-04-17T09:07:21Z",
      "updatedAt": "2024-06-04T15:11:06Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "aa212faf5f2f9b053b0f4a3483e839aadd7792c9",
      "headRepository": "jovfer/oauth-selective-disclosure-jwt",
      "headRefName": "patch-1",
      "headRefOid": "1993531c4674eb71862c5748bfad19aca0be27f7",
      "closedAt": "2024-06-04T15:10:39Z",
      "mergedAt": "2024-06-04T15:10:39Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "e0234b77ad74edc8ac2d9aa56fcc768d73b658f8"
      },
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "just reached out to @kushaldas to make sure he is aware of this, just to be sure.\r\n",
          "createdAt": "2024-04-30T14:54:01Z",
          "updatedAt": "2024-04-30T14:54:01Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "@jovfer Can you please address the comments/proposed changes above?",
          "createdAt": "2024-05-15T15:48:55Z",
          "updatedAt": "2024-05-15T15:48:55Z"
        },
        {
          "author": "jovfer",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Updated. I'm unsure if it's worth keeping the link to the outdated implementation, but it's probably out of scope for this PR.",
          "createdAt": "2024-05-16T14:53:15Z",
          "updatedAt": "2024-05-16T14:53:15Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "> Updated. I'm unsure if it's worth keeping the link to the outdated implementation, but it's probably out of scope for this PR.\r\n\r\nthank you for updating. please do not modify references to the repositories maintained by other people.",
          "createdAt": "2024-06-04T15:10:49Z",
          "updatedAt": "2024-06-04T15:11:06Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM53kCRd",
          "commit": {
            "abbreviatedOid": "682d9f7"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-04-17T12:40:37Z",
          "updatedAt": "2024-04-17T12:40:37Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM55GBnj",
          "commit": {
            "abbreviatedOid": "682d9f7"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-04-30T14:51:57Z",
          "updatedAt": "2024-04-30T14:51:57Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM55GRGL",
          "commit": {
            "abbreviatedOid": "682d9f7"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "just until there is a confirmation there is a relationship between this new URL and kushal's one\r\n",
          "createdAt": "2024-04-30T15:06:47Z",
          "updatedAt": "2024-04-30T15:06:47Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM55IKB9",
          "commit": {
            "abbreviatedOid": "682d9f7"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-30T18:22:17Z",
          "updatedAt": "2024-04-30T18:22:17Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n * Rust: [sd_jwt](https://github.com/kushaldas/sd_jwt)\r\n * Rust: [sd-jwt-rs (OWF)](https://github.com/openwallet-foundation-labs/sd-jwt-rust)\r\n```",
              "createdAt": "2024-04-30T18:22:17Z",
              "updatedAt": "2024-04-30T18:22:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM55IKUE",
          "commit": {
            "abbreviatedOid": "682d9f7"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "confirmed that the current proposed change was replacing a library by another person, so please add a new line instead of replacing another repo",
          "createdAt": "2024-04-30T18:23:00Z",
          "updatedAt": "2024-04-30T18:23:00Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM55g3IZ",
          "commit": {
            "abbreviatedOid": "682d9f7"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "> confirmed that the current proposed change was replacing a library by another person, so please add a new line instead of replacing another repo\r\n\r\nplease fix and also explain the intent ",
          "createdAt": "2024-05-03T17:09:13Z",
          "updatedAt": "2024-05-03T17:09:13Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM58-RpE",
          "commit": {
            "abbreviatedOid": "1993531"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-04T15:07:31Z",
          "updatedAt": "2024-06-04T15:07:31Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM58-TdB",
          "commit": {
            "abbreviatedOid": "1993531"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-04T15:10:20Z",
          "updatedAt": "2024-06-04T15:10:20Z",
          "comments": []
        }
      ]
    },
    {
      "number": 423,
      "id": "PR_kwDOHTmVzM5s8ToK",
      "title": "Added walt.id implementation",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/423",
      "state": "MERGED",
      "author": "philpotisk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Thanks for adding the reference to the walt.id implementation for SD-JWTs",
      "createdAt": "2024-04-17T15:56:55Z",
      "updatedAt": "2024-04-30T15:07:15Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "d342443cb47aa4de08335ee06ddb59a62b365d06",
      "headRepository": "walt-id/oauth-selective-disclosure-jwt",
      "headRefName": "master",
      "headRefOid": "cae112c791cb129a689dd2dfc86d1dfd3986f7d3",
      "closedAt": "2024-04-30T15:07:15Z",
      "mergedAt": "2024-04-30T15:07:15Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "cabaa3a4621febb6fec1f946d19148e94621976d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM542Y6j",
          "commit": {
            "abbreviatedOid": "cae112c"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-04-29T03:49:50Z",
          "updatedAt": "2024-04-29T03:49:50Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM55GBc4",
          "commit": {
            "abbreviatedOid": "cae112c"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-04-30T14:51:40Z",
          "updatedAt": "2024-04-30T14:51:40Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM55GReS",
          "commit": {
            "abbreviatedOid": "cae112c"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-04-30T15:07:09Z",
          "updatedAt": "2024-04-30T15:07:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 424,
      "id": "PR_kwDOHTmVzM5uqkL1",
      "title": "Unnumbered most of the examples for improved clarity",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/424",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "for issue #391 \r\n\r\nhttps://drafts.oauth.net/oauth-selective-disclosure-jwt/rework-example-section-headings-or-whatever-for-391/draft-ietf-oauth-selective-disclosure-jwt.html",
      "createdAt": "2024-05-06T17:47:40Z",
      "updatedAt": "2024-05-09T11:58:43Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "cabaa3a4621febb6fec1f946d19148e94621976d",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "rework-example-section-headings-or-whatever-for-391",
      "headRefOid": "05ddc92055096780885cfbb5e5cded25a7752068",
      "closedAt": "2024-05-09T11:58:43Z",
      "mergedAt": "2024-05-09T11:58:43Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "3de100505ecfd85ba238d2f017959620f8170658"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM550hEq",
          "commit": {
            "abbreviatedOid": "05ddc92"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-05-07T17:42:09Z",
          "updatedAt": "2024-05-07T17:42:09Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM56DMj1",
          "commit": {
            "abbreviatedOid": "05ddc92"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "like it",
          "createdAt": "2024-05-09T10:30:51Z",
          "updatedAt": "2024-05-09T10:30:51Z",
          "comments": []
        }
      ]
    },
    {
      "number": 425,
      "id": "PR_kwDOHTmVzM5voit3",
      "title": "doc: add test api server",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/425",
      "state": "MERGED",
      "author": "lukasjhan",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Hi I added my SD JWT testing API server in README.\r\nIt closes #416 ",
      "createdAt": "2024-05-16T08:59:27Z",
      "updatedAt": "2024-05-16T19:25:19Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "aa212faf5f2f9b053b0f4a3483e839aadd7792c9",
      "headRepository": "lukasjhan/oauth-selective-disclosure-jwt",
      "headRefName": "doc/test-api-server",
      "headRefOid": "4953f175619229f2c7fe836b736329d601222948",
      "closedAt": "2024-05-16T19:25:19Z",
      "mergedAt": "2024-05-16T19:25:19Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "980fdc7546a3cd4e11a30f215d3403cf45aafaa9"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM561gCS",
          "commit": {
            "abbreviatedOid": "4953f17"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-05-16T13:51:40Z",
          "updatedAt": "2024-05-16T13:51:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 427,
      "id": "PR_kwDOHTmVzM5wGTdH",
      "title": "Update terminology in JWS JSON Serialization",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/427",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "To be merged after #394 \r\n\r\nFixes #426",
      "createdAt": "2024-05-21T15:32:02Z",
      "updatedAt": "2024-06-13T07:02:41Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "9641acbb09e5561dcaf537b5a825186dec4b1129",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/jws-json-terminology",
      "headRefOid": "881245bb65cd7ec509fc3ed649c3969581326cd4",
      "closedAt": "2024-06-13T07:02:41Z",
      "mergedAt": "2024-06-13T07:02:41Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "1e4ae96e68a3295b7bc9ed8e751cb0237bffd062"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM58-VFJ",
          "commit": {
            "abbreviatedOid": "b687e8b"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-04T15:12:59Z",
          "updatedAt": "2024-06-04T15:12:59Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "```suggestion\r\n * `kb_jwt`: Present only in SD-JWT+KB, the Key Binding JWT as described in (#kb-jwt).\r\n```\r\n\r\nwas not sure about `only in case of sd-jwy+kb` part..",
              "createdAt": "2024-06-04T15:12:59Z",
              "updatedAt": "2024-06-04T15:13:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM59-YAk",
          "commit": {
            "abbreviatedOid": "aa62388"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-12T16:08:39Z",
          "updatedAt": "2024-06-12T16:08:39Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "I think you need/want an indefinite article* here. \r\n```suggestion\r\n * `kb_jwt`: Present only in an SD-JWT+KB, the Key Binding JWT as described in (#kb-jwt).\r\n```\r\n* yes I had to look that up ",
              "createdAt": "2024-06-12T16:08:39Z",
              "updatedAt": "2024-06-12T16:08:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM59-btz",
          "commit": {
            "abbreviatedOid": "aa62388"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-12T16:15:42Z",
          "updatedAt": "2024-06-12T16:15:42Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5-AS0I",
          "commit": {
            "abbreviatedOid": "881245b"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-12T19:28:49Z",
          "updatedAt": "2024-06-12T19:28:49Z",
          "comments": []
        }
      ]
    },
    {
      "number": 430,
      "id": "PR_kwDOHTmVzM5wmH9R",
      "title": "affiliation change",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/430",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "changing to Keio University for myself, and Mike's affiliation in vcdm 2.0\r\n",
      "createdAt": "2024-05-26T17:36:35Z",
      "updatedAt": "2024-06-03T09:15:50Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "980fdc7546a3cd4e11a30f215d3403cf45aafaa9",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "change-affiliation",
      "headRefOid": "5f2c2b29ea289f962e5761eef0e15772c1ef43d1",
      "closedAt": "2024-06-03T09:15:50Z",
      "mergedAt": "2024-06-03T09:15:50Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "64890c3324b61749d4bb7c981f16218a15e2c8e8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM579qLm",
          "commit": {
            "abbreviatedOid": "5f2c2b2"
          },
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-05-26T17:39:21Z",
          "updatedAt": "2024-05-26T17:39:21Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM58tVMf",
          "commit": {
            "abbreviatedOid": "5f2c2b2"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-02T09:54:54Z",
          "updatedAt": "2024-06-02T09:54:54Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM58xN7G",
          "commit": {
            "abbreviatedOid": "5f2c2b2"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-03T09:15:36Z",
          "updatedAt": "2024-06-03T09:15:36Z",
          "comments": []
        }
      ]
    },
    {
      "number": 431,
      "id": "PR_kwDOHTmVzM5xekVM",
      "title": "Clarify algorithms for recursive disclosures",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/431",
      "state": "MERGED",
      "author": "bifurcation",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #372 \r\n\r\nThere are three algorithms to consider when it comes to recursive disclosures:\r\n\r\n1. How the issuer generates the recursive disclosures\r\n2. How the holder selects disclosures to reveal in the context of recursion\r\n3. How the verifier unwinds recursive disclosures\r\n\r\n(3) is adequately covered in the verification algorithm.  The other two are currently uncovered.   This PR clarifies (1) and (2).  \r\n\r\nAlgorithm (1) doesn't really need formal definition for interoperability; an issuer can follow any process that ends up with an SD-JWT that will verify.  However, it's useful to (1) provide an illustration, (2) provider a reminder that you have to go from most-specific redaction to least, from the leaves of the AST toward the issuer-signed claims, and (3) provide a clear requirement that an SD-JWT must contain any intermediate recursive disclosures.  This PR adds a section that does these things.\r\n\r\nFor algorithm (2), I simply added a step to the holder processing that verifies that the disclosure selection process got all the required disclosures (including the intermediate ones).  We could also be more prescriptive, providing a concrete algorithm that adds the required intermediate disclosures.",
      "createdAt": "2024-06-04T22:24:32Z",
      "updatedAt": "2024-07-08T10:45:29Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "d039a75d1f763bb16784a6092de3edcff3b7a71e",
      "headRepository": "bifurcation/oauth-selective-disclosure-jwt",
      "headRefName": "recurse",
      "headRefOid": "732162fa3a403bb9129a882c613e015aa0557c56",
      "closedAt": "2024-07-08T10:45:29Z",
      "mergedAt": "2024-07-08T10:45:29Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "b430ada11b73b93c009143a2e6527a8bbfb6bb6b"
      },
      "comments": [
        {
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is based on #394, which has accreted quite the pile of commits.  Until that is merged and this PR is rebased, it's probably best to look at the last commit, which is the only new commit in this branch.",
          "createdAt": "2024-06-04T22:25:34Z",
          "updatedAt": "2024-06-04T22:25:34Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Please rebase/merge main and resolve conflicts.",
          "createdAt": "2024-06-12T12:19:48Z",
          "updatedAt": "2024-06-12T12:19:48Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> Please rebase/merge main and resolve conflicts.\r\n\r\njust what the doctor ordered ",
          "createdAt": "2024-06-12T13:15:25Z",
          "updatedAt": "2024-06-12T13:15:25Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "> Please rebase/merge main and resolve conflicts.\r\n>\r\n> > just what the doctor ordered\r\n\r\ndone",
          "createdAt": "2024-06-12T19:21:16Z",
          "updatedAt": "2024-06-12T19:21:16Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "putting this here for posterity \r\n```\r\n        String[] disclosuresContent = new String[]\r\n        {\r\n                \"[\\\"16_mAd0GiwaZokU26_0i0h\\\",\\\"DE\\\"]\",\r\n                \"[\\\"fn9fN0rD-fFs2n303ZI-0c\\\",\\\"FR\\\"]\",\r\n                \"[\\\"YIKesqOkXXNzMQtsX_-_lw\\\",\\\"UK\\\"]\",\r\n                \"[\\\"4drfeTtSUK3aY_-PF12gcX\\\",\\\"nationalities\\\",\\n\" +\r\n                \"    [\\n\" +\r\n                \"        { \\\"...\\\": \\\"PmnlrRjhLcwf8zTDdK15HVGwHtPYjddvD362WjBLwro\\\" },\\n\" +\r\n                \"        { \\\"...\\\": \\\"r823HFN6Ba_lpSANYtXqqCBAH-TsQlIzfOK0lRAFLCM\\\" },\\n\" +\r\n                \"        { \\\"...\\\": \\\"nP5GYjwhFm6ESlAeC4NCaIliW4tz0hTrUeoJB3lb5TA\\\" }\\n\" +\r\n                \"    ]\\n\" +\r\n                \"]\"\r\n        };\r\n\r\n        for (String disclosureContent : disclosuresContent)\r\n        {\r\n            String disclosure = Base64Url.encodeUtf8ByteRepresentation(disclosureContent);\r\n            MessageDigest messageDigest = HashUtil.getMessageDigest(HashUtil.SHA_256);\r\n            byte[] digestBytes = messageDigest.digest(disclosure.getBytes(StandardCharsets.UTF_8));\r\n            System.out.println(\" content    \" + disclosureContent);\r\n            System.out.println(\" disclosure \" + disclosure);\r\n            System.out.println(\" digest     \" + Base64Url.encode(digestBytes));\r\n            System.out.println();\r\n        }\r\n```",
          "createdAt": "2024-06-27T21:12:43Z",
          "updatedAt": "2024-06-27T21:12:43Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM59jKXj",
          "commit": {
            "abbreviatedOid": "d9d53ae"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "needs some TLC ",
          "createdAt": "2024-06-09T21:20:24Z",
          "updatedAt": "2024-06-09T21:22:37Z",
          "comments": [
            {
              "originalPosition": 242,
              "body": "what's going on here with the hex encoding (above and below) and the unformatted example outside the triple ticks (below)? Which is sort of a rhetorical question. Please fix. ",
              "createdAt": "2024-06-09T21:20:24Z",
              "updatedAt": "2024-06-09T21:22:37Z"
            },
            {
              "originalPosition": 205,
              "body": "weird example but okay ",
              "createdAt": "2024-06-09T21:20:28Z",
              "updatedAt": "2024-06-09T21:22:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM59jKmg",
          "commit": {
            "abbreviatedOid": "d9d53ae"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-09T21:27:42Z",
          "updatedAt": "2024-06-09T21:27:43Z",
          "comments": [
            {
              "originalPosition": 242,
              "body": "see also https://twitter.com/__b_c/status/434083504381378560 ",
              "createdAt": "2024-06-09T21:27:42Z",
              "updatedAt": "2024-06-09T21:27:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM59k4ES",
          "commit": {
            "abbreviatedOid": "d9d53ae"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-10T07:10:45Z",
          "updatedAt": "2024-06-10T07:10:45Z",
          "comments": [
            {
              "originalPosition": 242,
              "body": "It would be great if we could have a generated example here to avoid any inconsistencies.",
              "createdAt": "2024-06-10T07:10:45Z",
              "updatedAt": "2024-06-10T07:10:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM598Z3q",
          "commit": {
            "abbreviatedOid": "d9d53ae"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-12T13:13:47Z",
          "updatedAt": "2024-06-12T13:13:47Z",
          "comments": [
            {
              "originalPosition": 205,
              "body": "Actually, after thinking about it for a bit, I no longer believe this is okay. People put a lot of weight (often too much) into examples and I don't want this dystopian compelled disclosure of German nationality to be misconstrued as a real use case. Can't what you want to describe here still be accomplished by having all the nationalities array elements be selectively disclosable and pointing out that in order to disclose any/all of them that the nationalities Disclosure itself need also be included?",
              "createdAt": "2024-06-12T13:13:47Z",
              "updatedAt": "2024-06-20T18:46:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5-AB2q",
          "commit": {
            "abbreviatedOid": "d9d53ae"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-12T19:05:14Z",
          "updatedAt": "2024-06-12T19:05:14Z",
          "comments": [
            {
              "originalPosition": 242,
              "body": "> see also https://twitter.com/__b_c/status/434083504381378560\r\n\r\nhow many puppies have died since 2014...",
              "createdAt": "2024-06-12T19:05:14Z",
              "updatedAt": "2024-06-12T19:05:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5-AO9M",
          "commit": {
            "abbreviatedOid": "abfda2f"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-12T19:23:27Z",
          "updatedAt": "2024-06-12T19:23:27Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "```suggestion\r\nWhen the Holder has multiple nationalities, the issuer may wish to allow the holder to reveal\r\neach of those nationalities individually.\r\n```",
              "createdAt": "2024-06-12T19:23:27Z",
              "updatedAt": "2024-06-12T19:23:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5-AQyg",
          "commit": {
            "abbreviatedOid": "abfda2f"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-12T19:25:58Z",
          "updatedAt": "2024-06-12T19:25:58Z",
          "comments": [
            {
              "originalPosition": 242,
              "body": "this ascii-art is different from how disclosures are illustrated in the rest of the spec, should we follow those?:\r\n\r\n```\r\nClaim sub:\r\n\r\nSHA-256 Hash: X6ZAYOII2vPN40V7xExZwVwz7yRmLNcVwt5DL8RLv4g\r\nDisclosure:\r\nWyIyR0xDNDJzS1F2ZUNmR2ZyeU5STjl3IiwgInN1YiIsICI2YzVjMGE0OS1i\r\nNTg5LTQzMWQtYmFlNy0yMTkxMjJhOWVjMmMiXQ\r\nContents: [\"2GLC42sKQveCfGfryNRN9w\", \"sub\",\r\n\"6c5c0a49-b589-431d-bae7-219122a9ec2c\"]\r\n```",
              "createdAt": "2024-06-12T19:25:58Z",
              "updatedAt": "2024-06-12T19:25:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5-ARsl",
          "commit": {
            "abbreviatedOid": "ac34fa5"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "conditional to the examples being fixed and my suggestion for the example being accepted",
          "createdAt": "2024-06-12T19:27:17Z",
          "updatedAt": "2024-06-13T07:04:43Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5-DsfR",
          "commit": {
            "abbreviatedOid": "ac34fa5"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-13T07:06:52Z",
          "updatedAt": "2024-06-13T07:06:52Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "This should be in backticks",
              "createdAt": "2024-06-13T07:06:52Z",
              "updatedAt": "2024-06-13T07:06:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5-DtOG",
          "commit": {
            "abbreviatedOid": "ac34fa5"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-13T07:08:29Z",
          "updatedAt": "2024-06-13T07:10:38Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "Whitespace!\r\n```suggestion\r\n    \"nationalities\": [\"DE\", \"FR\", \"UK\"]\r\n```",
              "createdAt": "2024-06-13T07:08:29Z",
              "updatedAt": "2024-06-13T07:10:38Z"
            },
            {
              "originalPosition": 26,
              "body": "Whitespace\r\n```suggestion\r\n        \"DE\",\r\n```",
              "createdAt": "2024-06-13T07:08:45Z",
              "updatedAt": "2024-06-13T07:10:38Z"
            },
            {
              "originalPosition": 29,
              "body": "Whitespace...\r\n```suggestion\r\n    ]\r\n```",
              "createdAt": "2024-06-13T07:09:08Z",
              "updatedAt": "2024-06-13T07:10:38Z"
            },
            {
              "originalPosition": 47,
              "body": "Whitespace.\r\n```suggestion\r\n    \"4bPeSUK9aY_PlF4gcXnlGg\",\r\n```",
              "createdAt": "2024-06-13T07:09:52Z",
              "updatedAt": "2024-06-13T07:10:39Z"
            },
            {
              "originalPosition": 48,
              "body": "White space .\r\n```suggestion\r\n    \"nationalities\",\r\n```",
              "createdAt": "2024-06-13T07:10:22Z",
              "updatedAt": "2024-06-13T07:10:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5-Dv8g",
          "commit": {
            "abbreviatedOid": "6dbdf73"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-13T07:14:07Z",
          "updatedAt": "2024-06-13T07:15:15Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "The example below should be adapted accordingly.",
              "createdAt": "2024-06-13T07:14:07Z",
              "updatedAt": "2024-06-13T07:15:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5-G8O2",
          "commit": {
            "abbreviatedOid": "6dbdf73"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-13T13:08:11Z",
          "updatedAt": "2024-06-13T13:08:11Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "or maybe just removed  ... ",
              "createdAt": "2024-06-13T13:08:11Z",
              "updatedAt": "2024-06-13T13:08:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5-JEjw",
          "commit": {
            "abbreviatedOid": "11a38c1"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-13T16:40:19Z",
          "updatedAt": "2024-06-13T16:40:20Z",
          "comments": [
            {
              "originalPosition": 242,
              "body": "@bifurcation did you want to use sd-jwt library that we use to generate other examples https://github.com/openwallet-foundation-labs/sd-jwt-python\r\nor just copy paste from other examples in the spec?",
              "createdAt": "2024-06-13T16:40:20Z",
              "updatedAt": "2024-06-13T16:40:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5_uejt",
          "commit": {
            "abbreviatedOid": "11a38c1"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-26T20:25:15Z",
          "updatedAt": "2024-06-26T20:25:15Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "just remove\r\n```suggestion\r\n```",
              "createdAt": "2024-06-26T20:25:15Z",
              "updatedAt": "2024-06-26T20:25:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5_uf4z",
          "commit": {
            "abbreviatedOid": "012353b"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-26T20:28:31Z",
          "updatedAt": "2024-06-26T20:28:31Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "who am I to say what makes JSON valid?\r\n```suggestion\r\n    \"family_name\": \"M\u00f6bius\",\r\n```",
              "createdAt": "2024-06-26T20:28:31Z",
              "updatedAt": "2024-06-26T20:28:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5_ugbt",
          "commit": {
            "abbreviatedOid": "c666d54"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-26T20:29:55Z",
          "updatedAt": "2024-06-26T20:29:55Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "um... \r\n```suggestion\r\n    \"family_name\": \"M\u00f6bius\",\r\n```",
              "createdAt": "2024-06-26T20:29:55Z",
              "updatedAt": "2024-06-26T20:29:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5_uqY0",
          "commit": {
            "abbreviatedOid": "21f3ae8"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-26T20:46:12Z",
          "updatedAt": "2024-06-26T20:46:12Z",
          "comments": [
            {
              "originalPosition": 242,
              "body": "tried to save a few cute puppies 21f3ae8e67913798fcb2186ba342efabc5770d01 ",
              "createdAt": "2024-06-26T20:46:12Z",
              "updatedAt": "2024-06-26T20:46:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5_urGs",
          "commit": {
            "abbreviatedOid": "21f3ae8"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-26T20:47:56Z",
          "updatedAt": "2024-06-26T20:47:57Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "weird that invalid JSON is still invalid when copy-pasted  \r\n```suggestion\r\n    \"family_name\": \"M\u00f6bius\",\r\n```",
              "createdAt": "2024-06-26T20:47:57Z",
              "updatedAt": "2024-06-26T20:47:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5_vBiJ",
          "commit": {
            "abbreviatedOid": "d520301"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-26T21:49:46Z",
          "updatedAt": "2024-06-26T21:49:46Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "I can't seem to reproduce these hash values, which makes me a wee bit nervous. But the full Disclosures aren't shown so it's a bit of a stretch anyway to assume they are real. But I'm going to plow ahead and hope I'm not doing something wrong thereby assuming @bifurcation made some mistake or just made the values up.  Blasphemous, I know, but I gotta move forward. ",
              "createdAt": "2024-06-26T21:49:46Z",
              "updatedAt": "2024-06-27T17:46:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5_vDNn",
          "commit": {
            "abbreviatedOid": "d520301"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-26T21:54:38Z",
          "updatedAt": "2024-06-26T21:54:38Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "wait... \"+\" isn't in the base64url alphabet! WTF? ",
              "createdAt": "2024-06-26T21:54:38Z",
              "updatedAt": "2024-06-26T21:54:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5_vIH3",
          "commit": {
            "abbreviatedOid": "d520301"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-26T22:14:49Z",
          "updatedAt": "2024-06-26T22:14:49Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "Reversing hashes is hard! \r\n\r\nBut \"+\" was the clue I needed and extraneous padding on the not shown Disclosures was the key. Now @bifurcation owes me something in Vancouver. Beer is customary item but I'm 14 years sober so he might get away with something cheaper. ",
              "createdAt": "2024-06-26T22:14:49Z",
              "updatedAt": "2024-06-26T22:14:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5_4g2C",
          "commit": {
            "abbreviatedOid": "d520301"
          },
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-27T14:13:50Z",
          "updatedAt": "2024-06-27T14:13:50Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "Happy to supply whatever compensatory item makes sense!  Thanks for picking this up, I was planning to handle it on a flight last Friday, but then it didn't have in-flight wifi.\r\n\r\nAny errors here are totally on me.  I was creating the hashes manually, typing / copy / pasting into `python3` REPL, and translating the results back manually to the URL safe alphabet.",
              "createdAt": "2024-06-27T14:13:50Z",
              "updatedAt": "2024-06-27T14:13:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5_4iNz",
          "commit": {
            "abbreviatedOid": "02d2fb0"
          },
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "One minor tweak, otherwise this looks good to me.",
          "createdAt": "2024-06-27T14:15:02Z",
          "updatedAt": "2024-06-27T14:16:49Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "```suggestion\r\nThis can be accomplished by first making the entries within the \"nationalities\"\r\narray selectively disclosable, and then the whole \"nationalities\" field.\r\n```",
              "createdAt": "2024-06-27T14:15:02Z",
              "updatedAt": "2024-06-27T14:16:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5_6Kzd",
          "commit": {
            "abbreviatedOid": "02d2fb0"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-27T16:48:08Z",
          "updatedAt": "2024-06-27T16:48:08Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "as kinda noted in 02d2fb07001057bbbe9532248478f5d31de80718 the text still needs to be adjusted and aligned to what the examples have but this is directionally correct. ",
              "createdAt": "2024-06-27T16:48:08Z",
              "updatedAt": "2024-06-27T16:48:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5_8Fxh",
          "commit": {
            "abbreviatedOid": "d520301"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-27T20:27:26Z",
          "updatedAt": "2024-06-27T20:27:27Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "> Happy to supply whatever compensatory item makes sense! \r\n\r\nWe will need to make something happen in YVR. \r\n\r\n>Thanks for picking this up, I was planning to handle it on a flight last Friday, but then it didn't have in-flight wifi.\r\n\r\nI figured something came up. Meanwhile I'm trying to get something out before I-D cutoff and have limited co-author availability due to vacation etc. \r\n\r\n> Any errors here are totally on me. I was creating the hashes manually, typing / copy / pasting into `python3` REPL, and translating the results back manually to the URL safe alphabet.\r\n\r\nIt's hard to imagine how any mistakes made it into that pipeline. But there were a few... \r\n\r\n\r\n\r\n",
              "createdAt": "2024-06-27T20:27:26Z",
              "updatedAt": "2024-06-27T20:27:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5_8G2x",
          "commit": {
            "abbreviatedOid": "ccdd702"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-27T20:29:47Z",
          "updatedAt": "2024-06-27T20:29:47Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6AYi1r",
          "commit": {
            "abbreviatedOid": "ccdd702"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-02T13:53:27Z",
          "updatedAt": "2024-07-02T13:53:27Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "don't we need a bit more explanation before this example..?",
              "createdAt": "2024-07-02T13:53:27Z",
              "updatedAt": "2024-07-02T13:53:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6AYjtT",
          "commit": {
            "abbreviatedOid": "ccdd702"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-02T13:54:46Z",
          "updatedAt": "2024-07-02T13:54:46Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "I hope this is not considered extra, this feels nicer for non-native speakers..\r\n\r\n```suggestion\r\nThis can be accomplished by first making the entries within the `nationalities`\r\narray selectively disclosable, and then making the whole \"nationalities\" field\r\nselectively disclosable.\r\n```",
              "createdAt": "2024-07-02T13:54:46Z",
              "updatedAt": "2024-07-02T13:54:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6AZypZ",
          "commit": {
            "abbreviatedOid": "ccdd702"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-02T15:49:47Z",
          "updatedAt": "2024-07-02T15:49:47Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "> I hope this is not considered extra, this feels nicer for non-native speakers..\r\n\r\nsure and just noticed this so also let's be more consistent with ticks vs quotes \r\n\r\n```suggestion\r\nThis can be accomplished by first making the entries within the \"nationalities\"\r\narray selectively disclosable, and then making the whole \"nationalities\" field\r\nselectively disclosable.\r\n```",
              "createdAt": "2024-07-02T15:49:47Z",
              "updatedAt": "2024-07-02T15:49:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6AZ2F9",
          "commit": {
            "abbreviatedOid": "af961a4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-02T15:56:27Z",
          "updatedAt": "2024-07-02T15:56:28Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "probably, yeah ",
              "createdAt": "2024-07-02T15:56:27Z",
              "updatedAt": "2024-07-02T15:56:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6AZ6GI",
          "commit": {
            "abbreviatedOid": "af961a4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-02T16:03:34Z",
          "updatedAt": "2024-07-02T16:03:35Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "```suggestion\r\n\r\nThe following shows each of the entries within the \"nationalities\" array being made selectively disclosable:\r\n\r\n```",
              "createdAt": "2024-07-02T16:03:34Z",
              "updatedAt": "2024-07-02T16:03:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6AZ6gP",
          "commit": {
            "abbreviatedOid": "af961a4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-02T16:04:23Z",
          "updatedAt": "2024-07-02T16:04:24Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "```suggestion\r\n\r\nFollowed by making the whole \"nationalities\" array selectively disclosable:\r\n\r\n```",
              "createdAt": "2024-07-02T16:04:24Z",
              "updatedAt": "2024-07-02T16:08:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6AZ7Lc",
          "commit": {
            "abbreviatedOid": "af961a4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-02T16:05:46Z",
          "updatedAt": "2024-07-02T16:05:46Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/431/files#r1662801181 and https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/431/files#r1662802244 ?",
              "createdAt": "2024-07-02T16:05:46Z",
              "updatedAt": "2024-07-02T16:05:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6Ab_Ho",
          "commit": {
            "abbreviatedOid": "732162f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-02T20:30:16Z",
          "updatedAt": "2024-07-02T20:30:16Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "now committed to this request to be committed to the main branch ad0d13711adc080f5cc0f8cabd6b836c27ec291a and 732162fa3a403bb9129a882c613e015aa0557c56 ",
              "createdAt": "2024-07-02T20:30:16Z",
              "updatedAt": "2024-07-02T20:30:16Z"
            }
          ]
        }
      ]
    },
    {
      "number": 432,
      "id": "PR_kwDOHTmVzM5yOX8X",
      "title": "fix up permutations of the figures/examples in SD-JWT Data Formats",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/432",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "resolves #428 ",
      "createdAt": "2024-06-12T11:29:35Z",
      "updatedAt": "2024-06-13T07:04:00Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "9641acbb09e5561dcaf537b5a825186dec4b1129",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "bc-permutations",
      "headRefOid": "1eae6707b363cd8cb11ddda86bbce7eda964d563",
      "closedAt": "2024-06-13T07:04:00Z",
      "mergedAt": "2024-06-13T07:04:00Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "f423136c991e513cf3ef8bdc03d5f1ca325a3f4a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5974-O",
          "commit": {
            "abbreviatedOid": "1eae670"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-12T12:19:16Z",
          "updatedAt": "2024-06-12T12:19:16Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5-AAxo",
          "commit": {
            "abbreviatedOid": "1eae670"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-12T19:03:44Z",
          "updatedAt": "2024-06-12T19:03:44Z",
          "comments": []
        }
      ]
    },
    {
      "number": 433,
      "id": "PR_kwDOHTmVzM5yOeBI",
      "title": "add some ABNF for those who celebrate",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/433",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "thereby fixing #393 ",
      "createdAt": "2024-06-12T11:44:39Z",
      "updatedAt": "2024-06-12T11:45:52Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "9641acbb09e5561dcaf537b5a825186dec4b1129",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "now-with-abnf",
      "headRefOid": "b19f06e505e6759f5c0dfa5151ffc1787dca7a30",
      "closedAt": "2024-06-12T11:45:52Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 434,
      "id": "PR_kwDOHTmVzM5yOfgr",
      "title": "add ABNF for those who celebrate",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/434",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "would fix #393",
      "createdAt": "2024-06-12T11:48:22Z",
      "updatedAt": "2024-06-13T07:03:35Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "9641acbb09e5561dcaf537b5a825186dec4b1129",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "now-with-abnf-redux",
      "headRefOid": "4864d6bc28a07aafa6b1fb782a2cc855e732e72d",
      "closedAt": "2024-06-13T07:03:35Z",
      "mergedAt": "2024-06-13T07:03:35Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "4eaac04e1f396a662d41a31c33d1086923c0fae9"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM597670",
          "commit": {
            "abbreviatedOid": "4864d6b"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Not my religion, but happy to celebrate anyway.",
          "createdAt": "2024-06-12T12:23:06Z",
          "updatedAt": "2024-06-12T12:23:06Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM59_8TV",
          "commit": {
            "abbreviatedOid": "4864d6b"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-12T18:57:38Z",
          "updatedAt": "2024-06-12T18:57:38Z",
          "comments": []
        }
      ]
    },
    {
      "number": 435,
      "id": "PR_kwDOHTmVzM5yQbw1",
      "title": "exclusively use the cnf claim for enabling Key Binding",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/435",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "More definitive language around the exclusive use of the cnf claim for enabling Key Binding\r\n\r\nmight just fix #419 ",
      "createdAt": "2024-06-12T15:57:18Z",
      "updatedAt": "2024-06-13T16:34:13Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "9641acbb09e5561dcaf537b5a825186dec4b1129",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "there-can-be-only-one",
      "headRefOid": "f782779c63e066aa1b0ff17a4f6168e71a426e89",
      "closedAt": "2024-06-13T16:34:13Z",
      "mergedAt": "2024-06-13T16:34:13Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "e61cc927aaa95e0e51382d648c47b670a3afecc6"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Need to look at text in one or more of the sec considerations too... todo ",
          "createdAt": "2024-06-13T14:07:49Z",
          "updatedAt": "2024-06-13T14:07:49Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5-AAAa",
          "commit": {
            "abbreviatedOid": "f1b1cf5"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-12T19:02:41Z",
          "updatedAt": "2024-06-12T19:02:41Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "i didn't know @? is valid",
              "createdAt": "2024-06-12T19:02:41Z",
              "updatedAt": "2024-06-12T19:02:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5-AAeG",
          "commit": {
            "abbreviatedOid": "f1b1cf5"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-12T19:03:19Z",
          "updatedAt": "2024-06-12T19:03:19Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5-ARoU",
          "commit": {
            "abbreviatedOid": "f1b1cf5"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-12T19:27:11Z",
          "updatedAt": "2024-06-12T19:27:12Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "informational `@?` vs normative `@!` afaik ",
              "createdAt": "2024-06-12T19:27:12Z",
              "updatedAt": "2024-06-12T19:27:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5-Duy4",
          "commit": {
            "abbreviatedOid": "f1b1cf5"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-13T07:11:46Z",
          "updatedAt": "2024-06-13T07:11:46Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "`@?` equals `@` AFAIK",
              "createdAt": "2024-06-13T07:11:46Z",
              "updatedAt": "2024-06-13T07:11:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5-DvFf",
          "commit": {
            "abbreviatedOid": "f1b1cf5"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-13T07:12:23Z",
          "updatedAt": "2024-06-13T07:12:23Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5-JAzc",
          "commit": {
            "abbreviatedOid": "75152d7"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-13T16:32:40Z",
          "updatedAt": "2024-06-13T16:32:41Z",
          "comments": [
            {
              "originalPosition": 52,
              "body": "```suggestion\r\ndecisions based on data that can be influenced by an attacker. For this reason, when deciding whether Key\r\nBinding is required or not, Verifiers MUST NOT take into account\r\nwhether the Holder has provided an SD-JWT+KB or a bare SD-JWT, since otherwise an\r\nattacker could strip the KB-JWT from an SD-JWT+KB and present the resulting SD-JWT.\r\n\r\nFurthermore, Verifiers should be aware that Key Binding information may have been added to an SD-JWT in a format that they do not recognize and therefore may not be able to tell whether the SD-JWT supports Key Binding or not.\r\n```",
              "createdAt": "2024-06-13T16:32:40Z",
              "updatedAt": "2024-06-13T16:32:41Z"
            }
          ]
        }
      ]
    },
    {
      "number": 436,
      "id": "PR_kwDOHTmVzM5ytVfe",
      "title": "add Joseph Heenan to acknowledgements ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/436",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Mr. Heenan suspects he should probably be listed in the SD-JWT acknowledgements section and I don't disagree",
      "createdAt": "2024-06-17T15:21:54Z",
      "updatedAt": "2024-06-17T21:30:40Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "e61cc927aaa95e0e51382d648c47b670a3afecc6",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "add-Joseph-to-acks",
      "headRefOid": "3aba8e3dba6a6624895b7c53ee4282d71f49c2c1",
      "closedAt": "2024-06-17T21:30:40Z",
      "mergedAt": "2024-06-17T21:30:40Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "f1e69d69a1190817f328e51686b861053b0a0f86"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5-mLm0",
          "commit": {
            "abbreviatedOid": "3aba8e3"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-17T21:30:26Z",
          "updatedAt": "2024-06-17T21:30:26Z",
          "comments": []
        }
      ]
    },
    {
      "number": 437,
      "id": "PR_kwDOHTmVzM5y4Mqw",
      "title": "Just u s of a",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/437",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-06-18T21:46:04Z",
      "updatedAt": "2024-06-18T21:46:07Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "f1e69d69a1190817f328e51686b861053b0a0f86",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "just-u-s-of-a",
      "headRefOid": "d1b7ea4fc5cecc166e16bb15d2adcb6ae0c5d5c3",
      "closedAt": "2024-06-18T21:46:07Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 438,
      "id": "PR_kwDOHTmVzM5y4N9U",
      "title": "example doesn't disclose nationalities rather just one of its elements",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/438",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-06-18T21:48:55Z",
      "updatedAt": "2024-06-20T16:34:12Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "f1e69d69a1190817f328e51686b861053b0a0f86",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "just-u-s",
      "headRefOid": "96e140565fcadad5064ca71895748ca291349155",
      "closedAt": "2024-06-20T16:34:12Z",
      "mergedAt": "2024-06-20T16:34:12Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "2f0801e9e1a2d6c7fa697ff9b0cf9281dd322e7e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5_AtTW",
          "commit": {
            "abbreviatedOid": "96e1405"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-20T16:32:51Z",
          "updatedAt": "2024-06-20T16:32:51Z",
          "comments": []
        }
      ]
    },
    {
      "number": 441,
      "id": "PR_kwDOHTmVzM5z06XD",
      "title": "Remove two extraneous occurrences of \"and without a KB-JWT\"",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/441",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "to fix #440\r\n",
      "createdAt": "2024-06-27T22:13:43Z",
      "updatedAt": "2024-07-02T15:40:42Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "2f0801e9e1a2d6c7fa697ff9b0cf9281dd322e7e",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "fnord-remnants",
      "headRefOid": "e96628efb66525b15c36aa456ea7510ef82040c0",
      "closedAt": "2024-07-02T15:40:42Z",
      "mergedAt": "2024-07-02T15:40:42Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "d039a75d1f763bb16784a6092de3edcff3b7a71e"
      },
      "comments": [
        {
          "author": "srosenda",
          "authorAssociation": "NONE",
          "body": "> I am not sure these are actually extraneous, but ok\r\n\r\nI was not completely sure either and that's why I posted only the issue and no PR first. I still think that in chapter 5. the extra mentions are confusing as the text and the ABNF are separating the SD-JWT and SD-JWT+KB formats.\r\n\r\nIn contrast, similar explicit mention [here](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-09.html#section-8.3-4.2) in the verification section is clarifying to me.",
          "createdAt": "2024-07-02T14:09:28Z",
          "updatedAt": "2024-07-02T14:09:28Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I wasn't sure when first looking at it and actually thing it's okay either way but have come to think it's more okay this way. ",
          "createdAt": "2024-07-02T15:40:28Z",
          "updatedAt": "2024-07-02T15:40:28Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5__KO4",
          "commit": {
            "abbreviatedOid": "e96628e"
          },
          "author": "srosenda",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "\ud83d\udc4d looks good",
          "createdAt": "2024-06-28T07:30:34Z",
          "updatedAt": "2024-06-28T07:30:34Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6AYh22",
          "commit": {
            "abbreviatedOid": "e96628e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I am not sure these are actually extraneous, but ok",
          "createdAt": "2024-07-02T13:51:57Z",
          "updatedAt": "2024-07-02T13:51:57Z",
          "comments": []
        }
      ]
    },
    {
      "number": 445,
      "id": "PR_kwDOHTmVzM52zXOx",
      "title": "Removed duplicate \"the\"",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/445",
      "state": "MERGED",
      "author": "dalebowie",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-07-29T22:00:15Z",
      "updatedAt": "2024-08-04T19:36:36Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "b430ada11b73b93c009143a2e6527a8bbfb6bb6b",
      "headRepository": "dalebowie/oauth-selective-disclosure-jwt",
      "headRefName": "the-the",
      "headRefOid": "5d01e928c84e5be1485f512523c394e568cf8181",
      "closedAt": "2024-07-30T00:25:02Z",
      "mergedAt": "2024-07-30T00:25:02Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "5b2bbc61bde1d7f415cbc8b5984b6abfcaa631a5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM6Df6Ec",
          "commit": {
            "abbreviatedOid": "5d01e92"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "thanks @dalebowie ! ",
          "createdAt": "2024-07-29T22:06:29Z",
          "updatedAt": "2024-07-29T22:06:29Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6DghL4",
          "commit": {
            "abbreviatedOid": "5d01e92"
          },
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-07-30T00:11:38Z",
          "updatedAt": "2024-07-30T00:11:38Z",
          "comments": []
        }
      ]
    },
    {
      "number": 446,
      "id": "PR_kwDOHTmVzM521bqA",
      "title": "Clarification on composition of SD-JWT+KB",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/446",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "... as proposed by Paul. It is easy to read the current wording in a wrong way.",
      "createdAt": "2024-07-30T06:59:36Z",
      "updatedAt": "2024-08-05T15:47:12Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "5b2bbc61bde1d7f415cbc8b5984b6abfcaa631a5",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/clarification-sd-jwt",
      "headRefOid": "632de4c5759034e8867c95926dc2be353283a606",
      "closedAt": "2024-08-05T15:47:11Z",
      "mergedAt": "2024-08-05T15:47:11Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "7d1297af43ad095583fd1a565ede4523469cba39"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM6DihOQ",
          "commit": {
            "abbreviatedOid": "632de4c"
          },
          "author": "paulbastian",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-30T07:25:14Z",
          "updatedAt": "2024-07-30T07:25:15Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\n* an Issuer-signed JWT,\r\n* zero or more Disclosures, and\r\n* a Key Binding JWT.\r\n```\r\nThis is the most obvious to me.",
              "createdAt": "2024-07-30T07:25:14Z",
              "updatedAt": "2024-07-30T07:25:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6DiiU9",
          "commit": {
            "abbreviatedOid": "632de4c"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-30T07:27:26Z",
          "updatedAt": "2024-07-30T07:27:26Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "I proposed the above to clarify that the SD-JWT+KB contains an SD-JWT. But I'm fine with either.",
              "createdAt": "2024-07-30T07:27:26Z",
              "updatedAt": "2024-07-30T07:27:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6Dor9z",
          "commit": {
            "abbreviatedOid": "632de4c"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-30T19:11:28Z",
          "updatedAt": "2024-07-30T19:11:29Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "I think the wording that Daniel has is more accurate and reflective of what the intent of the +kb terminology was.",
              "createdAt": "2024-07-30T19:11:29Z",
              "updatedAt": "2024-07-31T01:05:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6Dos9y",
          "commit": {
            "abbreviatedOid": "632de4c"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-07-30T19:13:55Z",
          "updatedAt": "2024-07-30T19:13:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 447,
      "id": "PR_kwDOHTmVzM527vDo",
      "title": "Fix typo: unlinkablility -> unlinkability",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/447",
      "state": "MERGED",
      "author": "dalebowie",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-07-31T00:48:13Z",
      "updatedAt": "2024-08-04T19:36:28Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "5b2bbc61bde1d7f415cbc8b5984b6abfcaa631a5",
      "headRepository": "dalebowie/oauth-selective-disclosure-jwt",
      "headRefName": "unlinkability-typo",
      "headRefOid": "e27df2d48bec6975ba3b0d2104f482f2dd3a1ef8",
      "closedAt": "2024-07-31T12:22:11Z",
      "mergedAt": "2024-07-31T12:22:11Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "841a4f43ec08b6a9623ac05b598df9846f69dbf3"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "BTW @dalebowie, please do a quick PR adding yourself to the Acknowledgements section, if you;'d like.",
          "createdAt": "2024-08-04T12:51:18Z",
          "updatedAt": "2024-08-04T12:51:18Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM6DqeVd",
          "commit": {
            "abbreviatedOid": "e27df2d"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks @dalebowie !",
          "createdAt": "2024-07-31T00:54:56Z",
          "updatedAt": "2024-07-31T00:54:56Z",
          "comments": []
        }
      ]
    },
    {
      "number": 448,
      "id": "PR_kwDOHTmVzM53BZq-",
      "title": "Strengthen privacy considerations",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/448",
      "state": "CLOSED",
      "author": "wbl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-07-31T17:30:57Z",
      "updatedAt": "2024-12-24T13:39:13Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "841a4f43ec08b6a9623ac05b598df9846f69dbf3",
      "headRepository": "wbl/oauth-selective-disclosure-jwt",
      "headRefName": "patch-1",
      "headRefOid": "870a1729fb319d2a47e01b7ffee0cce6a664f568",
      "closedAt": "2024-08-12T19:57:42Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "an alternative starting point is offered in #451 ",
          "createdAt": "2024-08-12T19:57:13Z",
          "updatedAt": "2024-08-12T19:57:13Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM6D3Xuw",
          "commit": {
            "abbreviatedOid": "870a172"
          },
          "author": "jogu",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-01T10:17:08Z",
          "updatedAt": "2024-08-01T10:17:08Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "I think \"This includes age verification on the Web\" is overly generic / too strong - I don't think we can say with certainty that all age verification use cases on the web must have issuer/verifier unlinkability (for example if the verifier already has other identity records for this user the additional risk seems very low), and at the end of the day this is a balanced choice, particularly if the fallback (if an SD-JWT can't be used) is for the user to upload a picture of their full driving license which would be even worse for privacy. I would imagine the concerns can sometimes be solved by making it clear to the user what is happening.",
              "createdAt": "2024-08-01T10:17:08Z",
              "updatedAt": "2024-08-01T10:17:26Z"
            }
          ]
        }
      ]
    },
    {
      "number": 449,
      "id": "PR_kwDOHTmVzM53YM0Y",
      "title": "Add myself to acknowledgements as suggested",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/449",
      "state": "MERGED",
      "author": "dalebowie",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "[As suggested here](https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/447#issuecomment-2267532672).",
      "createdAt": "2024-08-04T19:35:40Z",
      "updatedAt": "2024-08-04T21:53:45Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "841a4f43ec08b6a9623ac05b598df9846f69dbf3",
      "headRepository": "dalebowie/oauth-selective-disclosure-jwt",
      "headRefName": "acknowledgements",
      "headRefOid": "c7980d0c93c5382b4f86598ceaf92474eaafebb2",
      "closedAt": "2024-08-04T21:53:45Z",
      "mergedAt": "2024-08-04T21:53:45Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "e44dd04fe8daeaf268764200cbc7ae9a53f64668"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM6EMSZL",
          "commit": {
            "abbreviatedOid": "c7980d0"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-08-04T20:52:40Z",
          "updatedAt": "2024-08-04T20:52:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 450,
      "id": "PR_kwDOHTmVzM53gJzO",
      "title": "Add Martin to acknowledgments",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/450",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Acknowledge Martin Thomson for his contribution: https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/394/files/d150ec24a8a369af4976c2739d8b97ac5650e603#r1416409939",
      "createdAt": "2024-08-05T22:35:39Z",
      "updatedAt": "2024-08-13T16:15:40Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "7d1297af43ad095583fd1a565ede4523469cba39",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "thx-mt",
      "headRefOid": "d9c5daf9d71257ddb6d5c1e93e25be319256ddbe",
      "closedAt": "2024-08-13T16:15:40Z",
      "mergedAt": "2024-08-13T16:15:40Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "53ccaed12f1e2fa1d5661c41b277052377a829da"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Open for one week. No approvals. No objections. One minor editorial change applied. Will continue to wait. ",
          "createdAt": "2024-08-12T18:49:13Z",
          "updatedAt": "2024-08-12T18:49:13Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM6FJKvG",
          "commit": {
            "abbreviatedOid": "7bb42dc"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-12T18:38:04Z",
          "updatedAt": "2024-08-12T18:38:05Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\nSpecial appreciation is extended to Martin Thomson, who wielded his considerable intellect and influence to change a single occurrence of the word \"to\" to \"with\" in the midst of a significant proposal that would be integrated into this document six months later.\r\n```",
              "createdAt": "2024-08-12T18:38:04Z",
              "updatedAt": "2024-08-12T18:38:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6FRrta",
          "commit": {
            "abbreviatedOid": "d9c5daf"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "If this is this acceptable, I love it",
          "createdAt": "2024-08-13T16:13:39Z",
          "updatedAt": "2024-08-13T16:13:39Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6FRsxd",
          "commit": {
            "abbreviatedOid": "d9c5daf"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-08-13T16:15:31Z",
          "updatedAt": "2024-08-13T16:15:31Z",
          "comments": []
        }
      ]
    },
    {
      "number": 451,
      "id": "PR_kwDOHTmVzM53_eNY",
      "title": "attempt to better frame the risks and difficulties around Issuer/Verifier unlinkability",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/451",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Add a paragraph attempting to better frame the risks and difficulties around Issuer/Verifier unlinkability (i.e., a government issuer or huge service provider compelling collusion). \r\n\r\nThis is an attempt to add some reasonable text in consideration of the conversation in this thread https://mailarchive.ietf.org/arch/msg/oauth/fDYIWVE50nhW6F8IO_jeUafKABo/ \r\n\r\nthe new paragraph shows up in the middle of this section https://drafts.oauth.net/oauth-selective-disclosure-jwt/more-unlinkability-considerations/draft-ietf-oauth-selective-disclosure-jwt.html#name-unlinkability \r\n\r\nand of course a (not so) little note in the history https://drafts.oauth.net/oauth-selective-disclosure-jwt/more-unlinkability-considerations/draft-ietf-oauth-selective-disclosure-jwt.html#appendix-C-2\r\n\r\n",
      "createdAt": "2024-08-09T22:33:38Z",
      "updatedAt": "2024-08-14T19:53:48Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "46b874287faf428b87d10d639bfae5e35ade831f",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "more-unlinkability-considerations",
      "headRefOid": "878fa3cc1bb9a2d2e4aa6232c9d95bda56c8fc99",
      "closedAt": "2024-08-14T19:53:48Z",
      "mergedAt": "2024-08-14T19:53:48Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "1145a07ec89be8f280588404591d7ac9c54e04e6"
      },
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this PR addresses the conversation on the list accurately.",
          "createdAt": "2024-08-13T16:21:14Z",
          "updatedAt": "2024-08-13T16:21:14Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "PR has been open long enough for a single paragraph addition to the privacy considerations ",
          "createdAt": "2024-08-14T19:53:44Z",
          "updatedAt": "2024-08-14T19:53:44Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM6FAI_P",
          "commit": {
            "abbreviatedOid": "2436fe5"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-10T09:07:18Z",
          "updatedAt": "2024-08-10T09:07:18Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Not sure if deployments can be aware, so maybe...\r\n```suggestion\r\nDeployers of SD-JWT must be aware of these potential power dynamics,\r\nmitigate them as much as possible, and/or make the risks transparent to the End-User.\r\n```\r\n(We could say \"users\", but that might be misleading.)",
              "createdAt": "2024-08-10T09:07:18Z",
              "updatedAt": "2024-08-10T09:07:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6FAJBE",
          "commit": {
            "abbreviatedOid": "2436fe5"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Thanks for preparing this, looks good to me! ",
          "createdAt": "2024-08-10T09:08:33Z",
          "updatedAt": "2024-08-10T09:08:33Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6FANcK",
          "commit": {
            "abbreviatedOid": "2436fe5"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-10T11:48:45Z",
          "updatedAt": "2024-08-10T11:48:45Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "I struggled with what word to use there. Wanting to capture like all the decision making and even implementing folks involved in a rollout/deployment of SD-JWT. \"Deployments\" was the best I could come up with as a general overarching term.  But you are right - deployments don't have the capacity for awareness. And \"users\" felt too much like end-users. I'm not seeing the *right* word exactly but your suggestion of \"deployers\" seems like an improvement over what I had at least. ",
              "createdAt": "2024-08-10T11:48:45Z",
              "updatedAt": "2024-08-10T11:48:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6FRuPt",
          "commit": {
            "abbreviatedOid": "878fa3c"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-08-13T16:18:01Z",
          "updatedAt": "2024-08-14T17:48:28Z",
          "comments": []
        }
      ]
    },
    {
      "number": 452,
      "id": "PR_kwDOHTmVzM54KJUL",
      "title": "tightening the exposition",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/452",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "reflecting MikeJ's feedback",
      "createdAt": "2024-08-12T21:44:32Z",
      "updatedAt": "2024-08-14T13:06:48Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "53ccaed12f1e2fa1d5661c41b277052377a829da",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "mike-jones-feedback",
      "headRefOid": "9d649c9e5754d6c67ab577876a4bfb12d1238e01",
      "closedAt": "2024-08-14T13:06:48Z",
      "mergedAt": "2024-08-14T13:06:48Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "46b874287faf428b87d10d639bfae5e35ade831f"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> reflecting MikeJ's feedback\r\n\r\nto be clear, the feedback was from Michael B. Jones ",
          "createdAt": "2024-08-13T15:20:57Z",
          "updatedAt": "2024-08-13T15:20:57Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> Approved with one suggestions.\r\n\r\nhow many suggestion**s**? \r\n\r\n",
          "createdAt": "2024-08-13T21:03:19Z",
          "updatedAt": "2024-08-13T21:03:19Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "> Those that I believe have not yet been addressed are listed below. I assume they will be addressed in subsequent PRs and/or discussed on list.\r\n\r\nthe remaining ones are not addressed for certain reasons - there are misunderstandings, editors believe the current way is better for certain reasons, etc. I will be responding to the ML with the explanations.\r\n\r\nalso, by my count, only 12-13 are not addressed, not 23.",
          "createdAt": "2024-08-13T21:04:20Z",
          "updatedAt": "2024-08-13T21:08:26Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM6FKahl",
          "commit": {
            "abbreviatedOid": "88e7724"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-12T22:07:40Z",
          "updatedAt": "2024-08-12T22:07:40Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "I would ask that Mike's feedback not overwrite the phrasing that seemed more natural to Martin Thomson https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/394/files/d150ec24a8a369af4976c2739d8b97ac5650e603#r1416409939 and I hope to properly thank him for his contribution with #450  \r\n\r\n```suggestion\r\nassociated to the SD-JWT (i.e., using the `cnf` claim [@!RFC7800]). The strength of the binding is conditional upon the trust\r\n```",
              "createdAt": "2024-08-12T22:07:40Z",
              "updatedAt": "2024-08-12T22:08:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6FKbvZ",
          "commit": {
            "abbreviatedOid": "88e7724"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-12T22:12:12Z",
          "updatedAt": "2024-08-12T22:12:13Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "```suggestion\r\n1. SD-JWT is a composite structure enabling selective disclosure of its contents. It comprises the following:\r\n```",
              "createdAt": "2024-08-12T22:12:12Z",
              "updatedAt": "2024-08-12T22:12:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6FKb0Z",
          "commit": {
            "abbreviatedOid": "88e7724"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-12T22:12:32Z",
          "updatedAt": "2024-08-12T22:12:32Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "```suggestion\r\n2. SD-JWT+KB is a composite structure enabling cryptographic key binding when presented to the Verifier. It comprises the following:\r\n```",
              "createdAt": "2024-08-12T22:12:32Z",
              "updatedAt": "2024-08-12T22:12:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6FKcdB",
          "commit": {
            "abbreviatedOid": "88e7724"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-12T22:15:12Z",
          "updatedAt": "2024-08-12T22:15:12Z",
          "comments": [
            {
              "originalPosition": 215,
              "body": "```suggestion\r\nThe payload is then signed by the Issuer to create the following JWT:\r\n```",
              "createdAt": "2024-08-12T22:15:12Z",
              "updatedAt": "2024-08-12T22:15:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6FKdle",
          "commit": {
            "abbreviatedOid": "88e7724"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Thank you for putting this PR together! I made a few minor suggestions but otherwise it looks tight. ",
          "createdAt": "2024-08-12T22:20:00Z",
          "updatedAt": "2024-08-12T22:39:15Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6FRvxj",
          "commit": {
            "abbreviatedOid": "88e7724"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-13T16:21:01Z",
          "updatedAt": "2024-08-13T16:21:01Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "Jeez, such an impactful change hidden away in this unconspicious PR... thanks, Brian, for catching that.",
              "createdAt": "2024-08-13T16:21:01Z",
              "updatedAt": "2024-08-13T16:21:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6FRxQ3",
          "commit": {
            "abbreviatedOid": "88e7724"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-13T16:23:35Z",
          "updatedAt": "2024-08-13T16:23:35Z",
          "comments": [
            {
              "originalPosition": 280,
              "body": "```suggestion\r\nthat meet the security requirements described in the last paragraph of Section 5.2 of [@RFC7515]\r\n```",
              "createdAt": "2024-08-13T16:23:35Z",
              "updatedAt": "2024-08-13T16:23:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6FRx6M",
          "commit": {
            "abbreviatedOid": "88e7724"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Approved with one suggestions.",
          "createdAt": "2024-08-13T16:24:54Z",
          "updatedAt": "2024-08-13T16:24:54Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6FRych",
          "commit": {
            "abbreviatedOid": "88e7724"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-13T16:26:04Z",
          "updatedAt": "2024-08-13T16:26:04Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "I am very sorry I did not catch that. you are absolutely right, reverting this.",
              "createdAt": "2024-08-13T16:26:04Z",
              "updatedAt": "2024-08-13T16:26:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6FSFmB",
          "commit": {
            "abbreviatedOid": "e980c23"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "looks good now, thanks for further tightening the exposition ",
          "createdAt": "2024-08-13T17:02:41Z",
          "updatedAt": "2024-08-13T17:02:41Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6FSkjr",
          "commit": {
            "abbreviatedOid": "e980c23"
          },
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-13T18:06:36Z",
          "updatedAt": "2024-08-13T18:06:37Z",
          "comments": [
            {
              "originalPosition": 263,
              "body": "```suggestion\r\nthe JWS JSON Serialization, the representation as a regular SD-JWT using the Compact Serialization MUST be\r\ncreated temporarily to calculate the digest. In detail, the SD-JWT using the Compact Serialization part is built\r\n```",
              "createdAt": "2024-08-13T18:06:37Z",
              "updatedAt": "2024-08-13T18:06:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6FTR6I",
          "commit": {
            "abbreviatedOid": "e980c23"
          },
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "All these changes look good.  Thanks for doing them.  By my count, this addresses 36 of my 59 review comments at https://mailarchive.ietf.org/arch/msg/oauth/5V6nVIfYw3BxsayLg1iY-YRUxdc/ - leaving 23.  Those that I believe have not yet been addressed are listed below.  I assume they will be addressed in subsequent PRs and/or discussed on list. \r\n\r\nI'm approving because I'm fine with this existing set being merged in now.  (Although a few of the remaining ones are also purely editorial, so could also be added. here.)\r\n\r\nSection 1. [Introduction](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-10.html#name-introduction):  The usage of \u201cHolder\u201d in \u201cused a number of times by the user (the \"Holder\" of the JWT)\u201d inconsistent with its usage in the definitions, which defines \u201cHolder\u201d as being \u201can entity\u201d.  The usage here in the introduction makes the holder into a person rather than an entity.  Please adjust the language here to not confuse the user who utilizes the holder with the holder itself.\r\nSection 1. [Introduction](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-10.html#name-introduction):  In \u201c\"Claims\" here refers to both object properties (name-value pairs) as well as array elements.\u201d change \u201carray elements\u201d to \u201celements in arrays that are the values of name/value pairs\u201d (or something like that).  Without saying what the array elements are, readers will be confused about what\u2019s being referred to.  I\u2019d apply this clarification in 4.1. [SD-JWT and Disclosures](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-10.html#name-sd-jwt-and-disclosures) and other applicable locations as well.\r\nSection 1. [Introduction](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-10.html#name-introduction):  In \u201cthey hold the private key associated to the SD-JWT\u201d, change \u201cassociated to\u201d to \u201cassociated with\u201d.\r\nSection 1. [Introduction](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-10.html#name-introduction):  During IESG and/or RFC Editor review, we\u2019re likely going to be asked to add a reference for JSON-LD at \u201cSD-JWT can be used with any JSON-based representation of claims, including JSON-LD.\u201d  If we don\u2019t want that, I\u2019d delete \u201c, including JSON-LD\u201d now.\r\nSection 1.1. [Feature Summary](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-10.html#name-feature-summary):  In \u201cA format for enabling selective disclosure in nested JSON data structures, supporting selectively disclosable object properties (name-value pairs) and array elements\u201d, consider expanding \u201carray elements\u201d in the same manner as the preceding comment to make the meaning more evident.\r\nSection 1.2. [Conventions and Terminology](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-10.html#name-conventions-and-terminology):  I suggest moving the \u201cbase64url\u201d definition to the Terms and Definitions section and use a parallel structure to that at https://www.rfc-editor.org/rfc/rfc7519.html#section-2.  Specifically, say \u201cThe \u201cbase64url\u201d term denotes the URL-safe base64 encoding without padding defined in Section 2 of [RFC7515].\u201d  Then introduce the rest of the definitions with the phrase \u201cThese terms are defined by this specification:\u201d as is done in RFC 7519.  The current presentation is fairly jarring.\r\nSection 5.2.2. [Disclosures for Array Elements](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-10.html#name-disclosures-for-array-eleme):  Some readers and implementers will be confused at this point because the array disclosure doesn\u2019t indicate what Claim Name the disclosed array element corresponds to.  Please say here how the Claim Name information is communicated.  At the very least, add a forward reference saying that the way the array element disclosure is associated with the Claim Name is described in 5.2.4.2. [Array Elements](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-10.html#name-array-elements).\r\nSection 5.2.4.2. [Array Elements](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-10.html#name-array-elements):  I suggest adding an example also enabling disclosing a second array element, so that the syntax will be clear to readers.  In other words, show what \u201cunless a matching Disclosure for the second element is received\u201d would look like.  Or add a forward reference showing a place that it\u2019s done.\r\nSection 5.2.6. [Recursive Disclosures](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-10.html#name-recursive-disclosures):  Change \u201cconceal presence\u201d to \u201cconceal the presence\u201d.\r\nSection 5.3. [Key Binding JWT](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-10.html#name-key-binding-jwt):  Change \u201cMUST NOT be none.\u201d to \u201cIt MUST NOT be \"none\".\u201d.\r\nSection 5.3.2. [Validating the Key Binding JWT](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-10.html#name-validating-the-key-binding-):  In \u201cif the SD-JWT contains a cnf value with a jwk member, the Verifier could parse the provided JWK and use it to verify the Key Binding JWT.\u201d, change \u201ccould\u201d to \u201cMUST\u201d.  Make this normative to increase interoperability!\r\nSection 6.1. [Issuance](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-10.html#name-issuance):  There are many places from here on where the label \u201cSHA-256 Hash\u201d is used, for instance \u201cSHA-256 Hash: jsu9yVulwQQlhFlM_3JlzMaSFzglhQG0DpfayQwLUK4\u201d.  Change all of these to \u201cBase64url-Encoded SHA-256 Hash\u201d for correctness.\r\nSection 6.1. [Issuance](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-10.html#name-issuance):  Change \u201cThe following Key Binding JWT payload was created and signed for this presentation by the Holder:\u201d to \u201cThe following Key Binding JWT Claims Set was created and signed for this presentation by the Holder:\u201d, again, to use the standard JWT claims terminology.\r\nSection 8.1. [Verification of the SD-JWT](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-10.html#name-verification-of-the-sd-jwt):  Delete \u201cnbf\u201d from \u201cclaims such as nbf, iat, and exp\u201d and everywhere else in the spec, other than in 10.7. [Selectively-Disclosable Validity Claims](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-10.html#name-selectively-disclosable-val), where both \u201ciat\u201d and \u201cnbf\u201d should be listed, as described in my comment there.  \u201ciat\u201d (Issued At) is a standard validity claim in JWT tokens (for instance, ID Tokens), whereas \u201cnbf\u201d (Not Before) is rarely used, since it is only useful when future-dating tokens, which is rare.\r\nSection 10.1. [Mandatory Signing of the Issuer-signed JWT](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-10.html#name-mandatory-signing-of-the-is):  \u2026  Also, the post-quantum language seems superfluous and non-actionable, so I\u2019d delete it.\r\nSection 10.7. [Selectively-Disclosable Validity Claims](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-10.html#name-selectively-disclosable-val):  Add \u201ciat (Issued At) to the validity claims list before \u201cnbf\u201d, and change \u201cnbf (Not Before)\u201d to \u201cnbf (Not Before) (if present)\u201d.  \u201ciat\u201d (Issued At) is a standard validity claim in JWT tokens (for instance, ID Tokens), whereas \u201cnbf\u201d (Not Before) is rarely used, since it is only useful when future-dating tokens, which is rare.  Change all uses of \u201cnbf\u201d to \u201ciat\u201d elsewhere in the spec.\r\nSection 11.1. [Storage of Signed User Data](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-10.html#name-storage-of-signed-user-data):  Change \u201cOpenID Connect\u201d to \u201cOpenID Connect [OpenID.Core]\u201d.\r\nSection 12. [Acknowledgements](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-10.html#name-acknowledgements):  Consider sorting the acknowledgements alphabetically by last name, which is the usual convention.\r\nSection 14.2. [Informative References](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-10.html#name-informative-references):  Update the reference \u201c[I-D.ietf-oauth-sd-jwt-vc]\u201d to https://datatracker.ietf.org/doc/html/draft-ietf-oauth-sd-jwt-vc-04.\r\nSection A.1. [Simple Structured SD-JWT](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-10.html#name-simple-structured-sd-jwt): Change \u201callowing to separately disclose individual members of the claim\u201d to \u201callowing separate disclosure of individual members of the claim\u201d.\r\nSection A.5. [Elliptic Curve Key Used in the Examples](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-10.html#name-elliptic-curve-key-used-in-): Change \u201cThe public key used to validate a Key Binding JWT can be found in the examples as the content of the cnf claim.\u201d to \u201cThe public key used to validate a Key Binding JWT can be found in the examples as the value of the jwk member of the cnf claim.\u201d\r\nSection Appendix B. [Disclosure Format Considerations](https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-10.html#name-disclosure-format-considera): At the end of the paragraph introduced by \u201c1. Canonicalization\u201d, consider adding the sentence \u201cCanonicalization schemes have a long history of creating interoperability problems in practice.\u201d\r\nEverywhere:  Consider changing the name \u201c\u2026\u201d to something more indicative of its function, such as \u201c_sd_element\u201d or \u201c_sd_item\u201d.  Or alternatively, at least provide rationale for why that non-obvious name was chosen.",
          "createdAt": "2024-08-13T19:42:41Z",
          "updatedAt": "2024-08-13T19:42:41Z",
          "comments": []
        }
      ]
    },
    {
      "number": 453,
      "id": "PR_kwDOHTmVzM54Zyhz",
      "title": "a new PR to add PR #452 in document history",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/453",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "a new PR to add PR #452 in document history",
      "createdAt": "2024-08-14T20:01:28Z",
      "updatedAt": "2024-08-19T15:58:23Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "1145a07ec89be8f280588404591d7ac9c54e04e6",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "that-pesky-document-history",
      "headRefOid": "b93f4c9d7a7bcee36999be95271c473edc7c1fe0",
      "closedAt": "2024-08-19T15:58:22Z",
      "mergedAt": "2024-08-19T15:58:22Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "4f4886237a19314d2fdcba1234cc1a4b258a85ef"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM6FgdUD",
          "commit": {
            "abbreviatedOid": "b93f4c9"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Approved without any suggestion(s)",
          "createdAt": "2024-08-15T07:36:18Z",
          "updatedAt": "2024-08-15T07:36:18Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6FjUyO",
          "commit": {
            "abbreviatedOid": "b93f4c9"
          },
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-08-15T15:17:55Z",
          "updatedAt": "2024-08-15T15:17:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 454,
      "id": "PR_kwDOHTmVzM55I7Ha",
      "title": "additional updates from Mike's review",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/454",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "see https://mailarchive.ietf.org/arch/msg/oauth/cPD_LWWEPedQR3SiU17Juamtwt8/ and https://mailarchive.ietf.org/arch/msg/oauth/ulgKG6F-_RU6S2TaocZpbqEFgzs/ ",
      "createdAt": "2024-08-22T15:07:59Z",
      "updatedAt": "2024-08-23T19:43:41Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "4f4886237a19314d2fdcba1234cc1a4b258a85ef",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "mikes-review-part-deux",
      "headRefOid": "901ef086790d70492b7ebfbaee18a99653261842",
      "closedAt": "2024-08-23T19:01:05Z",
      "mergedAt": "2024-08-23T19:01:05Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "3fb53f24e759678995ee1eaa50a5ad45e3fe62d7"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "oh wow... I apparently didn't confirm the merge so this is still pending. I really thought it was done and published -11. Sigh. Sorry. Will look at doing a -12 soonish. ",
          "createdAt": "2024-08-23T19:00:48Z",
          "updatedAt": "2024-08-23T19:00:48Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "see #455 ",
          "createdAt": "2024-08-23T19:43:40Z",
          "updatedAt": "2024-08-23T19:43:40Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM6GafCT",
          "commit": {
            "abbreviatedOid": "65fca6b"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-22T16:14:44Z",
          "updatedAt": "2024-08-22T16:14:44Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n:  An entity that received SD-JWTs from the Issuer and has control over them. In the context of this document, the term may refer to the actual user, the supporting hardware and software in their possession, or both.\r\n```",
              "createdAt": "2024-08-22T16:14:44Z",
              "updatedAt": "2024-08-22T16:14:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6GafXF",
          "commit": {
            "abbreviatedOid": "65fca6b"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-08-22T16:15:15Z",
          "updatedAt": "2024-08-22T16:15:15Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6GafdF",
          "commit": {
            "abbreviatedOid": "65fca6b"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-08-22T16:15:22Z",
          "updatedAt": "2024-08-22T16:15:22Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6GaxZd",
          "commit": {
            "abbreviatedOid": "901ef08"
          },
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks for these additional updates.",
          "createdAt": "2024-08-22T16:49:42Z",
          "updatedAt": "2024-08-22T16:49:42Z",
          "comments": []
        }
      ]
    },
    {
      "number": 455,
      "id": "PR_kwDOHTmVzM55R993",
      "title": "Add editorial and reference fixes to -12 history",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/455",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "due to my mistake on #454 not being in -11 ",
      "createdAt": "2024-08-23T19:36:23Z",
      "updatedAt": "2024-08-23T19:43:56Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "3fb53f24e759678995ee1eaa50a5ad45e3fe62d7",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "add-dash-12",
      "headRefOid": "598fc210f900aa305c0562a4ebef6bb21d0a81a0",
      "closedAt": "2024-08-23T19:43:56Z",
      "mergedAt": "2024-08-23T19:43:56Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "0834b91b8743d5cbb9b8b477b7873fb905b9d6b1"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 456,
      "id": "PR_kwDOHTmVzM55STbI",
      "title": "Introduced/used the phrase processed SD-JWT payload in Section 8.1 on Verifying the SD-JWT",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/456",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Introduced the phrase `processed SD-JWT payload` in the end of the Section 8.1 on Verifying the SD-JWT\r\n\r\nfor #443",
      "createdAt": "2024-08-23T20:49:10Z",
      "updatedAt": "2024-08-29T16:09:29Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "2cdefe63c4d16f91495a1fb155ec91d7f6070304",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "processed-sd-jwt-payload",
      "headRefOid": "f405f43918a78cab1d13fd3d0d7219a5d759c862",
      "closedAt": "2024-08-29T16:09:29Z",
      "mergedAt": "2024-08-29T16:09:29Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "81b1a3ed212b54a732cc6236ad6bd3fb8c128b49"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> Is it really sufficient to mention this new term \"processed sd-jwt payload\" only **once**?\r\n\r\nFair question. But I did add this one mention of the term in the location that @awoie requested it in https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/443. And it was already used in the text at the end of [8.3](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-selective-disclosure-jwt#section-8.3-6). And the just merged https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/457 sprinkled in a few casual uses of it too. So I think it's sufficient enough. \r\n\r\nAlso we have a fair number of kinda similar terms/phrases that are used in the doc but not formally introduced in the the terminology section. Which I think is fine. But putting this one there might be somewhat inconsistent and beg the question about other similar terms/phrases being there too. ",
          "createdAt": "2024-08-28T20:34:46Z",
          "updatedAt": "2024-08-29T12:27:47Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM6Gl6VJ",
          "commit": {
            "abbreviatedOid": "ba23ad9"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-23T20:51:15Z",
          "updatedAt": "2024-08-23T20:51:15Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "```suggestion\r\n   * Introduced the phrase processed SD-JWT payload in the end of (#sd_jwt_verification) on Verifying the SD-JWT\r\n```",
              "createdAt": "2024-08-23T20:51:15Z",
              "updatedAt": "2024-08-23T20:51:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6GyaMy",
          "commit": {
            "abbreviatedOid": "a02e4e4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-26T18:40:17Z",
          "updatedAt": "2024-08-26T18:40:17Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "with #457 the term will used a bit more ...\r\n\r\n```suggestion\r\nIf any step fails, the SD-JWT is not valid, and processing MUST be aborted. Otherwise, the JSON document resulting from the preceding processing and verification steps, herein referred to as the processed SD-JWT payload, can be made available to the application to be used for its intended purpose.\r\n```",
              "createdAt": "2024-08-26T18:40:17Z",
              "updatedAt": "2024-08-26T18:40:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6Gy3AZ",
          "commit": {
            "abbreviatedOid": "8320eda"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-26T19:40:41Z",
          "updatedAt": "2024-08-26T19:40:42Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "```suggestion\r\n   * Better introduce the phrase processed SD-JWT payload in the end of (#sd_jwt_verification) on Verifying the SD-JWT\r\n```",
              "createdAt": "2024-08-26T19:40:41Z",
              "updatedAt": "2024-08-26T19:40:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6HG55X",
          "commit": {
            "abbreviatedOid": "d116f81"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-08-28T16:16:08Z",
          "updatedAt": "2024-08-28T16:16:08Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6HIqmi",
          "commit": {
            "abbreviatedOid": "d116f81"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Is it really sufficient to mention this new term \"processed sd-jwt payload\" only **once**?",
          "createdAt": "2024-08-28T20:21:55Z",
          "updatedAt": "2024-08-28T20:21:55Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6HQ84b",
          "commit": {
            "abbreviatedOid": "f405f43"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "agree to common law definition",
          "createdAt": "2024-08-29T16:09:21Z",
          "updatedAt": "2024-08-29T16:09:21Z",
          "comments": []
        }
      ]
    },
    {
      "number": 457,
      "id": "PR_kwDOHTmVzM55eY3W",
      "title": "clarify, add context, or otherwise improve examples",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/457",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "resolves https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/444 which is really based on https://github.com/oauth-wg/oauth-sd-jwt-vc/issues/246 ",
      "createdAt": "2024-08-26T18:33:19Z",
      "updatedAt": "2024-08-28T20:19:51Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "75ea4174b381418e1cd0cd4e728fe818a9752321",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "clarify-examples-more",
      "headRefOid": "550e198557bc0de3c5536e36600ceb85351eb6b1",
      "closedAt": "2024-08-28T20:19:51Z",
      "mergedAt": "2024-08-28T20:19:51Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "2cdefe63c4d16f91495a1fb155ec91d7f6070304"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM6GzSAX",
          "commit": {
            "abbreviatedOid": "e79a1af"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-26T20:37:17Z",
          "updatedAt": "2024-08-26T20:37:18Z",
          "comments": [
            {
              "originalPosition": 128,
              "body": "```suggestion\r\nThe digests in the SD-JWT payload references the following Disclosures:\r\n```",
              "createdAt": "2024-08-26T20:37:17Z",
              "updatedAt": "2024-08-26T20:37:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6GzSiB",
          "commit": {
            "abbreviatedOid": "a636c65"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-26T20:37:59Z",
          "updatedAt": "2024-08-26T20:37:59Z",
          "comments": [
            {
              "originalPosition": 128,
              "body": "```suggestion\r\nThe digests in the SD-JWT payload reference the following Disclosures:\r\n```",
              "createdAt": "2024-08-26T20:37:59Z",
              "updatedAt": "2024-08-26T20:37:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6HG6s0",
          "commit": {
            "abbreviatedOid": "550e198"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-08-28T16:17:46Z",
          "updatedAt": "2024-08-28T16:17:46Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6HIpil",
          "commit": {
            "abbreviatedOid": "550e198"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-08-28T20:19:22Z",
          "updatedAt": "2024-08-28T20:19:22Z",
          "comments": []
        }
      ]
    },
    {
      "number": 458,
      "id": "PR_kwDOHTmVzM55emhH",
      "title": "Moved considerations around unlinkability to the top of the Privacy Considerations section",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/458",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Despite or maybe in light of some recentish discussion on the mailing list, the topic seems like it deserves more prominent placement.",
      "createdAt": "2024-08-26T19:09:26Z",
      "updatedAt": "2024-08-28T20:14:49Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "75ea4174b381418e1cd0cd4e728fe818a9752321",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "unlinkability-first",
      "headRefOid": "7776df0d55971af1bc125cc969556d08f388569c",
      "closedAt": "2024-08-28T20:14:49Z",
      "mergedAt": "2024-08-28T20:14:49Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "4496a73000ad27484b4366877eb1a91570f5f023"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM6HG7AK",
          "commit": {
            "abbreviatedOid": "7776df0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-08-28T16:18:21Z",
          "updatedAt": "2024-08-28T16:18:21Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6HInX_",
          "commit": {
            "abbreviatedOid": "7776df0"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-08-28T20:14:37Z",
          "updatedAt": "2024-08-28T20:14:37Z",
          "comments": []
        }
      ]
    },
    {
      "number": 459,
      "id": "PR_kwDOHTmVzM55jWWG",
      "title": "Using a capital letter \"B\" to start the sentence",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/459",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Using a capital letter to start the sentence will hopefully make the current presentation less jarring without rearranging anything",
      "createdAt": "2024-08-27T10:40:32Z",
      "updatedAt": "2024-08-28T20:14:20Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "75ea4174b381418e1cd0cd4e728fe818a9752321",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "b-up-to-B",
      "headRefOid": "3c74aaa9148039d3eb52c2924bd1864b2cfcfe9f",
      "closedAt": "2024-08-28T20:14:20Z",
      "mergedAt": "2024-08-28T20:14:20Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "e30e83ae924fe5384066fd2bf3e5ad894412713e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM6HG7ml",
          "commit": {
            "abbreviatedOid": "3c74aaa"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-08-28T16:19:32Z",
          "updatedAt": "2024-08-28T16:19:32Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6HInKJ",
          "commit": {
            "abbreviatedOid": "3c74aaa"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-08-28T20:14:08Z",
          "updatedAt": "2024-08-28T20:14:08Z",
          "comments": []
        }
      ]
    },
    {
      "number": 460,
      "id": "PR_kwDOHTmVzM553SmL",
      "title": "Remove text about publishing private keys",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/460",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "to fix #439 ",
      "createdAt": "2024-08-29T16:52:18Z",
      "updatedAt": "2024-09-03T12:01:47Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "81b1a3ed212b54a732cc6236ad6bd3fb8c128b49",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "burn-it-all-down",
      "headRefOid": "1fa52c80b0db04f4b7945c61a7f10cdf59c4e359",
      "closedAt": "2024-09-03T12:01:47Z",
      "mergedAt": "2024-09-03T12:01:47Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "5283b259f7e0c711366f5bd10562bab46a9ac34a"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 462,
      "id": "PR_kwDOHTmVzM56QXj7",
      "title": "doc history ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/462",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Remove the brief discussion of publishing private key(s) to reduce the value of leaked or stolen data",
      "createdAt": "2024-09-03T12:14:13Z",
      "updatedAt": "2024-09-03T14:33:49Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "5283b259f7e0c711366f5bd10562bab46a9ac34a",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "burn-it-all-down-but-keep-mention-in-history",
      "headRefOid": "9db0425d6d12a371da019fce51327c4d4ef88843",
      "closedAt": "2024-09-03T14:33:49Z",
      "mergedAt": "2024-09-03T14:33:49Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "4694e6bbb11ebb5f8ed67abb09f3e1833866de9b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM6Hwa44",
          "commit": {
            "abbreviatedOid": "8fad63b"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-03T14:26:11Z",
          "updatedAt": "2024-09-03T14:26:11Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\n   * Remove the brief discussion of publishing private key(s) to attempt to reduce the value of leaked or stolen data\r\n```",
              "createdAt": "2024-09-03T14:26:11Z",
              "updatedAt": "2024-09-03T14:26:11Z"
            }
          ]
        }
      ]
    },
    {
      "number": 466,
      "id": "PR_kwDOHTmVzM58FxLn",
      "title": "Addressing one more of Mike's previous review comments",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/466",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "https://mailarchive.ietf.org/arch/msg/oauth/W88oMIu_no3KYsU60MTmBsuSIJI/ and I don't know why my response isn't on the mail archive yet but here's a copy:\r\n\r\n\r\n![Screenshot 2024-09-19 at 2 43 48\u202fPM](https://github.com/user-attachments/assets/a8b28c46-3759-4456-9967-f25dd1cf75f2)\r\n",
      "createdAt": "2024-09-19T20:44:26Z",
      "updatedAt": "2024-09-25T19:59:14Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "817303cd188f5187750c76318517c30aa6ffe530",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "say-the-quiet-part-out-loud",
      "headRefOid": "97aa7288e584ea05aaa65c1e7b90556211885e37",
      "closedAt": "2024-09-25T19:59:14Z",
      "mergedAt": "2024-09-25T19:59:14Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "bfc5914fd199bb93e934283aa1d30059efe94264"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "oh hey that's fun: \r\n\r\n>  Error: This request has been automatically failed because it uses a deprecated version of `actions/upload-artifact: v2`. Learn more: https://github.blog/changelog/2024-02-13-deprecation-notice-v1-and-v2-of-the-artifact-actions/\r\n",
          "createdAt": "2024-09-19T20:45:51Z",
          "updatedAt": "2024-09-19T20:46:09Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> oh hey that's fun:\r\n> \r\n> > Error: This request has been automatically failed because it uses a deprecated version of `actions/upload-artifact: v2`. Learn more: https://github.blog/changelog/2024-02-13-deprecation-notice-v1-and-v2-of-the-artifact-actions/\r\n\r\nsadness addressed in 9b7ad2d010e0f49e3dd8b5833c59fe4642e2892b (on the surface anyway) ",
          "createdAt": "2024-09-23T15:50:20Z",
          "updatedAt": "2024-09-23T15:50:20Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "isn't part of this duplicate of #471 ?",
          "createdAt": "2024-09-23T16:50:51Z",
          "updatedAt": "2024-09-23T16:50:51Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> isn't part of this duplicate of #471 ?\r\n\r\nYeah, I did it here first just to fix things. Then decided fixing the build process should be decoupled from addressing one more of Mike's previous review comments. ",
          "createdAt": "2024-09-23T17:54:17Z",
          "updatedAt": "2024-09-23T17:54:17Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> > isn't part of this duplicate of #471 ?\r\n> \r\n> Yeah, I did it here first just to fix things. Then decided fixing the build process should be decoupled from addressing one more of Mike's previous review comments.\r\n\r\nNow overcome by events. ",
          "createdAt": "2024-09-23T17:55:03Z",
          "updatedAt": "2024-09-23T17:55:03Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM6Kc5bm",
          "commit": {
            "abbreviatedOid": "97aa728"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-09-23T16:50:30Z",
          "updatedAt": "2024-09-23T17:54:24Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6Kn3-s",
          "commit": {
            "abbreviatedOid": "97aa728"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-09-24T15:49:08Z",
          "updatedAt": "2024-09-24T15:49:08Z",
          "comments": []
        }
      ]
    },
    {
      "number": 467,
      "id": "PR_kwDOHTmVzM58Ov6k",
      "title": "introduction rewrite",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/467",
      "state": "CLOSED",
      "author": "dickhardt",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "pending-close"
      ],
      "body": "provide more context on what the problem is and why this work is happening, with a summary of how it works\r\n\r\ndeleted spurious language that reads like a patent application",
      "createdAt": "2024-09-21T04:41:24Z",
      "updatedAt": "2024-10-18T12:27:32Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "817303cd188f5187750c76318517c30aa6ffe530",
      "headRepository": "dickhardt/oauth-selective-disclosure-jwt",
      "headRefName": "master",
      "headRefOid": "6fae293b8b40d815b1da2d89682dcb81f4416e7e",
      "closedAt": "2024-10-18T12:27:31Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "rohanmahy",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I am generally OK with a much more concise introduction (but I don't find the current Introduction offensive either). If we were to use a shorter intro I would want to see the following addressed:\r\n\r\n1. Mention that you can create an SD-JWT for an arbitrary JWS (not just a JWT).\r\n2. Reintroduce a casual introduction of the terms \"Claims\" and \"Disclosures\", as this was very useful\r\n3. Spell out SD-JWT on first use\r\n4. s/the verifier would like assurance/the holder can optionally provide assurance/\r\n5. Add back this sentiment \"While JWTs with claims describing natural persons are a common use case, the mechanisms defined in this document are also applicable to other use cases.\"",
          "createdAt": "2024-09-22T17:34:24Z",
          "updatedAt": "2024-09-22T17:34:24Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @rohanmahy, I generally agree with that. \r\n\r\nNote that @danielfett has kindly (foolishly?) said he'd take a pass at reviewing or refining or rewriting or reworking this and/or the current (unoffensive, thanks!) Introduction. \r\n\r\n",
          "createdAt": "2024-10-04T22:27:12Z",
          "updatedAt": "2024-10-04T22:27:12Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> Note that @danielfett has kindly (foolishly?) said he'd take a pass at reviewing or refining or rewriting or reworking this and/or the current (unoffensive, thanks!) Introduction.\r\n\r\nsee #477 for that ",
          "createdAt": "2024-10-16T15:32:26Z",
          "updatedAt": "2024-10-16T15:32:26Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "supeceded by #477 ",
          "createdAt": "2024-10-18T12:27:31Z",
          "updatedAt": "2024-10-18T12:27:31Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM6MC1i9",
          "commit": {
            "abbreviatedOid": "6fae293"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "The github UX  tells me that I \"need to leave a comment indicating the requested changes.\"",
          "createdAt": "2024-10-05T12:25:08Z",
          "updatedAt": "2024-10-05T12:25:08Z",
          "comments": []
        }
      ]
    },
    {
      "number": 471,
      "id": "PR_kwDOHTmVzM58ZI95",
      "title": "Update upload artifact to v4 ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/471",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Update upload artifact to v4  to avoid being \"automatically failed because it uses a deprecated version\"\r\n\r\n> Error: This request has been automatically failed because it uses a deprecated version of `actions/upload-artifact: v2`. Learn more: https://github.blog/changelog/2024-02-13-deprecation-notice-v1-and-v2-of-the-artifact-actions/\r\n",
      "createdAt": "2024-09-23T15:54:35Z",
      "updatedAt": "2024-09-23T17:51:18Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "4694e6bbb11ebb5f8ed67abb09f3e1833866de9b",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "make-upload-artifact-v4",
      "headRefOid": "dd1e43da523914d05cc32ec0b40bae6a3178dba7",
      "closedAt": "2024-09-23T17:51:18Z",
      "mergedAt": "2024-09-23T17:51:18Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "817303cd188f5187750c76318517c30aa6ffe530"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Gonna proceed with this even without doctor's approval. ",
          "createdAt": "2024-09-23T17:51:10Z",
          "updatedAt": "2024-09-23T17:51:10Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM6Kc49h",
          "commit": {
            "abbreviatedOid": "dd1e43d"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-09-23T16:49:31Z",
          "updatedAt": "2024-09-23T16:49:31Z",
          "comments": []
        }
      ]
    },
    {
      "number": 472,
      "id": "PR_kwDOHTmVzM59q43O",
      "title": "WGLC updates 1/x",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/472",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "\r\nupdates per https://mailarchive.ietf.org/arch/msg/oauth/QpovghcXuKkhO6MW93pOTyAsmlU/\r\nand https://mailarchive.ietf.org/arch/msg/oauth/rzqD_lSqnY7MsWtP_1TCIyH8zyg/\r\n\r\n",
      "createdAt": "2024-10-04T21:21:04Z",
      "updatedAt": "2024-10-09T17:53:37Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "bfc5914fd199bb93e934283aa1d30059efe94264",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "1st-wglc-pr-1-of-x",
      "headRefOid": "1d8c25465c97a7a0e5ad87138fd25169b761a082",
      "closedAt": "2024-10-09T17:53:37Z",
      "mergedAt": "2024-10-09T17:53:37Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "8c928bca98a8f76b7c6cc949efc625b8dec87c9c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM6MhhoU",
          "commit": {
            "abbreviatedOid": "1d8c254"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Thanks!",
          "createdAt": "2024-10-09T16:06:36Z",
          "updatedAt": "2024-10-09T16:06:36Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6Mh6ev",
          "commit": {
            "abbreviatedOid": "1d8c254"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-09T16:51:25Z",
          "updatedAt": "2024-10-09T16:51:25Z",
          "comments": []
        }
      ]
    },
    {
      "number": 473,
      "id": "PR_kwDOHTmVzM59q7sz",
      "title": " WGLC updates 2/x (remove sentence in intro)",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/473",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "pending-close"
      ],
      "body": "remove repetitive repetitive sentence per Dick https://mailarchive.ie)tf.org/arch/msg/oauth/brjnGB53MApGNCsXC03ungeWxI4/",
      "createdAt": "2024-10-04T21:33:05Z",
      "updatedAt": "2024-10-18T12:06:22Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "bfc5914fd199bb93e934283aa1d30059efe94264",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "1st-wglc-pr-2a-of-x",
      "headRefOid": "ef6bad58a56974e3166a91d020cf2231906fa111",
      "closedAt": "2024-10-18T12:06:22Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> I am ok with adding Dick as a contributor, but I am not ok removing this sentence (line 111), sorry. like, this is the only sentence that is left from when we used to say \"sd-jwt can be used with json-ld\", and \"The JSON-based representation of claims in a signed JWT...\" in the intro is not as clear as the sentence being deleted.\r\n\r\nOkay, let's just close this one then. I was just trying to incorporate some of the various WGLC feedback and this seemed reasonable. Keeping it seems reasonable as well. COMPLETELY REASONABLE even. ",
          "createdAt": "2024-10-09T17:39:23Z",
          "updatedAt": "2024-10-09T17:50:12Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "@danielfett is going to rework the introduction too ",
          "createdAt": "2024-10-09T21:14:29Z",
          "updatedAt": "2024-10-09T21:14:29Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM6Mhh5x",
          "commit": {
            "abbreviatedOid": "ef6bad5"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Merci!",
          "createdAt": "2024-10-09T16:07:07Z",
          "updatedAt": "2024-10-09T16:07:07Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6Mh8lf",
          "commit": {
            "abbreviatedOid": "ef6bad5"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I am ok with adding Dick as a contributor, but I am not ok removing this sentence (line 111), sorry. like, this is the only sentence that is left from when we used to say \"sd-jwt can be used with json-ld\", and \"The JSON-based representation of claims in a signed JWT...\" in the intro is not as clear as the sentence being deleted.",
          "createdAt": "2024-10-09T16:55:24Z",
          "updatedAt": "2024-10-09T16:55:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 474,
      "id": "PR_kwDOHTmVzM59rCEo",
      "title": "WGLC updates 3/x (Neil's stuff)",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/474",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "https://mailarchive.ietf.org/arch/msg/oauth/zQ7Q0cwuwiAJOMJoYTols_oR4W4/ ",
      "createdAt": "2024-10-04T22:06:24Z",
      "updatedAt": "2024-10-18T12:07:07Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "bfc5914fd199bb93e934283aa1d30059efe94264",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "1st-wglc-pr-3-of-x",
      "headRefOid": "5bec8b4a13fdfdd7f1edfd014ae29b343b75839b",
      "closedAt": "2024-10-18T12:07:07Z",
      "mergedAt": "2024-10-18T12:07:07Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "ff09985cdae13ec7ebf5791f06f5336708a939b0"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM6MhicG",
          "commit": {
            "abbreviatedOid": "5a10739"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Danke!",
          "createdAt": "2024-10-09T16:08:05Z",
          "updatedAt": "2024-10-09T16:08:05Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6NMycq",
          "commit": {
            "abbreviatedOid": "5a10739"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-15T11:00:09Z",
          "updatedAt": "2024-10-15T11:00:09Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "the value on line 534/532 should also be changed to `X9yH0Ajrdm1Oij4tWso9UzzKJvPoDxwmuEcO3XAdRC0` per https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/474/files#diff-40bc3800dd9a7d4411799637caf0b01f82a01242d57264a2e4beb408c3835704R499, no?",
              "createdAt": "2024-10-15T11:00:09Z",
              "updatedAt": "2024-10-15T11:00:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6NObT3",
          "commit": {
            "abbreviatedOid": "5a10739"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-15T13:34:12Z",
          "updatedAt": "2024-10-15T13:34:12Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "yup, i believe you are correct. good catch, thx ",
              "createdAt": "2024-10-15T13:34:12Z",
              "updatedAt": "2024-10-15T13:34:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6NOdLV",
          "commit": {
            "abbreviatedOid": "5a10739"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-15T13:36:36Z",
          "updatedAt": "2024-10-15T13:36:36Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "and fixed 5bec8b4a13fdfdd7f1edfd014ae29b343b75839b ",
              "createdAt": "2024-10-15T13:36:36Z",
              "updatedAt": "2024-10-15T13:36:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6Nu-XI",
          "commit": {
            "abbreviatedOid": "5bec8b4"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-18T12:06:57Z",
          "updatedAt": "2024-10-18T12:06:57Z",
          "comments": []
        }
      ]
    },
    {
      "number": 475,
      "id": "PR_kwDOHTmVzM59smIu",
      "title": " ISO/IEC 29100 is too private ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/475",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "https://standards.iso.org/ittf/PubliclyAvailableStandards/index.html no longer has anything for 29100 and https://www.iso.org/standard/45123.html indicates that ISO/IEC 29100:2011 is \"Withdrawn\" and \"Revised by\" ISO/IEC 29100:2024 that is now available for the low low special price of CHF 129, which is approximately $150 / \u20ac137 too much for me to be comfortable referencing",
      "createdAt": "2024-10-05T12:12:22Z",
      "updatedAt": "2025-01-16T18:14:23Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "563b57f30761c6498200f8bcb22d743d161e71d0",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "iso-frustrated-by-iso",
      "headRefOid": "52f71acc236bb088989eb5e857412744737fb217",
      "closedAt": "2025-01-16T18:14:22Z",
      "mergedAt": "2025-01-16T18:14:22Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "105ba168249853073d495bbe10f181a9bdee990e"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> Takk!\r\n\r\nThat was the first one I didn't recognize. Google says Norwegian, \u00e8 corretto?",
          "createdAt": "2024-10-09T16:11:35Z",
          "updatedAt": "2024-10-09T16:11:35Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Det er riktig. \ud83c\uddf3\ud83c\uddf4",
          "createdAt": "2024-10-09T16:31:04Z",
          "updatedAt": "2024-10-09T16:31:29Z"
        },
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It was removed from the Publicly Available Standards only due to a secretarial mistake when a new revision came out, and it is in the process of being reinstated. ",
          "createdAt": "2024-10-11T01:07:03Z",
          "updatedAt": "2024-10-11T01:07:03Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Based on Nat's comment, I don't think we need to remove this.",
          "createdAt": "2024-10-11T13:11:39Z",
          "updatedAt": "2024-10-11T13:11:39Z"
        },
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Just got notified that it is now available from https://standards.iso.org/ittf/PubliclyAvailableStandards/ . ",
          "createdAt": "2024-10-12T07:44:16Z",
          "updatedAt": "2024-10-12T07:44:16Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "![Screenshot 2024-10-15 at 6 10 46\u202fAM](https://github.com/user-attachments/assets/dd3c31e5-66d3-4f82-87eb-eb956b6f1822)\r\n\r\n![Screenshot 2024-10-15 at 6 11 02\u202fAM](https://github.com/user-attachments/assets/87d80e7c-e00f-469e-8d24-693463cba69f)\r\n",
          "createdAt": "2024-10-15T12:11:54Z",
          "updatedAt": "2024-10-15T12:11:54Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "![Screenshot 2024-10-17 at 5 55 59\u202fAM](https://github.com/user-attachments/assets/05e9d6fe-eb89-4c9b-a79b-9629b3dbe3b8)\r\n\r\nI don't think the ISO.29100 reference should have been included in the first place and it's unavailability isn't helping my opinion. \r\n",
          "createdAt": "2024-10-17T12:00:16Z",
          "updatedAt": "2024-10-17T12:00:16Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "https://mailarchive.ietf.org/arch/msg/oauth/SmGW8DevLyuydXAWLPeIgxX4MBo/ mentions this reference again ",
          "createdAt": "2024-12-18T20:36:17Z",
          "updatedAt": "2024-12-18T20:36:17Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> I believe what needs to be done is change the reference to 29100:2024 from 29100:2011, not removing the reference\r\n\r\nThat's an option too. But have you read all of ISO/IEC 29100:2024 and are all of it's principles applicable to SD-JWT? I don't know, I've only glanced at it. But I don't personally find content like \"The privacy principles of [@ISO.29100] should be adhered to.\" to be particularity helpful in a document like this and think it'd be better off without a vague and general statement to go see this other document that's not easily accessed. That how it's not easily accessed keeps changing is more a reminder that, in my opinion anyway, it never should have been referenced from SD-JWT in the first place. ",
          "createdAt": "2024-12-27T14:03:59Z",
          "updatedAt": "2024-12-28T21:59:12Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "29100 is now available again, it seems.\r\n\r\nI share the concern that the current reference is very broad and not actionable at all.",
          "createdAt": "2025-01-09T17:17:14Z",
          "updatedAt": "2025-01-09T17:17:14Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM6MhivI",
          "commit": {
            "abbreviatedOid": "a09702e"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Takk!",
          "createdAt": "2024-10-09T16:08:38Z",
          "updatedAt": "2024-12-18T20:36:25Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6NMvdi",
          "commit": {
            "abbreviatedOid": "a7cfddc"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "per Nat's comment the standard is publicly available again :) ",
          "createdAt": "2024-10-15T10:54:53Z",
          "updatedAt": "2024-10-15T10:54:53Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6WVkVh",
          "commit": {
            "abbreviatedOid": "a09702e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I believe what needs to be done is change the reference to 29100:2024 from 29100:2011, not removing the reference",
          "createdAt": "2024-12-24T23:24:47Z",
          "updatedAt": "2024-12-24T23:24:47Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6YZusY",
          "commit": {
            "abbreviatedOid": "a09702e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I give in to the concern that `current reference is very broad and not actionable at all`.",
          "createdAt": "2025-01-16T18:08:34Z",
          "updatedAt": "2025-01-16T18:08:34Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6YZv0H",
          "commit": {
            "abbreviatedOid": "54e2072"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-16T18:10:57Z",
          "updatedAt": "2025-01-16T18:10:58Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\n```",
              "createdAt": "2025-01-16T18:10:57Z",
              "updatedAt": "2025-01-16T18:10:58Z"
            }
          ]
        }
      ]
    },
    {
      "number": 476,
      "id": "PR_kwDOHTmVzM5-IDLV",
      "title": "WGLC updates 4/x (explicit typing discussion)",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/476",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "From this conversation https://mailarchive.ietf.org/arch/msg/oauth/MN1d1ihchmOTcHVMsZ_RlOcZxRE/ this PR tries to somewhat better explain that explicit typing, per JWT BCP before it, is about distinguishing different types of SD-JWTs. And also be a little more open to other ways of typing, such as cty.",
      "createdAt": "2024-10-09T19:58:07Z",
      "updatedAt": "2024-10-18T12:13:13Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "8c928bca98a8f76b7c6cc949efc625b8dec87c9c",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "expletives_typing",
      "headRefOid": "1fd3d71077205aa793afb78a7c9aaf93a41c6ce6",
      "closedAt": "2024-10-18T12:13:12Z",
      "mergedAt": "2024-10-18T12:13:12Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "73e54aad12ab2fa77eaabdf1d20ac35f88728cff"
      },
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Thanks, looks COMPLETELY REASONABLE to me.",
          "createdAt": "2024-10-18T12:12:48Z",
          "updatedAt": "2024-10-18T12:12:48Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM6Mj1vu",
          "commit": {
            "abbreviatedOid": "10a3148"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-09T20:04:46Z",
          "updatedAt": "2024-10-09T20:04:47Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "```suggestion\r\nsubject to such confusion attacks, so in the absence of other techniques, it is RECOMMENDED that applications profiles of SD-JWT specify an explicit type\r\n```",
              "createdAt": "2024-10-09T20:04:47Z",
              "updatedAt": "2024-10-09T20:04:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6Mj2VE",
          "commit": {
            "abbreviatedOid": "10a3148"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-09T20:06:08Z",
          "updatedAt": "2024-10-09T20:06:08Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "```suggestion\r\nsubject to such confusion attacks, so in the absence of other techniques, it is RECOMMENDED that application profiles of SD-JWT specify an explicit type\r\n```",
              "createdAt": "2024-10-09T20:06:08Z",
              "updatedAt": "2024-10-09T20:06:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6Mj5CW",
          "commit": {
            "abbreviatedOid": "10a3148"
          },
          "author": "OR13",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-09T20:12:46Z",
          "updatedAt": "2024-10-09T20:12:46Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "```suggestion\r\nThe `cty` content type header parameter indicates the content type of the SD-JWT payload, and can also be used distinguish different types of JSON object, or different kinds of JWT Claims Sets.\r\n```",
              "createdAt": "2024-10-09T20:12:46Z",
              "updatedAt": "2024-10-09T20:18:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6Mj6UW",
          "commit": {
            "abbreviatedOid": "10a3148"
          },
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-09T20:15:57Z",
          "updatedAt": "2024-10-09T20:15:57Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "I agree with Orie's suggestion, after changing \"JSON object\" to \"JSON objects\" and \"JWT claim set\" to \"JWT Claims Sets\".",
              "createdAt": "2024-10-09T20:15:57Z",
              "updatedAt": "2024-10-09T20:15:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6Mj8QS",
          "commit": {
            "abbreviatedOid": "10a3148"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-09T20:20:07Z",
          "updatedAt": "2024-10-09T20:20:07Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "Steeleing [sic] this from elsewhere with changes per Mike. \r\n```suggestion\r\nUse of the `cty` content type header parameter to indicate the content type of the SD-JWT payload can also be used to distinguish different types of JSON objects, or different kinds of JWT Claim Sets.\r\n```",
              "createdAt": "2024-10-09T20:20:07Z",
              "updatedAt": "2024-10-09T20:21:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6NMxSR",
          "commit": {
            "abbreviatedOid": "e3e52f5"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-15T10:58:04Z",
          "updatedAt": "2024-10-15T10:58:04Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6NvBBV",
          "commit": {
            "abbreviatedOid": "1fd3d71"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-18T12:12:25Z",
          "updatedAt": "2024-10-18T12:12:25Z",
          "comments": []
        }
      ]
    },
    {
      "number": 477,
      "id": "PR_kwDOHTmVzM5-L9j2",
      "title": "Rewrite introduction and abstract",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/477",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Takes inspiration from #467 but is essentially a rewrite of the introduction from scratch.",
      "createdAt": "2024-10-10T08:51:01Z",
      "updatedAt": "2024-10-18T12:27:18Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "8c928bca98a8f76b7c6cc949efc625b8dec87c9c",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/rewrite-introduction",
      "headRefOid": "cf0dc80169672630392398c1884f1f12e9eba6d8",
      "closedAt": "2024-10-18T12:27:18Z",
      "mergedAt": "2024-10-18T12:27:18Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "e684ccc114576ce349ed01464c1c52cab3bf9bcb"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM6Mo-Ma",
          "commit": {
            "abbreviatedOid": "fac4bb4"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-10T08:51:45Z",
          "updatedAt": "2024-10-10T08:51:45Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "I dropped the part about the relationship to OAuth and JWT and this being generally applicable. If we want to keep it, I suggest including it under a separate \"## Scope\" headline below the intro or below the feature list.",
              "createdAt": "2024-10-10T08:51:45Z",
              "updatedAt": "2024-10-10T10:19:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6M_uN7",
          "commit": {
            "abbreviatedOid": "fac4bb4"
          },
          "author": "ju-cu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-14T06:53:30Z",
          "updatedAt": "2024-10-14T08:20:46Z",
          "comments": [
            {
              "originalPosition": 80,
              "body": "In my mental model, the decoupling is not a new model when it comes to JWTs. With regard to the access token (which is another popular application of JWTs), you already have the decoupling as the client receives the JWT and the resource server verifies it (not that I believe that SD-JWT does make much sense in this context but I think you should not neglect OAuth when talking about JWTs in general). What's new is that the issuer cannot make any assumptions on how the intermediate party is going to use the JWT, i.e. typically the issuer does not know the audiences of a JWT at the time of issuance and consequently cannot minimize the information shared with a verifier/audience in a practical way. The previous intro kind of captured that.",
              "createdAt": "2024-10-14T07:01:56Z",
              "updatedAt": "2024-10-14T08:20:46Z"
            },
            {
              "originalPosition": 82,
              "body": "It's the software that presents the JWT not the user despite this specification using the term `Holder` for both.\r\n\r\n```suggestion\r\nThe Holder can then present the JWT to different verifying parties (Verifiers), that each may only require a subset of the claims in the JWT.\r\n```",
              "createdAt": "2024-10-14T07:08:06Z",
              "updatedAt": "2024-10-14T08:20:46Z"
            },
            {
              "originalPosition": 87,
              "body": "No need to change from JWTs to JSON Web Tokens here. Suggest to be consistent and use the abbreviation.\r\n\r\n```suggestion\r\nThis specification defines such a mechanism for JSON-encoded payloads of JSON Web Signatures, with a primary use case being JWTs.\r\n```",
              "createdAt": "2024-10-14T07:10:50Z",
              "updatedAt": "2024-10-14T08:20:46Z"
            },
            {
              "originalPosition": 84,
              "body": "Maybe remove the human aspect from the sentence so that the disclosure applies equally to the software as its operator, the end-user. A software cannot have needs either, so open for other suggestions. \r\n\r\n```suggestion\r\nThe Holder may call for disclosure of only the address to one Verifier, and only the birthdate to a different Verifier.\r\n```",
              "createdAt": "2024-10-14T07:32:31Z",
              "updatedAt": "2024-10-14T08:20:46Z"
            },
            {
              "originalPosition": 86,
              "body": "It should be clear here that decoupling the issuance from presentation alone may not require selective disclosure but the fact that a JWT may be used in different contexts and shared with various Verifiers. In other words, privacy concerns are the main driver.",
              "createdAt": "2024-10-14T07:51:38Z",
              "updatedAt": "2024-10-14T08:20:46Z"
            },
            {
              "originalPosition": 89,
              "body": "`Issuer` has not been introduced as a formal term (yet).\r\n\r\n```suggestion\r\nSD-JWT is based on an aproach called \"salted hashes\": For any data element that should be selectively disclosable, the issuer of the SD-JWT does not include the cleartext of the data in the JSON-encoded payload of the JWS structure; instead, a hash digest of the data takes its place.\r\n```",
              "createdAt": "2024-10-14T07:52:55Z",
              "updatedAt": "2024-10-14T08:20:46Z"
            },
            {
              "originalPosition": 90,
              "body": "```suggestion\r\nFor presentation to a Verifier, the Holder sends the signed payload along with the cleartext of those claims it wants to disclose.\r\n```",
              "createdAt": "2024-10-14T07:53:14Z",
              "updatedAt": "2024-10-14T08:20:46Z"
            },
            {
              "originalPosition": 95,
              "body": "```suggestion\r\nWhen Key Binding is enforced, a Holder has to prove possession of a private key belonging to a public key contained in the SD-JWT itself.\r\n```",
              "createdAt": "2024-10-14T08:16:22Z",
              "updatedAt": "2024-10-14T08:20:46Z"
            },
            {
              "originalPosition": 78,
              "body": "Isn't the important fact here that the client is also the party verifying the JWT? I think, adding this detail may be useful to understand the issuer-holder-verifier model defined afterwards as it may otherwise be hard for the reader to understand the fundamental shift.",
              "createdAt": "2024-10-14T08:19:51Z",
              "updatedAt": "2024-10-14T08:20:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6NKxHM",
          "commit": {
            "abbreviatedOid": "fac4bb4"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-15T07:31:18Z",
          "updatedAt": "2024-10-15T07:31:18Z",
          "comments": [
            {
              "originalPosition": 80,
              "body": "the AS that issues the access token and the RS that consumes it are assumed to be the same entity though, right?",
              "createdAt": "2024-10-15T07:31:18Z",
              "updatedAt": "2024-10-15T07:31:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6NKyQt",
          "commit": {
            "abbreviatedOid": "fac4bb4"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-15T07:33:29Z",
          "updatedAt": "2024-10-15T07:33:29Z",
          "comments": [
            {
              "originalPosition": 86,
              "body": "agree that it should be more explicit that selective disclosure becomes an important privacy feature because the same JWT can be used for different purposes.",
              "createdAt": "2024-10-15T07:33:29Z",
              "updatedAt": "2024-10-15T07:33:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6NMAMf",
          "commit": {
            "abbreviatedOid": "fac4bb4"
          },
          "author": "ju-cu",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-15T09:36:42Z",
          "updatedAt": "2024-10-15T09:36:43Z",
          "comments": [
            {
              "originalPosition": 80,
              "body": "Right. I was thinking in technical terms (server and client communication) while the decoupling happens on a different layer which actually is a new (trust) model. I believe, it would be good to focus more on that change of trust where the RS/Verifier is not a single trusted entity (and certainly not the same entity as the one issuing the JWT) but any third party.",
              "createdAt": "2024-10-15T09:36:42Z",
              "updatedAt": "2024-10-15T09:36:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6NMsy0",
          "commit": {
            "abbreviatedOid": "fac4bb4"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-15T10:50:12Z",
          "updatedAt": "2024-10-15T10:50:12Z",
          "comments": [
            {
              "originalPosition": 77,
              "body": "```suggestion\r\nA popular application of JWS are JSON Web Tokens (JWT) [@!RFC7519], which can be used to represent a user's identity.\r\nFor example, an ID Token as defined in OpenID Connect [@?OpenID.Core], is a JWT containing the user's identity claims created by a server for consumption by a client.\r\n```\r\nnot sure user's identity is the most used application of JWTs..\r\nis it JWT that is an application of JWS, or JWS that is an application of JWT? or they are not applications for either..?\r\ni am not good in articles but why `the` server but `a` client?\r\n",
              "createdAt": "2024-10-15T10:50:12Z",
              "updatedAt": "2024-10-15T10:50:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6NMtlT",
          "commit": {
            "abbreviatedOid": "fac4bb4"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-15T10:51:38Z",
          "updatedAt": "2024-10-15T10:51:38Z",
          "comments": [
            {
              "originalPosition": 78,
              "body": "```suggestion\r\nIn case a JWT is sent directly from a server to a client, as in OpenID Connect, the server can select real-time which user claims to include in the JWT, minimizing the information shared with the client, who validates the JWT.\r\n```\r\nreflecting Judith's comment but also really not sure about the articles here...",
              "createdAt": "2024-10-15T10:51:38Z",
              "updatedAt": "2024-10-15T10:52:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6NY8oA",
          "commit": {
            "abbreviatedOid": "fac4bb4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-16T11:25:35Z",
          "updatedAt": "2024-10-16T11:25:35Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I'm curious to understand why \"JSON-encoded data structure\" is used here and elsewhere in the PR vs. \"JSON object\" or \"JSON document\" or \"bit o' JSON\" or something? It reads a bit off to my eye, at first anyway, but I wanted to ask before suggesting changes or otherwise fighting about it. ",
              "createdAt": "2024-10-16T11:25:35Z",
              "updatedAt": "2024-10-16T11:25:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6NY_dF",
          "commit": {
            "abbreviatedOid": "fac4bb4"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-16T11:30:00Z",
          "updatedAt": "2024-10-16T11:30:00Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Mainly to avoid \"JSON object\" as we can also SD the elements of an array. ",
              "createdAt": "2024-10-16T11:30:00Z",
              "updatedAt": "2024-10-16T11:30:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6NZAs2",
          "commit": {
            "abbreviatedOid": "fac4bb4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-16T11:31:37Z",
          "updatedAt": "2024-10-16T11:31:38Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "I wrote some of that in response to questions/comments by Hannes about the appropriateness of this work in the OAUTH WG. But that's kinda old news at this point - maybe the relationship to OAuth and JWT stuff isn't needed anymore. And the generally applicable bit is pretty much implied, in my opinion, even if Dick didn't see it. ",
              "createdAt": "2024-10-16T11:31:37Z",
              "updatedAt": "2024-10-16T11:32:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6NZE7X",
          "commit": {
            "abbreviatedOid": "fac4bb4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-16T11:37:24Z",
          "updatedAt": "2024-10-16T11:37:24Z",
          "comments": [
            {
              "originalPosition": 77,
              "body": "> not sure user's identity is the most used application of JWTs..\r\n\r\nNot sure either but it's common enough that saying \"are often used\" seems fine.  JWTs are, in fact, often used to represent a user's identity.\r\n\r\n> is it JWT that is an application of JWS, or JWS that is an application of JWT? or they are not applications for either..?\r\n\r\nlayers on layers on layers with unclean lines of demarcation but JWT is an application of JWS. \r\n\r\n>  i am not good in articles but why `the` server but `a` client?\r\n\r\ni am not either\r\n\r\n",
              "createdAt": "2024-10-16T11:37:24Z",
              "updatedAt": "2024-10-16T11:37:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6NZFOw",
          "commit": {
            "abbreviatedOid": "fac4bb4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-16T11:38:01Z",
          "updatedAt": "2024-10-16T11:38:01Z",
          "comments": [
            {
              "originalPosition": 76,
              "body": "```suggestion\r\nA popular application of JWS is JSON Web Token (JWT) [@!RFC7519], which are often used to represent a user's identity.\r\n```",
              "createdAt": "2024-10-16T11:38:01Z",
              "updatedAt": "2024-10-16T11:38:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6NZLjV",
          "commit": {
            "abbreviatedOid": "fac4bb4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-16T11:45:14Z",
          "updatedAt": "2024-10-16T11:45:15Z",
          "comments": [
            {
              "originalPosition": 77,
              "body": "\"client\" isn't wrong but has overloaded meaning and isn't used anywhere in this document prior to this PR \r\n```suggestion\r\nAn ID Token as defined in OpenID Connect [@?OpenID.Core], for example, is a JWT containing the user's claims created by the server for consumption by a relying party.\r\n```",
              "createdAt": "2024-10-16T11:45:14Z",
              "updatedAt": "2024-10-16T11:45:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6NZQGU",
          "commit": {
            "abbreviatedOid": "fac4bb4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-16T11:53:35Z",
          "updatedAt": "2024-10-16T11:53:35Z",
          "comments": [
            {
              "originalPosition": 78,
              "body": "reflecting (maybe) prior comments along with my own nitpicks to create this frankenstein of a sentence : \r\n```suggestion\r\nIn cases where the JWT is sent immediately from the server to the relying party, as in OpenID Connect, the server can select at the time of issuance which user claims to include in the JWT, minimizing the information shared with the relying party, who validates the JWT.\r\n```",
              "createdAt": "2024-10-16T11:53:35Z",
              "updatedAt": "2024-10-16T11:53:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6NZURc",
          "commit": {
            "abbreviatedOid": "fac4bb4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-16T12:00:34Z",
          "updatedAt": "2024-10-16T12:00:34Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Ah ok. I'd read individual elements of a \"JSON document\" or \"bit o' JSON\" to mean all the stuff that might be inside that thing like objects or elements of an array. But I take your point or intention. ",
              "createdAt": "2024-10-16T12:00:34Z",
              "updatedAt": "2024-10-16T12:00:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6NZVrl",
          "commit": {
            "abbreviatedOid": "fac4bb4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-16T12:02:49Z",
          "updatedAt": "2024-10-16T12:02:49Z",
          "comments": [
            {
              "originalPosition": 84,
              "body": "maybe... i dunno... \r\n```suggestion\r\nThe Holder may elect to disclose only the address to one Verifier, and only the birthdate to a different Verifier.\r\n```",
              "createdAt": "2024-10-16T12:02:49Z",
              "updatedAt": "2024-10-16T12:02:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6NZaph",
          "commit": {
            "abbreviatedOid": "fac4bb4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-16T12:11:23Z",
          "updatedAt": "2024-10-16T12:11:23Z",
          "comments": [
            {
              "originalPosition": 80,
              "body": "@ju-cu is not wrong here \r\nI've long made the complaint that the new \"three-party model\" sounds silly because we've had 3 party models for a long time.\r\nBut not sure how much of that can or should be captured or conveyed here.\r\nAnd the previous intro might have kind of captured that but not particularly well IMO \r\nwhat about a bit o' qualification to this sentence?\r\n\r\n```suggestion\r\nA new model is emerging that more fully decouples the issuance of a JWT from its presentation.\r\n```",
              "createdAt": "2024-10-16T12:11:23Z",
              "updatedAt": "2024-10-16T12:11:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6NZf6u",
          "commit": {
            "abbreviatedOid": "fac4bb4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-16T12:16:46Z",
          "updatedAt": "2024-10-16T12:16:46Z",
          "comments": [
            {
              "originalPosition": 86,
              "body": "something like this?\r\n```suggestion\r\nPrivacy principles of minimal disclosure in conjunction with this model demand a mechanism enabling selective disclosure of data elements while ensuring that Verifiers can still check the authenticity of the data provided.\r\n```",
              "createdAt": "2024-10-16T12:16:46Z",
              "updatedAt": "2024-10-16T12:16:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6NZmdj",
          "commit": {
            "abbreviatedOid": "fac4bb4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-16T12:23:50Z",
          "updatedAt": "2024-10-16T12:23:50Z",
          "comments": [
            {
              "originalPosition": 96,
              "body": "```suggestion\r\nIt usually does so by signing over a data structure containing transaction-specific data, herein defined as the Key Binding JWT.\r\n```",
              "createdAt": "2024-10-16T12:23:50Z",
              "updatedAt": "2024-10-16T12:23:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6NahBh",
          "commit": {
            "abbreviatedOid": "fac4bb4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "This is a COMPLETELY REASONABLE rewrite that could use just a few tweaks before merging. ",
          "createdAt": "2024-10-16T13:46:31Z",
          "updatedAt": "2024-10-16T13:46:31Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6NvCmA",
          "commit": {
            "abbreviatedOid": "fac4bb4"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-18T12:15:20Z",
          "updatedAt": "2024-10-18T12:15:20Z",
          "comments": [
            {
              "originalPosition": 76,
              "body": "```suggestion\r\nA popular application of JWS is JSON Web Token (JWT) [@!RFC7519], a format that is often used to represent a user's identity.\r\n```",
              "createdAt": "2024-10-18T12:15:20Z",
              "updatedAt": "2024-10-18T12:15:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6NvFgA",
          "commit": {
            "abbreviatedOid": "fac4bb4"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-18T12:20:26Z",
          "updatedAt": "2024-10-18T12:20:27Z",
          "comments": [
            {
              "originalPosition": 78,
              "body": "```suggestion\r\nIn cases where the JWT is sent immediately from the server to the relying party, as in OpenID Connect, the server can select at the time of issuance which user claims to include in the JWT, minimizing the information shared with the relying party who validates the JWT.\r\n```",
              "createdAt": "2024-10-18T12:20:27Z",
              "updatedAt": "2024-10-18T12:20:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6NvGV2",
          "commit": {
            "abbreviatedOid": "fac4bb4"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-18T12:22:14Z",
          "updatedAt": "2024-10-18T12:22:14Z",
          "comments": [
            {
              "originalPosition": 80,
              "body": "```suggestion\r\nA new model is emerging that fully decouples the issuance of a JWT from its presentation.\r\n```",
              "createdAt": "2024-10-18T12:22:14Z",
              "updatedAt": "2024-10-18T12:22:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6NvHum",
          "commit": {
            "abbreviatedOid": "cf0dc80"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-18T12:24:52Z",
          "updatedAt": "2024-10-18T12:24:52Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6NvH4u",
          "commit": {
            "abbreviatedOid": "cf0dc80"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-18T12:25:11Z",
          "updatedAt": "2024-10-18T12:25:11Z",
          "comments": []
        }
      ]
    },
    {
      "number": 478,
      "id": "PR_kwDOHTmVzM5-5KuT",
      "title": "Added comment regarding holder guarantees (Addressing Issue #470)",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/478",
      "state": "MERGED",
      "author": "AlexHodder",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Resolves #470 by adding a comment to Section 8.1 (Verification of the SD-JWT) regarding holder guarantees after validating an SD-JWT presentation from an issuer.",
      "createdAt": "2024-10-16T22:10:40Z",
      "updatedAt": "2024-10-18T12:38:34Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "8c928bca98a8f76b7c6cc949efc625b8dec87c9c",
      "headRepository": "AlexHodder/oauth-selective-disclosure-jwt",
      "headRefName": "ahw/holder_knowledge_edit",
      "headRefOid": "a902697776237eb947a66c3bb47f99439b1a2b33",
      "closedAt": "2024-10-18T12:38:34Z",
      "mergedAt": "2024-10-18T12:38:34Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "652127b194330bab308d0a4b0048885092a55b12"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM6NvJUC",
          "commit": {
            "abbreviatedOid": "fc2d443"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-18T12:28:02Z",
          "updatedAt": "2024-10-18T12:28:03Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nIf any step fails, the SD-JWT is not valid, and processing MUST be aborted. Otherwise, the JSON document resulting from the preceding processing and verification steps, herein referred to as the processed SD-JWT payload, can be made available to the application to be used for its intended purpose. \r\n\r\nNote that these processing steps do not yield any guarantees to the Holder about having received a complete set of Disclosures. That is, for some digest values in the Issuer-signed JWT (which are not decoy digests) there may be no corresponding Disclosures, for example, if the message from the Issuer was truncated.\r\n```",
              "createdAt": "2024-10-18T12:28:02Z",
              "updatedAt": "2024-10-18T12:30:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6NvMXE",
          "commit": {
            "abbreviatedOid": "7d797f0"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-18T12:33:41Z",
          "updatedAt": "2024-10-18T12:33:41Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6NvNJV",
          "commit": {
            "abbreviatedOid": "7d797f0"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-18T12:35:18Z",
          "updatedAt": "2024-10-18T12:35:19Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nIf any step fails, the SD-JWT is not valid, and processing MUST be aborted. Otherwise, the JSON document resulting from the preceding processing and verification steps, herein referred to as the processed SD-JWT payload, can be made available to the application to be used for its intended purpose.\r\n\r\nNote that these processing steps do not yield any guarantees to the Holder about having received a complete set of Disclosures. That is, for some digest values in the Issuer-signed JWT (which are not decoy digests) there may be no corresponding Disclosures, for example, if the message from the Issuer was truncated.\r\n```",
              "createdAt": "2024-10-18T12:35:18Z",
              "updatedAt": "2024-10-18T12:35:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6NvNg4",
          "commit": {
            "abbreviatedOid": "a902697"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-18T12:36:03Z",
          "updatedAt": "2024-10-18T12:36:03Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6NvN4Y",
          "commit": {
            "abbreviatedOid": "a902697"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-18T12:36:46Z",
          "updatedAt": "2024-10-18T12:36:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 479,
      "id": "PR_kwDOHTmVzM5_GVzt",
      "title": "Updates for -13",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/479",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-10-18T12:39:19Z",
      "updatedAt": "2024-10-18T12:42:08Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "652127b194330bab308d0a4b0048885092a55b12",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/updates-for-13",
      "headRefOid": "5472fd4930cc1823379897470408a3c615ba97ac",
      "closedAt": "2024-10-18T12:42:08Z",
      "mergedAt": "2024-10-18T12:42:08Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "1a90eb22df460a0cadd2b1c88a92517f3e764755"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM6NvPRX",
          "commit": {
            "abbreviatedOid": "5472fd4"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-18T12:39:34Z",
          "updatedAt": "2024-10-18T12:39:34Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6NvPxN",
          "commit": {
            "abbreviatedOid": "5472fd4"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-18T12:40:34Z",
          "updatedAt": "2024-10-18T12:40:34Z",
          "comments": []
        }
      ]
    },
    {
      "number": 480,
      "id": "PR_kwDOHTmVzM5_HtB2",
      "title": "Update Makefile",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/480",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Set upload email in makefile in an attempt to avoid future failures uploading to the IETF datatracker due to scrobbling the wrong email\r\n\r\nsee also https://github.com/oauth-wg/oauth-sd-jwt-vc/pull/255",
      "createdAt": "2024-10-18T15:36:14Z",
      "updatedAt": "2024-10-18T15:39:51Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "1a90eb22df460a0cadd2b1c88a92517f3e764755",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "scrobbling-wrong-email",
      "headRefOid": "fb7f65ba1dbad8f6daf5c0e1aef251554e7e85a8",
      "closedAt": "2024-10-18T15:39:51Z",
      "mergedAt": "2024-10-18T15:39:51Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "f3e77f239f9645c10f0af671f8cab5bbab803fe8"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 481,
      "id": "PR_kwDOHTmVzM5_6o6o",
      "title": "Address Denis' comments",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/481",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-10-25T14:55:00Z",
      "updatedAt": "2024-11-15T18:40:09Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "af66b9af8c1a8e8f0b3f332e2ea0213961474372",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/denis-42",
      "headRefOid": "52a6deead56e65bc5e333eb44b67c65582992067",
      "closedAt": "2024-11-15T18:40:09Z",
      "mergedAt": "2024-11-15T18:40:09Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "c95bc07ba5ef5a45b848eaeab7abae9dc5ae2c30"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "should prob add something in history just for posterity - even just a -14 with a \"stuff from WGLC part deux\" ",
          "createdAt": "2024-10-25T21:19:49Z",
          "updatedAt": "2024-10-25T21:19:49Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM6O1ZJU",
          "commit": {
            "abbreviatedOid": "d89bf75"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-25T20:34:50Z",
          "updatedAt": "2024-10-25T20:34:50Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "while \"Verifier or Verifiers\" is true I guess, I don't think we need to mention the plural here. I imagine it's more likely to confuse folks here than help and/or might encourage things that don't need encouragement. \r\n```suggestion\r\n* an audience value to indicate the intended Verifier for the document.\r\n```",
              "createdAt": "2024-10-25T20:34:50Z",
              "updatedAt": "2024-10-26T12:33:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6O1cjT",
          "commit": {
            "abbreviatedOid": "d89bf75"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-25T20:44:49Z",
          "updatedAt": "2024-10-25T20:44:49Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I am not totally sure this change is needed or an improvement... ? ",
              "createdAt": "2024-10-25T20:44:49Z",
              "updatedAt": "2024-10-25T20:44:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6O1c3T",
          "commit": {
            "abbreviatedOid": "d89bf75"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-25T20:45:18Z",
          "updatedAt": "2024-10-25T20:45:18Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "I sorta feel like something like this sentence should remain. ",
              "createdAt": "2024-10-25T20:45:18Z",
              "updatedAt": "2024-10-25T20:45:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6O1c7g",
          "commit": {
            "abbreviatedOid": "d89bf75"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-25T20:45:25Z",
          "updatedAt": "2024-10-25T20:45:25Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "```suggestion\r\nIt is up to the Holder how to maintain the mapping between the Disclosures and the plaintext claim values to be able to display them to the user when needed.\r\n```",
              "createdAt": "2024-10-25T20:45:25Z",
              "updatedAt": "2024-10-25T20:45:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6O1dVl",
          "commit": {
            "abbreviatedOid": "d89bf75"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-25T20:46:13Z",
          "updatedAt": "2024-10-25T20:46:13Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "See https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/481/files#r1817324384 'cause github won't let me make a suggestion on deleted lines.  ",
              "createdAt": "2024-10-25T20:46:13Z",
              "updatedAt": "2024-10-25T20:46:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6O4wwI",
          "commit": {
            "abbreviatedOid": "d89bf75"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-26T12:35:04Z",
          "updatedAt": "2024-10-26T12:35:05Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "or perhaps\r\n```suggestion\r\nIt is up to the Holder's software how to maintain the mapping between the Disclosures and the plaintext claim values to be able to display them to the user when needed.\r\n```",
              "createdAt": "2024-10-26T12:35:04Z",
              "updatedAt": "2024-10-26T12:35:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6PJ0ag",
          "commit": {
            "abbreviatedOid": "d89bf75"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-29T12:29:39Z",
          "updatedAt": "2024-10-29T12:29:40Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "Everything here is about the user, so I would go for the first version. I initially removed the sentence because it didn't add much value and deepens the potential Holder/user confusion. But I'm fine with keeping it or a suitable replacement.",
              "createdAt": "2024-10-29T12:29:39Z",
              "updatedAt": "2024-10-29T12:29:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6PMw7-",
          "commit": {
            "abbreviatedOid": "d89bf75"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-29T16:26:14Z",
          "updatedAt": "2024-10-29T16:26:14Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "I kinda presumed as much. I do think it adds some value so would like something suitable kept or replaced. ",
              "createdAt": "2024-10-29T16:26:14Z",
              "updatedAt": "2024-10-29T16:26:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6RVZyr",
          "commit": {
            "abbreviatedOid": "fad7e4b"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-15T11:04:28Z",
          "updatedAt": "2024-11-15T11:04:28Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "agree with Brian..",
              "createdAt": "2024-11-15T11:04:28Z",
              "updatedAt": "2024-11-15T11:04:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6RVaZf",
          "commit": {
            "abbreviatedOid": "fad7e4b"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-15T11:05:50Z",
          "updatedAt": "2024-11-15T11:05:50Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "+1 to the first proposal of the addition",
              "createdAt": "2024-11-15T11:05:50Z",
              "updatedAt": "2024-11-15T11:05:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6RVa7d",
          "commit": {
            "abbreviatedOid": "fad7e4b"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "assuming two suggestions Brian and I agree on get incorporated",
          "createdAt": "2024-11-15T11:07:07Z",
          "updatedAt": "2024-11-15T11:07:07Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6RVbC9",
          "commit": {
            "abbreviatedOid": "fad7e4b"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-15T11:07:23Z",
          "updatedAt": "2024-11-15T11:07:24Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n: An entity that received SD-JWTs from the Issuer and has control over them. In the context of this document, the term may refer to the actual user, the supporting hardware and software in their possession, or both.\r\n```",
              "createdAt": "2024-11-15T11:07:23Z",
              "updatedAt": "2024-11-15T11:07:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6RZeJM",
          "commit": {
            "abbreviatedOid": "52a6dee"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "lgtm",
          "createdAt": "2024-11-15T18:39:34Z",
          "updatedAt": "2024-11-15T18:39:34Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6RZeVu",
          "commit": {
            "abbreviatedOid": "52a6dee"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-15T18:40:04Z",
          "updatedAt": "2024-11-15T18:40:04Z",
          "comments": []
        }
      ]
    },
    {
      "number": 524,
      "id": "PR_kwDOHTmVzM6Bh-S1",
      "title": "Update typ in SD-JWT VC example ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/524",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Update the type in the SD-JWT VC example per the The Dublin Accord (last slide of https://datatracker.ietf.org/meeting/121/materials/slides-121-oauth-sessb-sd-jwt-and-sd-jwt-vc-02)",
      "createdAt": "2024-11-11T16:15:54Z",
      "updatedAt": "2024-11-15T11:08:01Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "f3e77f239f9645c10f0af671f8cab5bbab803fe8",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "d-is-for-digital",
      "headRefOid": "a1868d2e7e1cb1cd7b0174e68b6d492987f8ca21",
      "closedAt": "2024-11-15T11:08:00Z",
      "mergedAt": "2024-11-15T11:08:00Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "a2106c08d67873c1b9b0e547d7e3fc8c0e8ebfbf"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM6Qtvc_",
          "commit": {
            "abbreviatedOid": "a1868d2"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-11T18:23:14Z",
          "updatedAt": "2024-11-11T18:23:14Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6RPg5o",
          "commit": {
            "abbreviatedOid": "a1868d2"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-14T17:24:56Z",
          "updatedAt": "2024-11-14T17:24:56Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6RVbM3",
          "commit": {
            "abbreviatedOid": "a1868d2"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-15T11:07:45Z",
          "updatedAt": "2024-11-15T11:07:45Z",
          "comments": []
        }
      ]
    },
    {
      "number": 525,
      "id": "PR_kwDOHTmVzM6BivoT",
      "title": "Note that the Hash Function Claim value is case-sensitive",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/525",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-11-11T18:22:24Z",
      "updatedAt": "2024-11-15T18:05:12Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "a2106c08d67873c1b9b0e547d7e3fc8c0e8ebfbf",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "dont-be-so-sensitive",
      "headRefOid": "bf9afe08794425345b7181ab4957f7f3b960699a",
      "closedAt": "2024-11-15T18:05:11Z",
      "mergedAt": "2024-11-15T18:05:11Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "af66b9af8c1a8e8f0b3f332e2ea0213961474372"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> assuming my small nit gets accepted\r\n\r\nNo good nit goes unaccepted ",
          "createdAt": "2024-11-15T11:31:47Z",
          "updatedAt": "2024-11-15T11:32:39Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM6RPgvf",
          "commit": {
            "abbreviatedOid": "ee72a82"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-14T17:24:36Z",
          "updatedAt": "2024-11-14T17:24:36Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6RVbn8",
          "commit": {
            "abbreviatedOid": "ee72a82"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-15T11:08:45Z",
          "updatedAt": "2024-11-15T11:08:46Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\nThis claim value is a case-sensitive string with the hash algorithm identifier.\r\n```",
              "createdAt": "2024-11-15T11:08:45Z",
              "updatedAt": "2024-11-15T11:08:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6RVbv8",
          "commit": {
            "abbreviatedOid": "ee72a82"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "assuming my small nit gets accepted",
          "createdAt": "2024-11-15T11:09:04Z",
          "updatedAt": "2024-11-15T11:09:04Z",
          "comments": []
        }
      ]
    },
    {
      "number": 533,
      "id": "PR_kwDOHTmVzM6Fj1TX",
      "title": "Changes aimed at AD's review of the formal appeal",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/533",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "These changes are me trying to follow though with what I said we'd do here https://mailarchive.ietf.org/arch/msg/oauth/qC4Bq6sOkmYzJ_93_VWmqN824gI/ \r\n\r\nPreview at https://drafts.oauth.net/oauth-selective-disclosure-jwt/denis-and-the-ad/draft-ietf-oauth-selective-disclosure-jwt.html",
      "createdAt": "2024-12-17T21:47:37Z",
      "updatedAt": "2025-01-09T17:12:43Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "c95bc07ba5ef5a45b848eaeab7abae9dc5ae2c30",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "denis-and-the-ad",
      "headRefOid": "f15b5c5ab58d0d5388731d923437f1f7dcb59a75",
      "closedAt": "2025-01-09T17:12:42Z",
      "mergedAt": "2025-01-09T17:12:42Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "01084e8e994c07b66290e307483df858d3c216ce"
      },
      "comments": [
        {
          "author": "debcooley",
          "authorAssociation": "NONE",
          "body": "These all look fine to me,  TY \r\n\r\nOne nit:  on the Key Binding JWT def:  You need a space between the sentences.  \r\n\r\n",
          "createdAt": "2024-12-20T12:07:24Z",
          "updatedAt": "2024-12-20T12:07:24Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> These all look fine to me, TY\r\n> \r\n> One nit: on the Key Binding JWT def: You need a space between the sentences.\r\n\r\nthanks for reviewing. that nit has been fixed 9f7e43ec8069cea2582716f407513b5c20ae61aa ",
          "createdAt": "2024-12-20T13:02:27Z",
          "updatedAt": "2024-12-20T13:02:27Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> I am ok with the rest of the text, but would like to see definition of KB JWT changed.\r\n\r\nyeah, took your improved text for KB JWT definition f15b5c5ab58d0d5388731d923437f1f7dcb59a75",
          "createdAt": "2024-12-27T13:33:32Z",
          "updatedAt": "2024-12-27T13:33:32Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM6WDhd8",
          "commit": {
            "abbreviatedOid": "fe69ef3"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-20T12:58:54Z",
          "updatedAt": "2024-12-20T12:58:54Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "\"One nit: on the Key Binding JWT def: You need a space between the sentences.\" \r\nthanks @debcooley \r\n```suggestion\r\n  includes a hash of the SD-JWT in its `sd_hash` claim. A JWT for proving Key Binding\r\n```",
              "createdAt": "2024-12-20T12:58:54Z",
              "updatedAt": "2024-12-20T12:58:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6WDiBM",
          "commit": {
            "abbreviatedOid": "fe69ef3"
          },
          "author": "debcooley",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-20T13:00:16Z",
          "updatedAt": "2024-12-20T13:00:16Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "perfect.  TY\r\n",
              "createdAt": "2024-12-20T13:00:16Z",
              "updatedAt": "2024-12-20T13:00:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6WVkOm",
          "commit": {
            "abbreviatedOid": "9f7e43e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I am ok with the rest of the text, but would like to see definition of KB JWT changed.",
          "createdAt": "2024-12-24T23:21:35Z",
          "updatedAt": "2024-12-24T23:23:03Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "but what binds KB JWT to SD-JWT is the fact that KB JWT's payload is signed using the key included in the SD-JWT payload.\r\n\r\n```suggestion\r\n:  A Key Binding JWT is said to \"be tied to\" a particular SD-JWT when its payload\r\n  is signed using the key included in the SD-JWT payload, and also contains\r\n  a hash of the SD-JWT in its `sd_hash` claim. A JWT for proving Key Binding\r\n  as defined in (#kb-jwt).\r\n```",
              "createdAt": "2024-12-24T23:21:35Z",
              "updatedAt": "2024-12-24T23:23:03Z"
            },
            {
              "originalPosition": 55,
              "body": "```suggestion\r\nSD-JWT, SD-JWT+KB, and various constituent parts is provided here:\r\n```",
              "createdAt": "2024-12-24T23:22:06Z",
              "updatedAt": "2024-12-24T23:23:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6Wcj_A",
          "commit": {
            "abbreviatedOid": "9f7e43e"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-27T13:32:08Z",
          "updatedAt": "2024-12-27T13:32:08Z",
          "comments": [
            {
              "originalPosition": 55,
              "body": "I'm rather attached to that text ",
              "createdAt": "2024-12-27T13:32:08Z",
              "updatedAt": "2024-12-27T13:32:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6WcxAn",
          "commit": {
            "abbreviatedOid": "9f7e43e"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-27T14:33:46Z",
          "updatedAt": "2024-12-27T14:33:47Z",
          "comments": [
            {
              "originalPosition": 55,
              "body": "especially around this time of year ",
              "createdAt": "2024-12-27T14:33:46Z",
              "updatedAt": "2024-12-27T14:33:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6XbNkK",
          "commit": {
            "abbreviatedOid": "f15b5c5"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-01-09T17:11:08Z",
          "updatedAt": "2025-01-09T17:11:08Z",
          "comments": []
        }
      ]
    },
    {
      "number": 535,
      "id": "PR_kwDOHTmVzM6HPE05",
      "title": "add Watson Ladd's suggested text with minor adaptations",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/535",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "https://mailarchive.ietf.org/arch/msg/oauth/zC8fU5nOVHsY4S5erBlBEy2fDTI/ and https://mailarchive.ietf.org/arch/msg/oauth/ugVBj2O0hw-nuWNVTFpt0JH3yVY/ are *some* threads on the mailing list ",
      "createdAt": "2025-01-09T17:16:24Z",
      "updatedAt": "2025-01-23T18:51:39Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "563b57f30761c6498200f8bcb22d743d161e71d0",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "considering-more-considerations-about-privacy",
      "headRefOid": "fcfba44439db47357bd5d14e9832644683c1d8df",
      "closedAt": "2025-01-16T18:09:35Z",
      "mergedAt": "2025-01-16T18:09:35Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "4c6b98c595cd516ffb9c41a180b749cbed52d2d2"
      },
      "comments": [
        {
          "author": "dhs-BI",
          "authorAssociation": "NONE",
          "body": "I'm unclear what the statement \"It does not meet standard security notations for anonymous credentials\" means.  If there is a standard or other document that this language refers to I suggest linking to it.",
          "createdAt": "2025-01-09T18:28:06Z",
          "updatedAt": "2025-01-09T18:28:06Z"
        },
        {
          "author": "Denisthemalice",
          "authorAssociation": "NONE",
          "body": "I have objections/concerns with this text.\r\n\r\nThe text states:\r\n\r\n> \"SD-JWT conceals only the values that aren't revealed. It does not\r\n> meet standard security notations for anonymous credentials. In\r\n> particular Verifiers and Issuers can know when they have seen the same\r\n> credential no matter what fields have been opened, even none of them.\r\n> This behavior may not accord with what users naively expect or are\r\n> lead to expect from UX interactions and lead to them make choices they\r\n> would not otherwise make. Workarounds such as issuing multiple\r\n> credentials at once and using them only one time can help for keeping\r\n> Verifiers from linking different showing.\r\n> \r\n\r\nThe text is confusing because it addresses two different topics:\r\nVerifier-Verifier unlinkability and Issuer-Verifier Unlinkability. \r\n\r\nThe last sentence means that problem can be addressed for the Verifier-Verifier unlinkability.\r\nIt is not necessary to use strong sentences like:\r\n\r\n> \" It does not meet standard security notations for anonymous credentials\"\r\n\r\n which are not explained.\r\n\r\nThe sentence terminates with:\r\n\r\n> but cannot work for Issuers.\r\n\r\nThis is the case for the Issuer-Verifier unlinkability.\r\n\r\nAt the moment there is text in section 10.1 that states :\r\n\r\n> Issuer/Verifier unlinkability with a colluding or compromised Verifier cannot be achieved in salted-hash based selective disclosure approaches, such as SD-JWT, as the issued credential with the Issuer's signature is directly presented to the Verifier, who can forward it to the Issuer.\r\n\r\nSo the proposed text is redondant.\r\n\r\nHowever, the use of the wording \"colluding or compromised\" does not seem to be appropriate.\r\n\r\nThe Issuer will not directly \"collude\" with a Verifier. However, a national authority might oblige a Verifier to reveal the SD-JWT that has been used for a given access and afterwards might also oblige the Issuer to reveal the identity of the End-User. \r\n\r\nThis situation can only happen if both the Issuer and the Verifier memorize the SD-JWTs they have respectively issued or received.\r\n\r\nSo saying that \"Issuer/Verifier unlinkability with a colluding or compromised Verifier cannot be achieved in salted-hash based selective disclosure approaches\" is not appropriate.\r\n\r\nChange into:\r\n\r\n> Issuer/Verifier unlinkability can be achieved in salted-hash based selective disclosure approaches, such as SD-JWT, if the Verifier does not memorize the SD-JWTs that it has received.\r\n\r\n> On the contrary, if the Verifier memorizes the SD-JWTs that it has received and if the Issuer memorizes the SD-JWTs that it has issued, then some authority might oblige a Verifier to reveal the SD-JWT that has been used for a given access and then oblige the Issuer of these SD-JWTs to reveal the identity of the End-Users.\r\n\r\nThe notions of \"honest\" or \"dishonest\" Verifier are not relevant. If a Verifier obeys to a local law, it should not be considered to be \"dishonest\".  By definition, an Issuer is trusted to be honest.\r\n\r\nIn section 10.1, the following text should be removed:\r\n\r\n> In considering Issuer/Verifier unlinkability, it is important to note the potential for an asymmetric power dynamic between Issuers and Verifiers. This dynamic can compel an otherwise honest Verifier into collusion. For example, a governmental Issuer might have the authority to mandate that a Verifier report back information about the credentials presented to it. \r\n> Legal requirements could further enforce this, explicitly undermining Issuer/Verifier unlinkability. Similarly, a large service provider issuing credentials might implicitly pressure Verifiers into collusion by incentivizing participation in their larger ecosystem. \r\n> Deployers of SD-JWT must be aware of these potential power dynamics, mitigate them as much as possible, and/or make the risks transparent to the user.\r\n> Contrary to that, Issuer/Verifier unlinkability with an honest Verifier can generally be achieved. \r\n\r\nIf the Verifier does not memorize the SD-JWTs that it has received, then the risk can be avoided.\r\n\r\nBut there are also implications with section 10.2 , where the text states:\r\n\r\n> All involved parties SHOULD store SD-JWTs containing privacy-sensitive data only for as long as needed, including in log files.\r\n> \r\n> After Issuance, Issuers SHOULD NOT store the Issuer-signed JWT or the respective Disclosures if they contain privacy-sensitive data.\r\n\r\nThe term \" privacy-sensitive data\" is not defined.  A SD-JWT necessarily contains 'privacy-sensitive data'. \r\n\r\nThe first sentence would prevent to support the Issuer/Verifier unlinkability that can be achieved. \r\nThis first sentence should be removed.\r\n\r\nThe second sentence should be shortened and changed into:\r\n\r\n> After Issuance, Issuers SHOULD NOT store the Issuer-signed JWT.\r\n\r\nIn section 10.2, the text continues with:\r\n\r\n> Holders SHOULD store SD-JWTs only in encrypted form, and, wherever possible, use hardware-backed encryption in particular for the private Key Binding key. Decentralized storage of data, e.g., on user devices, SHOULD be preferred for user credentials over centralized storage. \r\n>\r\n> Expired SD-JWTs SHOULD be deleted as soon as possible.\r\n> \r\n> After Verification, Verifiers SHOULD NOT store the Issuer-signed JWT or the respective Disclosures if they contain privacy-sensitive data. It may be sufficient to store the result of the verification and any user data that is needed for the application.\r\n\r\nThe first recommendation is an implementation option. It should be removed.\r\n\r\nThe second recommendation might be misunderstood, as it would mean that Holders SHOULD NOT delete NON-EXPIRED SD-JWTs. It should be removed.\r\n\r\nThe third recommendation can also be misunderstood, as it would mean that Verifiers SHOULD store the Issuer-signed JWT or the respective Disclosures *if* they DO NOT contain privacy-sensitive data. \r\n\r\nIt should be changed into:\r\n\r\n> After Verification, Verifiers SHOULD NOT store the Issuer-signed JWT. It may be sufficient to store the result of the verification and any user data that is needed for the application.\r\n\r\nThis closes the loop: if neither the Issuer nor the Verifier stores the SD-JWT, then Issuer/Verifier unlinkability can be achieved. \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2025-01-09T18:57:21Z",
          "updatedAt": "2025-01-09T18:57:21Z"
        },
        {
          "author": "wbl",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Denis, the goal of my contribution was to provide a simple summary paragraph of the entire set of considerations. In that sense it is redundant. We can add a citation to CL01, or some other paper that uses the standard security notion to explain it. I'm looking for a good one.\r\n\r\nAfter that's done I expect there would need to be some editing to avoid excessive repetition.\r\n\r\nI think a bunch of your comment is directed at the existing text rather than this PR. But I do want to say that we can't assume erasure happens. There's a whole bunch of places where data ends up in modern architectures that aren't really visible: HTTP logs, temporary files etc. We also don't assume that people will behave in security considerations: that's the joke in 3514, so guidance that only works if the verifier or issuer behave doesn't really do anything.",
          "createdAt": "2025-01-09T19:55:00Z",
          "updatedAt": "2025-01-09T19:55:23Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I am not familiar with CL01 - is it this https://eprint.iacr.org/2001/019 that you mentioned in https://mailarchive.ietf.org/arch/msg/oauth/4M0qAdKhlMvACIWPpCaBTqiAOrs/ ? \r\n\r\nWe can add a reference to that. Or a better one, if you can find one https://mailarchive.ietf.org/arch/msg/oauth/j5FoZeisLiw0kIgiNlcYZAyIsMo/ ",
          "createdAt": "2025-01-09T21:59:26Z",
          "updatedAt": "2025-01-09T21:59:26Z"
        },
        {
          "author": "wbl",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think referencing that eprint and paper will do. Not sure there is a much better one out there.",
          "createdAt": "2025-01-09T22:05:40Z",
          "updatedAt": "2025-01-09T22:05:40Z"
        },
        {
          "author": "Denisthemalice",
          "authorAssociation": "NONE",
          "body": "This paper (2001)  which is rather old is advocating a fully different technique which is not compatible with the protocol we are describing.\r\n\r\nThere exist similar techniques like BBS, BBS + or BBS # that we have deliberately not considered.\r\n\r\nWhen using one-time use SD-JWTs, the same advantages that can be obtained by using these techniques can also be obtained using such SD-JWTs. \r\n\r\nThe text you are proposing looks like a criticism:\r\n\r\n> It does not meet standard security notations for anonymous credentials\r\n> \r\n> This behavior may not accord with what users naively expect or are lead to expect from UX interactions and lead to them make choices they would not otherwise make.\r\n\r\nThe full text is confusing and misleading. \r\n\r\nIt should not be included. \r\n\r\n\r\n \r\n",
          "createdAt": "2025-01-10T14:15:25Z",
          "updatedAt": "2025-01-10T14:15:25Z"
        },
        {
          "author": "wbl",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Denis, I think that comment needs to be on the list (not sure how the WG works, but that's certainly where we've had most of the important discussions)",
          "createdAt": "2025-01-10T16:11:29Z",
          "updatedAt": "2025-01-10T16:11:29Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "@Denisthemalice I think some of your points should go into a separate PR. I'll try and create one...",
          "createdAt": "2025-01-13T10:22:49Z",
          "updatedAt": "2025-01-13T10:22:49Z"
        },
        {
          "author": "Denisthemalice",
          "authorAssociation": "NONE",
          "body": "You are right, my text change proposals should be addressed in another issue. So please create a new issue.\r\n\r\nI propose the following title for it: \r\n\r\n> Issuer/Verifier unlinkability and Storage of SD-JWTs\r\n\r\nHowever, these two issues are strongly related.\r\n\r\nThe revised text that is being proposed is still misleading and the rational is mentioned in this \"other\" issue.\r\n\r\nA sentence like \r\n\r\n> \" This behavior may not accord with what users intuitively expect or are lead to expect from user interface interactions and lead to them make choices they would not otherwise make\" \r\n\r\nis not understandable and should not be included into the document.\r\n\r\nWhen using one-time use digital credentials, the same benefits as systems using ZKP can be obtained when considering the whole picture, I mean, including suspension and revocation checking.\r\n\r\nWe will be able to fix this issue 535 when the \"other issue\" will be fixed. So please , place this issue \"on hold\". ",
          "createdAt": "2025-01-13T10:43:47Z",
          "updatedAt": "2025-01-13T10:43:47Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Please see PR #540 ",
          "createdAt": "2025-01-13T11:03:20Z",
          "updatedAt": "2025-01-13T11:03:20Z"
        },
        {
          "author": "wbl",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Dennis please expand on your points on the list. I agree revocation checking and suspension are challenges, but there are ways to handle them that preserve a high degree of privacy. People have been working on this for a long time.",
          "createdAt": "2025-01-13T15:37:55Z",
          "updatedAt": "2025-01-13T15:37:55Z"
        },
        {
          "author": "Denisthemalice",
          "authorAssociation": "NONE",
          "body": "You wrote:\r\n\r\n> Yes, if every credential has a unique serial number that's always revealed, you have a problem.\r\n\r\n\r\nThere is a technique that does not need to include either a unique serial number or a tuple of uri and index \r\ninside a Referenced Token. This has been explained in detail when discussing revocation checking and suspension in:\r\n\r\nhttps://github.com/oauth-wg/draft-ietf-oauth-status-list/issues/209#issuecomment-2558666716\r\n\r\nThis technique is different from what :\r\n\r\n> \"People have been working on this for a long time\".",
          "createdAt": "2025-01-13T16:53:46Z",
          "updatedAt": "2025-01-13T16:53:46Z"
        },
        {
          "author": "wbl",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Denis, my point about serial numbers was not for you. It was in response to Brian's question about what the sign and prove techniques do. \r\n\r\nThe link you gave is not terribly detailed. I was thinking along the lines of proving an element isn't a list, of which there are lots of protocols of varying efficiency and with varying tradeoffs. Again there is a vast literature here that everyone involved in making this spec seems to have entirely ignored.\r\n\r\nI don't think this is a great format for having this discussion given the UI and the comparatively few people looking at it: I think you should send an email to the list.",
          "createdAt": "2025-01-13T17:06:27Z",
          "updatedAt": "2025-01-13T17:06:27Z"
        },
        {
          "author": "Denisthemalice",
          "authorAssociation": "NONE",
          "body": "The text states:\r\n\r\n>    SD-JWT only conceals the value of claims that are not revealed.  \r\n>    It does not meet security notations for anonymous credentials [CL01].\r\n\r\n[CL01] does not contain the words \"notation\", \"anonymous\"or \"credentials\".\r\nHence, this sentence is not understandable. Either remove this sentence or rephrase it.\r\n\r\nThe text continues with:\r\n\r\n>    In particular, colluding Verifiers and Issuers can know when they\r\n>    have seen the same credential no matter what fields have been\r\n>    disclosed, even when none have been disclosed.  This behavior may not\r\n>    align with what users naturally anticipate or are guided to expect\r\n>    from user interface interactions, potentially causing them to make\r\n>    decisions they might not otherwise make. \r\n> \r\n\r\nIt is not possible to understand which \"behavior may not align with what users naturally anticipate or \r\nare guided to expect from user interface interactions\".\r\n\r\nIt is not possible either to understand why this behavior will \"potentially causing them to make decisions \r\nthey might not otherwise make\".\r\n\r\nEither remove this sentence or rephrase it.\r\n\r\nThe text continues with:\r\n\r\n>    Workarounds such as batch  issuance, as described above, help with keeping Verifiers from\r\n>    linking different presentations, but cannot work for Issuer/Verifier  unlinkability.  \r\n\r\nThis is untrue. If the Verifier deletes the presentations immediately after it has received them, \r\npresentations, including one-time-use presentations, cannot be used to link presentations with the Issuer.\r\n\r\nFurthermore, if the Issuer is using a suspension / revocation mechanism different from the Status List Token, it does not need to use  \"Referenced Tokens\" and will still be able to revoke or suspend all the credentials that have been issued for the benefit of a given Holder. In such a case, the Issuer does not need to \"remember\" SD-JWTs that it has issued. If neither the Issuer, nor  the Verifier, keeps a record of respectively issued and received SD-JWTs, Issuer/Verifier  unlinkability can be \"twice\" achieved.\r\n\r\nSince a specific mechanism to handle the suspension / revocation of a SD-JWT is outside the scope of this document, it is untrue to say that Issuer/Verifier  unlinkability \"cannot work\".\r\n\r\nEither remove this sentence or rephrase it.\r\n",
          "createdAt": "2025-01-22T17:32:40Z",
          "updatedAt": "2025-01-22T17:32:40Z"
        },
        {
          "author": "wbl",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Dennis, I once again would ask that you bring this to the list. This is not a great format for discussion and we need more eyes on it.",
          "createdAt": "2025-01-22T17:50:13Z",
          "updatedAt": "2025-01-22T17:50:13Z"
        },
        {
          "author": "wbl",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> The text states:\r\n> \r\n> > SD-JWT only conceals the value of claims that are not revealed.\r\n> > It does not meet security notations for anonymous credentials [CL01].\r\n> \r\n> [CL01] does not contain the words \"notation\", \"anonymous\"or \"credentials\". Hence, this sentence is not understandable. Either remove this sentence or rephrase it.\r\n\r\nDo you have a better reference for the security properties introduced there? This sentence now reads with s/notation/properties/.\r\n> \r\n> The text continues with:\r\n> \r\n> > In particular, colluding Verifiers and Issuers can know when they\r\n> > have seen the same credential no matter what fields have been\r\n> > disclosed, even when none have been disclosed.  This behavior may not\r\n> > align with what users naturally anticipate or are guided to expect\r\n> > from user interface interactions, potentially causing them to make\r\n> > decisions they might not otherwise make.\r\n> \r\n> It is not possible to understand which \"behavior may not align with what users naturally anticipate or are guided to expect from user interface interactions\".\r\n\r\nHappy to rephrase. I don't think that sentence is beyond the bounds of comprehensibility. The point is the user doesn't expect that exposing age lets someone unambigiously link everywhere they have shown their age: they would expect that only their age be revealed.\r\n\r\n> \r\n> It is not possible either to understand why this behavior will \"potentially causing them to make decisions they might not otherwise make\".\r\n\r\nBecause the risks are not necessarily the same as what they expect their decisions aren't the ones they would make if they understood them.\r\n\r\n> \r\n> Either remove this sentence or rephrase it.\r\n\r\nDo you have suggestions for rephrasing.\r\n\r\n> \r\n> The text continues with:\r\n> \r\n> > Workarounds such as batch  issuance, as described above, help with keeping Verifiers from\r\n> > linking different presentations, but cannot work for Issuer/Verifier  unlinkability.\r\n> \r\n> This is untrue. If the Verifier deletes the presentations immediately after it has received them, presentations, including one-time-use presentations, cannot be used to link presentations with the Issuer.\r\n\r\nThere's no way for anyone to enforce that on the Verifier. It's also hard to ensure that data is erased even when trying: software stacks are complex.\r\n\r\n> \r\n> Furthermore, if the Issuer is using a suspension / revocation mechanism different from the Status List Token, it does not need to use \"Referenced Tokens\" and will still be able to revoke or suspend all the credentials that have been issued for the benefit of a given Holder. In such a case, the Issuer does not need to \"remember\" SD-JWTs that it has issued. If neither the Issuer, nor the Verifier, keeps a record of respectively issued and received SD-JWTs, Issuer/Verifier unlinkability can be \"twice\" achieved.\r\n\r\nWe can't trust the Issuer doesn't record just because they don't have to. If men were angels, there would be no locksmiths.\r\n\r\n> \r\n> Since a specific mechanism to handle the suspension / revocation of a SD-JWT is outside the scope of this document, it is untrue to say that Issuer/Verifier unlinkability \"cannot work\".\r\n\r\nThat is not what the sentence says. It says the mechanism in the document cannot guarantee it. Which is true: deletion on the part of other parties isn't enforced by anything here.\r\n\r\n> \r\n> Either remove this sentence or rephrase it.\r\n\r\n",
          "createdAt": "2025-01-22T21:23:14Z",
          "updatedAt": "2025-01-22T21:23:14Z"
        },
        {
          "author": "Denisthemalice",
          "authorAssociation": "NONE",
          "body": "The text states:\r\n\r\n> SD-JWT only conceals the value of claims that are not revealed.\r\n> It does not meet security notations for anonymous credentials [CL01].\r\n\r\n[CL01] does not contain the words \"notation\", \"anonymous\"or \"credentials\". Hence, this sentence is not understandable. Either remove this sentence or rephrase it.\r\n\r\nYou responded:\r\n\r\n> Do you have a better reference for the security properties introduced there? This sentence now reads with s/notation/properties/.\r\n\r\nThe same properties can be obtained with SD-JWT when using one-time-use SD-JWTs. So it is not necessary to argue that SD-JWT cannot meet properties that can be obtained using anonymous credentials.\r\n\r\nThere is no need to reference a paper.\r\n\r\nThe text continues with:\r\n\r\n> In particular, colluding Verifiers and Issuers can know when they\r\n> have seen the same credential no matter what fields have been\r\n> disclosed, even when none have been disclosed. This behavior may not\r\n> align with what users naturally anticipate or are guided to expect\r\n> from user interface interactions, potentially causing them to make\r\n> decisions they might not otherwise make.\r\n\r\nI wrote: \r\n\r\n> \r\nIt is not possible to understand which \"behavior may not align with what users naturally anticipate or are guided to expect from user interface interactions\".\r\n\r\nYou wrote: \r\n\r\n> Happy to rephrase. I don't think that sentence is beyond the bounds of comprehensibility. \r\n> The point is the user doesn't expect that exposing age lets someone unambigiously link everywhere they have shown their age: they would expect that only their age be revealed.\r\n\r\nThis argument is incorrect. If one-time-use SD-JWTs are used, then verifier/ verifier unlinkability is de facto supported.\r\nIt is not possible either to understand why this behavior will \"potentially causing them to make decisions they might not otherwise make\".\r\n\r\nYou wrote:\r\n\r\n> Because the risks are not necessarily the same as what they expect their decisions aren't the ones they would make if they understood them.\r\n\r\nBefore an End-User presents a SD-JWT to a Verifier, the Verifier shall indicate which claims it would like to be revealed. The End-User shall either consent or refuse to consent. In addition, the End-User may be willing to only use one-time-use SD-JWTs. If the Holder is not configured in this way, the End-User should abort the transaction. \r\n\r\nYou wrote:\r\n\r\n> Do you have suggestions for rephrasing.\r\n\r\nNo. I only have a suggestion for deleting this sentence.\r\n\r\n\r\nThe text continues with:\r\n\r\n> Workarounds such as batch issuance, as described above, help with keeping Verifiers from\r\n> linking different presentations, but cannot work for Issuer/Verifier unlinkability.\r\n\r\nI wrote:\r\n\r\n> This is untrue. If the Verifier deletes the presentations immediately after it has received them, presentations, including one-time-use presentations, cannot be used to link presentations with the Issuer.\r\n\r\nYou wrote:\r\n\r\n> There's no way for anyone to enforce that on the Verifier. It's also hard to ensure that data is erased even when trying: software stacks are complex.\r\n\r\nThe key wording \"cannot work\" is incorrect. Issuer/Verifier unlinkability *can* be supported in specific contexts. If a Verifier indicates in its practices statements that it deletes the received SD-JWTs once they are processed and if an auditor discovers later on that it does not do it, then it can go out of its business. The same applies for an Issuer.\r\n\r\nI wrote:\r\n\r\n> Furthermore, if the Issuer is using a suspension / revocation mechanism different from the Status List Token, it does not need to use \"Referenced Tokens\" and will still be able to revoke or suspend all the credentials that have been issued for the benefit of a given Holder. In such a case, the Issuer does not need to \"remember\" SD-JWTs that it has issued. If neither the Issuer, nor the Verifier, keeps a record of respectively issued and received SD-JWTs, Issuer/Verifier unlinkability can be \"twice\" achieved.\r\n\r\nYou wrote:\r\n\r\n> We can't trust the Issuer doesn't record just because they don't have to. If men were angels, there would be no locksmiths.\r\n\r\nSee above, the case where an Issuer would lie.\r\n\r\nI wrote:\r\n\r\n> Since a specific mechanism to handle the suspension / revocation of a SD-JWT is outside the scope of this document, it is untrue to say that Issuer/Verifier unlinkability \"cannot work\".\r\n\r\nYou wrote:\r\n\r\n> That is not what the sentence says. It says the mechanism in the document cannot guarantee it. Which is true: deletion on the part of other parties isn't enforced by anything here.\r\n\r\nThe sentence did not say \" cannot guarantee it\", but said \"cannot work\". This is not the same.\r\n\r\n\r\n\r\n",
          "createdAt": "2025-01-23T10:08:36Z",
          "updatedAt": "2025-01-23T10:08:36Z"
        },
        {
          "author": "wbl",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On Thu, Jan 23, 2025, 2:08\u202fAM Denisthemalice ***@***.***>\r\nwrote:\r\n\r\n> The text states:\r\n>\r\n> SD-JWT only conceals the value of claims that are not revealed.\r\n> It does not meet security notations for anonymous credentials [CL01].\r\n>\r\n> [CL01] does not contain the words \"notation\", \"anonymous\"or \"credentials\".\r\n> Hence, this sentence is not understandable. Either remove this sentence or\r\n> rephrase it.\r\n>\r\n> You responded:\r\n>\r\n> Do you have a better reference for the security properties introduced\r\n> there? This sentence now reads with s/notation/properties/.\r\n>\r\n> The same properties can be obtained with SD-JWT when using one-time-use\r\n> SD-JWTs. So it is not necessary to argue that SD-JWT cannot meet properties\r\n> that can be obtained using anonymous credentials.\r\n>\r\n\r\nDennis,\r\n\r\nThis is completely wrong.\r\n\r\nYour entire argument is premised on the idea that we can be assured the\r\nIssuer will forget. Real attackers attack: they don't obey the rules.\r\nThat's why we have cryptography.\r\n\r\nThere is no way to enforce this sort of forgetting in the document, and if\r\nyou say we should use a TEE would need a massive amount of text saying how.\r\nIt would also create massive deployability issues.\r\n\r\nIn the real world enterprise and other architectures have a vast number of\r\nplaces where data can be recorded. Even if an Issue wants to be sure they\r\nforget, it's very hard to enforce.\r\n\r\n> There is no need to reference a paper.\r\n>\r\n> The text continues with:\r\n>\r\n> In particular, colluding Verifiers and Issuers can know when they\r\n> have seen the same credential no matter what fields have been\r\n> disclosed, even when none have been disclosed. This behavior may not\r\n> align with what users naturally anticipate or are guided to expect\r\n> from user interface interactions, potentially causing them to make\r\n> decisions they might not otherwise make.\r\n>\r\n> I wrote:\r\n>\r\n> It is not possible to understand which \"behavior may not align with what\r\n> users naturally anticipate or are guided to expect from user interface\r\n> interactions\".\r\n>\r\n> You wrote:\r\n>\r\n> Happy to rephrase. I don't think that sentence is beyond the bounds of\r\n> comprehensibility.\r\n> The point is the user doesn't expect that exposing age lets someone\r\n> unambigiously link everywhere they have shown their age: they would expect\r\n> that only their age be revealed.\r\n>\r\n> This argument is incorrect. If one-time-use SD-JWTs are used, then\r\n> verifier/ verifier unlinkability is de facto supported.\r\n> It is not possible either to understand why this behavior will\r\n> \"potentially causing them to make decisions they might not otherwise make\".\r\n>\r\n> You wrote:\r\n>\r\n> Because the risks are not necessarily the same as what they expect their\r\n> decisions aren't the ones they would make if they understood them.\r\n>\r\n> Before an End-User presents a SD-JWT to a Verifier, the Verifier shall\r\n> indicate which claims it would like to be revealed. The End-User shall\r\n> either consent or refuse to consent. In addition, the End-User may be\r\n> willing to only use one-time-use SD-JWTs. If the Holder is not configured\r\n> in this way, the End-User should abort the transaction.\r\n>\r\n> You wrote:\r\n>\r\n> Do you have suggestions for rephrasing.\r\n>\r\n> No. I only have a suggestion for deleting this sentence.\r\n>\r\n> The text continues with:\r\n>\r\n> Workarounds such as batch issuance, as described above, help with keeping\r\n> Verifiers from\r\n> linking different presentations, but cannot work for Issuer/Verifier\r\n> unlinkability.\r\n>\r\n> I wrote:\r\n>\r\n> This is untrue. If the Verifier deletes the presentations immediately\r\n> after it has received them, presentations, including one-time-use\r\n> presentations, cannot be used to link presentations with the Issuer.\r\n>\r\n> You wrote:\r\n>\r\n> There's no way for anyone to enforce that on the Verifier. It's also hard\r\n> to ensure that data is erased even when trying: software stacks are complex.\r\n>\r\n> The key wording \"cannot work\" is incorrect. Issuer/Verifier unlinkability\r\n> *can* be supported in specific contexts. If a Verifier indicates in its\r\n> practices statements that it deletes the received SD-JWTs once they are\r\n> processed and if an auditor discovers later on that it does not do it, then\r\n> it can go out of its business. The same applies for an Issuer.\r\n>\r\n> I wrote:\r\n>\r\n> Furthermore, if the Issuer is using a suspension / revocation mechanism\r\n> different from the Status List Token, it does not need to use \"Referenced\r\n> Tokens\" and will still be able to revoke or suspend all the credentials\r\n> that have been issued for the benefit of a given Holder. In such a case,\r\n> the Issuer does not need to \"remember\" SD-JWTs that it has issued. If\r\n> neither the Issuer, nor the Verifier, keeps a record of respectively issued\r\n> and received SD-JWTs, Issuer/Verifier unlinkability can be \"twice\" achieved.\r\n>\r\n> You wrote:\r\n>\r\n> We can't trust the Issuer doesn't record just because they don't have to.\r\n> If men were angels, there would be no locksmiths.\r\n>\r\n> See above, the case where an Issuer would lie.\r\n>\r\n> I wrote:\r\n>\r\n> Since a specific mechanism to handle the suspension / revocation of a\r\n> SD-JWT is outside the scope of this document, it is untrue to say that\r\n> Issuer/Verifier unlinkability \"cannot work\".\r\n>\r\n> You wrote:\r\n>\r\n> That is not what the sentence says. It says the mechanism in the document\r\n> cannot guarantee it. Which is true: deletion on the part of other parties\r\n> isn't enforced by anything here.\r\n>\r\n> The sentence did not say \" cannot guarantee it\", but said \"cannot work\".\r\n> This is not the same.\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/535#issuecomment-2609394088>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AAISLY6EFV63A6FUVL44AKL2MC5TXAVCNFSM6AAAAABU4UM53GVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDMMBZGM4TIMBYHA>\r\n> .\r\n> You are receiving this because you commented.Message ID:\r\n> ***@***.***>\r\n>\r\n",
          "createdAt": "2025-01-23T15:13:47Z",
          "updatedAt": "2025-01-23T15:13:47Z"
        },
        {
          "author": "Denisthemalice",
          "authorAssociation": "NONE",
          "body": "Section 10.2 (Storage of User Data) states: \r\n\r\n> All involved parties SHOULD NOT store SD-JWTs longer than strictly needed, including in log files.\r\n\r\nDepending upon the context of use, this recommendation should or should not be followed since there exist cases where the Issuer-Verifier unlinkability property will prevent fighting against crime or money laundering.\r\n\r\nIn these cases, the Verifier should not memorize the whole SD-JWTs that it receives, but a unique reference specific to the SD-JWT together with an identifier of the Issuer. Some authority might request to a Verifier to reveal the identifier of the Issuer and this unique reference. Then after, the authority might communicate it to the Issuer and request the Issuer to reveal the identity of the End-User corresponding to that unique reference.\r\n\r\nWhile technically, the Issuer-Verifier unlinkability property sounds good from a privacy point  of view, the privacy of the individuals needs to be balanced against the interests of governments or of international organizations, like Interpol, to fight against crime or money laundering.\r\n",
          "createdAt": "2025-01-23T18:49:11Z",
          "updatedAt": "2025-01-23T18:49:11Z"
        },
        {
          "author": "wbl",
          "authorAssociation": "CONTRIBUTOR",
          "body": "And that's not really relevant to my text addition.",
          "createdAt": "2025-01-23T18:51:37Z",
          "updatedAt": "2025-01-23T18:51:37Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM6XbRGK",
          "commit": {
            "abbreviatedOid": "57580ac"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-01-09T17:18:19Z",
          "updatedAt": "2025-01-09T17:21:35Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\nSD-JWT only conceals the value of claims that are not revealed.\r\n```",
              "createdAt": "2025-01-09T17:18:19Z",
              "updatedAt": "2025-01-09T17:21:35Z"
            },
            {
              "originalPosition": 12,
              "body": "```suggestion\r\nwould not otherwise make. Workarounds such as batch issuance as\r\ndescribed above help for keeping\r\nVerifiers from linking different presentations, but cannot work for Issuer/Verifier unlinkability.\r\n```",
              "createdAt": "2025-01-09T17:20:30Z",
              "updatedAt": "2025-01-09T17:21:35Z"
            },
            {
              "originalPosition": 14,
              "body": "```suggestion\r\nThis issue applies to all salted hash-based approaches,\r\nincluding mDL/mDoc [@?ISO.18013-5] and SD-CWT [@?I-D.ietf-spice-sd-cwt].\r\n```",
              "createdAt": "2025-01-09T17:20:52Z",
              "updatedAt": "2025-01-09T17:21:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6XxFBw",
          "commit": {
            "abbreviatedOid": "e14e93c"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-13T10:21:43Z",
          "updatedAt": "2025-01-13T10:21:43Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "In an attempt to consolidate the comments above: \r\n\r\n```suggestion\r\nSD-JWT only conceals the value of claims that are not revealed.\r\nIt does not provide Issuer/Verifier unlinkability without constraints\r\nas schemes using zero-knowledge protocols do (for example, [@?CL01]). In\r\nparticular, entities with access to the SD-JWTs and their presentations can know when they have seen the same\r\ncredential no matter what fields have been disclosed, even none of them.\r\nThis behavior may not accord with what users intuitively expect or are\r\nlead to expect from user interface interactions and lead to them make choices they\r\nwould not otherwise make. Workarounds such as batch issuance as\r\ndescribed above help for keeping\r\nVerifiers from linking different presentations, but cannot work for Issuer/Verifier unlinkability.\r\nThis issue applies to all salted hash-based approaches,\r\nincluding mDL/mDoc [@?ISO.18013-5] and SD-CWT [@?I-D.ietf-spice-sd-cwt].\r\n\r\n```",
              "createdAt": "2025-01-13T10:21:43Z",
              "updatedAt": "2025-01-13T12:50:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6Xykui",
          "commit": {
            "abbreviatedOid": "e14e93c"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-13T13:31:15Z",
          "updatedAt": "2025-01-13T13:31:15Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "```suggestion\r\n  <title>ISO/IEC 18013-5:2021 Personal identification \u2014 ISO-compliant driving license \u2014 Part 5: Mobile driving license (mDL) application</title>\r\n```",
              "createdAt": "2025-01-13T13:31:15Z",
              "updatedAt": "2025-01-13T13:31:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6Xykzb",
          "commit": {
            "abbreviatedOid": "e14e93c"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-13T13:31:23Z",
          "updatedAt": "2025-01-13T13:31:23Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "is `[@?CL01]` just gonna work? I need to reevaluate some of my belief systems, if it does. ",
              "createdAt": "2025-01-13T13:31:23Z",
              "updatedAt": "2025-01-13T13:31:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6Xymrg",
          "commit": {
            "abbreviatedOid": "e14e93c"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-13T13:34:45Z",
          "updatedAt": "2025-01-13T13:34:45Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "do not schemes using zero-knowledge protocols also have constraints with respect to Issuer/Verifier unlinkability? Just somewhat less constraining constraints. ",
              "createdAt": "2025-01-13T13:34:45Z",
              "updatedAt": "2025-01-13T13:34:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6X0Jhs",
          "commit": {
            "abbreviatedOid": "e14e93c"
          },
          "author": "wbl",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-13T15:36:42Z",
          "updatedAt": "2025-01-13T15:36:42Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Brian, I don't quite understand your question. Yes, if every credential has a unique serial number that's always revealed, you have a problem. But you don't have more problems than that: they simulate ideal functionality.\r\n\r\nI do think taking out \"It does not meet standard security notations for anonymous credentials.\" and saying some schemes meet tighter notions is a bad idea. The whole point is that every application we've been discussing for the past quarter century won't automatically work with this scheme: that we need to signpost we didn't do the right thing here. I don't think Daniel's suggestion does that as strongly. I do like changing to entity in the rest of the text.",
              "createdAt": "2025-01-13T15:36:42Z",
              "updatedAt": "2025-01-13T15:36:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6X-GrV",
          "commit": {
            "abbreviatedOid": "e14e93c"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-14T13:00:57Z",
          "updatedAt": "2025-01-14T13:00:57Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "> Brian, I don't quite understand your question.\r\n\r\n@danielfett's suggested text here changed \"does not meet standard security notations for anonymous credentials\" to \"does not provide Issuer/Verifier unlinkability without constraints as schemes using zero-knowledge protocols\". And my question was to question whether \"without constraints\" was too strong a statement because even ZK schemes have constraints. \r\n\r\n> Yes, if every credential has a unique serial number that's always revealed, you have a problem.\r\n\r\nOr email, or name + dob, or SSN, or TIN, NINo, TFN, NIN, passport #, phone #, etc.. \r\n",
              "createdAt": "2025-01-14T13:00:57Z",
              "updatedAt": "2025-01-14T13:00:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6YAL_T",
          "commit": {
            "abbreviatedOid": "0b23e09"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-14T15:53:37Z",
          "updatedAt": "2025-01-14T15:53:37Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nparticular, colluding Verifiers and Issuers can know when they have seen the same\r\n```",
              "createdAt": "2025-01-14T15:53:37Z",
              "updatedAt": "2025-01-14T15:54:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6YAMRT",
          "commit": {
            "abbreviatedOid": "0b23e09"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-14T15:54:04Z",
          "updatedAt": "2025-01-14T15:54:04Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\ncredential no matter what fields have been disclosed, even when none.\r\n```",
              "createdAt": "2025-01-14T15:54:04Z",
              "updatedAt": "2025-01-14T15:57:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6YANip",
          "commit": {
            "abbreviatedOid": "0b23e09"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-14T15:55:50Z",
          "updatedAt": "2025-01-14T15:55:50Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nThis behavior may not align with what users naturally anticipate or are guided to\r\nexpect from user interface interactions, potentially causing them to make decisions\r\nthey might not otherwise choose. Workarounds such as batch issuance as\r\n```",
              "createdAt": "2025-01-14T15:55:50Z",
              "updatedAt": "2025-01-14T15:55:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6YAOCD",
          "commit": {
            "abbreviatedOid": "0b23e09"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-14T15:56:34Z",
          "updatedAt": "2025-01-14T15:56:35Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "```suggestion\r\ndescribed above help with keeping\r\nVerifiers from linking different presentations, but cannot work for Issuer/Verifier unlinkability.\r\n```",
              "createdAt": "2025-01-14T15:56:34Z",
              "updatedAt": "2025-01-14T15:56:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6YAPqO",
          "commit": {
            "abbreviatedOid": "0b23e09"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-14T15:58:06Z",
          "updatedAt": "2025-01-14T15:58:06Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Can we have a reference to what \"anonymous credentials\"? do we really expect all of the readers to know what it is? this is the first time that they are mentioned in the text I believe?",
              "createdAt": "2025-01-14T15:58:06Z",
              "updatedAt": "2025-01-14T15:58:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6YAQPv",
          "commit": {
            "abbreviatedOid": "0b23e09"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-14T15:59:01Z",
          "updatedAt": "2025-01-14T15:59:01Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "please combine this suggestion with the suggestions I have made above :)",
              "createdAt": "2025-01-14T15:59:01Z",
              "updatedAt": "2025-01-14T15:59:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6YCjzG",
          "commit": {
            "abbreviatedOid": "e14e93c"
          },
          "author": "wbl",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-14T19:14:17Z",
          "updatedAt": "2025-01-14T19:14:17Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "@bc-pi Exactly. Saying without further conditions doesn't quite work, saying what the exact notion is is technical, pointing to a reference is the happy medium and lets us get the important part across.",
              "createdAt": "2025-01-14T19:14:17Z",
              "updatedAt": "2025-01-14T19:14:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6YCkBW",
          "commit": {
            "abbreviatedOid": "0b23e09"
          },
          "author": "wbl",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-14T19:14:48Z",
          "updatedAt": "2025-01-14T19:14:48Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I think the idea was to add a citation to CL01, but that might not actually have the phrase in it easily findable...",
              "createdAt": "2025-01-14T19:14:48Z",
              "updatedAt": "2025-01-14T19:14:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6YY5ZA",
          "commit": {
            "abbreviatedOid": "0b23e09"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-16T16:28:21Z",
          "updatedAt": "2025-01-16T16:28:21Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "```suggestion\r\n</front>\r\n<reference anchor=\"CL01\" target=\"https://eprint.iacr.org/2001/019.pdf\">\r\n  <front>\r\n    <title>An Efficient System for Non-Transferable Anonymous Credentials with Optional Anonymity Revocation</title>\r\n    <author initials=\"J.\" surname=\"Camenisch\" fullname=\"Jan Camenisch\">\r\n      <organization>IBM Research</organization>\r\n    </author>\r\n    <author initials=\"A.\" surname=\"Lysyanskaya\" fullname=\"Anna Lysyanskaya\">\r\n      <organization>MIT</organization>\r\n    </author>\r\n    <date year=\"2001\" />\r\n  </front>\r\n  <seriesInfo name=\"Proceedings of the International Conference on the Theory and Application of Cryptographic Techniques (EUROCRYPT)\" value=\"2001\" />\r\n</reference>\r\n```",
              "createdAt": "2025-01-16T16:28:21Z",
              "updatedAt": "2025-01-16T16:28:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6YZHwd",
          "commit": {
            "abbreviatedOid": "0b23e09"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-16T16:52:25Z",
          "updatedAt": "2025-01-16T16:52:25Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I added the citation below.",
              "createdAt": "2025-01-16T16:52:25Z",
              "updatedAt": "2025-01-16T16:52:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6YZIQt",
          "commit": {
            "abbreviatedOid": "0b23e09"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-16T16:53:21Z",
          "updatedAt": "2025-01-16T16:53:21Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\ncredential no matter what fields have been disclosed, even when none are disclosed.\r\n```",
              "createdAt": "2025-01-16T16:53:21Z",
              "updatedAt": "2025-01-16T16:53:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6YZIlv",
          "commit": {
            "abbreviatedOid": "0b23e09"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-16T16:53:54Z",
          "updatedAt": "2025-01-16T16:53:55Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nThis behavior may not align with what users naturally anticipate or are guided to\r\nexpect from user interface interactions, potentially causing them to make decisions\r\nthey might not otherwise make. Workarounds such as batch issuance as\r\n```",
              "createdAt": "2025-01-16T16:53:54Z",
              "updatedAt": "2025-01-16T16:53:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6YZo0o",
          "commit": {
            "abbreviatedOid": "0b23e09"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-16T17:55:52Z",
          "updatedAt": "2025-01-16T17:55:52Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nIt does not meet security notations for anonymous credentials [@?CL01]. In\r\n```",
              "createdAt": "2025-01-16T17:55:52Z",
              "updatedAt": "2025-01-16T17:56:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6YZqfi",
          "commit": {
            "abbreviatedOid": "4be1306"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-16T17:59:24Z",
          "updatedAt": "2025-01-16T17:59:25Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "```suggestion\r\nSD-JWT only conceals the value of claims that are not revealed.\r\nIt does not meet security notations for anonymous credentials [@?CL01]. In\r\nparticular, colluding Verifiers and Issuers can know when they have seen the same\r\ncredential no matter what fields have been disclosed, even when none have been disclosed.\r\nThis behavior may not align with what users naturally anticipate or are guided to\r\nexpect from user interface interactions, potentially causing them to make decisions\r\nthey might not otherwise make. Workarounds such as batch issuance, as\r\ndescribed above, help with keeping\r\nVerifiers from linking different presentations, but cannot work for Issuer/Verifier unlinkability.\r\nThis issue applies to all salted hash-based approaches,\r\nincluding mDL/mDoc [@?ISO.18013-5] and SD-CWT [@?I-D.ietf-spice-sd-cwt].\r\n```",
              "createdAt": "2025-01-16T17:59:24Z",
              "updatedAt": "2025-01-16T17:59:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6YZqy9",
          "commit": {
            "abbreviatedOid": "21c9caf"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-01-16T18:00:02Z",
          "updatedAt": "2025-01-16T18:00:02Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6YZrU6",
          "commit": {
            "abbreviatedOid": "21c9caf"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-16T18:01:12Z",
          "updatedAt": "2025-01-16T18:01:12Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "```suggestion\r\n<reference anchor=\"ISO.18013-5\" target=\"https://www.iso.org/standard/69084.html\">\r\n<front>\r\n  <title>ISO/IEC 18013-5:2021 Personal identification \u2014 ISO-compliant driving license \u2014 Part 5: Mobile driving license (mDL) application</title>\r\n  <author>\r\n    <organization> ISO/IEC JTC 1/SC 17 Cards and security devices for personal identification</organization>\r\n  </author>\r\n  <date year=\"2021\"/>\r\n</front>\r\n</reference>\r\n\r\n<reference anchor=\"CL01\" target=\"https://eprint.iacr.org/2001/019.pdf\">\r\n  <front>\r\n    <title>An Efficient System for Non-Transferable Anonymous Credentials with Optional Anonymity Revocation</title>\r\n    <author initials=\"J.\" surname=\"Camenisch\" fullname=\"Jan Camenisch\">\r\n      <organization>IBM Research</organization>\r\n    </author>\r\n    <author initials=\"A.\" surname=\"Lysyanskaya\" fullname=\"Anna Lysyanskaya\">\r\n      <organization>MIT</organization>\r\n    </author>\r\n    <date year=\"2001\" />\r\n  </front>\r\n  <seriesInfo name=\"Proceedings of the International Conference on the Theory and Application of Cryptographic Techniques (EUROCRYPT)\" value=\"2001\" />\r\n</reference>\r\n```",
              "createdAt": "2025-01-16T18:01:12Z",
              "updatedAt": "2025-01-16T18:01:12Z"
            }
          ]
        }
      ]
    },
    {
      "number": 540,
      "id": "PR_kwDOHTmVzM6Hg3ou",
      "title": "Changes to linkability and data storage sections",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/540",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Inspired by Denis' comments [here](https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/535#issuecomment-2581041028), addressing most of them and changing some related text as well. ",
      "createdAt": "2025-01-13T10:57:45Z",
      "updatedAt": "2025-01-16T18:02:36Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "01084e8e994c07b66290e307483df858d3c216ce",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/denis-editorial",
      "headRefOid": "53db935e718bdcb656ec39e55ec2a0343667077a",
      "closedAt": "2025-01-16T18:02:36Z",
      "mergedAt": "2025-01-16T18:02:36Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "563b57f30761c6498200f8bcb22d743d161e71d0"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM6XybFw",
          "commit": {
            "abbreviatedOid": "fad6096"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-13T13:13:19Z",
          "updatedAt": "2025-01-13T13:13:20Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "Oxford?\r\n```suggestion\r\nIssuer/Verifier unlinkability with a colluding, compromised, or coerced Verifier cannot be\r\n```",
              "createdAt": "2025-01-13T13:13:20Z",
              "updatedAt": "2025-01-13T13:13:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6XybiF",
          "commit": {
            "abbreviatedOid": "fad6096"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "colluding, compromised, and coerced to approve ",
          "createdAt": "2025-01-13T13:14:10Z",
          "updatedAt": "2025-01-13T13:14:10Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6YCiPy",
          "commit": {
            "abbreviatedOid": "3a15b29"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-14T19:10:44Z",
          "updatedAt": "2025-01-14T19:10:44Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "```suggestion\r\n* Verifier/Verifier Unlinkability: The presentations made to two different\r\n  Verifiers should not reveal that the same credential was presented (e.g., if the two\r\n  Verifiers collude, or if they are forced by a third party to reveal the presentations\r\n  made to them data leaks from one Verifier to the other).\r\n```\r\nmight improve readability a little bit",
              "createdAt": "2025-01-14T19:10:44Z",
              "updatedAt": "2025-01-14T19:11:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6YCkw0",
          "commit": {
            "abbreviatedOid": "3a15b29"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-14T19:16:22Z",
          "updatedAt": "2025-01-14T19:16:23Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "```suggestion\r\n  should not be able to know that a user presented this credential if\r\n  the Verifier is not accidentally sharing presentation data with the Issuer.\r\n* Issuer/Verifier Unlinkability (Colluding/Compromised/Coerced Verifier): An Issuer of a\r\n  credential should not be able to tell that a user presented this credential to\r\n  a certain Verifier, even if the Verifier deliberately shares\r\n  presentation data with the Issuer or is forced to do so.\r\n```\r\nColluding/Compromised/Coerced Verifier would only share deliberately and not accidentally, right? likewise, honest verifier would no share deliberately or forced to do so? current text undemines the differentiation btw honest and bad verifier that is being introduced.",
              "createdAt": "2025-01-14T19:16:22Z",
              "updatedAt": "2025-01-14T19:17:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6YCna2",
          "commit": {
            "abbreviatedOid": "3a15b29"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "looks ok overall, but would like to see my suggestion accepted",
          "createdAt": "2025-01-14T19:19:40Z",
          "updatedAt": "2025-01-14T19:19:40Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6YYxkg",
          "commit": {
            "abbreviatedOid": "3a15b29"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-16T16:15:28Z",
          "updatedAt": "2025-01-16T16:15:28Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "```suggestion\r\n* Verifier/Verifier Unlinkability: The presentations made to two different\r\n  Verifiers should not reveal that the same credential was presented (e.g., if the two\r\n  Verifiers collude, or if they are forced by a third party to reveal the presentations\r\n  made to them, or data leaks from one Verifier to the other).\r\n```",
              "createdAt": "2025-01-16T16:15:28Z",
              "updatedAt": "2025-01-16T16:15:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6YYy_t",
          "commit": {
            "abbreviatedOid": "3a15b29"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-16T16:17:52Z",
          "updatedAt": "2025-01-16T16:17:52Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "Maybe \"honest\" should be changed to a different name implying \"non-leaking\"? We could also add \"careless\" to the Issuer that does leak:\r\n```suggestion\r\n  should not be able to know that a user presented this credential if\r\n  the Verifier is not sharing presentation data with the Issuer\r\n  accidentally, deliberately, or because it is forced to do so.\r\n* Issuer/Verifier Unlinkability (Careless/Colluding/Compromised/Coerced Verifier): An Issuer of a\r\n  credential should not be able to tell that a user presented this credential to\r\n  a certain Verifier, even if the Verifier accidentally or deliberately shares\r\n  presentation data with the Issuer or is forced to do so.\r\n```",
              "createdAt": "2025-01-16T16:17:52Z",
              "updatedAt": "2025-01-16T16:17:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6YYzki",
          "commit": {
            "abbreviatedOid": "3a15b29"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-16T16:18:51Z",
          "updatedAt": "2025-01-16T16:18:51Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "```suggestion\r\n* Issuer/Verifier Unlinkability (without leak from Verifier): An Issuer of a credential\r\n```",
              "createdAt": "2025-01-16T16:18:51Z",
              "updatedAt": "2025-01-16T16:18:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6YYz45",
          "commit": {
            "abbreviatedOid": "3a15b29"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-16T16:19:19Z",
          "updatedAt": "2025-01-16T16:19:19Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "```suggestion\r\nIssuer/Verifier unlinkability with a careless, colluding, compromised, or coerced Verifier cannot be\r\n```",
              "createdAt": "2025-01-16T16:19:19Z",
              "updatedAt": "2025-01-16T16:19:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6YZmVB",
          "commit": {
            "abbreviatedOid": "3a15b29"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-16T17:50:36Z",
          "updatedAt": "2025-01-16T17:50:37Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "```suggestion\r\n  should not be able to know that a user presented this credential unless\r\n  the Verifier is sharing presentation data with the Issuer\r\n  accidentally, deliberately, or because it is forced to do so.\r\n* Issuer/Verifier Unlinkability (Careless/Colluding/Compromised/Coerced Verifier): An Issuer of a\r\n  credential should under no circumstances be able to tell that a user presented this credential to\r\n  a certain Verifier. In particular this includes cases when the Verifier accidentally or deliberately shares\r\n  presentation data with the Issuer or is forced to do so.\r\n```",
              "createdAt": "2025-01-16T17:50:37Z",
              "updatedAt": "2025-01-16T17:51:13Z"
            }
          ]
        }
      ]
    },
    {
      "number": 541,
      "id": "PR_kwDOHTmVzM6HhBJH",
      "title": "Try to address Rohan's comments",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/541",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Fix Issue #530 ",
      "createdAt": "2025-01-13T11:18:12Z",
      "updatedAt": "2025-01-16T17:42:57Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "01084e8e994c07b66290e307483df858d3c216ce",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/fix-530",
      "headRefOid": "f47b3842ed39099a2ef4bfea75d49ac9238e1628",
      "closedAt": "2025-01-16T17:42:56Z",
      "mergedAt": "2025-01-16T17:42:56Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "ca25d0b1117232b631655695c17a2e752123c70b"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Two approvals. Open for a little while. Good to go. ",
          "createdAt": "2025-01-16T17:42:39Z",
          "updatedAt": "2025-01-16T17:42:39Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM6Xxqet",
          "commit": {
            "abbreviatedOid": "7ef4f51"
          },
          "author": "paulbastian",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-13T11:37:43Z",
          "updatedAt": "2025-01-13T11:38:12Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "If this means the holder receives it during issuance, then I think presentation is the wrong wording here",
              "createdAt": "2025-01-13T11:37:43Z",
              "updatedAt": "2025-01-13T11:38:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6XyOCt",
          "commit": {
            "abbreviatedOid": "7ef4f51"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-13T12:48:00Z",
          "updatedAt": "2025-01-13T12:48:00Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "Correct, that was copy paste from below. \r\n```suggestion\r\n 1. Process the SD-JWT as defined in (#sd_jwt_verification) to validate the SD-JWT and extract the payload.\r\n```",
              "createdAt": "2025-01-13T12:48:00Z",
              "updatedAt": "2025-01-13T12:48:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6XyPhI",
          "commit": {
            "abbreviatedOid": "7ef4f51"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-13T12:51:03Z",
          "updatedAt": "2025-01-13T12:51:03Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "I agree with @paulbastian --- for better or worse the term \"presentation\" has come to have some specific connotations in the world of digital verifiable credentials that don't align with the holder receiving the thing.  ",
              "createdAt": "2025-01-13T12:51:03Z",
              "updatedAt": "2025-01-13T12:51:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6XyPub",
          "commit": {
            "abbreviatedOid": "7ef4f51"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-13T12:51:28Z",
          "updatedAt": "2025-01-13T12:51:28Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "```suggestion\r\n 1. Process the SD-JWT as defined in (#sd_jwt_verification) to validate it and extract the payload.\r\n```",
              "createdAt": "2025-01-13T12:51:28Z",
              "updatedAt": "2025-01-13T12:51:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6XyrFM",
          "commit": {
            "abbreviatedOid": "7ef4f51"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-13T13:42:21Z",
          "updatedAt": "2025-01-13T13:42:21Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "Either suggestion above would be fine but using \"SD-JWT\" twice in the one sentence felt a little too redondant. \r\n\r\n",
              "createdAt": "2025-01-13T13:42:21Z",
              "updatedAt": "2025-01-13T13:42:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6XzBOQ",
          "commit": {
            "abbreviatedOid": "f47b384"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-01-13T14:12:06Z",
          "updatedAt": "2025-01-13T14:12:06Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6YCo8R",
          "commit": {
            "abbreviatedOid": "f47b384"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-01-14T19:22:40Z",
          "updatedAt": "2025-01-14T19:22:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 542,
      "id": "PR_kwDOHTmVzM6IEjGA",
      "title": "-16 ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/542",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "https://mailarchive.ietf.org/arch/msg/oauth/owX_r)WedN-oVLbGLLGDMNks2YrI/",
      "createdAt": "2025-01-16T22:27:48Z",
      "updatedAt": "2025-01-17T12:55:20Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "105ba168249853073d495bbe10f181a9bdee990e",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "sweet-sixteen",
      "headRefOid": "824675c555fdb6af4996c44ed178bdb30ddd6d4b",
      "closedAt": "2025-01-17T12:55:20Z",
      "mergedAt": "2025-01-17T12:55:19Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "8facc53223d121d45116d355d507c8c14e9991be"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM6Ye3yc",
          "commit": {
            "abbreviatedOid": "824675c"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-01-17T08:20:13Z",
          "updatedAt": "2025-01-17T08:20:13Z",
          "comments": []
        }
      ]
    },
    {
      "number": 543,
      "id": "PR_kwDOHTmVzM6IFa7E",
      "title": "editorial cleanup",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/543",
      "state": "MERGED",
      "author": "wbl",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This seems to have gotten dropped in some editorial passes",
      "createdAt": "2025-01-17T00:57:10Z",
      "updatedAt": "2025-01-22T17:45:04Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "8facc53223d121d45116d355d507c8c14e9991be",
      "headRepository": "wbl/oauth-selective-disclosure-jwt",
      "headRefName": "patch-2",
      "headRefOid": "e1bdc321e22867dde61d502ba378bd6d5ba1043e",
      "closedAt": "2025-01-22T17:45:03Z",
      "mergedAt": "2025-01-22T17:45:03Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "b2e0da32dca0b7d4cf840ea3bdd21088ca254b42"
      },
      "comments": [
        {
          "author": "wbl",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The current sentence reads \"It does not meet security notations for anonymous credentials [@?CL01].\"  Probably a typo introduced by me, that should read notions. I'll assume we fix that. A reader is left wondering why the security notions it does not meet are relevant. There needs to be some indication of why these properties matter, and importantly that it cannot be dropped in where other schemes could be used.\r\n\r\n(Maybe properties is clearer overall: I think we should change to that on reading this again)",
          "createdAt": "2025-01-17T18:21:04Z",
          "updatedAt": "2025-01-17T18:21:04Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> The current sentence reads \"It does not meet security notations for anonymous credentials [@?CL01].\" Probably a typo introduced by me, that should read notions. I'll assume we fix that. A reader is left wondering why the security notions it does not meet are relevant. There needs to be some indication of why these properties matter, and importantly that it cannot be dropped in where other schemes could be used.\r\n> \r\n> (Maybe properties is clearer overall: I think we should change to that on reading this again)\r\n\r\nsome possibilities suggested on the text ",
          "createdAt": "2025-01-17T18:30:25Z",
          "updatedAt": "2025-01-17T18:30:25Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM6YkZnT",
          "commit": {
            "abbreviatedOid": "081889a"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Upon consultation and review yesterday with the editors (@Sakurann, @danielfett and myself) agreed that we preferred the text omitting \"the standard\". \r\n",
          "createdAt": "2025-01-17T18:15:15Z",
          "updatedAt": "2025-01-17T18:15:15Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6YkhKw",
          "commit": {
            "abbreviatedOid": "081889a"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-17T18:28:16Z",
          "updatedAt": "2025-01-17T18:28:17Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nIt does not meet the security notions for anonymous credentials [@?CL01]. In\r\n```",
              "createdAt": "2025-01-17T18:28:16Z",
              "updatedAt": "2025-01-17T18:28:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6Ykhux",
          "commit": {
            "abbreviatedOid": "081889a"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-17T18:28:49Z",
          "updatedAt": "2025-01-17T18:28:49Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "or\r\n```suggestion\r\nIt does not meet the security properties for anonymous credentials [@?CL01]. In\r\n```",
              "createdAt": "2025-01-17T18:28:49Z",
              "updatedAt": "2025-01-17T18:28:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6Ykjod",
          "commit": {
            "abbreviatedOid": "e1bdc32"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-01-17T18:30:49Z",
          "updatedAt": "2025-01-17T18:30:58Z",
          "comments": []
        }
      ]
    },
    {
      "number": 544,
      "id": "PR_kwDOHTmVzM6IqUAS",
      "title": "Editorial updates to text introduced in -15 to doc history",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/544",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": " for #543 to be in doc history kinda",
      "createdAt": "2025-01-22T17:50:10Z",
      "updatedAt": "2025-01-22T18:07:54Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "b2e0da32dca0b7d4cf840ea3bdd21088ca254b42",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "for-posterity-or-whatever",
      "headRefOid": "99b2bb648946a8c0f09c28d4a461458ac87ca11f",
      "closedAt": "2025-01-22T18:07:54Z",
      "mergedAt": "2025-01-22T18:07:54Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "15c51a56a0a6f80d16bc7238d666ce8db29f7ec1"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 552,
      "id": "PR_kwDOHTmVzM6K9Ce_",
      "title": "shepherd review updates",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/552",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This PR comprises draft updates aimed at addressing feedback from Hannes Tschofenig in the shepherd review https://mailarchive.ietf.org/arch/msg/oauth/rRpI6rpHDXPXHm-dzyLsBQ-LiEQ/\r\n\r\nPreview editors' draft here: https://drafts.oauth.net/oauth-selective-disclosure-jwt/trying-real-hard-to-be-the-shepherd/draft-ietf-oauth-selective-disclosure-jwt.html\r\n\r\nhttps://mailarchive.ietf.org/arch/msg/oauth/xrzfN70NjAWxMnHWOIlWkJcK9yU/ is the on-list reply to the review, which referes back to this PR #552\r\n\r\n",
      "createdAt": "2025-02-12T13:11:55Z",
      "updatedAt": "2025-02-27T13:56:54Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "2a1e13a9de80e9283a17aade124e3b8576140855",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "trying-real-hard-to-be-the-shepherd",
      "headRefOid": "3eb495f882337a91624ef42470d1c5b88ba8fcec",
      "closedAt": "2025-02-27T13:56:53Z",
      "mergedAt": "2025-02-27T13:56:53Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "f4df942db2f60367a1a1b6779271d7aff592b72a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM6b6gUq",
          "commit": {
            "abbreviatedOid": "b7f34b6"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-13T17:43:11Z",
          "updatedAt": "2025-02-13T17:43:12Z",
          "comments": [
            {
              "originalPosition": 77,
              "body": "```suggestion\r\n## Distribution and Rotation of Issuer Signature Verification Key  {#issuer_signature_key_distribution}\r\n```",
              "createdAt": "2025-02-13T17:43:11Z",
              "updatedAt": "2025-02-13T17:43:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6b6ghA",
          "commit": {
            "abbreviatedOid": "b7f34b6"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-13T17:43:33Z",
          "updatedAt": "2025-02-13T17:43:33Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6b6jqj",
          "commit": {
            "abbreviatedOid": "b7f34b6"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2025-02-13T17:49:10Z",
          "updatedAt": "2025-02-13T17:49:10Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6d0yp6",
          "commit": {
            "abbreviatedOid": "3eb495f"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-27T13:56:06Z",
          "updatedAt": "2025-02-27T13:56:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 553,
      "id": "PR_kwDOHTmVzM6LyBS5",
      "title": "some updates resulting from late WG review ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/553",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Selective incorporation of changes based on feedback received nearly four months after the end of the second working group last call (thread at https://mailarchive.ietf.org/arch/msg/oauth/o9G6ibRuibzHQeoKHG7hLpU-CUM/)",
      "createdAt": "2025-02-19T17:08:59Z",
      "updatedAt": "2025-02-27T14:19:04Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "f4df942db2f60367a1a1b6779271d7aff592b72a",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "things-from-late-review-by-rohan",
      "headRefOid": "f5311bca7382d1b8505a542448abe12b80077139",
      "closedAt": "2025-02-27T14:19:03Z",
      "mergedAt": "2025-02-27T14:19:03Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "f7d5cf16d21f5d7c017293ec5714812db885b54f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM6cnnnD",
          "commit": {
            "abbreviatedOid": "8760e44"
          },
          "author": "rohanmahy",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-19T18:17:25Z",
          "updatedAt": "2025-02-19T18:17:26Z",
          "comments": [
            {
              "originalPosition": 65,
              "body": "```suggestion\r\n> Note: The order was decided based on readability considerations: salts have a\r\n```",
              "createdAt": "2025-02-19T18:17:25Z",
              "updatedAt": "2025-02-19T18:17:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6d0wLq",
          "commit": {
            "abbreviatedOid": "7e81a47"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-27T13:52:48Z",
          "updatedAt": "2025-02-27T13:52:49Z",
          "comments": [
            {
              "originalPosition": 175,
              "body": "Is a 'with' missing here?",
              "createdAt": "2025-02-27T13:52:48Z",
              "updatedAt": "2025-02-27T13:52:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6d0xTj",
          "commit": {
            "abbreviatedOid": "7e81a47"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-27T13:54:10Z",
          "updatedAt": "2025-02-27T13:54:11Z",
          "comments": [
            {
              "originalPosition": 214,
              "body": "```suggestion\r\n   * Changes based on feedback received after the end of the second working group last call\r\n```",
              "createdAt": "2025-02-27T13:54:10Z",
              "updatedAt": "2025-02-27T13:54:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6d01_U",
          "commit": {
            "abbreviatedOid": "7e81a47"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-27T14:00:37Z",
          "updatedAt": "2025-02-27T14:00:37Z",
          "comments": [
            {
              "originalPosition": 105,
              "body": "```suggestion\r\nin the JSON representation and no canonicalization needs to be performed before base64url-encoding because the digest is calculated over the base64url-encoded value itself.\r\n```",
              "createdAt": "2025-02-27T14:00:37Z",
              "updatedAt": "2025-02-27T14:00:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6d02qH",
          "commit": {
            "abbreviatedOid": "7e81a47"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-27T14:01:33Z",
          "updatedAt": "2025-02-27T14:01:33Z",
          "comments": [
            {
              "originalPosition": 113,
              "body": "```suggestion\r\nHowever, the digest is calculated over the respective base64url-encoded value itself, which effectively signs the variation chosen by the Issuer and makes it immutable in the context of a particular SD-JWT.\r\n```",
              "createdAt": "2025-02-27T14:01:33Z",
              "updatedAt": "2025-02-27T14:01:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6d03JC",
          "commit": {
            "abbreviatedOid": "7e81a47"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-27T14:02:16Z",
          "updatedAt": "2025-02-27T14:02:16Z",
          "comments": [
            {
              "originalPosition": 175,
              "body": "```suggestion\r\nThe Issuer provides the Holder with an SD-JWT, not an SD-JWT+KB.  If the Holder\r\n```",
              "createdAt": "2025-02-27T14:02:16Z",
              "updatedAt": "2025-02-27T14:02:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6d03mV",
          "commit": {
            "abbreviatedOid": "7e81a47"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-27T14:02:57Z",
          "updatedAt": "2025-02-27T14:02:57Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM6d05x8",
          "commit": {
            "abbreviatedOid": "7e81a47"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-27T14:05:55Z",
          "updatedAt": "2025-02-27T14:05:55Z",
          "comments": [
            {
              "originalPosition": 113,
              "body": "'the' seems fine here.",
              "createdAt": "2025-02-27T14:05:55Z",
              "updatedAt": "2025-02-27T14:05:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6d0-cc",
          "commit": {
            "abbreviatedOid": "7e81a47"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-27T14:12:26Z",
          "updatedAt": "2025-02-27T14:12:26Z",
          "comments": [
            {
              "originalPosition": 105,
              "body": "thank you ",
              "createdAt": "2025-02-27T14:12:26Z",
              "updatedAt": "2025-02-27T14:12:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6d0_QT",
          "commit": {
            "abbreviatedOid": "c427cfa"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-27T14:13:39Z",
          "updatedAt": "2025-02-27T14:13:39Z",
          "comments": [
            {
              "originalPosition": 175,
              "body": "sure",
              "createdAt": "2025-02-27T14:13:39Z",
              "updatedAt": "2025-02-27T14:13:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6d0__Z",
          "commit": {
            "abbreviatedOid": "6de2855"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-27T14:14:43Z",
          "updatedAt": "2025-02-27T14:14:43Z",
          "comments": [
            {
              "originalPosition": 214,
              "body": "okay ",
              "createdAt": "2025-02-27T14:14:43Z",
              "updatedAt": "2025-02-27T14:14:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM6d1BcP",
          "commit": {
            "abbreviatedOid": "3ff3701"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-27T14:16:33Z",
          "updatedAt": "2025-02-27T14:16:33Z",
          "comments": [
            {
              "originalPosition": 113,
              "body": "I think the 'the' seems fine too   ",
              "createdAt": "2025-02-27T14:16:33Z",
              "updatedAt": "2025-02-27T14:16:33Z"
            }
          ]
        }
      ]
    },
    {
      "number": 554,
      "id": "PR_kwDOHTmVzM6MFyh6",
      "title": "add a swift lib to Implementations list",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/554",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "add https://github.com/openwallet-foundation-labs/multiformat-vc-ios to Implementations list",
      "createdAt": "2025-02-21T19:00:42Z",
      "updatedAt": "2025-02-25T22:52:18Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "15c51a56a0a6f80d16bc7238d666ce8db29f7ec1",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "travis-kelce-swift",
      "headRefOid": "ff29eaa43616b85ca83a5e588a9b46aae919477a",
      "closedAt": "2025-02-25T22:52:18Z",
      "mergedAt": "2025-02-25T22:52:18Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "2a1e13a9de80e9283a17aade124e3b8576140855"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM6dgmsX",
          "commit": {
            "abbreviatedOid": "ff29eaa"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-25T22:03:15Z",
          "updatedAt": "2025-02-25T22:03:15Z",
          "comments": []
        }
      ]
    },
    {
      "number": 555,
      "id": "PR_kwDOHTmVzM6M7ZN6",
      "title": "add a seventeen to the history",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/555",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-02-28T11:47:20Z",
      "updatedAt": "2025-02-28T16:41:45Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "f7d5cf16d21f5d7c017293ec5714812db885b54f",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "dash-seventeen",
      "headRefOid": "e897726771346f3437a50285fcd1bb33d106b37f",
      "closedAt": "2025-02-28T16:41:45Z",
      "mergedAt": "2025-02-28T16:41:45Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "04b39cc34dc112d28289559ed8dc5819d58212cc"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Editorial. One approval. Open for nearly 4 hours. Merging. ",
          "createdAt": "2025-02-28T16:41:31Z",
          "updatedAt": "2025-02-28T16:41:31Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM6eAsUQ",
          "commit": {
            "abbreviatedOid": "e897726"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-28T14:53:53Z",
          "updatedAt": "2025-02-28T14:53:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 556,
      "id": "PR_kwDOHTmVzM6NBid0",
      "title": "MT in regular acks",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/556",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/450 to the regular list ",
      "createdAt": "2025-03-01T08:32:10Z",
      "updatedAt": "2025-03-01T08:34:45Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "04b39cc34dc112d28289559ed8dc5819d58212cc",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "acks-4-17",
      "headRefOid": "0b89e0d4a47ccf632a4d27632555c7090bad4007",
      "closedAt": "2025-03-01T08:34:45Z",
      "mergedAt": "2025-03-01T08:34:44Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "6037da31a95d6a3c8a4821337ed43477b1ac8d68"
      },
      "comments": [],
      "reviews": []
    }
  ]
}